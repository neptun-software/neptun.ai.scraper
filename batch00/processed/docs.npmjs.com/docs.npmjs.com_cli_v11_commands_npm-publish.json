[
  {
    "index": 0,
    "tags": [
      "npm publish command"
    ],
    "content": [
      "# npm-publish",
      "Publish a package",
      "Select CLI Version:",
      "Version 11.0.0 (Latest)",
      "See DetailsTable of contents"
    ],
    "error": false
  },
  {
    "index": 1,
    "tags": [
      "synopsis"
    ],
    "content": [
      "## [Synopsis](https://docs.npmjs.com/cli/v11/commands/<#synopsis>)",
      "``` npm publish <package-spec> ```"
    ],
    "error": false
  },
  {
    "index": 2,
    "tags": [
      "description"
    ],
    "content": [
      "## [Description](https://docs.npmjs.com/cli/v11/commands/<#description>)",
      "Publishes a package to the registry so that it can be installed by name.",
      "By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a `scope`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/using-npm/scope>) in the name, combined with a scope-configured registry (see `package.json`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/configuring-npm/package-json>)).",
      "A `package` is interpreted the same way as other commands (like `npm install`) and can be:",
      "  * a) a folder containing a program described by a `package.json`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/configuring-npm/package-json>) file",
      "  * b) a gzipped tarball containing (a)",
      "  * c) a url that resolves to (b)",
      "  * d) a `<name>@<version>` that is published on the registry (see `registry`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/using-npm/registry>)) with (c)",
      "  * e) a `<name>@<tag>` (see `npm dist-tag`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-dist-tag>)) that points to (d)",
      "  * f) a `<name>` that has a \\\"latest\\\" tag satisfying (e)",
      "  * g) a `<git remote url>` that resolves to (a)",
      "The publish will fail if the package name and version combination already exists in the specified registry.",
      "Once a package is published with a given name and version, that specific name and version combination can never be used again, even if it is removed with `npm unpublish`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-unpublish>).",
      "As of `npm@5`, both a sha1sum and an integrity field with a sha512sum of the tarball will be submitted to the registry during publication. Subsequent installs will use the strongest supported algorithm to verify downloads.",
      "Similar to `--dry-run` see `npm pack`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-pack>), which figures out the files to be included and packs them into a tarball to be uploaded to the registry."
    ],
    "error": false
  },
  {
    "index": 3,
    "tags": [
      "files included in package"
    ],
    "content": [
      "## [Files included in package](https://docs.npmjs.com/cli/v11/commands/<#files-included-in-package>)",
      "To see what will be included in your package, run `npm pack --dry-run`. All files are included by default, with the following exceptions:",
      "  * Certain files that are relevant to package installation and distribution are always included. For example, `package.json`, `README.md`, `LICENSE`, and so on.",
      "  * If there is a \\\"files\\\" list in `package.json`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/configuring-npm/package-json>), then only the files specified will be included. (If directories are specified, then they will be walked recursively and their contents included, subject to the same ignore rules.)",
      "  * If there is a `.gitignore` or `.npmignore` file, then ignored files in that and all child directories will be excluded from the package. If _both_ files exist, then the `.gitignore` is ignored, and only the `.npmignore` is used.",
      "`.npmignore` files follow the [same pattern rules](https://docs.npmjs.com/cli/v11/commands/<https:/git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring>) as `.gitignore` files",
      "  * If the file matches certain patterns, then it will _never_ be included, unless explicitly added to the `\\\"files\\\"` list in `package.json`, or un-ignored with a `!` rule in a `.npmignore` or `.gitignore` file.",
      "  * Symbolic links are never included in npm packages.",
      "See `developers`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/using-npm/developers>) for full details on what\\'s included in the published package, as well as details on how the package is built.",
      "See `package.json`[](https://docs.npmjs.com/cli/v11/commands/</cli/v11/configuring-npm/package-json>) for more info on what can and can\\'t be ignored."
    ],
    "error": false
  },
  {
    "index": 4,
    "tags": [
      "configuration"
    ],
    "content": [
      "## [Configuration](https://docs.npmjs.com/cli/v11/commands/<#configuration>)"
    ],
    "error": false
  },
  {
    "index": 5,
    "tags": [
      "tag"
    ],
    "content": [
      "### `tag`[](https://docs.npmjs.com/cli/v11/commands/<#tag>)",
      "  * Default: \\\"latest\\\"",
      "  * Type: String",
      "If you ask npm to install a package and don\\'t tell it a specific version, then it will install the specified tag.",
      "It is the tag added to the package@version specified in the `npm dist-tag add` command, if no explicit tag is given.",
      "When used by the `npm diff` command, this is the tag used to fetch the tarball that will be compared with the local files by default.",
      "If used in the `npm publish` command, this is the tag that will be added to the package submitted to the registry."
    ],
    "error": false
  },
  {
    "index": 6,
    "tags": [
      "access"
    ],
    "content": [
      "### `access`[](https://docs.npmjs.com/cli/v11/commands/<#access>)",
      "  * Default: \\'public\\' for new packages, existing packages it will not change the current level",
      "  * Type: null, \\\"restricted\\\", or \\\"public\\\"",
      "If you do not want your scoped package to be publicly viewable (and installable) set `--access=restricted`.",
      "Unscoped packages can not be set to `restricted`.",
      "Note: This defaults to not changing the current access level for existing packages. Specifying a value of `restricted` or `public` during publish will change the access for an existing package the same way that `npm access set status` would."
    ],
    "error": false
  },
  {
    "index": 7,
    "tags": [
      "dry-run"
    ],
    "content": [
      "### `dry-run`[](https://docs.npmjs.com/cli/v11/commands/<#dry-run>)",
      "  * Default: false",
      "  * Type: Boolean",
      "Indicates that you don\\'t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.",
      "Note: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc."
    ],
    "error": false
  },
  {
    "index": 8,
    "tags": [
      "otp"
    ],
    "content": [
      "### `otp`[](https://docs.npmjs.com/cli/v11/commands/<#otp>)",
      "  * Default: null",
      "  * Type: null or String",
      "This is a one-time password from a two-factor authenticator. It\\'s needed when publishing or changing package permissions with `npm access`.",
      "If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one."
    ],
    "error": false
  },
  {
    "index": 9,
    "tags": [
      "workspace"
    ],
    "content": [
      "### `workspace`[](https://docs.npmjs.com/cli/v11/commands/<#workspace>)",
      "  * Default:",
      "  * Type: String (can be set multiple times)",
      "Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.",
      "Valid values for the `workspace` config are either:",
      "  * Workspace names",
      "  * Path to a workspace directory",
      "  * Path to a parent workspace directory (will result in selecting all workspaces within that folder)",
      "When set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.",
      "This value is not exported to the environment for child processes."
    ],
    "error": false
  },
  {
    "index": 10,
    "tags": [
      "workspaces"
    ],
    "content": [
      "### `workspaces`[](https://docs.npmjs.com/cli/v11/commands/<#workspaces>)",
      "  * Default: null",
      "  * Type: null or Boolean",
      "Set to true to run the command in the context of **all** configured workspaces.",
      "Explicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:",
      "  * Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, _unless_ one or more workspaces are specified in the `workspace` config.",
      "This value is not exported to the environment for child processes."
    ],
    "error": false
  },
  {
    "index": 11,
    "tags": [
      "include-workspace-root"
    ],
    "content": [
      "### `include-workspace-root`[](https://docs.npmjs.com/cli/v11/commands/<#include-workspace-root>)",
      "  * Default: false",
      "  * Type: Boolean",
      "Include the workspace root when workspaces are enabled for a command.",
      "When false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.",
      "This value is not exported to the environment for child processes."
    ],
    "error": false
  },
  {
    "index": 12,
    "tags": [
      "provenance"
    ],
    "content": [
      "### `provenance`[](https://docs.npmjs.com/cli/v11/commands/<#provenance>)",
      "  * Default: false",
      "  * Type: Boolean",
      "When publishing from a supported cloud CI/CD system, the package will be publicly linked to where it was built and published from.",
      "This config can not be used with: `provenance-file`"
    ],
    "error": false
  },
  {
    "index": 13,
    "tags": [
      "provenance-file"
    ],
    "content": [
      "### `provenance-file`[](https://docs.npmjs.com/cli/v11/commands/<#provenance-file>)",
      "  * Default: null",
      "  * Type: Path",
      "When publishing, the provenance bundle at the given path will be used.",
      "This config can not be used with: `provenance`"
    ],
    "error": false
  },
  {
    "index": 14,
    "tags": [
      "see also"
    ],
    "content": [
      "## [See Also](https://docs.npmjs.com/cli/v11/commands/<#see-also>)",
      "  * [package spec](https://docs.npmjs.com/cli/v11/commands/</cli/v11/using-npm/package-spec>)",
      "  * [npm-packlist package](https://docs.npmjs.com/cli/v11/commands/<http:/npm.im/npm-packlist>)",
      "  * [npm registry](https://docs.npmjs.com/cli/v11/commands/</cli/v11/using-npm/registry>)",
      "  * [npm scope](https://docs.npmjs.com/cli/v11/commands/</cli/v11/using-npm/scope>)",
      "  * [npm adduser](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-adduser>)",
      "  * [npm owner](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-owner>)",
      "  * [npm deprecate](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-deprecate>)",
      "  * [npm dist-tag](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-dist-tag>)",
      "  * [npm pack](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-pack>)",
      "  * [npm profile](https://docs.npmjs.com/cli/v11/commands/</cli/v11/commands/npm-profile>)"
    ],
    "error": false
  }
]