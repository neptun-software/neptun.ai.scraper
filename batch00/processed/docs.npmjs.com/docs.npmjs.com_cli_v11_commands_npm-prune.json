[
  {
    "index": 0,
    "tags": [
      "npm CLI commands"
    ],
    "content": [
      "npm",
      "npm access",
      "npm adduser",
      "npm audit",
      "npm bugs",
      "npm cache",
      "npm ci",
      "npm completion",
      "npm config",
      "npm dedupe",
      "npm deprecate",
      "npm diff",
      "npm dist-tag",
      "npm docs",
      "npm doctor",
      "npm edit",
      "npm exec",
      "npm explain",
      "npm explore",
      "npm find-dupes",
      "npm fund",
      "npm help",
      "npm help-search",
      "npm init",
      "npm install",
      "npm install-ci-test",
      "npm install-test",
      "npm link",
      "npm login",
      "npm logout",
      "npm ls",
      "npm org",
      "npm outdated",
      "npm owner",
      "npm pack",
      "npm ping",
      "npm pkg",
      "npm prefix",
      "npm profile",
      "npm prune",
      "npm publish",
      "npm query",
      "npm rebuild",
      "npm repo",
      "npm restart",
      "npm root",
      "npm run-script",
      "npm sbom",
      "npm search",
      "npm shrinkwrap",
      "npm star",
      "npm stars",
      "npm start",
      "npm stop",
      "npm team",
      "npm test",
      "npm token",
      "npm uninstall",
      "npm unpublish",
      "npm unstar",
      "npm update",
      "npm version",
      "npm view",
      "npm whoami",
      "npx"
    ],
    "error": false
  },
  {
    "index": 1,
    "tags": [
      "npm prune command"
    ],
    "content": [
      "# npm-prune",
      "Remove extraneous packages",
      "Select CLI Version:",
      "Version 11.0.0 (Latest)",
      "See DetailsTable of contents",
      "Synopsis",
      "Description",
      "Configuration",
      "omit",
      "include",
      "dry-run",
      "json",
      "foreground-scripts",
      "ignore-scripts",
      "workspace",
      "workspaces",
      "include-workspace-root",
      "install-links",
      "See Also"
    ],
    "error": false
  },
  {
    "index": 2,
    "tags": [
      "npm prune synopsis"
    ],
    "content": [
      "## Synopsis",
      "``` npm prune [[<@scope>/]<pkg>...] ```"
    ],
    "error": false
  },
  {
    "index": 3,
    "tags": [
      "npm prune description"
    ],
    "content": [
      "## Description",
      "This command removes \\\"extraneous\\\" packages. If a package name is provided, then only packages matching one of the supplied names are removed.",
      "Extraneous packages are those present in the `node_modules` folder that are not listed as any package\\'s dependency list.",
      "If the `--omit=dev` flag is specified or the `NODE_ENV` environment variable is set to `production`, this command will remove the packages specified in your `devDependencies`.",
      "If the `--dry-run` flag is used then no changes will actually be made.",
      "If the `--json` flag is used, then the changes `npm prune` made (or would have made with `--dry-run`) are printed as a JSON object.",
      "In normal operation, extraneous modules are pruned automatically, so you\\'ll only need this command with the `--production` flag. However, in the real world, operation is not always \\\"normal\\\". When crashes or mistakes happen, this command can help clean up any resulting garbage."
    ],
    "error": false
  },
  {
    "index": 4,
    "tags": [
      "npm prune configuration"
    ],
    "content": [
      "## Configuration"
    ],
    "error": false
  },
  {
    "index": 5,
    "tags": [
      "npm prune omit option"
    ],
    "content": [
      "### `omit`",
      "  * Default: \\'dev\\' if the `NODE_ENV` environment variable is set to \\'production\\', otherwise empty.",
      "  * Type: \\\"dev\\\", \\\"optional\\\", or \\\"peer\\\" (can be set multiple times)",
      "Dependency types to omit from the installation tree on disk.",
      "Note that these dependencies _are_ still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.",
      "If a package type appears in both the `--include` and `--omit` lists, then it will be included.",
      "If the resulting omit list includes `\\'dev\\'`, then the `NODE_ENV` environment variable will be set to `\\'production\\'` for all lifecycle scripts."
    ],
    "error": false
  },
  {
    "index": 6,
    "tags": [
      "npm prune include option"
    ],
    "content": [
      "### `include`",
      "  * Default:",
      "  * Type: \\\"prod\\\", \\\"dev\\\", \\\"optional\\\", or \\\"peer\\\" (can be set multiple times)",
      "Option that allows for defining which types of dependencies to install.",
      "This is the inverse of `--omit=<type>`.",
      "Dependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line."
    ],
    "error": false
  },
  {
    "index": 7,
    "tags": [
      "npm prune dry-run option"
    ],
    "content": [
      "### `dry-run`",
      "  * Default: false",
      "  * Type: Boolean",
      "Indicates that you don\\'t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.",
      "Note: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc."
    ],
    "error": false
  },
  {
    "index": 8,
    "tags": [
      "npm prune json option"
    ],
    "content": [
      "### `json`",
      "  * Default: false",
      "  * Type: Boolean",
      "Whether or not to output JSON data, rather than the normal output.",
      "  * In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.",
      "Not supported by all npm commands."
    ],
    "error": false
  },
  {
    "index": 9,
    "tags": [
      "npm prune foreground-scripts option"
    ],
    "content": [
      "### `foreground-scripts`",
      "  * Default: `false` unless when using `npm pack` or `npm publish` where it defaults to `true`",
      "  * Type: Boolean",
      "Run all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.",
      "Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging."
    ],
    "error": false
  },
  {
    "index": 10,
    "tags": [
      "npm prune ignore-scripts option"
    ],
    "content": [
      "### `ignore-scripts`",
      "  * Default: false",
      "  * Type: Boolean",
      "If true, npm does not run scripts specified in package.json files.",
      "Note that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will _not_ run any pre- or post-scripts."
    ],
    "error": false
  },
  {
    "index": 11,
    "tags": [
      "npm prune workspace option"
    ],
    "content": [
      "### `workspace`",
      "  * Default:",
      "  * Type: String (can be set multiple times)",
      "Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.",
      "Valid values for the `workspace` config are either:",
      "  * Workspace names",
      "  * Path to a workspace directory",
      "  * Path to a parent workspace directory (will result in selecting all workspaces within that folder)",
      "When set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.",
      "This value is not exported to the environment for child processes."
    ],
    "error": false
  },
  {
    "index": 12,
    "tags": [
      "npm prune workspaces option"
    ],
    "content": [
      "### `workspaces`",
      "  * Default: null",
      "  * Type: null or Boolean",
      "Set to true to run the command in the context of **all** configured workspaces.",
      "Explicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:",
      "  * Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, _unless_ one or more workspaces are specified in the `workspace` config.",
      "This value is not exported to the environment for child processes."
    ],
    "error": false
  },
  {
    "index": 13,
    "tags": [
      "npm prune include-workspace-root option"
    ],
    "content": [
      "### `include-workspace-root`",
      "  * Default: false",
      "  * Type: Boolean",
      "Include the workspace root when workspaces are enabled for a command.",
      "When false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.",
      "This value is not exported to the environment for child processes."
    ],
    "error": false
  },
  {
    "index": 14,
    "tags": [
      "npm prune install-links option"
    ],
    "content": [
      "### `install-links`",
      "  * Default: false",
      "  * Type: Boolean",
      "When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces."
    ],
    "error": false
  },
  {
    "index": 15,
    "tags": [
      "npm prune see also"
    ],
    "content": [
      "## See Also",
      "npm uninstall",
      "npm folders",
      "npm ls"
    ],
    "error": false
  }
]