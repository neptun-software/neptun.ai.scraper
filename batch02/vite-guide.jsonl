{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Getting Started is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Getting Started in vite-guide.\n\n# Getting Started\n\nAn introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.Here's a quick rundown of what this is about:\n\n## Overview\n\nVite (French word for \"quick\", pronounced `/vit/`, like \"veet\") is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:\n\n- A dev server that provides [rich feature enhancements](https://vite.dev/guide/features) over [native ES modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), for example extremely fast [Hot Module Replacement (HMR)](https://vite.dev/guide/features#hot-module-replacement).\n\n- A build command that bundles your code with [Rollup](https://rollupjs.org/), pre-configured to output highly optimized static assets for production.\n\nVite is opinionated and comes with sensible defaults out of the box. Read about what's possible in the [Features Guide](https://vite.dev/guide/features). Support for frameworks or integration with other tools is possible through [Plugins](https://vite.dev/guide/using-plugins). The [Config Section](https://vite.dev/config/) explains how to adapt Vite to your project if needed.\n\nVite is also highly extensible via its [Plugin API](https://vite.dev/guide/api-plugin) and [JavaScript API](https://vite.dev/guide/api-javascript) with full typing support.\n\nYou can learn more about the rationale behind the project in the [Why Vite](https://vite.dev/guide/why) section.\n\n## Browser Support\n\nDuring development, Vite sets [`esnext` as the transform target](https://esbuild.github.io/api/#target), because we assume a modern browser is used and it supports all of the latest JavaScript and CSS features. This prevents syntax lowering, letting Vite serve modules as close as possible to the original source code.\n\nFor the production build, by default Vite targets browsers that support modern JavaScript, such as [native ES Modules](https://caniuse.com/es6-module), [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta), [nullish coalescing](https://caniuse.com/mdn-javascript_operators_nullish_coalescing), and [BigInt](https://caniuse.com/bigint). Legacy browsers can be supported via the official [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy). See the [Building for Production](https://vite.dev/guide/build) section for more details.\n\n## Trying Vite Online\n\nYou can try Vite online on [StackBlitz](https://vite.new/). It runs the Vite-based build setup directly in the browser, so it is almost identical to the local setup but doesn't require installing anything on your machine. You can navigate to `vite.new/{template}` to select which framework to use.\n\nThe supported template presets are:\n\n| JavaScript | TypeScript |\n| --- | --- |\n| [vanilla](https://vite.new/vanilla) | [vanilla-ts](https://vite.new/vanilla-ts) |\n| [vue](https://vite.new/vue) | [vue-ts](https://vite.new/vue-ts) |\n| [react](https://vite.new/react) | [react-ts](https://vite.new/react-ts) |\n| [preact](https://vite.new/preact) | [preact-ts](https://vite.new/preact-ts) |\n| [lit](https://vite.new/lit) | [lit-ts](https://vite.new/lit-ts) |\n| [svelte](https://vite.new/svelte) | [svelte-ts](https://vite.new/svelte-ts) |\n| [solid](https://vite.new/solid) | [solid-ts](https://vite.new/solid-ts) |\n| [qwik](https://vite.new/qwik) | [qwik-ts](https://vite.new/qwik-ts) |\n\n## Scaffolding Your First Vite Project\n\nCompatibility Note\n\nVite requires [Node.js](https://nodejs.org/en/) version 18+ or 20+. However, some templates require a higher Node.js version to work, please upgrade if your package manager warns about it.\n\nnpmYarnpnpmBun\n\nbash\n\n```\n$ npm create vite@latest\n```\n\nbash\n\n```\n$ yarn create vite\n```\n\nbash\n\n```\n$ pnpm create vite\n```\n\nbash\n\n```\n$ bun create vite\n```\n\nThen follow the prompts!\n\nYou can also directly specify the project name and the template you want to use via additional command line options. For example, to scaffold a Vite + Vue project, run:\nnpmYarnpnpmBun\n\nbash\n\n```\n# npm 7+, extra double-dash is needed:\n$ npm create vite@latest my-vue-app -- --template vue\n```\n\nbash\n\n```\n$ yarn create vite my-vue-app --template vue\n```\n\nbash\n\n```\n$ pnpm create vite my-vue-app --template vue\n```\n\nbash\n\n```\n$ bun create vite my-vue-app --template vue\n```\n\nSee [create-vite](https://github.com/vitejs/vite/tree/main/packages/create-vite) for more details on each supported template: `vanilla`, `vanilla-ts`, `vue`, `vue-ts`, `react`, `react-ts`, `react-swc`, `react-swc-ts`, `preact`, `preact-ts`, `lit`, `lit-ts`, `svelte`, `svelte-ts`, `solid`, `solid-ts`, `qwik`, `qwik-ts`.\n\nYou can use `.` for the project name to scaffold in the current directory.\n\n## Community Templates\n\ncreate-vite is a tool to quickly start a project from a basic template for popular frameworks. Check out Awesome Vite for [community maintained templates](https://github.com/vitejs/awesome-vite#templates) that include other tools or target different frameworks.\n\nFor a template at `https://github.com/user/project`, you can try it out online using `https://github.stackblitz.com/user/project` (adding `.stackblitz` after `github` to the URL of the project).\n\nYou can also use a tool like [degit](https://github.com/Rich-Harris/degit) to scaffold your project with one of the templates. Assuming the project is on GitHub and uses `main` as the default branch, you can create a local copy using:\n\nbash\n\n```\nnpx degit user/project#main my-project\ncd my-project\n\nnpm install\nnpm run dev\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "overview", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I overview in vite-guide?\n\nAssistant: To overview in vite-guide, here's what you do:\nVite (French word for \"quick\", pronounced `/vit/`, like \"veet\") is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:\n\n- A dev server that provides [rich feature enhancements](https://vite.dev/guide/features) over [native ES modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), for example extremely fast [Hot Module Replacement (HMR)](https://vite.dev/guide/features#hot-module-replacement).\n\n- A build command that bundles your code with [Rollup](https://rollupjs.org/), pre-configured to output highly optimized static assets for production.\n\nVite is opinionated and comes with sensible defaults out of the box. Read about what's possible in the [Features Guide](https://vite.dev/guide/features). Support for frameworks or integration with other tools is possible through [Plugins](https://vite.dev/guide/using-plugins). The [Config Section](https://vite.dev/config/) explains how to adapt Vite to your project if needed.\n\nVite is also highly extensible via its [Plugin API](https://vite.dev/guide/api-plugin) and [JavaScript API](https://vite.dev/guide/api-javascript) with full typing support.\n\nYou can learn more about the rationale behind the project in the [Why Vite](https://vite.dev/guide/why) section..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I browser support in vite-guide?\n\nAssistant: To browser support in vite-guide, here's what you do:\nDuring development, Vite sets [`esnext` as the transform target](https://esbuild.github.io/api/#target), because we assume a modern browser is used and it supports all of the latest JavaScript and CSS features. This prevents syntax lowering, letting Vite serve modules as close as possible to the original source code.\n\nFor the production build, by default Vite targets browsers that support modern JavaScript, such as [native ES Modules](https://caniuse.com/es6-module), [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta), [nullish coalescing](https://caniuse.com/mdn-javascript_operators_nullish_coalescing), and [BigInt](https://caniuse.com/bigint). Legacy browsers can be supported via the official [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy). See the [Building for Production](https://vite.dev/guide/build) section for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I trying vite online in vite-guide?\n\nAssistant: To trying vite online in vite-guide, here's what you do:\nYou can try Vite online on [StackBlitz](https://vite.new/). It runs the Vite-based build setup directly in the browser, so it is almost identical to the local setup but doesn't require installing anything on your machine. You can navigate to `vite.new/{template}` to select which framework to use.\n\nThe supported template presets are:\n\n| JavaScript | TypeScript |\n| --- | --- |\n| [vanilla](https://vite.new/vanilla) | [vanilla-ts](https://vite.new/vanilla-ts) |\n| [vue](https://vite.new/vue) | [vue-ts](https://vite.new/vue-ts) |\n| [react](https://vite.new/react) | [react-ts](https://vite.new/react-ts) |\n| [preact](https://vite.new/preact) | [preact-ts](https://vite.new/preact-ts) |\n| [lit](https://vite.new/lit) | [lit-ts](https://vite.new/lit-ts) |\n| [svelte](https://vite.new/svelte) | [svelte-ts](https://vite.new/svelte-ts) |\n| [solid](https://vite.new/solid) | [solid-ts](https://vite.new/solid-ts) |\n| [qwik](https://vite.new/qwik) | [qwik-ts](https://vite.new/qwik-ts) |.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I scaffolding your first vite project in vite-guide?\n\nAssistant: To scaffolding your first vite project in vite-guide, here's what you do:\nCompatibility Note\n\nVite requires [Node.js](https://nodejs.org/en/) version 18+ or 20+. However, some templates require a higher Node.js version to work, please upgrade if your package manager warns about it.\n\nnpmYarnpnpmBun\n\nbash\n\n```\n$ npm create vite@latest\n```\n\nbash\n\n```\n$ yarn create vite\n```\n\nbash\n\n```\n$ pnpm create vite\n```\n\nbash\n\n```\n$ bun create vite\n```\n\nThen follow the prompts!\n\nYou can also directly specify the project name and the template you want to use via additional command line options. For example, to scaffold a Vite + Vue project, run:\nnpmYarnpnpmBun\n\nbash\n\n```\n# npm 7+, extra double-dash is needed:\n$ npm create vite@latest my-vue-app -- --template vue\n```\n\nbash\n\n```\n$ yarn create vite my-vue-app --template vue\n```\n\nbash\n\n```\n$ pnpm create vite my-vue-app --template vue\n```\n\nbash\n\n```\n$ bun create vite my-vue-app --template vue\n```\n\nSee [create-vite](https://github.com/vitejs/vite/tree/main/packages/create-vite) for more details on each supported template: `vanilla`, `vanilla-ts`, `vue`, `vue-ts`, `react`, `react-ts`, `react-swc`, `react-swc-ts`, `preact`, `preact-ts`, `lit`, `lit-ts`, `svelte`, `svelte-ts`, `solid`, `solid-ts`, `qwik`, `qwik-ts`.\n\nYou can use `.` for the project name to scaffold in the current directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I community templates in vite-guide?\n\nAssistant: To community templates in vite-guide, here's what you do:\ncreate-vite is a tool to quickly start a project from a basic template for popular frameworks. Check out Awesome Vite for [community maintained templates](https://github.com/vitejs/awesome-vite#templates) that include other tools or target different frameworks.\n\nFor a template at `https://github.com/user/project`, you can try it out online using `https://github.stackblitz.com/user/project` (adding `.stackblitz` after `github` to the URL of the project).\n\nYou can also use a tool like [degit](https://github.com/Rich-Harris/degit) to scaffold your project with one of the templates. Assuming the project is on GitHub and uses `main` as the default branch, you can create a local copy using:\n\nbash\n\n```\nnpx degit user/project#main my-project\ncd my-project\n\nnpm install\nnpm run dev\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Getting Started in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Scaffolding a Vite Project**:\n\n```yaml\n$ npm create vite@latest\n```\n\nThis snippet shows you how to scaffolding a vite project, which is an important aspect of getting started.\n\n**Scaffolding a Vite + Vue Project**:\n\n```yaml\n$ npm create vite@latest my-vue-app -- --template vue\n```\n\nThis snippet shows you how to scaffolding a vite + vue project, which is an important aspect of getting started.\n\n**Manual Installation of Vite**:\n\n```yaml\n$ npm install -D vite\n```\n\nThis snippet shows you how to manual installation of vite, which is an important aspect of getting started.\n\n**Running Vite**:\n\n```yaml\n$ npx vite\n```\n\nThis snippet shows you how to running vite, which is an important aspect of getting started.\n\n", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "code_examples", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Getting Started in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVite requires Node.js version 18+ or 20+.\n\nFor templates requiring a higher Node.js version, upgrade if your package manager warns about it.\n\nUse `.` for the project name to scaffold in the current directory.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide", "title": "Getting Started", "description": "An introduction to Vite, a build tool for modern web projects, covering its features, browser support, and how to get started with Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:55:32", "type": "best_practices", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:type": "website", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Getting Started", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "title": "Getting Started | Vite", "theme-color": "#646cff", "ogTitle": "Getting Started", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "language": "en-US", "scrapeId": "4a805692-9bd2-45d9-a8ea-ef33aaba1d26", "sourceURL": "https://vite.dev/guide", "url": "https://vite.dev/guide/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Building for Production is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Building for Production in vite-guide.\n\n# Building for Production\n\nThis page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.Here's a quick rundown of what this is about:\n\n## Building for Production\n\nWhen it is time to deploy your app for production, simply run the `vite build` command. By default, it uses `<root>/index.html` as the build entry point, and produces an application bundle that is suitable to be served over a static hosting service. Check out the [Deploying a Static Site](https://vite.dev/guide/static-deploy) for guides about popular services.\n\n## Browser Compatibility\n\nBy default, the production bundle assumes support for modern JavaScript, such as [native ES Modules](https://caniuse.com/es6-module), [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta), [nullish coalescing](https://caniuse.com/mdn-javascript_operators_nullish_coalescing), and [BigInt](https://caniuse.com/bigint). The default browser support range is:\n\n- Chrome >=87\n- Firefox >=78\n- Safari >=14\n- Edge >=88\n\nYou can specify custom targets via the [`build.target` config option](https://vite.dev/config/build-options#build-target), where the lowest target is `es2015`. If a lower target is set, Vite will still require these minimum browser support ranges as it relies on [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), and [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta):\n\n- Chrome >=64\n- Firefox >=67\n- Safari >=11.1\n- Edge >=79\n\nNote that by default, Vite only handles syntax transforms and **does not cover polyfills**. You can check out [https://cdnjs.cloudflare.com/polyfill/](https://cdnjs.cloudflare.com/polyfill/) which automatically generates polyfill bundles based on the user's browser UserAgent string.\n\nLegacy browsers can be supported via [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy), which will automatically generate legacy chunks and corresponding ES language feature polyfills. The legacy chunks are conditionally loaded only in browsers that do not have native ESM support.\n\n## Public Base Path\n\nIf you are deploying your project under a nested public path, simply specify the [`base` config option](https://vite.dev/config/shared-options#base) and all asset paths will be rewritten accordingly. This option can also be specified as a command line flag, e.g. `vite build --base=/my/public/path/`.\n\nJS-imported asset URLs, CSS `url()` references, and asset references in your `.html` files are all automatically adjusted to respect this option during build.\n\nThe exception is when you need to dynamically concatenate URLs on the fly. In this case, you can use the globally injected `import.meta.env.BASE_URL` variable which will be the public base path. Note this variable is statically replaced during build so it must appear exactly as-is (i.e. `import.meta.env['BASE_URL']` won't work).\n\nFor advanced base path control, check out [Advanced Base Options](https://vite.dev/guide/build#advanced-base-options).\n\n## Relative base\n\nIf you don't know the base path in advance, you may set a relative base path with `\"base\": \"./\"` or `\"base\": \"\"`. This will make all generated URLs to be relative to each file.\n\nSupport for older browsers when using relative bases\n\n`import.meta` support is required for relative bases. If you need to support [browsers that do not support `import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta), you can use [the `legacy` plugin](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy).\n\n## Customizing the Build\n\nThe build can be customized via various [build config options](https://vite.dev/config/build-options). Specifically, you can directly adjust the underlying [Rollup options](https://rollupjs.org/configuration-options/) via `build.rollupOptions`:\n\n```javascript\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      // https://rollupjs.org/configuration-options/\n    },\n  },\n})\n``` \n\nFor example, you can specify multiple Rollup outputs with plugins that are only applied during build.\n\n## Chunking Strategy\n\nYou can configure how chunks are split using `build.rollupOptions.output.manualChunks` (see [Rollup docs](https://rollupjs.org/configuration-options/#output-manualchunks)). If you use a framework, refer to their documentation for configuring how chunks are splitted.\n\n## Load Error Handling\n\nVite emits `vite:preloadError` event when it fails to load dynamic imports. `event.payload` contains the original import error. If you call `event.preventDefault()`, the error will not be thrown.\n\n```javascript\nwindow.addEventListener('vite:preloadError', (event) => {\n  window.location.reload() // for example, refresh the page\n})\n```\n\nWhen a new deployment occurs, the hosting service may delete the assets from previous deployments. As a result, a user who visited your site before the new deployment might encounter an import error. This error happens because the assets running on that user's device are outdated and it tries to import the corresponding old chunk, which is deleted. This event is useful for addressing this situation.\n\n## Rebuild on Files Changes\n\nYou can enable rollup watcher with `vite build --watch`. Or, you can directly adjust the underlying [`WatcherOptions`](https://rollupjs.org/configuration-options/#watch) via `build.watch`:\n\n```javascript\nexport default defineConfig({\n  build: {\n    watch: {\n      // https://rollupjs.org/configuration-options/#watch\n    },\n  },\n})\n```\n\nWith the `--watch` flag enabled, changes to the `vite.config.js`, as well as any files to be bundled, will trigger a rebuild.\n\n## Multi-Page App\n\nSuppose you have the following source code structure:\n\n```\n├── package.json\n├── vite.config.js\n├── index.html\n├── main.js\n└── nested\n    ├── index.html\n    └── nested.js\n```\n\nDuring dev, simply navigate or link to `/nested/` - it works as expected, just like for a normal static file server.\n\nDuring build, all you need to do is to specify multiple `.html` files as entry points:\n\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        nested: resolve(__dirname, 'nested/index.html'),\n      },\n    },\n  },\n})\n```\n\nIf you specify a different root, remember that `__dirname` will still be the folder of your vite.config.js file when resolving the input paths. Therefore, you will need to add your `root` entry to the arguments for `resolve`.\n\nNote that for HTML files, Vite ignores the name given to the entry in the `rollupOptions.input` object and instead respects the resolved id of the file when generating the HTML asset in the dist folder. This ensures a consistent structure with the way the dev server works.\n\n## Library Mode\n\nWhen you are developing a browser-oriented library, you are likely spending most of the time on a test/demo page that imports your actual library. With Vite, you can use your `index.html` for that purpose to get the smooth development experience.\n\nWhen it is time to bundle your library for distribution, use the [`build.lib` config option](https://vite.dev/config/build-options#build-lib). Make sure to also externalize any dependencies that you do not want to bundle into your library, e.g. `vue` or `react`:\n\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'lib/main.js'),\n      name: 'MyLib',\n      // the proper extensions will be added\n      fileName: 'my-lib',\n    },\n    rollupOptions: {\n      // make sure to externalize deps that shouldn't be bundled\n      // into your library\n      external: ['vue'],\n      output: {\n        // Provide global variables to use in the UMD build\n        // for externalized deps\n        globals: {\n          vue: 'Vue',\n        },\n      },\n    },\n  },\n})\n```\n\nRunning `vite build` with this config uses a Rollup preset that is oriented towards shipping libraries and produces two bundle formats:\n- `es` and `umd` (for single entry)\n- `es` and `cjs` (for multiple entries)\n\nThe formats can be configured with the [`build.lib.formats`](https://vite.dev/config/build-options#build-lib) option.\n\n## CSS support\n\nIf your library imports any CSS, it will be bundled as a single CSS file besides the built JS files, e.g. `dist/my-lib.css`. The name defaults to `build.lib.fileName`, but can also be changed with [`build.lib.cssFileName`](https://vite.dev/config/build-options#build-lib).\n\nYou can export the CSS file in your `package.json` to be imported by users:\n\n```json\n{\n  \"name\": \"my-lib\",\n  \"type\": \"module\",\n  \"files\": [\"dist\"],\n  \"main\": \"./dist/my-lib.umd.cjs\",\n  \"module\": \"./dist/my-lib.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/my-lib.js\",\n      \"require\": \"./dist/my-lib.umd.cjs\"\n    }\n  }\n}\n``` \n\nFile Extensions\n\nIf the `package.json` does not contain `\"type\": \"module\"`, Vite will generate different file extensions for Node.js compatibility. `.js` will become `.mjs` and `.cjs` will become `.js`.\n\n## Environment Variables\n\nIn library mode, all [`import.meta.env.*`](https://vite.dev/guide/env-and-mode) usage are statically replaced when building for production. However, `process.env.*` usage are not, so that consumers of your library can dynamically change it. If this is undesirable, you can use `define: { 'process.env.NODE_ENV': '\"production\"' }` for example to statically replace them, or use [`esm-env`](https://github.com/benmccann/esm-env) for better compatibility with bundlers and runtimes.\n\n## Advanced Base Options\n\nWARNING\n\nThis feature is experimental. [Give Feedback](https://github.com/vitejs/vite/discussions/13834).\n\nFor advanced use cases, the deployed assets and public files may be in different paths, for example to use different cache strategies. A user may choose to deploy in three different paths:\n- The generated entry HTML files (which may be processed during SSR)\n- The generated hashed assets (JS, CSS, and other file types like images)\n- The copied [public files](https://vite.dev/guide/assets#the-public-directory)\n\nA single static [base](https://vite.dev/guide/build#public-base-path) isn't enough in these scenarios. Vite provides experimental support for advanced base options during build, using `experimental.renderBuiltUrl`.\n\n```typescript\nexperimental: {\n  renderBuiltUrl(filename, { hostType }) {\n    if (hostType === 'js') {\n      return {\n        runtime: `window.__toCdnUrl(${JSON.stringify(filename)})`\n      }\n    } else {\n      return {\n        relative: true }\n    }\n  },\n},\n```\n\nIf the hashed assets and public files aren't deployed together, options for each group can be defined independently using asset `type` included in the second `context` param given to the function.\n\n```typescript\nexperimental: {\n  renderBuiltUrl(filename, { hostId, hostType, type }) {\n    if (type === 'public') {\n      return 'https://www.domain.com/' + filename\n    } else if (path.extname(hostId) === '.js') {\n      return {\n        runtime: `window.__assetsPath(${JSON.stringify(filename)})`\n      }\n    } else {\n      return 'https://cdn.domain.com/assets/' + filename\n    }\n  },\n},\n```\n\nNote that the `filename` passed is a decoded URL, and if the function returns a URL string, it should also be decoded. Vite will handle the encoding automatically when rendering the URLs. If an object with `runtime` is returned, encoding should be handled yourself where needed as the runtime code will be rendered as is.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "overview", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I building for production in vite-guide?\n\nAssistant: To building for production in vite-guide, here's what you do:\nWhen it is time to deploy your app for production, simply run the `vite build` command. By default, it uses `<root>/index.html` as the build entry point, and produces an application bundle that is suitable to be served over a static hosting service. Check out the [Deploying a Static Site](https://vite.dev/guide/static-deploy) for guides about popular services..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I browser compatibility in vite-guide?\n\nAssistant: To browser compatibility in vite-guide, here's what you do:\nBy default, the production bundle assumes support for modern JavaScript, such as [native ES Modules](https://caniuse.com/es6-module), [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta), [nullish coalescing](https://caniuse.com/mdn-javascript_operators_nullish_coalescing), and [BigInt](https://caniuse.com/bigint). The default browser support range is:\n\n- Chrome >=87\n- Firefox >=78\n- Safari >=14\n- Edge >=88\n\nYou can specify custom targets via the [`build.target` config option](https://vite.dev/config/build-options#build-target), where the lowest target is `es2015`. If a lower target is set, Vite will still require these minimum browser support ranges as it relies on [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), and [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta):\n\n- Chrome >=64\n- Firefox >=67\n- Safari >=11.1\n- Edge >=79\n\nNote that by default, Vite only handles syntax transforms and **does not cover polyfills**. You can check out [https://cdnjs.cloudflare.com/polyfill/](https://cdnjs.cloudflare.com/polyfill/) which automatically generates polyfill bundles based on the user's browser UserAgent string.\n\nLegacy browsers can be supported via [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy), which will automatically generate legacy chunks and corresponding ES language feature polyfills. The legacy chunks are conditionally loaded only in browsers that do not have native ESM support..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I public base path in vite-guide?\n\nAssistant: To public base path in vite-guide, here's what you do:\nIf you are deploying your project under a nested public path, simply specify the [`base` config option](https://vite.dev/config/shared-options#base) and all asset paths will be rewritten accordingly. This option can also be specified as a command line flag, e.g. `vite build --base=/my/public/path/`.\n\nJS-imported asset URLs, CSS `url()` references, and asset references in your `.html` files are all automatically adjusted to respect this option during build.\n\nThe exception is when you need to dynamically concatenate URLs on the fly. In this case, you can use the globally injected `import.meta.env.BASE_URL` variable which will be the public base path. Note this variable is statically replaced during build so it must appear exactly as-is (i.e. `import.meta.env['BASE_URL']` won't work).\n\nFor advanced base path control, check out [Advanced Base Options](https://vite.dev/guide/build#advanced-base-options)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I relative base in vite-guide?\n\nAssistant: To relative base in vite-guide, here's what you do:\nIf you don't know the base path in advance, you may set a relative base path with `\"base\": \"./\"` or `\"base\": \"\"`. This will make all generated URLs to be relative to each file.\n\nSupport for older browsers when using relative bases\n\n`import.meta` support is required for relative bases. If you need to support [browsers that do not support `import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta), you can use [the `legacy` plugin](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I customizing the build in vite-guide?\n\nAssistant: To customizing the build in vite-guide, here's what you do:\nThe build can be customized via various [build config options](https://vite.dev/config/build-options). Specifically, you can directly adjust the underlying [Rollup options](https://rollupjs.org/configuration-options/) via `build.rollupOptions`:\n\n```javascript\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      // https://rollupjs.org/configuration-options/\n    },\n  },\n})\n``` \n\nFor example, you can specify multiple Rollup outputs with plugins that are only applied during build..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I chunking strategy in vite-guide?\n\nAssistant: To chunking strategy in vite-guide, here's what you do:\nYou can configure how chunks are split using `build.rollupOptions.output.manualChunks` (see [Rollup docs](https://rollupjs.org/configuration-options/#output-manualchunks)). If you use a framework, refer to their documentation for configuring how chunks are splitted..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I load error handling in vite-guide?\n\nAssistant: To load error handling in vite-guide, here's what you do:\nVite emits `vite:preloadError` event when it fails to load dynamic imports. `event.payload` contains the original import error. If you call `event.preventDefault()`, the error will not be thrown.\n\n```javascript\nwindow.addEventListener('vite:preloadError', (event) => {\n  window.location.reload() // for example, refresh the page\n})\n```\n\nWhen a new deployment occurs, the hosting service may delete the assets from previous deployments. As a result, a user who visited your site before the new deployment might encounter an import error. This error happens because the assets running on that user's device are outdated and it tries to import the corresponding old chunk, which is deleted. This event is useful for addressing this situation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I rebuild on files changes in vite-guide?\n\nAssistant: To rebuild on files changes in vite-guide, here's what you do:\nYou can enable rollup watcher with `vite build --watch`. Or, you can directly adjust the underlying [`WatcherOptions`](https://rollupjs.org/configuration-options/#watch) via `build.watch`:\n\n```javascript\nexport default defineConfig({\n  build: {\n    watch: {\n      // https://rollupjs.org/configuration-options/#watch\n    },\n  },\n})\n```\n\nWith the `--watch` flag enabled, changes to the `vite.config.js`, as well as any files to be bundled, will trigger a rebuild..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I multi-page app in vite-guide?\n\nAssistant: To multi-page app in vite-guide, here's what you do:\nSuppose you have the following source code structure:\n\n```\n├── package.json\n├── vite.config.js\n├── index.html\n├── main.js\n└── nested\n    ├── index.html\n    └── nested.js\n```\n\nDuring dev, simply navigate or link to `/nested/` - it works as expected, just like for a normal static file server.\n\nDuring build, all you need to do is to specify multiple `.html` files as entry points:\n\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        nested: resolve(__dirname, 'nested/index.html'),\n      },\n    },\n  },\n})\n```\n\nIf you specify a different root, remember that `__dirname` will still be the folder of your vite.config.js file when resolving the input paths. Therefore, you will need to add your `root` entry to the arguments for `resolve`.\n\nNote that for HTML files, Vite ignores the name given to the entry in the `rollupOptions.input` object and instead respects the resolved id of the file when generating the HTML asset in the dist folder. This ensures a consistent structure with the way the dev server works..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I library mode in vite-guide?\n\nAssistant: To library mode in vite-guide, here's what you do:\nWhen you are developing a browser-oriented library, you are likely spending most of the time on a test/demo page that imports your actual library. With Vite, you can use your `index.html` for that purpose to get the smooth development experience.\n\nWhen it is time to bundle your library for distribution, use the [`build.lib` config option](https://vite.dev/config/build-options#build-lib). Make sure to also externalize any dependencies that you do not want to bundle into your library, e.g. `vue` or `react`:\n\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'lib/main.js'),\n      name: 'MyLib',\n      // the proper extensions will be added\n      fileName: 'my-lib',\n    },\n    rollupOptions: {\n      // make sure to externalize deps that shouldn't be bundled\n      // into your library\n      external: ['vue'],\n      output: {\n        // Provide global variables to use in the UMD build\n        // for externalized deps\n        globals: {\n          vue: 'Vue',\n        },\n      },\n    },\n  },\n})\n```\n\nRunning `vite build` with this config uses a Rollup preset that is oriented towards shipping libraries and produces two bundle formats:\n- `es` and `umd` (for single entry)\n- `es` and `cjs` (for multiple entries)\n\nThe formats can be configured with the [`build.lib.formats`](https://vite.dev/config/build-options#build-lib) option..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I css support in vite-guide?\n\nAssistant: To css support in vite-guide, here's what you do:\nIf your library imports any CSS, it will be bundled as a single CSS file besides the built JS files, e.g. `dist/my-lib.css`. The name defaults to `build.lib.fileName`, but can also be changed with [`build.lib.cssFileName`](https://vite.dev/config/build-options#build-lib).\n\nYou can export the CSS file in your `package.json` to be imported by users:\n\n```json\n{\n  \"name\": \"my-lib\",\n  \"type\": \"module\",\n  \"files\": [\"dist\"],\n  \"main\": \"./dist/my-lib.umd.cjs\",\n  \"module\": \"./dist/my-lib.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/my-lib.js\",\n      \"require\": \"./dist/my-lib.umd.cjs\"\n    }\n  }\n}\n``` \n\nFile Extensions\n\nIf the `package.json` does not contain `\"type\": \"module\"`, Vite will generate different file extensions for Node.js compatibility. `.js` will become `.mjs` and `.cjs` will become `.js`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environment variables in vite-guide?\n\nAssistant: To environment variables in vite-guide, here's what you do:\nIn library mode, all [`import.meta.env.*`](https://vite.dev/guide/env-and-mode) usage are statically replaced when building for production. However, `process.env.*` usage are not, so that consumers of your library can dynamically change it. If this is undesirable, you can use `define: { 'process.env.NODE_ENV': '\"production\"' }` for example to statically replace them, or use [`esm-env`](https://github.com/benmccann/esm-env) for better compatibility with bundlers and runtimes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I advanced base options in vite-guide?\n\nAssistant: To advanced base options in vite-guide, here's what you do:\nWARNING\n\nThis feature is experimental. [Give Feedback](https://github.com/vitejs/vite/discussions/13834).\n\nFor advanced use cases, the deployed assets and public files may be in different paths, for example to use different cache strategies. A user may choose to deploy in three different paths:\n- The generated entry HTML files (which may be processed during SSR)\n- The generated hashed assets (JS, CSS, and other file types like images)\n- The copied [public files](https://vite.dev/guide/assets#the-public-directory)\n\nA single static [base](https://vite.dev/guide/build#public-base-path) isn't enough in these scenarios. Vite provides experimental support for advanced base options during build, using `experimental.renderBuiltUrl`.\n\n```typescript\nexperimental: {\n  renderBuiltUrl(filename, { hostType }) {\n    if (hostType === 'js') {\n      return {\n        runtime: `window.__toCdnUrl(${JSON.stringify(filename)})`\n      }\n    } else {\n      return {\n        relative: true }\n    }\n  },\n},\n```\n\nIf the hashed assets and public files aren't deployed together, options for each group can be defined independently using asset `type` included in the second `context` param given to the function.\n\n```typescript\nexperimental: {\n  renderBuiltUrl(filename, { hostId, hostType, type }) {\n    if (type === 'public') {\n      return 'https://www.domain.com/' + filename\n    } else if (path.extname(hostId) === '.js') {\n      return {\n        runtime: `window.__assetsPath(${JSON.stringify(filename)})`\n      }\n    } else {\n      return 'https://cdn.domain.com/assets/' + filename\n    }\n  },\n},\n```\n\nNote that the `filename` passed is a decoded URL, and if the function returns a URL string, it should also be decoded. Vite will handle the encoding automatically when rendering the URLs. If an object with `runtime` is returned, encoding should be handled yourself where needed as the runtime code will be rendered as is..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Building for Production in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Customizing the Build**:\n\n```yaml\n```javascript\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      // https://rollupjs.org/configuration-options/\n    },\n  },\n})\n```\n```\n\nThis snippet shows you how to customizing the build, which is an important aspect of building for production.\n\n**Load Error Handling**:\n\n```yaml\n```javascript\nwindow.addEventListener('vite:preloadError', (event) => {\n  window.location.reload() // for example, refresh the page\n})\n```\n```\n\nThis snippet shows you how to load error handling, which is an important aspect of building for production.\n\n**Rebuild on Files Changes**:\n\n```yaml\n```javascript\nexport default defineConfig({\n  build: {\n    watch: {\n      // https://rollupjs.org/configuration-options/#watch\n    },\n  },\n})\n```\n```\n\nThis snippet shows you how to rebuild on files changes, which is an important aspect of building for production.\n\n**Multi-Page App**:\n\n```yaml\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        nested: resolve(__dirname, 'nested/index.html'),\n      },\n    },\n  },\n})\n```\n```\n\nThis snippet shows you how to multi-page app, which is an important aspect of building for production.\n\n**Library Mode (Single Entry)**:\n\n```yaml\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'lib/main.js'),\n      name: 'MyLib',\n      // the proper extensions will be added\n      fileName: 'my-lib',\n    },\n    rollupOptions: {\n      // make sure to externalize deps that shouldn't be bundled\n      // into your library\n      external: ['vue'],\n      output: {\n        // Provide global variables to use in the UMD build\n        // for externalized deps\n        globals: {\n          vue: 'Vue',\n        },\n      },\n    },\n  },\n})\n```\n```\n\nThis snippet shows you how to library mode (single entry), which is an important aspect of building for production.\n\n**Library Mode (Multiple Entries)**:\n\n```yaml\n```javascript\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: {\n        'my-lib': resolve(__dirname, 'lib/main.js'),\n        secondary: resolve(__dirname, 'lib/secondary.js'),\n      },\n      name: 'MyLib',\n    },\n    rollupOptions: {\n      // make sure to externalize deps that shouldn't be bundled\n      // into your library\n      external: ['vue'],\n      output: {\n        // Provide global variables to use in the UMD build\n        // for externalized deps\n        globals: {\n          vue: 'Vue',\n        },\n      },\n    },\n  },\n})\n```\n```\n\nThis snippet shows you how to library mode (multiple entries), which is an important aspect of building for production.\n\n**Advanced Base Options**:\n\n```yaml\n```typescript\nexperimental: {\n  renderBuiltUrl(filename, { hostType }) {\n    if (hostType === 'js') {\n      return {\n        runtime: `window.__toCdnUrl(${JSON.stringify(filename)})`\n      }\n    } else {\n      return {\n        relative: true }\n    }\n  },\n},\n```\n```\n\nThis snippet shows you how to advanced base options, which is an important aspect of building for production.\n\n", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "code_examples", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Building for Production in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck out the Deploying a Static Site guide for popular services.\n\nUse the `build.target` config option to specify custom targets for browser compatibility.\n\nFor legacy browser support, consider using the `@vitejs/plugin-legacy`.\n\nWhen using a relative base path, ensure that `import.meta` is supported in the target browsers.\n\nUse the `--watch` flag to enable automatic rebuilding on file changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/build", "title": "Building for Production", "description": "This page covers how to build a Vite application for production, including browser compatibility, public base path, customizing the build, and advanced options.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 00:56:27", "type": "best_practices", "page_metadata": {"theme-color": "#646cff", "og:title": "Building for Production", "title": "Building for Production | Vite", "ogTitle": "Building for Production", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "og:type": "website", "og:site_name": "vitejs", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "ogDescription": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "01c9b502-9ea6-42af-8027-ccd3890e5213", "sourceURL": "https://vite.dev/guide/build", "url": "https://vite.dev/guide/build", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Static Asset Handling is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Static Asset Handling in vite-guide.\n\n# Static Asset Handling\n\nThis page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.Here's a quick rundown of what this is about:\n\n## Importing Asset as URL\n\nImporting a static asset will return the resolved public URL when it is served:\n\n```js\nimport imgUrl from './img.png'\n\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nFor example, `imgUrl` will be `/src/img.png` during development, and become `/assets/img.2d8efhg.png` in the production build.\n\nThe behavior is similar to webpack's `file-loader`. The difference is that the import can be either using absolute public paths (based on project root during dev) or relative paths.\n\n- `url()` references in CSS are handled the same way.\n\n- If using the Vue plugin, asset references in Vue SFC templates are automatically converted into imports.\n\n- Common image, media, and font filetypes are detected as assets automatically. You can extend the internal list using the [`assetsInclude` option](https://vite.dev/config/shared-options#assetsinclude).\n\n- Referenced assets are included as part of the build assets graph, will get hashed file names, and can be processed by plugins for optimization.\n\n- Assets smaller in bytes than the [`assetsInlineLimit` option](https://vite.dev/config/build-options#build-assetsinlinelimit) will be inlined as base64 data URLs.\n\n- Git LFS placeholders are automatically excluded from inlining because they do not contain the content of the file they represent. To get inlining, make sure to download the file contents via Git LFS before building.\n\n- TypeScript, by default, does not recognize static asset imports as valid modules. To fix this, include [`vite/client`](https://vite.dev/guide/features#client-types).\n\n## Inlining SVGs through `url()`\n\nWhen passing a URL of SVG to a manually constructed `url()` by JS, the variable should be wrapped within double quotes.\n\n```js\nimport imgUrl from './img.svg'\n\ndocument.getElementById('hero-img').style.background = `url(\"${imgUrl}\")`\n```\n\n## Explicit URL Imports\n\nAssets that are not included in the internal list or in `assetsInclude`, can be explicitly imported as a URL using the `?url` suffix. This is useful, for example, to import [Houdini Paint Worklets](https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet_static).\n\n```js\nimport workletURL from 'extra-scalloped-border/worklet.js?url'\nCSS.paintWorklet.addModule(workletURL)\n```\n\n## Explicit Inline Handling\n\nAssets can be explicitly imported with inlining or no inlining using the `?inline` or `?no-inline` suffix respectively.\n\n```js\nimport imgUrl1 from './img.svg?no-inline'\nimport imgUrl2 from './img.png?inline'\n```\n\n## Importing Asset as String\n\nAssets can be imported as strings using the `?raw` suffix.\n\n```js\nimport shaderString from './shader.glsl?raw'\n```\n\n## Importing Script as a Worker\n\nScripts can be imported as web workers with the `?worker` or `?sharedworker` suffix.\n\n```js\n// Separate chunk in the production build\nimport Worker from './shader.js?worker'\nconst worker = new Worker()\n```\n\n```js\n// sharedworker\nimport SharedWorker from './shader.js?sharedworker'\nconst sharedWorker = new SharedWorker()\n```\n\n```js\n// Inlined as base64 strings\nimport InlineWorker from './shader.js?worker&inline'\n```\n\nCheck out the [Web Worker section](https://vite.dev/guide/features#web-workers) for more details.\n\n## The `public` Directory\n\nIf you have assets that are:\n\n- Never referenced in source code (e.g. `robots.txt`)\n- Must retain the exact same file name (without hashing)\n- ...or you simply don't want to have to import an asset first just to get its URL\n\nThen you can place the asset in a special `public` directory under your project root. Assets in this directory will be served at root path `/` during dev, and copied to the root of the dist directory as-is.\n\nThe directory defaults to `<root>/public`, but can be configured via the [`publicDir` option](https://vite.dev/config/shared-options#publicdir).\n\nNote that you should always reference `public` assets using root absolute path - for example, `public/icon.png` should be referenced in source code as `/icon.png`.\n\n## new URL(url, import.meta.url)\n\n[import.meta.url](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta) is a native ESM feature that exposes the current module's URL. Combining it with the native [URL constructor](https://developer.mozilla.org/en-US/docs/Web/API/URL), we can obtain the full, resolved URL of a static asset using relative path from a JavaScript module:\n\n```js\nconst imgUrl = new URL('./img.png', import.meta.url).href\n\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nThis works natively in modern browsers - in fact, Vite doesn't need to process this code at all during development!\n\nThis pattern also supports dynamic URLs via template literals:\n\n```js\nfunction getImageUrl(name) {\n  // note that this does not include files in subdirectories\n  return new URL(`./dir/${name}.png`, import.meta.url).href\n}\n```\n\nDuring the production build, Vite will perform necessary transforms so that the URLs still point to the correct location even after bundling and asset hashing. However, the URL string must be static so it can be analyzed, otherwise the code will be left as is, which can cause runtime errors if `build.target` does not support `import.meta.url`\n\n```js\n// Vite will not transform this\nconst imgUrl = new URL(imagePath, import.meta.url).href\n```\n\nHow it works\n\nVite will transform the `getImageUrl` function to:\n\n```js\nimport __img0png from './dir/img0.png'\nimport __img1png from './dir/img1.png'\n\nfunction getImageUrl(name) {\n  const modules = {\n    './dir/img0.png': __img0png,\n    './dir/img1.png': __img1png,\n  }\n  return new URL(modules[`./dir/${name}.png`], import.meta.url).href\n}\n```\n\nDoes not work with SSR\n\nThis pattern does not work if you are using Vite for Server-Side Rendering, because `import.meta.url` have different semantics in browsers vs. Node.js. The server bundle also cannot determine the client host URL ahead of time.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I importing asset as url in vite-guide?\n\nAssistant: To importing asset as url in vite-guide, here's what you do:\nImporting a static asset will return the resolved public URL when it is served:\n\n```js\nimport imgUrl from './img.png'\n\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nFor example, `imgUrl` will be `/src/img.png` during development, and become `/assets/img.2d8efhg.png` in the production build.\n\nThe behavior is similar to webpack's `file-loader`. The difference is that the import can be either using absolute public paths (based on project root during dev) or relative paths.\n\n- `url()` references in CSS are handled the same way.\n\n- If using the Vue plugin, asset references in Vue SFC templates are automatically converted into imports.\n\n- Common image, media, and font filetypes are detected as assets automatically. You can extend the internal list using the [`assetsInclude` option](https://vite.dev/config/shared-options#assetsinclude).\n\n- Referenced assets are included as part of the build assets graph, will get hashed file names, and can be processed by plugins for optimization.\n\n- Assets smaller in bytes than the [`assetsInlineLimit` option](https://vite.dev/config/build-options#build-assetsinlinelimit) will be inlined as base64 data URLs.\n\n- Git LFS placeholders are automatically excluded from inlining because they do not contain the content of the file they represent. To get inlining, make sure to download the file contents via Git LFS before building.\n\n- TypeScript, by default, does not recognize static asset imports as valid modules. To fix this, include [`vite/client`](https://vite.dev/guide/features#client-types)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I inlining svgs through `url()` in vite-guide?\n\nAssistant: To inlining svgs through `url()` in vite-guide, here's what you do:\nWhen passing a URL of SVG to a manually constructed `url()` by JS, the variable should be wrapped within double quotes.\n\n```js\nimport imgUrl from './img.svg'\n\ndocument.getElementById('hero-img').style.background = `url(\"${imgUrl}\")`\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I explicit url imports in vite-guide?\n\nAssistant: To explicit url imports in vite-guide, here's what you do:\nAssets that are not included in the internal list or in `assetsInclude`, can be explicitly imported as a URL using the `?url` suffix. This is useful, for example, to import [Houdini Paint Worklets](https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet_static).\n\n```js\nimport workletURL from 'extra-scalloped-border/worklet.js?url'\nCSS.paintWorklet.addModule(workletURL)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I explicit inline handling in vite-guide?\n\nAssistant: To explicit inline handling in vite-guide, here's what you do:\nAssets can be explicitly imported with inlining or no inlining using the `?inline` or `?no-inline` suffix respectively.\n\n```js\nimport imgUrl1 from './img.svg?no-inline'\nimport imgUrl2 from './img.png?inline'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I importing asset as string in vite-guide?\n\nAssistant: To importing asset as string in vite-guide, here's what you do:\nAssets can be imported as strings using the `?raw` suffix.\n\n```js\nimport shaderString from './shader.glsl?raw'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I importing script as a worker in vite-guide?\n\nAssistant: To importing script as a worker in vite-guide, here's what you do:\nScripts can be imported as web workers with the `?worker` or `?sharedworker` suffix.\n\n```js\n// Separate chunk in the production build\nimport Worker from './shader.js?worker'\nconst worker = new Worker()\n```\n\n```js\n// sharedworker\nimport SharedWorker from './shader.js?sharedworker'\nconst sharedWorker = new SharedWorker()\n```\n\n```js\n// Inlined as base64 strings\nimport InlineWorker from './shader.js?worker&inline'\n```\n\nCheck out the [Web Worker section](https://vite.dev/guide/features#web-workers) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I the `public` directory in vite-guide?\n\nAssistant: To the `public` directory in vite-guide, here's what you do:\nIf you have assets that are:\n\n- Never referenced in source code (e.g. `robots.txt`)\n- Must retain the exact same file name (without hashing)\n- ...or you simply don't want to have to import an asset first just to get its URL\n\nThen you can place the asset in a special `public` directory under your project root. Assets in this directory will be served at root path `/` during dev, and copied to the root of the dist directory as-is.\n\nThe directory defaults to `<root>/public`, but can be configured via the [`publicDir` option](https://vite.dev/config/shared-options#publicdir).\n\nNote that you should always reference `public` assets using root absolute path - for example, `public/icon.png` should be referenced in source code as `/icon.png`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I new url(url, import.meta.url) in vite-guide?\n\nAssistant: To new url(url, import.meta.url) in vite-guide, here's what you do:\n[import.meta.url](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta) is a native ESM feature that exposes the current module's URL. Combining it with the native [URL constructor](https://developer.mozilla.org/en-US/docs/Web/API/URL), we can obtain the full, resolved URL of a static asset using relative path from a JavaScript module:\n\n```js\nconst imgUrl = new URL('./img.png', import.meta.url).href\n\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nThis works natively in modern browsers - in fact, Vite doesn't need to process this code at all during development!\n\nThis pattern also supports dynamic URLs via template literals:\n\n```js\nfunction getImageUrl(name) {\n  // note that this does not include files in subdirectories\n  return new URL(`./dir/${name}.png`, import.meta.url).href\n}\n```\n\nDuring the production build, Vite will perform necessary transforms so that the URLs still point to the correct location even after bundling and asset hashing. However, the URL string must be static so it can be analyzed, otherwise the code will be left as is, which can cause runtime errors if `build.target` does not support `import.meta.url`\n\n```js\n// Vite will not transform this\nconst imgUrl = new URL(imagePath, import.meta.url).href\n```\n\nHow it works\n\nVite will transform the `getImageUrl` function to:\n\n```js\nimport __img0png from './dir/img0.png'\nimport __img1png from './dir/img1.png'\n\nfunction getImageUrl(name) {\n  const modules = {\n    './dir/img0.png': __img0png,\n    './dir/img1.png': __img1png,\n  }\n  return new URL(modules[`./dir/${name}.png`], import.meta.url).href\n}\n```\n\nDoes not work with SSR\n\nThis pattern does not work if you are using Vite for Server-Side Rendering, because `import.meta.url` have different semantics in browsers vs. Node.js. The server bundle also cannot determine the client host URL ahead of time..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Static Asset Handling in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Asset as URL**:\n\n```yaml\nimport imgUrl from './img.png'\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nThis snippet shows you how to importing asset as url, which is an important aspect of static asset handling.\n\n**Inlining SVGs through `url()`**:\n\n```yaml\nimport imgUrl from './img.svg'\ndocument.getElementById('hero-img').style.background = `url(\"${imgUrl}\")`\n```\n\nThis snippet shows you how to inlining svgs through `url()`, which is an important aspect of static asset handling.\n\n**Explicit URL Imports**:\n\n```yaml\nimport workletURL from 'extra-scalloped-border/worklet.js?url'\nCSS.paintWorklet.addModule(workletURL)\n```\n\nThis snippet shows you how to explicit url imports, which is an important aspect of static asset handling.\n\n**Explicit Inline Handling**:\n\n```yaml\nimport imgUrl1 from './img.svg?no-inline'\nimport imgUrl2 from './img.png?inline'\n```\n\nThis snippet shows you how to explicit inline handling, which is an important aspect of static asset handling.\n\n**Importing Asset as String**:\n\n```yaml\nimport shaderString from './shader.glsl?raw'\n```\n\nThis snippet shows you how to importing asset as string, which is an important aspect of static asset handling.\n\n**Importing Script as a Worker**:\n\n```yaml\n// Separate chunk in the production build\nimport Worker from './shader.js?worker'\nconst worker = new Worker()\n```\n\nThis snippet shows you how to importing script as a worker, which is an important aspect of static asset handling.\n\n**Importing Script as a Shared Worker**:\n\n```yaml\n// sharedworker\nimport SharedWorker from './shader.js?sharedworker'\nconst sharedWorker = new SharedWorker()\n```\n\nThis snippet shows you how to importing script as a shared worker, which is an important aspect of static asset handling.\n\n**Importing Script as an Inline Worker**:\n\n```yaml\n// Inlined as base64 strings\nimport InlineWorker from './shader.js?worker&inline'\n```\n\nThis snippet shows you how to importing script as an inline worker, which is an important aspect of static asset handling.\n\n**Using new URL with import.meta.url**:\n\n```yaml\nconst imgUrl = new URL('./img.png', import.meta.url).href\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nThis snippet shows you how to using new url with import.meta.url, which is an important aspect of static asset handling.\n\n**Dynamic URL Function**:\n\n```yaml\nfunction getImageUrl(name) {\n  return new URL(`./dir/${name}.png`, import.meta.url).href\n}\n```\n\nThis snippet shows you how to dynamic url function, which is an important aspect of static asset handling.\n\n", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Static Asset Handling in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways reference public assets using root absolute path.\n\nUse the `?url` suffix for explicit URL imports.\n\nUse the `?inline` or `?no-inline` suffix for explicit inline handling.\n\nUse the `?raw` suffix to import assets as strings.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/assets", "title": "Static Asset Handling", "description": "This page covers how to handle static assets in Vite, including importing assets as URLs, inlining, and using the public directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:57:15", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Static Asset Handling", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Static Asset Handling", "og:url": "https://vite.dev", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "twitter:site": "@vite_js", "og:type": "website", "description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "title": "Static Asset Handling | Vite", "scrapeId": "f964d038-44a9-45eb-9a47-de81fb70e43f", "sourceURL": "https://vite.dev/guide/assets", "url": "https://vite.dev/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Project Philosophy is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Project Philosophy in vite-guide.\n\n# Project Philosophy\n\nThis page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.Here's a quick rundown of what this is about:\n\n## Lean Extendable Core\n\nVite doesn't intend to cover every use case for every user. Vite aims to support the most common patterns to build Web apps out-of-the-box, but Vite core must remain lean with a small API surface to keep the project maintainable long-term. This goal is possible thanks to Vite's rollup-based plugin system. Features that can be implemented as external plugins will generally not be added to Vite core. vite-plugin-pwa is a great example of what can be achieved out of Vite core, and there are a lot of well maintained plugins to cover your needs. Vite works closely with the Rollup project to ensure that plugins can be used in both plain-rollup and Vite projects as much as possible, trying to push needed extensions to the Plugin API upstream when possible.\n\n## Pushing the Modern Web\n\nVite provides opinionated features that push writing modern code. For example:\n\n- The source code can only be written in ESM, where non-ESM dependencies need to be pre-bundled as ESM in order to work.\n- Web workers are encouraged to be written with the `new Worker` syntax to follow modern standards.\n- Node.js modules cannot be used in the browser.\n\nWhen adding new features, these patterns are followed to create a future-proof API, which may not always be compatible with other build tools.\n\n## A Pragmatic Approach to Performance\n\nVite has been focused on performance since its origins. Its dev server architecture allows HMR that stays fast as projects scale. Vite uses native tools like esbuild and SWC to implement intensive tasks but keeps the rest of the code in JS to balance speed with flexibility. When needed, framework plugins will tap into Babel to compile user code. And during build time Vite currently uses Rollup where bundling size and having access to a wide ecosystem of plugins are more important than raw speed. Vite will continue to evolve internally, using new libraries as they appear to improve DX while keeping its API stable.\n\n## Building Frameworks on Top of Vite\n\nAlthough Vite can be used by users directly, it shines as a tool to create frameworks. Vite core is framework agnostic, but there are polished plugins for each UI framework. Its JS API allows App Framework authors to use Vite features to create tailored experiences for their users. Vite includes support for SSR primitives, usually present in higher-level tools but fundamental to building modern web frameworks. And Vite plugins complete the picture by offering a way to share between frameworks. Vite is also a great fit when paired with Backend frameworks like Ruby and Laravel.\n\n## An Active Ecosystem\n\nVite evolution is a cooperation between framework and plugin maintainers, users, and the Vite team. We encourage active participation in Vite's Core development once a project adopts Vite. We work closely with the main projects in the ecosystem to minimize regressions on each release, aided by tools like vite-ecosystem-ci. It allows us to run the CI of major projects using Vite on selected PRs and gives us a clear status of how the Ecosystem would react to a release. We strive to fix regressions before they hit users and allow projects to update to the next versions as soon as they are released. If you are working with Vite, we invite you to join Vite's Discord and get involved in the project too.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "overview", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I lean extendable core in vite-guide?\n\nAssistant: To lean extendable core in vite-guide, here's what you do:\nVite doesn't intend to cover every use case for every user. Vite aims to support the most common patterns to build Web apps out-of-the-box, but Vite core must remain lean with a small API surface to keep the project maintainable long-term. This goal is possible thanks to Vite's rollup-based plugin system. Features that can be implemented as external plugins will generally not be added to Vite core. vite-plugin-pwa is a great example of what can be achieved out of Vite core, and there are a lot of well maintained plugins to cover your needs. Vite works closely with the Rollup project to ensure that plugins can be used in both plain-rollup and Vite projects as much as possible, trying to push needed extensions to the Plugin API upstream when possible..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I pushing the modern web in vite-guide?\n\nAssistant: To pushing the modern web in vite-guide, here's what you do:\nVite provides opinionated features that push writing modern code. For example:\n\n- The source code can only be written in ESM, where non-ESM dependencies need to be pre-bundled as ESM in order to work.\n- Web workers are encouraged to be written with the `new Worker` syntax to follow modern standards.\n- Node.js modules cannot be used in the browser.\n\nWhen adding new features, these patterns are followed to create a future-proof API, which may not always be compatible with other build tools..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I a pragmatic approach to performance in vite-guide?\n\nAssistant: To a pragmatic approach to performance in vite-guide, here's what you do:\nVite has been focused on performance since its origins. Its dev server architecture allows HMR that stays fast as projects scale. Vite uses native tools like esbuild and SWC to implement intensive tasks but keeps the rest of the code in JS to balance speed with flexibility. When needed, framework plugins will tap into Babel to compile user code. And during build time Vite currently uses Rollup where bundling size and having access to a wide ecosystem of plugins are more important than raw speed. Vite will continue to evolve internally, using new libraries as they appear to improve DX while keeping its API stable..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I building frameworks on top of vite in vite-guide?\n\nAssistant: To building frameworks on top of vite in vite-guide, here's what you do:\nAlthough Vite can be used by users directly, it shines as a tool to create frameworks. Vite core is framework agnostic, but there are polished plugins for each UI framework. Its JS API allows App Framework authors to use Vite features to create tailored experiences for their users. Vite includes support for SSR primitives, usually present in higher-level tools but fundamental to building modern web frameworks. And Vite plugins complete the picture by offering a way to share between frameworks. Vite is also a great fit when paired with Backend frameworks like Ruby and Laravel..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I an active ecosystem in vite-guide?\n\nAssistant: To an active ecosystem in vite-guide, here's what you do:\nVite evolution is a cooperation between framework and plugin maintainers, users, and the Vite team. We encourage active participation in Vite's Core development once a project adopts Vite. We work closely with the main projects in the ecosystem to minimize regressions on each release, aided by tools like vite-ecosystem-ci. It allows us to run the CI of major projects using Vite on selected PRs and gives us a clear status of how the Ecosystem would react to a release. We strive to fix regressions before they hit users and allow projects to update to the next versions as soon as they are released. If you are working with Vite, we invite you to join Vite's Discord and get involved in the project too..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Project Philosophy in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVite aims to support the most common patterns to build Web apps out-of-the-box.\n\nFeatures that can be implemented as external plugins will generally not be added to Vite core.\n\nVite provides opinionated features that push writing modern code.\n\nWhen adding new features, follow patterns to create a future-proof API.\n\nVite uses native tools like esbuild and SWC to implement intensive tasks.\n\nVite includes support for SSR primitives, usually present in higher-level tools.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/philosophy", "title": "Project Philosophy", "description": "This page covers the philosophy behind Vite, including its core principles, performance focus, and ecosystem involvement.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:57:28", "type": "best_practices", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Project Philosophy", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:title": "Project Philosophy", "title": "Project Philosophy | Vite", "language": "en-US", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "scrapeId": "afe49cbe-cd8b-42f7-ac01-085ee4c1ed57", "sourceURL": "https://vite.dev/guide/philosophy", "url": "https://vite.dev/guide/philosophy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Why Vite is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Why Vite in vite-guide.\n\n# Why Vite\n\nThis page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.Here's a quick rundown of what this is about:\n\n## The Problems\n\nBefore ES modules were available in browsers, developers had no native mechanism for authoring JavaScript in a modularized fashion. This is why we are all familiar with the concept of \"bundling\": using tools that crawl, process and concatenate our source modules into files that can run in the browser.\n\nOver time we have seen tools like webpack, Rollup and Parcel, which greatly improved the development experience for frontend developers.\n\nHowever, as we build more and more ambitious applications, the amount of JavaScript we are dealing with is also increasing dramatically. It is not uncommon for large scale projects to contain thousands of modules. We are starting to hit a performance bottleneck for JavaScript based tooling: it can often take an unreasonably long wait (sometimes up to minutes!) to spin up a dev server, and even with Hot Module Replacement (HMR), file edits can take a couple of seconds to be reflected in the browser. The slow feedback loop can greatly affect developers' productivity and happiness.\n\nVite aims to address these issues by leveraging new advancements in the ecosystem: the availability of native ES modules in the browser, and the rise of JavaScript tools written in compile-to-native languages.\n\n## Slow Server Start\n\nWhen cold-starting the dev server, a bundler-based build setup has to eagerly crawl and build your entire application before it can be served.\n\nVite improves the dev server start time by first dividing the modules in an application into two categories: dependencies and source code.\n\n- Dependencies are mostly plain JavaScript that do not change often during development. Some large dependencies (e.g. component libraries with hundreds of modules) are also quite expensive to process. Dependencies may also be shipped in various module formats (e.g. ESM or CommonJS).\n\nVite pre-bundles dependencies using esbuild. esbuild is written in Go and pre-bundles dependencies 10-100x faster than JavaScript-based bundlers.\n\n- Source code often contains non-plain JavaScript that needs transforming (e.g. JSX, CSS or Vue/Svelte components), and will be edited very often. Also, not all source code needs to be loaded at the same time (e.g. with route-based code-splitting).\n\nVite serves source code over native ESM. This is essentially letting the browser take over part of the job of a bundler: Vite only needs to transform and serve source code on demand, as the browser requests it. Code behind conditional dynamic imports is only processed if actually used on the current screen.\n\n## Slow Updates\n\nWhen a file is edited in a bundler-based build setup, it is inefficient to rebuild the whole bundle for an obvious reason: the update speed will degrade linearly with the size of the app.\n\nIn some bundlers, the dev server runs the bundling in memory so that it only needs to invalidate part of its module graph when a file changes, but it still needs to re-construct the entire bundle and reload the web page. Reconstructing the bundle can be expensive, and reloading the page blows away the current state of the application. This is why some bundlers support Hot Module Replacement (HMR): allowing a module to \"hot replace\" itself without affecting the rest of the page. This greatly improves DX - however, in practice we've found that even HMR update speed deteriorates significantly as the size of the application grows.\n\nIn Vite, HMR is performed over native ESM. When a file is edited, Vite only needs to precisely invalidate the chain between the edited module and its closest HMR boundary (most of the time only the module itself), making HMR updates consistently fast regardless of the size of your application.\n\nVite also leverages HTTP headers to speed up full page reloads (again, let the browser do more work for us): source code module requests are made conditional via `304 Not Modified`, and dependency module requests are strongly cached via `Cache-Control: max-age=31536000,immutable` so they don't hit the server again once cached.\n\nOnce you experience how fast Vite is, we highly doubt you'd be willing to put up with bundled development again.\n\n## Why Bundle for Production\n\nEven though native ESM is now widely supported, shipping unbundled ESM in production is still inefficient (even with HTTP/2) due to the additional network round trips caused by nested imports. To get the optimal loading performance in production, it is still better to bundle your code with tree-shaking, lazy-loading and common chunk splitting (for better caching).\n\nEnsuring optimal output and behavioral consistency between the dev server and the production build isn't easy. This is why Vite ships with a pre-configured build command that bakes in many performance optimizations out of the box.\n\n## Why Not Bundle with esbuild?\n\nWhile Vite leverages esbuild to pre-bundle some dependencies in dev, Vite does not use esbuild as a bundler for production builds.\n\nVite's current plugin API isn't compatible with using esbuild as a bundler. In spite of esbuild being faster, Vite's adoption of Rollup's flexible plugin API and infrastructure heavily contributed to its success in the ecosystem. For the time being, we believe that Rollup offers a better performance-vs-flexibility tradeoff.\n\nRollup has also been working on performance improvements, switching its parser to SWC in v4. And there is an ongoing effort to build a Rust-port of Rollup called Rolldown. Once Rolldown is ready, it could replace both Rollup and esbuild in Vite, improving build performance significantly and removing inconsistencies between development and build. You can watch Evan You's ViteConf 2023 keynote for more details.\n\n## How Vite Relates to Other Unbundled Build Tools?\n\nWMR by the Preact team looked to provide a similar feature set. Vite's universal Rollup plugin API for dev and build was inspired by it. WMR is no longer maintained. The Preact team now recommends Vite with @preactjs/preset-vite.\n\nSnowpack was also a no-bundle native ESM dev server, very similar in scope to Vite. Vite's dependency pre-bundling is also inspired by Snowpack v1 (now esinstall). Snowpack is no longer being maintained. The Snowpack team is now working on Astro, a static site builder powered by Vite.\n\n@web/dev-server (previously es-dev-server) is a great project and Vite 1.0's Koa-based server setup was inspired by it. The @web umbrella project is actively maintained and contains many other excellent tools that may benefit Vite users as well.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "overview", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I the problems in vite-guide?\n\nAssistant: To the problems in vite-guide, here's what you do:\nBefore ES modules were available in browsers, developers had no native mechanism for authoring JavaScript in a modularized fashion. This is why we are all familiar with the concept of \"bundling\": using tools that crawl, process and concatenate our source modules into files that can run in the browser.\n\nOver time we have seen tools like webpack, Rollup and Parcel, which greatly improved the development experience for frontend developers.\n\nHowever, as we build more and more ambitious applications, the amount of JavaScript we are dealing with is also increasing dramatically. It is not uncommon for large scale projects to contain thousands of modules. We are starting to hit a performance bottleneck for JavaScript based tooling: it can often take an unreasonably long wait (sometimes up to minutes!) to spin up a dev server, and even with Hot Module Replacement (HMR), file edits can take a couple of seconds to be reflected in the browser. The slow feedback loop can greatly affect developers' productivity and happiness.\n\nVite aims to address these issues by leveraging new advancements in the ecosystem: the availability of native ES modules in the browser, and the rise of JavaScript tools written in compile-to-native languages..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I slow server start in vite-guide?\n\nAssistant: To slow server start in vite-guide, here's what you do:\nWhen cold-starting the dev server, a bundler-based build setup has to eagerly crawl and build your entire application before it can be served.\n\nVite improves the dev server start time by first dividing the modules in an application into two categories: dependencies and source code.\n\n- Dependencies are mostly plain JavaScript that do not change often during development. Some large dependencies (e.g. component libraries with hundreds of modules) are also quite expensive to process. Dependencies may also be shipped in various module formats (e.g. ESM or CommonJS).\n\nVite pre-bundles dependencies using esbuild. esbuild is written in Go and pre-bundles dependencies 10-100x faster than JavaScript-based bundlers.\n\n- Source code often contains non-plain JavaScript that needs transforming (e.g. JSX, CSS or Vue/Svelte components), and will be edited very often. Also, not all source code needs to be loaded at the same time (e.g. with route-based code-splitting).\n\nVite serves source code over native ESM. This is essentially letting the browser take over part of the job of a bundler: Vite only needs to transform and serve source code on demand, as the browser requests it. Code behind conditional dynamic imports is only processed if actually used on the current screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I slow updates in vite-guide?\n\nAssistant: To slow updates in vite-guide, here's what you do:\nWhen a file is edited in a bundler-based build setup, it is inefficient to rebuild the whole bundle for an obvious reason: the update speed will degrade linearly with the size of the app.\n\nIn some bundlers, the dev server runs the bundling in memory so that it only needs to invalidate part of its module graph when a file changes, but it still needs to re-construct the entire bundle and reload the web page. Reconstructing the bundle can be expensive, and reloading the page blows away the current state of the application. This is why some bundlers support Hot Module Replacement (HMR): allowing a module to \"hot replace\" itself without affecting the rest of the page. This greatly improves DX - however, in practice we've found that even HMR update speed deteriorates significantly as the size of the application grows.\n\nIn Vite, HMR is performed over native ESM. When a file is edited, Vite only needs to precisely invalidate the chain between the edited module and its closest HMR boundary (most of the time only the module itself), making HMR updates consistently fast regardless of the size of your application.\n\nVite also leverages HTTP headers to speed up full page reloads (again, let the browser do more work for us): source code module requests are made conditional via `304 Not Modified`, and dependency module requests are strongly cached via `Cache-Control: max-age=31536000,immutable` so they don't hit the server again once cached.\n\nOnce you experience how fast Vite is, we highly doubt you'd be willing to put up with bundled development again..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I why bundle for production in vite-guide?\n\nAssistant: To why bundle for production in vite-guide, here's what you do:\nEven though native ESM is now widely supported, shipping unbundled ESM in production is still inefficient (even with HTTP/2) due to the additional network round trips caused by nested imports. To get the optimal loading performance in production, it is still better to bundle your code with tree-shaking, lazy-loading and common chunk splitting (for better caching).\n\nEnsuring optimal output and behavioral consistency between the dev server and the production build isn't easy. This is why Vite ships with a pre-configured build command that bakes in many performance optimizations out of the box..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I why not bundle with esbuild? in vite-guide?\n\nAssistant: To why not bundle with esbuild? in vite-guide, here's what you do:\nWhile Vite leverages esbuild to pre-bundle some dependencies in dev, Vite does not use esbuild as a bundler for production builds.\n\nVite's current plugin API isn't compatible with using esbuild as a bundler. In spite of esbuild being faster, Vite's adoption of Rollup's flexible plugin API and infrastructure heavily contributed to its success in the ecosystem. For the time being, we believe that Rollup offers a better performance-vs-flexibility tradeoff.\n\nRollup has also been working on performance improvements, switching its parser to SWC in v4. And there is an ongoing effort to build a Rust-port of Rollup called Rolldown. Once Rolldown is ready, it could replace both Rollup and esbuild in Vite, improving build performance significantly and removing inconsistencies between development and build. You can watch Evan You's ViteConf 2023 keynote for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I how vite relates to other unbundled build tools? in vite-guide?\n\nAssistant: To how vite relates to other unbundled build tools? in vite-guide, here's what you do:\nWMR by the Preact team looked to provide a similar feature set. Vite's universal Rollup plugin API for dev and build was inspired by it. WMR is no longer maintained. The Preact team now recommends Vite with @preactjs/preset-vite.\n\nSnowpack was also a no-bundle native ESM dev server, very similar in scope to Vite. Vite's dependency pre-bundling is also inspired by Snowpack v1 (now esinstall). Snowpack is no longer being maintained. The Snowpack team is now working on Astro, a static site builder powered by Vite.\n\n@web/dev-server (previously es-dev-server) is a great project and Vite 1.0's Koa-based server setup was inspired by it. The @web umbrella project is actively maintained and contains many other excellent tools that may benefit Vite users as well..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Why Vite in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVite pre-bundles dependencies using esbuild for faster performance.\n\nLeverage native ESM for serving source code on demand.\n\nUtilize HTTP headers to speed up full page reloads.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/why", "title": "Why Vite", "description": "This page discusses the problems with traditional bundling tools and how Vite addresses these issues by leveraging native ES modules and other advancements.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:57:44", "type": "best_practices", "page_metadata": {"ogSiteName": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:type": "website", "og:image": "https://vite.dev/og-image.jpg", "language": "en-US", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "title": "Why Vite | Vite", "ogTitle": "Why Vite", "og:title": "Why Vite", "scrapeId": "d07ff2ef-75a8-45db-9a28-42dce5ea3561", "sourceURL": "https://vite.dev/guide/why", "url": "https://vite.dev/guide/why", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Server-Side Rendering (SSR) is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Server-Side Rendering (SSR) in vite-guide.\n\n# Server-Side Rendering (SSR)\n\nThis page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.Here's a quick rundown of what this is about:\n\n## Note\n\nSSR specifically refers to front-end frameworks (for example React, Preact, Vue, and Svelte) that support running the same application in Node.js, pre-rendering it to HTML, and finally hydrating it on the client. If you are looking for integration with traditional server-side frameworks, check out the Backend Integration guide instead. The following guide also assumes prior experience working with SSR in your framework of choice, and will only focus on Vite-specific integration details.\n\n## Low-level API\n\nThis is a low-level API meant for library and framework authors. If your goal is to create an application, make sure to check out the higher-level SSR plugins and tools at Awesome Vite SSR section first. That said, many applications are successfully built directly on top of Vite's native low-level API. Currently, Vite is working on an improved SSR API with the Environment API. Check out the link for more details.\n\n## Example Projects\n\nVite provides built-in support for server-side rendering (SSR). create-vite-extra contains example SSR setups you can use as references for this guide:\n\n- Vanilla\n- Vue\n- React\n- Preact\n- Svelte\n- Solid\n\nYou can also scaffold these projects locally by running create-vite and choose 'Others > create-vite-extra' under the framework option.\n\n## Source Structure\n\nA typical SSR application will have the following source file structure:\n\n```\n- index.html\n- server.js # main application server\n- src/\n  - main.js          # exports env-agnostic (universal) app code\n  - entry-client.js  # mounts the app to a DOM element\n  - entry-server.js  # renders the app using the framework's SSR API\n```\n\nThe `index.html` will need to reference `entry-client.js` and include a placeholder where the server-rendered markup should be injected:\n\nindex.html\n\n```\n<div id=\"app\"><!--ssr-outlet--></div>\n<script type=\"module\" src=\"/src/entry-client.js\"></script>\n```\n\n## Conditional Logic\n\nIf you need to perform conditional logic based on SSR vs. client, you can use\n\n```\nif (import.meta.env.SSR) {\n  // ... server only logic\n}\n```\n\nThis is statically replaced during build so it will allow tree-shaking of unused branches.\n\n## Setting Up the Dev Server\n\nWhen building an SSR app, you likely want to have full control over your main server and decouple Vite from the production environment. It is therefore recommended to use Vite in middleware mode. Here is an example with express (v4):\n\nserver.js\n\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport express from 'express'\nimport { createServer as createViteServer } from 'vite'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nasync function createServer() {\n  const app = express()\n\n  const vite = await createViteServer({\n    server: { middlewareMode: true },\n    appType: 'custom'\n  })\n\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res) => {\n    // serve index.html - we will tackle this next\n  })\n\n  app.listen(5173)\n}\n\ncreateServer()\n```\n\nHere `vite` is an instance of ViteDevServer. `vite.middlewares` is a Connect instance which can be used as a middleware in any connect-compatible Node.js framework.\n\n## Building for Production\n\nTo ship an SSR project for production, we need to:\n\n1. Produce a client build as normal;\n2. Produce an SSR build, which can be directly loaded via `import()` so that we don't have to go through Vite's `ssrLoadModule`;\n\nOur scripts in `package.json` will look like this:\n\npackage.json\n\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server\",\n    \"build:client\": \"vite build --outDir dist/client\",\n    \"build:server\": \"vite build --outDir dist/server --ssr src/entry-server.js\"\n  }\n}\n```\n\nNote the `--ssr` flag which indicates this is an SSR build. It should also specify the SSR entry.\n\n## Generating Preload Directives\n\n`vite build` supports the `--ssrManifest` flag which will generate `.vite/ssr-manifest.json` in build output directory:\n\n```\n- \"build:client\": \"vite build --outDir dist/client\",\n+ \"build:client\": \"vite build --outDir dist/client --ssrManifest\",\n```\n\nThe above script will now generate `dist/client/.vite/ssr-manifest.json` for the client build. The manifest contains mappings of module IDs to their associated chunks and asset files.\n\n## Pre-Rendering / SSG\n\nIf the routes and the data needed for certain routes are known ahead of time, we can pre-render these routes into static HTML using the same logic as production SSR.\n\n## SSR Externals\n\nDependencies are \"externalized\" from Vite's SSR transform module system by default when running SSR. If a dependency needs to be transformed by Vite's pipeline, they can be added to `ssr.noExternal`.\n\n## SSR-specific Plugin Logic\n\nSome frameworks such as Vue or Svelte compile components into different formats based on client vs. SSR. To support conditional transforms, Vite passes an additional `ssr` property in the `options` object of the following plugin hooks:\n\n- `resolveId`\n- `load`\n- `transform`.\n\n## SSR Target\n\nThe default target for the SSR build is a node environment, but you can also run the server in a Web Worker.\n\n## SSR Bundle\n\nIn some cases like `webworker` runtimes, you might want to bundle your SSR build into a single JavaScript file. You can enable this behavior by setting `ssr.noExternal` to `true`.\n\n## SSR Resolve Conditions\n\nBy default package entry resolution will use the conditions set in `resolve.conditions` for the SSR build.\n\n## Vite CLI\n\nThe CLI commands `$ vite dev` and `$ vite preview` can also be used for SSR apps.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "overview", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I note in vite-guide?\n\nAssistant: To note in vite-guide, here's what you do:\nSSR specifically refers to front-end frameworks (for example React, Preact, Vue, and Svelte) that support running the same application in Node.js, pre-rendering it to HTML, and finally hydrating it on the client. If you are looking for integration with traditional server-side frameworks, check out the Backend Integration guide instead. The following guide also assumes prior experience working with SSR in your framework of choice, and will only focus on Vite-specific integration details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I low-level api in vite-guide?\n\nAssistant: To low-level api in vite-guide, here's what you do:\nThis is a low-level API meant for library and framework authors. If your goal is to create an application, make sure to check out the higher-level SSR plugins and tools at Awesome Vite SSR section first. That said, many applications are successfully built directly on top of Vite's native low-level API. Currently, Vite is working on an improved SSR API with the Environment API. Check out the link for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I example projects in vite-guide?\n\nAssistant: To example projects in vite-guide, here's what you do:\nVite provides built-in support for server-side rendering (SSR). create-vite-extra contains example SSR setups you can use as references for this guide:\n\n- Vanilla\n- Vue\n- React\n- Preact\n- Svelte\n- Solid\n\nYou can also scaffold these projects locally by running create-vite and choose 'Others > create-vite-extra' under the framework option..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I source structure in vite-guide?\n\nAssistant: To source structure in vite-guide, here's what you do:\nA typical SSR application will have the following source file structure:\n\n```\n- index.html\n- server.js # main application server\n- src/\n  - main.js          # exports env-agnostic (universal) app code\n  - entry-client.js  # mounts the app to a DOM element\n  - entry-server.js  # renders the app using the framework's SSR API\n```\n\nThe `index.html` will need to reference `entry-client.js` and include a placeholder where the server-rendered markup should be injected:\n\nindex.html\n\n```\n<div id=\"app\"><!--ssr-outlet--></div>\n<script type=\"module\" src=\"/src/entry-client.js\"></script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I conditional logic in vite-guide?\n\nAssistant: To conditional logic in vite-guide, here's what you do:\nIf you need to perform conditional logic based on SSR vs. client, you can use\n\n```\nif (import.meta.env.SSR) {\n  // ... server only logic\n}\n```\n\nThis is statically replaced during build so it will allow tree-shaking of unused branches..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I setting up the dev server in vite-guide?\n\nAssistant: To setting up the dev server in vite-guide, here's what you do:\nWhen building an SSR app, you likely want to have full control over your main server and decouple Vite from the production environment. It is therefore recommended to use Vite in middleware mode. Here is an example with express (v4):\n\nserver.js\n\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport express from 'express'\nimport { createServer as createViteServer } from 'vite'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nasync function createServer() {\n  const app = express()\n\n  const vite = await createViteServer({\n    server: { middlewareMode: true },\n    appType: 'custom'\n  })\n\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res) => {\n    // serve index.html - we will tackle this next\n  })\n\n  app.listen(5173)\n}\n\ncreateServer()\n```\n\nHere `vite` is an instance of ViteDevServer. `vite.middlewares` is a Connect instance which can be used as a middleware in any connect-compatible Node.js framework..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I building for production in vite-guide?\n\nAssistant: To building for production in vite-guide, here's what you do:\nTo ship an SSR project for production, we need to:\n\n1. Produce a client build as normal;\n2. Produce an SSR build, which can be directly loaded via `import()` so that we don't have to go through Vite's `ssrLoadModule`;\n\nOur scripts in `package.json` will look like this:\n\npackage.json\n\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server\",\n    \"build:client\": \"vite build --outDir dist/client\",\n    \"build:server\": \"vite build --outDir dist/server --ssr src/entry-server.js\"\n  }\n}\n```\n\nNote the `--ssr` flag which indicates this is an SSR build. It should also specify the SSR entry..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I generating preload directives in vite-guide?\n\nAssistant: To generating preload directives in vite-guide, here's what you do:\n`vite build` supports the `--ssrManifest` flag which will generate `.vite/ssr-manifest.json` in build output directory:\n\n```\n- \"build:client\": \"vite build --outDir dist/client\",\n+ \"build:client\": \"vite build --outDir dist/client --ssrManifest\",\n```\n\nThe above script will now generate `dist/client/.vite/ssr-manifest.json` for the client build. The manifest contains mappings of module IDs to their associated chunks and asset files..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I pre-rendering / ssg in vite-guide?\n\nAssistant: To pre-rendering / ssg in vite-guide, here's what you do:\nIf the routes and the data needed for certain routes are known ahead of time, we can pre-render these routes into static HTML using the same logic as production SSR..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I ssr externals in vite-guide?\n\nAssistant: To ssr externals in vite-guide, here's what you do:\nDependencies are \"externalized\" from Vite's SSR transform module system by default when running SSR. If a dependency needs to be transformed by Vite's pipeline, they can be added to `ssr.noExternal`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I ssr-specific plugin logic in vite-guide?\n\nAssistant: To ssr-specific plugin logic in vite-guide, here's what you do:\nSome frameworks such as Vue or Svelte compile components into different formats based on client vs. SSR. To support conditional transforms, Vite passes an additional `ssr` property in the `options` object of the following plugin hooks:\n\n- `resolveId`\n- `load`\n- `transform`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I ssr target in vite-guide?\n\nAssistant: To ssr target in vite-guide, here's what you do:\nThe default target for the SSR build is a node environment, but you can also run the server in a Web Worker..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I ssr bundle in vite-guide?\n\nAssistant: To ssr bundle in vite-guide, here's what you do:\nIn some cases like `webworker` runtimes, you might want to bundle your SSR build into a single JavaScript file. You can enable this behavior by setting `ssr.noExternal` to `true`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I ssr resolve conditions in vite-guide?\n\nAssistant: To ssr resolve conditions in vite-guide, here's what you do:\nBy default package entry resolution will use the conditions set in `resolve.conditions` for the SSR build..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I vite cli in vite-guide?\n\nAssistant: To vite cli in vite-guide, here's what you do:\nThe CLI commands `$ vite dev` and `$ vite preview` can also be used for SSR apps..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Server-Side Rendering (SSR) in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of index.html**:\n\n```yaml\n<div id=\"app\"><!--ssr-outlet--></div>\n<script type=\"module\" src=\"/src/entry-client.js\"></script>\n```\n\nThis snippet shows you how to example of index.html, which is an important aspect of server-side rendering (ssr).\n\n**Example of Conditional Logic**:\n\n```yaml\nif (import.meta.env.SSR) {\n  // ... server only logic\n}\n```\n\nThis snippet shows you how to example of conditional logic, which is an important aspect of server-side rendering (ssr).\n\n", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "code_examples", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Server-Side Rendering (SSR) in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Vite in middleware mode for full control over your main server.\n\nChange the `dev` script in `package.json` to use the server script instead of Vite directly for SSR applications.\n\nUtilize the `--ssrManifest` flag to generate a manifest for preload directives.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/ssr", "title": "Server-Side Rendering (SSR)", "description": "This page covers the integration of server-side rendering (SSR) with Vite, including low-level API details, example projects, source structure, and best practices for setting up and building SSR applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:01:22", "type": "best_practices", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "title": "Server-Side Rendering (SSR) | Vite", "og:type": "website", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "og:image": "https://vite.dev/og-image.jpg", "favicon": "https://vite.dev/logo.svg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogSiteName": "vitejs", "language": "en-US", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "twitter:site": "@vite_js", "ogTitle": "Server-Side Rendering (SSR)", "description": "Next Generation Frontend Tooling", "ogDescription": "Next Generation Frontend Tooling", "og:title": "Server-Side Rendering (SSR)", "scrapeId": "0e28fe72-7f01-4000-b907-e0e77c8ea3c2", "sourceURL": "https://vite.dev/guide/ssr", "url": "https://vite.dev/guide/ssr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Performance is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Performance in vite-guide.\n\n# Performance\n\nThis guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.Here's a quick rundown of what this is about:\n\n## Review your Browser Setup\n\nSome browser extensions may interfere with requests and slow down startup and reload times for large apps, especially when using browser dev tools. We recommend creating a dev-only profile without extensions, or switch to incognito mode, while using Vite's dev server in these cases. Incognito mode should also be faster than a regular profile without extensions.\n\nThe Vite dev server does hard caching of pre-bundled dependencies and implements fast 304 responses for source code. Disabling the cache while the Browser Dev Tools are open can have a big impact on startup and full-page reload times. Please check that \"Disable Cache\" isn't enabled while you work with the Vite server.\n\n## Audit Configured Vite Plugins\n\nVite's internal and official plugins are optimized to do the least amount of work possible while providing compatibility with the broader ecosystem. For example, code transformations use regex in dev, but do a complete parse in build to ensure correctness.\n\nHowever, the performance of community plugins is out of Vite's control, which may affect the developer experience. Here are a few things you can look out for when using additional Vite plugins:\n\n1. Large dependencies that are only used in certain cases should be dynamically imported to reduce the Node.js startup time. Example refactors: vite-plugin-react#212 and vite-plugin-pwa#224.\n\n2. The buildStart, config, and configResolved hooks should not run long and extensive operations. These hooks are awaited during dev server startup, which delays when you can access the site in the browser.\n\n3. The resolveId, load, and transform hooks may cause some files to load slower than others. While sometimes unavoidable, it's still worth checking for possible areas to optimize. For example, checking if the code contains a specific keyword, or the id matches a specific extension, before doing the full transformation.\n\nThe longer it takes to transform a file, the more significant the request waterfall will be when loading the site in the browser.\n\nYou can inspect the duration it takes to transform a file using vite --debug plugin-transform or vite-plugin-inspect. Note that as asynchronous operations tend to provide inaccurate timings, you should treat the numbers as a rough estimate, but it should still reveal the more expensive operations.\n\nProfiling\n\nYou can run vite --profile, visit the site, and press p + enter in your terminal to record a .cpuprofile. A tool like speedscope can then be used to inspect the profile and identify the bottlenecks. You can also share the profiles with the Vite team to help us identify performance issues.\n\n## Reduce Resolve Operations\n\nResolving import paths can be an expensive operation when hitting its worst case often. For example, Vite supports \"guessing\" import paths with the resolve.extensions option, which defaults to ['.mjs', '.js', '.mts', '.ts', '.jsx', '.tsx', '.json'].\n\nWhen you try to import ./Component.jsx with import './Component', Vite will run these steps to resolve it:\n\n1. Check if ./Component exists, no.\n2. Check if ./Component.mjs exists, no.\n3. Check if ./Component.js exists, no.\n4. Check if ./Component.mts exists, no.\n5. Check if ./Component.ts exists, no.\n6. Check if ./Component.jsx exists, yes!\n\nAs shown, a total of 6 filesystem checks is required to resolve an import path. The more implicit imports you have, the more time it adds up to resolve the paths.\n\nHence, it's usually better to be explicit with your import paths, e.g. import './Component.jsx'. You can also narrow down the list for resolve.extensions to reduce the general filesystem checks, but you have to make sure it works for files in node_modules too.\n\nIf you're a plugin author, make sure to only call this.resolve when needed to reduce the number of checks above.\n\nTypeScript\n\nIf you are using TypeScript, enable \"moduleResolution\": \"bundler\" and \"allowImportingTsExtensions\": true in your tsconfig.json's compilerOptions to use .ts and .tsx extensions directly in your code.\n\n## Avoid Barrel Files\n\nBarrel files are files that re-export the APIs of other files in the same directory. For example:\n\nsrc/utils/index.js\n\n```js\nexport * from './color.js'\nexport * from './dom.js'\nexport * from './slash.js'\n```\n\nWhen you only import an individual API, e.g. import { slash } from './utils', all the files in that barrel file need to be fetched and transformed as they may contain the slash API and may also contain side-effects that run on initialization. This means you're loading more files than required on the initial page load, resulting in a slower page load.\n\nIf possible, you should avoid barrel files and import the individual APIs directly, e.g. import { slash } from './utils/slash.js'. You can read issue #8237 for more information.\n\n## Warm Up Frequently Used Files\n\nThe Vite dev server only transforms files as requested by the browser, which allows it to start up quickly and only apply transformations for used files. It can also pre-transform files if it anticipates certain files will be requested shortly. However, request waterfalls may still happen if some files take longer to transform than others. For example:\n\nGiven an import graph where the left file imports the right file:\n\n```\nmain.js -> BigComponent.vue -> big-utils.js -> large-data.json\n```\n\nThe import relationship can only be known after the file is transformed. If BigComponent.vue takes some time to transform, big-utils.js has to wait for its turn, and so on. This causes an internal waterfall even with pre-transformation built-in.\n\nVite allows you to warm up files that you know are frequently used, e.g. big-utils.js, using the server.warmup option. This way big-utils.js will be ready and cached to be served immediately when requested.\n\nYou can find files that are frequently used by running vite --debug transform and inspect the logs:\n\n```bash\nvite:transform 28.72ms /@vite/client +1ms\nvite:transform 62.95ms /src/components/BigComponent.vue +1ms\nvite:transform 102.54ms /src/utils/big-utils.js +1ms\n```\n\nvite.config.js\n\n```js\nexport default defineConfig({\n  server: {\n    warmup: {\n      clientFiles: [\n        './src/components/BigComponent.vue',\n        './src/utils/big-utils.js',\n      ],\n    },\n  },\n})\n```\n\nNote that you should only warm up files that are frequently used to not overload the Vite dev server on startup. Check the server.warmup option for more information.\n\nUsing --open or server.open also provides a performance boost, as Vite will automatically warm up the entry point of your app or the provided URL to open.\n\n## Use Lesser or Native Tooling\n\nKeeping Vite fast with a growing codebase is about reducing the amount of work for the source files (JS/TS/CSS).\n\nExamples of doing less work:\n\n- Use CSS instead of Sass/Less/Stylus when possible (nesting can be handled by PostCSS)\n- Don't transform SVGs into UI framework components (React, Vue, etc). Import them as strings or URLs instead.\n- When using @vitejs/plugin-react, avoid configuring the Babel options, so it skips the transformation during build (only esbuild will be used).\n\nExamples of using native tooling:\n\nUsing native tooling often brings larger installation size and as so is not the default when starting a new Vite project. But it may be worth the cost for larger applications.\n\n- Try out the experimental support for LightningCSS\n- Use @vitejs/plugin-react-swc in place of @vitejs/plugin-react.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "overview", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I review your browser setup in vite-guide?\n\nAssistant: To review your browser setup in vite-guide, here's what you do:\nSome browser extensions may interfere with requests and slow down startup and reload times for large apps, especially when using browser dev tools. We recommend creating a dev-only profile without extensions, or switch to incognito mode, while using Vite's dev server in these cases. Incognito mode should also be faster than a regular profile without extensions.\n\nThe Vite dev server does hard caching of pre-bundled dependencies and implements fast 304 responses for source code. Disabling the cache while the Browser Dev Tools are open can have a big impact on startup and full-page reload times. Please check that \"Disable Cache\" isn't enabled while you work with the Vite server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I audit configured vite plugins in vite-guide?\n\nAssistant: To audit configured vite plugins in vite-guide, here's what you do:\nVite's internal and official plugins are optimized to do the least amount of work possible while providing compatibility with the broader ecosystem. For example, code transformations use regex in dev, but do a complete parse in build to ensure correctness.\n\nHowever, the performance of community plugins is out of Vite's control, which may affect the developer experience. Here are a few things you can look out for when using additional Vite plugins:\n\n1. Large dependencies that are only used in certain cases should be dynamically imported to reduce the Node.js startup time. Example refactors: vite-plugin-react#212 and vite-plugin-pwa#224.\n\n2. The buildStart, config, and configResolved hooks should not run long and extensive operations. These hooks are awaited during dev server startup, which delays when you can access the site in the browser.\n\n3. The resolveId, load, and transform hooks may cause some files to load slower than others. While sometimes unavoidable, it's still worth checking for possible areas to optimize. For example, checking if the code contains a specific keyword, or the id matches a specific extension, before doing the full transformation.\n\nThe longer it takes to transform a file, the more significant the request waterfall will be when loading the site in the browser.\n\nYou can inspect the duration it takes to transform a file using vite --debug plugin-transform or vite-plugin-inspect. Note that as asynchronous operations tend to provide inaccurate timings, you should treat the numbers as a rough estimate, but it should still reveal the more expensive operations.\n\nProfiling\n\nYou can run vite --profile, visit the site, and press p + enter in your terminal to record a .cpuprofile. A tool like speedscope can then be used to inspect the profile and identify the bottlenecks. You can also share the profiles with the Vite team to help us identify performance issues..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I reduce resolve operations in vite-guide?\n\nAssistant: To reduce resolve operations in vite-guide, here's what you do:\nResolving import paths can be an expensive operation when hitting its worst case often. For example, Vite supports \"guessing\" import paths with the resolve.extensions option, which defaults to ['.mjs', '.js', '.mts', '.ts', '.jsx', '.tsx', '.json'].\n\nWhen you try to import ./Component.jsx with import './Component', Vite will run these steps to resolve it:\n\n1. Check if ./Component exists, no.\n2. Check if ./Component.mjs exists, no.\n3. Check if ./Component.js exists, no.\n4. Check if ./Component.mts exists, no.\n5. Check if ./Component.ts exists, no.\n6. Check if ./Component.jsx exists, yes!\n\nAs shown, a total of 6 filesystem checks is required to resolve an import path. The more implicit imports you have, the more time it adds up to resolve the paths.\n\nHence, it's usually better to be explicit with your import paths, e.g. import './Component.jsx'. You can also narrow down the list for resolve.extensions to reduce the general filesystem checks, but you have to make sure it works for files in node_modules too.\n\nIf you're a plugin author, make sure to only call this.resolve when needed to reduce the number of checks above.\n\nTypeScript\n\nIf you are using TypeScript, enable \"moduleResolution\": \"bundler\" and \"allowImportingTsExtensions\": true in your tsconfig.json's compilerOptions to use .ts and .tsx extensions directly in your code..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I avoid barrel files in vite-guide?\n\nAssistant: To avoid barrel files in vite-guide, here's what you do:\nBarrel files are files that re-export the APIs of other files in the same directory. For example:\n\nsrc/utils/index.js\n\n```js\nexport * from './color.js'\nexport * from './dom.js'\nexport * from './slash.js'\n```\n\nWhen you only import an individual API, e.g. import { slash } from './utils', all the files in that barrel file need to be fetched and transformed as they may contain the slash API and may also contain side-effects that run on initialization. This means you're loading more files than required on the initial page load, resulting in a slower page load.\n\nIf possible, you should avoid barrel files and import the individual APIs directly, e.g. import { slash } from './utils/slash.js'. You can read issue #8237 for more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I warm up frequently used files in vite-guide?\n\nAssistant: To warm up frequently used files in vite-guide, here's what you do:\nThe Vite dev server only transforms files as requested by the browser, which allows it to start up quickly and only apply transformations for used files. It can also pre-transform files if it anticipates certain files will be requested shortly. However, request waterfalls may still happen if some files take longer to transform than others. For example:\n\nGiven an import graph where the left file imports the right file:\n\n```\nmain.js -> BigComponent.vue -> big-utils.js -> large-data.json\n```\n\nThe import relationship can only be known after the file is transformed. If BigComponent.vue takes some time to transform, big-utils.js has to wait for its turn, and so on. This causes an internal waterfall even with pre-transformation built-in.\n\nVite allows you to warm up files that you know are frequently used, e.g. big-utils.js, using the server.warmup option. This way big-utils.js will be ready and cached to be served immediately when requested.\n\nYou can find files that are frequently used by running vite --debug transform and inspect the logs:\n\n```bash\nvite:transform 28.72ms /@vite/client +1ms\nvite:transform 62.95ms /src/components/BigComponent.vue +1ms\nvite:transform 102.54ms /src/utils/big-utils.js +1ms\n```\n\nvite.config.js\n\n```js\nexport default defineConfig({\n  server: {\n    warmup: {\n      clientFiles: [\n        './src/components/BigComponent.vue',\n        './src/utils/big-utils.js',\n      ],\n    },\n  },\n})\n```\n\nNote that you should only warm up files that are frequently used to not overload the Vite dev server on startup. Check the server.warmup option for more information.\n\nUsing --open or server.open also provides a performance boost, as Vite will automatically warm up the entry point of your app or the provided URL to open..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I use lesser or native tooling in vite-guide?\n\nAssistant: To use lesser or native tooling in vite-guide, here's what you do:\nKeeping Vite fast with a growing codebase is about reducing the amount of work for the source files (JS/TS/CSS).\n\nExamples of doing less work:\n\n- Use CSS instead of Sass/Less/Stylus when possible (nesting can be handled by PostCSS)\n- Don't transform SVGs into UI framework components (React, Vue, etc). Import them as strings or URLs instead.\n- When using @vitejs/plugin-react, avoid configuring the Babel options, so it skips the transformation during build (only esbuild will be used).\n\nExamples of using native tooling:\n\nUsing native tooling often brings larger installation size and as so is not the default when starting a new Vite project. But it may be worth the cost for larger applications.\n\n- Try out the experimental support for LightningCSS\n- Use @vitejs/plugin-react-swc in place of @vitejs/plugin-react..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Performance in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Warm Up Frequently Used Files - vite.config.js**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    warmup: {\n      clientFiles: [\n        './src/components/BigComponent.vue',\n        './src/utils/big-utils.js',\n      ],\n    },\n  },\n})\n```\n\nThis snippet shows you how to warm up frequently used files - vite.config.js, which is an important aspect of performance.\n\n**Transform Duration Log Example**:\n\n```yaml\nvite:transform 28.72ms /@vite/client +1ms\nvite:transform 62.95ms /src/components/BigComponent.vue +1ms\nvite:transform 102.54ms /src/utils/big-utils.js +1ms\n```\n\nThis snippet shows you how to transform duration log example, which is an important aspect of performance.\n\n", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "code_examples", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Performance in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCreate a dev-only profile without extensions or switch to incognito mode while using Vite's dev server.\n\nDisable cache while working with the Vite server to improve startup and reload times.\n\nDynamically import large dependencies that are only used in certain cases to reduce Node.js startup time.\n\nAvoid long and extensive operations in buildStart, config, and configResolved hooks.\n\nBe explicit with import paths to reduce filesystem checks.\n\nIf using TypeScript, enable \"moduleResolution\": \"bundler\" and \"allowImportingTsExtensions\": true in tsconfig.json.\n\nAvoid barrel files and import individual APIs directly.\n\nWarm up frequently used files using the server.warmup option to improve performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/performance", "title": "Performance", "description": "This guide aims to help you identify and fix common performance issues in Vite, such as slow server starts, slow page loads, and slow builds.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:44", "type": "best_practices", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "og:title": "Performance", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogUrl": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "title": "Performance | Vite", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "ogTitle": "Performance", "scrapeId": "58ff8b44-5c4f-4335-a683-d9856684bad3", "sourceURL": "https://vite.dev/guide/performance", "url": "https://vite.dev/guide/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Migration from v5 is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Migration from v5 in vite-guide.\n\n# Migration from v5\n\nThis page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.Here's a quick rundown of what this is about:\n\n## Environment API\n\nAs part of the new experimental Environment API, a big internal refactoring was needed. Vite 6 strives to avoid breaking changes to ensure most projects can quickly upgrade to the new major. We'll wait until a big portion of the ecosystem has moved to stabilize and start recommending the use of the new APIs. There may be some edge cases but these should only affect low level usage by frameworks and tools. We have worked with maintainers in the ecosystem to mitigate these differences before the release. Please open an issue if you spot a regression.\n\nSome internal APIs have been removed due to changes in Vite's implementation. If you were relying on one of them, please create a feature request.\n\n## Vite Runtime API\n\nThe experimental Vite Runtime API evolved into the Module Runner API, released in Vite 6 as part of the new experimental Environment API. Given that the feature was experimental the removal of the previous API introduced in Vite 5.1 isn't a breaking change, but users will need to update their use to the Module Runner equivalent as part of migrating to Vite 6.\n\n## General Changes\n\nThis section outlines various general changes that users need to be aware of when migrating to Vite 6.\n\n## Default value for `resolve.conditions`\n\nThis change does not affect users that did not configure `resolve.conditions` / `ssr.resolve.conditions` / `ssr.resolve.externalConditions`.\n\nIn Vite 5, the default value for `resolve.conditions` was `[]` and some conditions were added internally. The default value for `ssr.resolve.conditions` was the value of `resolve.conditions`.\n\nFrom Vite 6, some of the conditions are no longer added internally and need to be included in the config values. The conditions that are no longer added internally for\n\n- `resolve.conditions` are `['module', 'browser', 'development|production']`\n- `ssr.resolve.conditions` are `['module', 'node', 'development|production']`\n\nThe default values for those options are updated to the corresponding values and `ssr.resolve.conditions` no longer uses `resolve.conditions` as the default value. Note that `development|production` is a special variable that is replaced with `production` or `development` depending on the value of `process.env.NODE_ENV`. These default values are exported from `vite` as `defaultClientConditions` and `defaultServerConditions`.\n\nIf you specified a custom value for `resolve.conditions` or `ssr.resolve.conditions`, you need to update it to include the new conditions. For example, if you previously specified `['custom']` for `resolve.conditions`, you need to specify `['custom', ...defaultClientConditions]` instead.\n\n## JSON stringify\n\nIn Vite 5, when `json.stringify: true` is set, `json.namedExports` was disabled.\n\nFrom Vite 6, even when `json.stringify: true` is set, `json.namedExports` is not disabled and the value is respected. If you wish to achieve the previous behavior, you can set `json.namedExports: false`.\n\nVite 6 also introduces a new default value for `json.stringify` which is `'auto'`, which will only stringify large JSON files. To disable this behavior, set `json.stringify: false.`\n\n## Extended support of asset references in HTML elements\n\nIn Vite 5, only a few supported HTML elements were able to reference assets that will be processed and bundled by Vite, such as `<link href>`, `<img src>`, etc.\n\nVite 6 extends the support to even more HTML elements. The full list can be found at the HTML features docs.\n\nTo opt-out of HTML processing on certain elements, you can add the `vite-ignore` attribute on the element.\n\n## postcss-load-config\n\n`postcss-load-config` has been updated to v6 from v4. `tsx` or `jiti` is now required to load TypeScript postcss config files instead of `ts-node`. Also `yaml` is now required to load YAML postcss config files.\n\n## Sass now uses modern API by default\n\nIn Vite 5, the legacy API was used by default for Sass. Vite 5.4 added support for the modern API.\n\nFrom Vite 6, the modern API is used by default for Sass. If you wish to still use the legacy API, you can set `css.preprocessorOptions.sass.api: 'legacy' / css.preprocessorOptions.scss.api: 'legacy'`. But note that the legacy API support will be removed in Vite 7.\n\nTo migrate to the modern API, see the Sass documentation.\n\n## Customize CSS output file name in library mode\n\nIn Vite 5, the CSS output file name in library mode was always `style.css` and cannot be easily changed through the Vite config.\n\nFrom Vite 6, the default file name now uses \"name\" in `package.json` similar to the JS output files. If `build.lib.fileName` is set with a string, the value will also be used for the CSS output file name. To explicitly set a different CSS file name, you can use the new `build.lib.cssFileName` to configure it.\n\nTo migrate, if you had relied on the `style.css` file name, you should update references to it to the new name based on your package name. For example:\n\npackage.json\n\n```json\n{\n  \"name\": \"my-lib\",\n  \"exports\": {\n    \"./style.css\": \"./dist/style.css\"\n    \"./style.css\": \"./dist/my-lib.css\"\n  }\n}\n```\n\nIf you prefer to stick with `style.css` like in Vite 5, you can set `build.lib.cssFileName: 'style'` instead.\n\n## Advanced\n\nThere are other breaking changes which only affect few users.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "overview", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environment api in vite-guide?\n\nAssistant: To environment api in vite-guide, here's what you do:\nAs part of the new experimental Environment API, a big internal refactoring was needed. Vite 6 strives to avoid breaking changes to ensure most projects can quickly upgrade to the new major. We'll wait until a big portion of the ecosystem has moved to stabilize and start recommending the use of the new APIs. There may be some edge cases but these should only affect low level usage by frameworks and tools. We have worked with maintainers in the ecosystem to mitigate these differences before the release. Please open an issue if you spot a regression.\n\nSome internal APIs have been removed due to changes in Vite's implementation. If you were relying on one of them, please create a feature request..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I vite runtime api in vite-guide?\n\nAssistant: To vite runtime api in vite-guide, here's what you do:\nThe experimental Vite Runtime API evolved into the Module Runner API, released in Vite 6 as part of the new experimental Environment API. Given that the feature was experimental the removal of the previous API introduced in Vite 5.1 isn't a breaking change, but users will need to update their use to the Module Runner equivalent as part of migrating to Vite 6..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I general changes in vite-guide?\n\nAssistant: To general changes in vite-guide, here's what you do:\nThis section outlines various general changes that users need to be aware of when migrating to Vite 6..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I default value for `resolve.conditions` in vite-guide?\n\nAssistant: To default value for `resolve.conditions` in vite-guide, here's what you do:\nThis change does not affect users that did not configure `resolve.conditions` / `ssr.resolve.conditions` / `ssr.resolve.externalConditions`.\n\nIn Vite 5, the default value for `resolve.conditions` was `[]` and some conditions were added internally. The default value for `ssr.resolve.conditions` was the value of `resolve.conditions`.\n\nFrom Vite 6, some of the conditions are no longer added internally and need to be included in the config values. The conditions that are no longer added internally for\n\n- `resolve.conditions` are `['module', 'browser', 'development|production']`\n- `ssr.resolve.conditions` are `['module', 'node', 'development|production']`\n\nThe default values for those options are updated to the corresponding values and `ssr.resolve.conditions` no longer uses `resolve.conditions` as the default value. Note that `development|production` is a special variable that is replaced with `production` or `development` depending on the value of `process.env.NODE_ENV`. These default values are exported from `vite` as `defaultClientConditions` and `defaultServerConditions`.\n\nIf you specified a custom value for `resolve.conditions` or `ssr.resolve.conditions`, you need to update it to include the new conditions. For example, if you previously specified `['custom']` for `resolve.conditions`, you need to specify `['custom', ...defaultClientConditions]` instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I json stringify in vite-guide?\n\nAssistant: To json stringify in vite-guide, here's what you do:\nIn Vite 5, when `json.stringify: true` is set, `json.namedExports` was disabled.\n\nFrom Vite 6, even when `json.stringify: true` is set, `json.namedExports` is not disabled and the value is respected. If you wish to achieve the previous behavior, you can set `json.namedExports: false`.\n\nVite 6 also introduces a new default value for `json.stringify` which is `'auto'`, which will only stringify large JSON files. To disable this behavior, set `json.stringify: false.`.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I extended support of asset references in html elements in vite-guide?\n\nAssistant: To extended support of asset references in html elements in vite-guide, here's what you do:\nIn Vite 5, only a few supported HTML elements were able to reference assets that will be processed and bundled by Vite, such as `<link href>`, `<img src>`, etc.\n\nVite 6 extends the support to even more HTML elements. The full list can be found at the HTML features docs.\n\nTo opt-out of HTML processing on certain elements, you can add the `vite-ignore` attribute on the element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I postcss-load-config in vite-guide?\n\nAssistant: To postcss-load-config in vite-guide, here's what you do:\n`postcss-load-config` has been updated to v6 from v4. `tsx` or `jiti` is now required to load TypeScript postcss config files instead of `ts-node`. Also `yaml` is now required to load YAML postcss config files..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I sass now uses modern api by default in vite-guide?\n\nAssistant: To sass now uses modern api by default in vite-guide, here's what you do:\nIn Vite 5, the legacy API was used by default for Sass. Vite 5.4 added support for the modern API.\n\nFrom Vite 6, the modern API is used by default for Sass. If you wish to still use the legacy API, you can set `css.preprocessorOptions.sass.api: 'legacy' / css.preprocessorOptions.scss.api: 'legacy'`. But note that the legacy API support will be removed in Vite 7.\n\nTo migrate to the modern API, see the Sass documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I customize css output file name in library mode in vite-guide?\n\nAssistant: To customize css output file name in library mode in vite-guide, here's what you do:\nIn Vite 5, the CSS output file name in library mode was always `style.css` and cannot be easily changed through the Vite config.\n\nFrom Vite 6, the default file name now uses \"name\" in `package.json` similar to the JS output files. If `build.lib.fileName` is set with a string, the value will also be used for the CSS output file name. To explicitly set a different CSS file name, you can use the new `build.lib.cssFileName` to configure it.\n\nTo migrate, if you had relied on the `style.css` file name, you should update references to it to the new name based on your package name. For example:\n\npackage.json\n\n```json\n{\n  \"name\": \"my-lib\",\n  \"exports\": {\n    \"./style.css\": \"./dist/style.css\"\n    \"./style.css\": \"./dist/my-lib.css\"\n  }\n}\n```\n\nIf you prefer to stick with `style.css` like in Vite 5, you can set `build.lib.cssFileName: 'style'` instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I advanced in vite-guide?\n\nAssistant: To advanced in vite-guide, here's what you do:\nThere are other breaking changes which only affect few users..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "section_detail", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Migration from v5 in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HMR Reload Example**:\n\n```yaml\nimport type {\nPlugin,\nEnvironmentModuleNode } from 'vite'\n\nfunction hmrReload(): Plugin {\n  return {\n    name: 'hmr-reload',\n    enforce: 'post',\n    hotUpdate: {\n      order: 'post',\n      handler({\n        modules,\n        server,\n        timestamp }) {\n          if (this.environment.name !== 'ssr') return\n\n          let hasSsrOnlyModules = false\n          const invalidatedModules = new Set<EnvironmentModuleNode>()\n          for (const mod of modules) {\n            if (mod.id == null) continue\n            const clientModule =\n              server.environments.client.moduleGraph.getModuleById(mod.id)\n            if (clientModule != null) continue\n\n            this.environment.moduleGraph.invalidateModule(\n              mod,\n              invalidatedModules,\n              timestamp,\n              true,\n            )\n\n            hasSsrOnlyModules = true\n          }\n\n          if (hasSsrOnlyModules) {\n            server.ws.send({\n              type: 'full-reload' })\n            return []\n          }\n        },\n      },\n    }\n  }\n}\n```\n\nThis snippet shows you how to hmr reload example, which is an important aspect of migration from v5.\n\n", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "code_examples", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Migration from v5 in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you specified a custom value for `resolve.conditions` or `ssr.resolve.conditions`, you need to update it to include the new conditions.\n\nTo achieve the previous behavior of `json.namedExports`, set `json.namedExports: false` if using `json.stringify: true`.\n\nTo migrate to the modern API for Sass, refer to the Sass documentation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/migration", "title": "Migration from v5", "description": "This page covers the migration process from Vite version 5 to version 6, detailing changes in the Environment API, Vite Runtime API, and other general changes that affect users upgrading their projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:02:05", "type": "best_practices", "page_metadata": {"theme-color": "#646cff", "language": "en-US", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "title": "Migration from v5 | Vite", "description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Migration from v5", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Migration from v5", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "3c70fddd-526c-48e2-b87e-f639e8291504", "sourceURL": "https://vite.dev/guide/migration", "url": "https://vite.dev/guide/migration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Troubleshooting is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Troubleshooting in vite-guide.\n\n# Troubleshooting\n\nThis page provides troubleshooting tips and solutions for common issues encountered while using Vite.Here's a quick rundown of what this is about:\n\n## CJS\n\n### Vite CJS Node API deprecated\nThe CJS build of Vite's Node API is deprecated and will be removed in Vite 6. See the GitHub discussion for more context. You should update your files or frameworks to import the ESM build of Vite instead.\n\nIn a basic Vite project, make sure:\n\n1. The `vite.config.js` file content is using the ESM syntax.\n2. The closest `package.json` file has `\"type\": \"module\"`, or use the `.mjs`/ `.mts` extension, e.g. `vite.config.mjs` or `vite.config.mts`.\n\nFor other projects, there are a few general approaches:\n\n- **Configure ESM as default, opt-in to CJS if needed:** Add `\"type\": \"module\"` in the project `package.json`. All `*.js` files are now interpreted as ESM and need to use the ESM syntax. You can rename a file with the `.cjs` extension to keep using CJS instead.\n- **Keep CJS as default, opt-in to ESM if needed:** If the project `package.json` does not have `\"type\": \"module\"`, all `*.js` files are interpreted as CJS. You can rename a file with the `.mjs` extension to use ESM instead.\n- **Dynamically import Vite:** If you need to keep using CJS, you can dynamically import Vite using `import('vite')` instead. This requires your code to be written in an `async` context, but should still be manageable as Vite's API is mostly asynchronous.\n\nIf you're unsure where the warning is coming from, you can run your script with the `VITE_CJS_TRACE=true` flag to log the stack trace:\n\n```bash\nVITE_CJS_TRACE=true vite dev\n```\n\nIf you'd like to temporarily ignore the warning, you can run your script with the `VITE_CJS_IGNORE_WARNING=true` flag:\n\n```bash\nVITE_CJS_IGNORE_WARNING=true vite dev\n```\n\nNote that postcss config files do not support ESM + TypeScript ( `.mts` or `.ts` in `\"type\": \"module\"`) yet. If you have postcss configs with `.ts` and added `\"type\": \"module\"` to package.json, you'll also need to rename the postcss config to use `.cts`.\n\n## CLI\n\n### `Error: Cannot find module 'C:\\foo\\bar&baz\\vite\\bin\\vite.js'`\nThe path to your project folder may include `&`, which doesn't work with `npm` on Windows.\n\nYou will need to either:\n\n- Switch to another package manager (e.g. `pnpm`, `yarn`)\n- Remove `&` from the path to your project\n\n## Config\n\n### This package is ESM only\nWhen importing a ESM only package by `require`, the following error happens.\n\n> Failed to resolve \"foo\". This package is ESM only but it was tried to load by `require`.\n\n> Error [ERR_REQUIRE_ESM]: require() of ES Module /path/to/dependency.js from /path/to/vite.config.js not supported. Instead change the require of index.js in /path/to/vite.config.js to a dynamic import() which is available in all CommonJS modules.\n\nIn Node.js <=22, ESM files cannot be loaded by `require` by default.\n\nWhile it may work using `--experimental-require-module`, or Node.js >22, or in other runtimes, we still recommend converting your config to ESM by either:\n- adding `\"type\": \"module\"` to the nearest `package.json`\n- renaming `vite.config.js`/ `vite.config.ts` to `vite.config.mjs`/ `vite.config.mts`\n\n### `failed to load config from '/path/to/config*/vite.config.js'`\n> failed to load config from '/path/to/config*/vite.config.js' error when starting dev server: Error: Build failed with 1 error: error: Must use \"outdir\" when there are multiple input files\n\nThe error above may occur if the path to your project folder contains `*`, which esbuild treats as a glob. You will need to rename your directory to remove the `*`.\n\n## Dev Server\n\n### Requests are stalled forever\nIf you are using Linux, file descriptor limits and inotify limits may be causing the issue. As Vite does not bundle most of the files, browsers may request many files which require many file descriptors, going over the limit.\n\nTo solve this:\n- Increase file descriptor limit by `ulimit`\n\n```shell\n# Check current limit\n$ ulimit -Sn\n# Change limit (temporary)\n$ ulimit -Sn 10000 # You might need to change the hard limit too\n# Restart your browser\n```\n\n- Increase the following inotify related limits by `sysctl`\n\n```shell\n# Check current limits\n$ sysctl fs.inotify\n# Change limits (temporary)\n$ sudo sysctl fs.inotify.max_queued_events=16384\n$ sudo sysctl fs.inotify.max_user_instances=8192\n$ sudo sysctl fs.inotify.max_user_watches=524288\n```\n\nIf the above steps don't work, you can try adding `DefaultLimitNOFILE=65536` as an un-commented config to the following files:\n- /etc/systemd/system.conf\n- /etc/systemd/user.conf\n\nFor Ubuntu Linux, you may need to add the line `* - nofile 65536` to the file `/etc/security/limits.conf` instead of updating systemd config files.\n\nNote that these settings persist but a **restart is required**.\n\n## HMR\n\n### Vite detects a file change but the HMR is not working\nYou may be importing a file with a different case. For example, `src/foo.js` exists and `src/bar.js` contains:\n\n```js\nimport './Foo.js' // should be './foo.js'\n```\n\nRelated issue: [#964](https://github.com/vitejs/vite/issues/964)\n\n### Vite does not detect a file change\nIf you are running Vite with WSL2, Vite cannot watch file changes in some conditions. See `server.watch` option.\n\n### A full reload happens instead of HMR\nIf HMR is not handled by Vite or a plugin, a full reload will happen as it's the only way to refresh the state.\nIf HMR is handled but it is within a circular dependency, a full reload will also happen to recover the execution order. To solve this, try breaking the loop. You can run `vite --debug hmr` to log the circular dependency path if a file change triggered it.\n\n## Build\n\n### Built file does not work because of CORS error\nIf the HTML file output was opened with `file` protocol, the scripts won't run with the following error.\n\n> Access to script at 'file:///foo/bar.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, isolated-app, chrome-extension, chrome, https, chrome-untrusted.\n\n> Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at file:///foo/bar.js. (Reason: CORS request not http).\n\nYou will need to access the file with `http` protocol. The easiest way to achieve this is to run `npx vite preview`.\n\n## Optimized Dependencies\n\n### Outdated pre-bundled deps when linking to a local package\nThe hash key used to invalidate optimized dependencies depends on the package lock contents, the patches applied to dependencies, and the options in the Vite config file that affects the bundling of node modules. This means that Vite will detect when a dependency is overridden using a feature as npm overrides, and re-bundle your dependencies on the next server start. Vite won't invalidate the dependencies when you use a feature like npm link. In case you link or unlink a dependency, you'll need to force re-optimization on the next server start by using `vite --force`. We recommend using overrides instead, which are supported now by every package manager.\n\n## Performance Bottlenecks\n\n### If you suffer any application performance bottlenecks resulting in slow load times, you can start the built-in Node.js inspector with your Vite dev server or when building your application to create the CPU profile:\n\n```bash\nvite --profile --open\n```\n\n```bash\nvite build --profile\n```\n\nOnce your application is opened in the browser, just await finish loading it and then go back to the terminal and press `p` key (will stop the Node.js inspector) then press `q` key to stop the dev server.\n\nNode.js inspector will generate `vite-profile-0.cpuprofile` in the root folder, go to https://www.speedscope.app/, and upload the CPU profile using the `BROWSE` button to inspect the result.\n\n## Others\n\n### Module externalized for browser compatibility\nWhen you use a Node.js module in the browser, Vite will output the following warning.\n\n> Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.readFile\" in client code.\n\nThis is because Vite does not automatically polyfill Node.js modules.\n\nWe recommend avoiding Node.js modules for browser code to reduce the bundle size, although you can add polyfills manually.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "overview", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I cjs in vite-guide?\n\nAssistant: To cjs in vite-guide, here's what you do:\n### Vite CJS Node API deprecated\nThe CJS build of Vite's Node API is deprecated and will be removed in Vite 6. See the GitHub discussion for more context. You should update your files or frameworks to import the ESM build of Vite instead.\n\nIn a basic Vite project, make sure:\n\n1. The `vite.config.js` file content is using the ESM syntax.\n2. The closest `package.json` file has `\"type\": \"module\"`, or use the `.mjs`/ `.mts` extension, e.g. `vite.config.mjs` or `vite.config.mts`.\n\nFor other projects, there are a few general approaches:\n\n- **Configure ESM as default, opt-in to CJS if needed:** Add `\"type\": \"module\"` in the project `package.json`. All `*.js` files are now interpreted as ESM and need to use the ESM syntax. You can rename a file with the `.cjs` extension to keep using CJS instead.\n- **Keep CJS as default, opt-in to ESM if needed:** If the project `package.json` does not have `\"type\": \"module\"`, all `*.js` files are interpreted as CJS. You can rename a file with the `.mjs` extension to use ESM instead.\n- **Dynamically import Vite:** If you need to keep using CJS, you can dynamically import Vite using `import('vite')` instead. This requires your code to be written in an `async` context, but should still be manageable as Vite's API is mostly asynchronous.\n\nIf you're unsure where the warning is coming from, you can run your script with the `VITE_CJS_TRACE=true` flag to log the stack trace:\n\n```bash\nVITE_CJS_TRACE=true vite dev\n```\n\nIf you'd like to temporarily ignore the warning, you can run your script with the `VITE_CJS_IGNORE_WARNING=true` flag:\n\n```bash\nVITE_CJS_IGNORE_WARNING=true vite dev\n```\n\nNote that postcss config files do not support ESM + TypeScript ( `.mts` or `.ts` in `\"type\": \"module\"`) yet. If you have postcss configs with `.ts` and added `\"type\": \"module\"` to package.json, you'll also need to rename the postcss config to use `.cts`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I cli in vite-guide?\n\nAssistant: To cli in vite-guide, here's what you do:\n### `Error: Cannot find module 'C:\\foo\\bar&baz\\vite\\bin\\vite.js'`\nThe path to your project folder may include `&`, which doesn't work with `npm` on Windows.\n\nYou will need to either:\n\n- Switch to another package manager (e.g. `pnpm`, `yarn`)\n- Remove `&` from the path to your project.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I config in vite-guide?\n\nAssistant: To config in vite-guide, here's what you do:\n### This package is ESM only\nWhen importing a ESM only package by `require`, the following error happens.\n\n> Failed to resolve \"foo\". This package is ESM only but it was tried to load by `require`.\n\n> Error [ERR_REQUIRE_ESM]: require() of ES Module /path/to/dependency.js from /path/to/vite.config.js not supported. Instead change the require of index.js in /path/to/vite.config.js to a dynamic import() which is available in all CommonJS modules.\n\nIn Node.js <=22, ESM files cannot be loaded by `require` by default.\n\nWhile it may work using `--experimental-require-module`, or Node.js >22, or in other runtimes, we still recommend converting your config to ESM by either:\n- adding `\"type\": \"module\"` to the nearest `package.json`\n- renaming `vite.config.js`/ `vite.config.ts` to `vite.config.mjs`/ `vite.config.mts`\n\n### `failed to load config from '/path/to/config*/vite.config.js'`\n> failed to load config from '/path/to/config*/vite.config.js' error when starting dev server: Error: Build failed with 1 error: error: Must use \"outdir\" when there are multiple input files\n\nThe error above may occur if the path to your project folder contains `*`, which esbuild treats as a glob. You will need to rename your directory to remove the `*`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I dev server in vite-guide?\n\nAssistant: To dev server in vite-guide, here's what you do:\n### Requests are stalled forever\nIf you are using Linux, file descriptor limits and inotify limits may be causing the issue. As Vite does not bundle most of the files, browsers may request many files which require many file descriptors, going over the limit.\n\nTo solve this:\n- Increase file descriptor limit by `ulimit`\n\n```shell\n# Check current limit\n$ ulimit -Sn\n# Change limit (temporary)\n$ ulimit -Sn 10000 # You might need to change the hard limit too\n# Restart your browser\n```\n\n- Increase the following inotify related limits by `sysctl`\n\n```shell\n# Check current limits\n$ sysctl fs.inotify\n# Change limits (temporary)\n$ sudo sysctl fs.inotify.max_queued_events=16384\n$ sudo sysctl fs.inotify.max_user_instances=8192\n$ sudo sysctl fs.inotify.max_user_watches=524288\n```\n\nIf the above steps don't work, you can try adding `DefaultLimitNOFILE=65536` as an un-commented config to the following files:\n- /etc/systemd/system.conf\n- /etc/systemd/user.conf\n\nFor Ubuntu Linux, you may need to add the line `* - nofile 65536` to the file `/etc/security/limits.conf` instead of updating systemd config files.\n\nNote that these settings persist but a **restart is required**..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I hmr in vite-guide?\n\nAssistant: To hmr in vite-guide, here's what you do:\n### Vite detects a file change but the HMR is not working\nYou may be importing a file with a different case. For example, `src/foo.js` exists and `src/bar.js` contains:\n\n```js\nimport './Foo.js' // should be './foo.js'\n```\n\nRelated issue: [#964](https://github.com/vitejs/vite/issues/964)\n\n### Vite does not detect a file change\nIf you are running Vite with WSL2, Vite cannot watch file changes in some conditions. See `server.watch` option.\n\n### A full reload happens instead of HMR\nIf HMR is not handled by Vite or a plugin, a full reload will happen as it's the only way to refresh the state.\nIf HMR is handled but it is within a circular dependency, a full reload will also happen to recover the execution order. To solve this, try breaking the loop. You can run `vite --debug hmr` to log the circular dependency path if a file change triggered it..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I build in vite-guide?\n\nAssistant: To build in vite-guide, here's what you do:\n### Built file does not work because of CORS error\nIf the HTML file output was opened with `file` protocol, the scripts won't run with the following error.\n\n> Access to script at 'file:///foo/bar.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, isolated-app, chrome-extension, chrome, https, chrome-untrusted.\n\n> Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at file:///foo/bar.js. (Reason: CORS request not http).\n\nYou will need to access the file with `http` protocol. The easiest way to achieve this is to run `npx vite preview`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I optimized dependencies in vite-guide?\n\nAssistant: To optimized dependencies in vite-guide, here's what you do:\n### Outdated pre-bundled deps when linking to a local package\nThe hash key used to invalidate optimized dependencies depends on the package lock contents, the patches applied to dependencies, and the options in the Vite config file that affects the bundling of node modules. This means that Vite will detect when a dependency is overridden using a feature as npm overrides, and re-bundle your dependencies on the next server start. Vite won't invalidate the dependencies when you use a feature like npm link. In case you link or unlink a dependency, you'll need to force re-optimization on the next server start by using `vite --force`. We recommend using overrides instead, which are supported now by every package manager..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I performance bottlenecks in vite-guide?\n\nAssistant: To performance bottlenecks in vite-guide, here's what you do:\n### If you suffer any application performance bottlenecks resulting in slow load times, you can start the built-in Node.js inspector with your Vite dev server or when building your application to create the CPU profile:\n\n```bash\nvite --profile --open\n```\n\n```bash\nvite build --profile\n```\n\nOnce your application is opened in the browser, just await finish loading it and then go back to the terminal and press `p` key (will stop the Node.js inspector) then press `q` key to stop the dev server.\n\nNode.js inspector will generate `vite-profile-0.cpuprofile` in the root folder, go to https://www.speedscope.app/, and upload the CPU profile using the `BROWSE` button to inspect the result..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I others in vite-guide?\n\nAssistant: To others in vite-guide, here's what you do:\n### Module externalized for browser compatibility\nWhen you use a Node.js module in the browser, Vite will output the following warning.\n\n> Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.readFile\" in client code.\n\nThis is because Vite does not automatically polyfill Node.js modules.\n\nWe recommend avoiding Node.js modules for browser code to reduce the bundle size, although you can add polyfills manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Troubleshooting in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CJS Trace**:\n\n```yaml\nVITE_CJS_TRACE=true vite dev\n```\n\nThis snippet shows you how to cjs trace, which is an important aspect of troubleshooting.\n\n**CJS Ignore Warning**:\n\n```yaml\nVITE_CJS_IGNORE_WARNING=true vite dev\n```\n\nThis snippet shows you how to cjs ignore warning, which is an important aspect of troubleshooting.\n\n**Increase File Descriptor Limit**:\n\n```yaml\n# Check current limit\n$ ulimit -Sn\n# Change limit (temporary)\n$ ulimit -Sn 10000 # You might need to change the hard limit too\n# Restart your browser\n```\n\nThis snippet shows you how to increase file descriptor limit, which is an important aspect of troubleshooting.\n\n**Increase Inotify Limits**:\n\n```yaml\n# Check current limits\n$ sysctl fs.inotify\n# Change limits (temporary)\n$ sudo sysctl fs.inotify.max_queued_events=16384\n$ sudo sysctl fs.inotify.max_user_instances=8192\n$ sudo sysctl fs.inotify.max_user_watches=524288\n```\n\nThis snippet shows you how to increase inotify limits, which is an important aspect of troubleshooting.\n\n**Run Vite Preview**:\n\n```yaml\nnpx vite preview\n```\n\nThis snippet shows you how to run vite preview, which is an important aspect of troubleshooting.\n\n**Start Node.js Inspector**:\n\n```yaml\nvite --profile --open\n```\n\nThis snippet shows you how to start node.js inspector, which is an important aspect of troubleshooting.\n\n**Build with Profile**:\n\n```yaml\nvite build --profile\n```\n\nThis snippet shows you how to build with profile, which is an important aspect of troubleshooting.\n\n", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "code_examples", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Troubleshooting in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUpdate your files or frameworks to import the ESM build of Vite instead of the deprecated CJS build.\n\nIf you encounter issues with file paths on Windows, consider switching to another package manager or removing problematic characters from the path.\n\nFor ESM only packages, convert your config to ESM by adding \"type\": \"module\" to package.json or renaming config files to .mjs/.mts.\n\nTo avoid CORS errors, access built files using the http protocol instead of the file protocol.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/troubleshooting", "title": "Troubleshooting", "description": "This page provides troubleshooting tips and solutions for common issues encountered while using Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:02:32", "type": "best_practices", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Troubleshooting", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "og:type": "website", "og:title": "Troubleshooting", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Troubleshooting | Vite", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "scrapeId": "c42c9245-bd6b-4f2e-98b7-2d7e31ae3ef1", "sourceURL": "https://vite.dev/guide/troubleshooting", "url": "https://vite.dev/guide/troubleshooting", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Command Line Interface is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Command Line Interface in vite-guide.\n\n# Command Line Interface\n\nThis page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.Here's a quick rundown of what this is about:\n\n## Dev server\n\n### `vite`\nStart Vite dev server in the current directory. `vite dev` and `vite serve` are aliases for `vite`.\n\n#### Usage\n```bash\nvite [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--host [host]` | Specify hostname ( `string`) |\n| `--port <port>` | Specify port ( `number`) |\n| `--open [path]` | Open browser on startup ( `boolean | string`) |\n| `--cors` | Enable CORS ( `boolean`) |\n| `--strictPort` | Exit if specified port is already in use ( `boolean`) |\n| `--force` | Force the optimizer to ignore the cache and re-bundle ( `boolean`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild, or `runner` (experimental) to process it on the fly, or `native` (experimental) to load using the native runtime (default: `bundle`) |\n| `--profile` | Start built-in Node.js inspector (check [Performance bottlenecks](https://vite.dev/guide/troubleshooting#performance-bottlenecks)) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |\n| `-v, --version` | Display version number |\n\n## Build\n\n### `vite build`\nBuild for production.\n\n#### Usage\n```bash\nvite build [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--target <target>` | Transpile target (default: \"modules\") ( `string`) |\n| `--outDir <dir>` | Output directory (default: `dist`) ( `string`) |\n| `--assetsDir <dir>` | Directory under outDir to place assets in (default: \"assets\") ( `string`) |\n| `--assetsInlineLimit <number>` | Static asset base64 inline threshold in bytes (default: `4096`) ( `number`) |\n| `--ssr [entry]` | Build specified entry for server-side rendering ( `string`) |\n| `--sourcemap [output]` | Output source maps for build (default: `false`) ( `boolean | \"inline\" | \"hidden\"`) |\n| `--minify [minifier]` | Enable/disable minification, or specify minifier to use (default: \"esbuild\") ( `boolean | \"terser\" | \"esbuild\"`) |\n| `--manifest [name]` | Emit build manifest json ( `boolean | string`) |\n| `--ssrManifest [name]` | Emit ssr manifest json ( `boolean | string`) |\n| `--emptyOutDir` | Force empty outDir when it's outside of root ( `boolean`) |\n| `-w, --watch` | Rebuilds when modules have changed on disk ( `boolean`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | Info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild or `runner` (experimental) to process it on the fly (default: `bundle`) |\n| `--profile` | Start built-in Node.js inspector (check [Performance bottlenecks](https://vite.dev/guide/troubleshooting#performance-bottlenecks)) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |\n| `--app` | Build all environments, same as `builder: {}` ( `boolean`, experimental) |\n\n## Others\n\n### `vite optimize`\nPre-bundle dependencies.\n\n**Deprecated**: the pre-bundle process runs automatically and does not need to be called.\n\n#### Usage\n```bash\nvite optimize [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--force` | Force the optimizer to ignore the cache and re-bundle ( `boolean`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | Info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild or `runner` (experimental) to process it on the fly (default: `bundle`) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |\n\n## Preview\n\n### `vite preview`\nLocally preview the production build. Do not use this as a production server as it's not designed for it.\n\n#### Usage\n```bash\nvite preview [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--host [host]` | Specify hostname ( `string`) |\n| `--port <port>` | Specify port ( `number`) |\n| `--strictPort` | Exit if specified port is already in use ( `boolean`) |\n| `--open [path]` | Open browser on startup ( `boolean | string`) |\n| `--outDir <dir>` | Output directory (default: `dist`)( `string`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | Info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild or `runner` (experimental) to process it on the fly (default: `bundle`) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I dev server in vite-guide?\n\nAssistant: To dev server in vite-guide, here's what you do:\n### `vite`\nStart Vite dev server in the current directory. `vite dev` and `vite serve` are aliases for `vite`.\n\n#### Usage\n```bash\nvite [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--host [host]` | Specify hostname ( `string`) |\n| `--port <port>` | Specify port ( `number`) |\n| `--open [path]` | Open browser on startup ( `boolean | string`) |\n| `--cors` | Enable CORS ( `boolean`) |\n| `--strictPort` | Exit if specified port is already in use ( `boolean`) |\n| `--force` | Force the optimizer to ignore the cache and re-bundle ( `boolean`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild, or `runner` (experimental) to process it on the fly, or `native` (experimental) to load using the native runtime (default: `bundle`) |\n| `--profile` | Start built-in Node.js inspector (check [Performance bottlenecks](https://vite.dev/guide/troubleshooting#performance-bottlenecks)) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |\n| `-v, --version` | Display version number |.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I build in vite-guide?\n\nAssistant: To build in vite-guide, here's what you do:\n### `vite build`\nBuild for production.\n\n#### Usage\n```bash\nvite build [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--target <target>` | Transpile target (default: \"modules\") ( `string`) |\n| `--outDir <dir>` | Output directory (default: `dist`) ( `string`) |\n| `--assetsDir <dir>` | Directory under outDir to place assets in (default: \"assets\") ( `string`) |\n| `--assetsInlineLimit <number>` | Static asset base64 inline threshold in bytes (default: `4096`) ( `number`) |\n| `--ssr [entry]` | Build specified entry for server-side rendering ( `string`) |\n| `--sourcemap [output]` | Output source maps for build (default: `false`) ( `boolean | \"inline\" | \"hidden\"`) |\n| `--minify [minifier]` | Enable/disable minification, or specify minifier to use (default: \"esbuild\") ( `boolean | \"terser\" | \"esbuild\"`) |\n| `--manifest [name]` | Emit build manifest json ( `boolean | string`) |\n| `--ssrManifest [name]` | Emit ssr manifest json ( `boolean | string`) |\n| `--emptyOutDir` | Force empty outDir when it's outside of root ( `boolean`) |\n| `-w, --watch` | Rebuilds when modules have changed on disk ( `boolean`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | Info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild or `runner` (experimental) to process it on the fly (default: `bundle`) |\n| `--profile` | Start built-in Node.js inspector (check [Performance bottlenecks](https://vite.dev/guide/troubleshooting#performance-bottlenecks)) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |\n| `--app` | Build all environments, same as `builder: {}` ( `boolean`, experimental) |.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I others in vite-guide?\n\nAssistant: To others in vite-guide, here's what you do:\n### `vite optimize`\nPre-bundle dependencies.\n\n**Deprecated**: the pre-bundle process runs automatically and does not need to be called.\n\n#### Usage\n```bash\nvite optimize [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--force` | Force the optimizer to ignore the cache and re-bundle ( `boolean`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | Info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild or `runner` (experimental) to process it on the fly (default: `bundle`) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I preview in vite-guide?\n\nAssistant: To preview in vite-guide, here's what you do:\n### `vite preview`\nLocally preview the production build. Do not use this as a production server as it's not designed for it.\n\n#### Usage\n```bash\nvite preview [root]\n```\n\n#### Options\n| Options |  |\n| --- | --- |\n| `--host [host]` | Specify hostname ( `string`) |\n| `--port <port>` | Specify port ( `number`) |\n| `--strictPort` | Exit if specified port is already in use ( `boolean`) |\n| `--open [path]` | Open browser on startup ( `boolean | string`) |\n| `--outDir <dir>` | Output directory (default: `dist`)( `string`) |\n| `-c, --config <file>` | Use specified config file ( `string`) |\n| `--base <path>` | Public base path (default: `/`) ( `string`) |\n| `-l, --logLevel <level>` | Info \\\\| warn \\\\| error \\\\| silent ( `string`) |\n| `--clearScreen` | Allow/disable clear screen when logging ( `boolean`) |\n| `--configLoader <loader>` | Use `bundle` to bundle the config with esbuild or `runner` (experimental) to process it on the fly (default: `bundle`) |\n| `-d, --debug [feat]` | Show debug logs ( `string | boolean`) |\n| `-f, --filter <filter>` | Filter debug logs ( `string`) |\n| `-m, --mode <mode>` | Set env mode ( `string`) |\n| `-h, --help` | Display available CLI options |.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Command Line Interface in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dev server usage**:\n\n```yaml\nvite [root]\n```\n\nThis snippet shows you how to dev server usage, which is an important aspect of command line interface.\n\n**Build usage**:\n\n```yaml\nvite build [root]\n```\n\nThis snippet shows you how to build usage, which is an important aspect of command line interface.\n\n**Optimize usage**:\n\n```yaml\nvite optimize [root]\n```\n\nThis snippet shows you how to optimize usage, which is an important aspect of command line interface.\n\n**Preview usage**:\n\n```yaml\nvite preview [root]\n```\n\nThis snippet shows you how to preview usage, which is an important aspect of command line interface.\n\n", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Command Line Interface in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `vite dev` or `vite serve` as aliases for starting the dev server.\n\nFor production builds, use `vite build` to ensure optimizations are applied.\n\nWhen previewing, remember that `vite preview` is not intended for production use.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/cli", "title": "Command Line Interface", "description": "This page covers the command line interface for Vite, including commands for development, building, optimizing, and previewing applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:03:00", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:type": "website", "og:title": "Command Line Interface", "og:url": "https://vite.dev", "twitter:site": "@vite_js", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "ogTitle": "Command Line Interface", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "title": "Command Line Interface | Vite", "favicon": "https://vite.dev/logo.svg", "og:site_name": "vitejs", "scrapeId": "ded3d169-38e1-499d-a302-5fa0882fcf19", "sourceURL": "https://vite.dev/guide/cli", "url": "https://vite.dev/guide/cli", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Deploying a Static Site is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Deploying a Static Site in vite-guide.\n\n# Deploying a Static Site\n\nThis page provides guides for deploying a static site using Vite, covering various platforms and configurations.Here's a quick rundown of what this is about:\n\n## Building the App\n\nYou may run `npm run build` command to build the app.\n\n```bash\n$ npm run build\n```\n\nBy default, the build output will be placed at `dist`. You may deploy this `dist` folder to any of your preferred platforms.\n\n## Testing the App Locally\n\nOnce you've built the app, you may test it locally by running `npm run preview` command.\n\n```bash\n$ npm run preview\n```\n\nThe `vite preview` command will boot up a local static web server that serves the files from `dist` at `http://localhost:4173`. It's an easy way to check if the production build looks OK in your local environment.\n\nYou may configure the port of the server by passing the `--port` flag as an argument.\n\n```json\n{\n  \"scripts\": {\n    \"preview\": \"vite preview --port 8080\"\n  }\n}\n```\n\n## GitHub Pages\n\n1. Set the correct `base` in `vite.config.js`.\n\nIf you are deploying to `https://<USERNAME>.github.io/`, or to a custom domain through GitHub Pages (eg. `www.example.com`), set `base` to `'/'`. Alternatively, you can remove `base` from the configuration, as it defaults to `'/'`.\n\nIf you are deploying to `https://<USERNAME>.github.io/<REPO>/` (eg. your repository is at `https://github.com/<USERNAME>/<REPO>`), then set `base` to `'/<REPO>/'.\n\n2. Go to your GitHub Pages configuration in the repository settings page and choose the source of deployment as \"GitHub Actions\", this will lead you to create a workflow that builds and deploys your project, a sample workflow that installs dependencies and builds using npm is provided:\n\n```yaml\n# Simple workflow for deploying static content to GitHub Pages\nname: Deploy static content to Pages\n\non:\n     # Runs on pushes targeting the default branch\n     push:\n       branches: ['main']\n\n     # Allows you to run this workflow manually from the Actions tab\n     workflow_dispatch:\n\n# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages\npermissions:\n     contents: read\n     pages: write\n     id-token: write\n\n# Allow one concurrent deployment\nconcurrency:\n     group: 'pages'\n     cancel-in-progress: true\n\njobs:\n     # Single deploy job since we're just deploying\n     deploy:\n       environment:\n         name: github-pages\n         url: ${{ steps.deployment.outputs.page_url }}\n       runs-on: ubuntu-latest\n       steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Build\n        run: npm run build\n      - name: Setup Pages\n        uses: actions/configure-pages@v4\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          # Upload dist folder\n          path: './dist'\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n## GitLab Pages and GitLab CI\n\n1. Set the correct `base` in `vite.config.js`.\n\nIf you are deploying to `https://<USERNAME or GROUP>.gitlab.io/`, you can omit `base` as it defaults to `'/'`.\n\nIf you are deploying to `https://<USERNAME or GROUP>.gitlab.io/<REPO>/`, for example your repository is at `https://gitlab.com/<USERNAME>/<REPO>`, then set `base` to `'/<REPO>/'.\n\n2. Create a file called `.gitlab-ci.yml` in the root of your project with the content below. This will build and deploy your site whenever you make changes to your content:\n\n```yaml\nimage: node:16.5.0\npages:\n     stage: deploy\n     cache:\n       key:\n         files:\n        - package-lock.json\n      prefix: npm\n    paths:\n      - node_modules/\nscript:\n    - npm install\n    - npm run build\n    - cp -a dist/. public/\nartifacts:\n    paths:\n      - public\nrules:\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n```\n\n## Netlify\n\n### Netlify CLI\n\n1. Install the [Netlify CLI](https://cli.netlify.com/).\n2. Create a new site using `ntl init`.\n3. Deploy using `ntl deploy`.\n\n```bash\n# Install the Netlify CLI\n$ npm install -g netlify-cli\n\n# Create a new site in Netlify\n$ ntl init\n\n# Deploy to a unique preview URL\n$ ntl deploy\n```\n\nThe Netlify CLI will share with you a preview URL to inspect. When you are ready to go into production, use the `prod` flag:\n\n```bash\n# Deploy the site into production\n$ ntl deploy --prod\n```\n\n## Vercel\n\n### Vercel CLI\n\n1. Install the [Vercel CLI](https://vercel.com/cli) and run `vercel` to deploy.\n2. Vercel will detect that you are using Vite and will enable the correct settings for your deployment.\n3. Your application is deployed! (e.g. [vite-vue-template.vercel.app](https://vite-vue-template.vercel.app/))\n\n```bash\n$ npm i -g vercel\n$ vercel init vite\nVercel CLI\n> Success! Initialized \"vite\" example in ~/your-folder.\n- To deploy, `cd vite` and run `vercel`.\n```\n\n## Cloudflare Pages\n\n### Cloudflare Pages via Wrangler\n\n1. Install [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/get-started/).\n2. Authenticate Wrangler with your Cloudflare account using `wrangler login`.\n3. Run your build command.\n4. Deploy using `npx wrangler pages deploy dist`.\n\n```bash\n# Install Wrangler CLI\n$ npm install -g wrangler\n\n# Login to Cloudflare account from CLI\n$ wrangler login\n\n# Run your build command\n$ npm run build\n\n# Create new deployment\n$ npx wrangler pages deploy dist\n```\n\n## Google Firebase\n\n1. Make sure you have [firebase-tools](https://www.npmjs.com/package/firebase-tools) installed.\n\n2. Create `firebase.json` and `.firebaserc` at the root of your project with the following content:\n\n```json\n{\n     \"hosting\": {\n       \"public\": \"dist\",\n       \"ignore\": [],\n       \"rewrites\": [\n         {\n           \"source\": \"**\",\n           \"destination\": \"/index.html\"\n         }\n       ]\n     }\n}\n```\n\n```json\n{\n     \"projects\": {\n       \"default\": \"<YOUR_FIREBASE_ID>\"\n     }\n}\n```\n\n## Surge\n\n1. First install [surge](https://www.npmjs.com/package/surge), if you haven’t already.\n\n2. Run `npm run build`.\n\n3. Deploy to surge by typing `surge dist`.\n\nYou can also deploy to a [custom domain](http://surge.sh/help/adding-a-custom-domain) by adding `surge dist yourdomain.com`.\n\n## Azure Static Web Apps\n\nYou can quickly deploy your Vite app with Microsoft Azure [Static Web Apps](https://aka.ms/staticwebapps) service. You need:\n\n- An Azure account and a subscription key. You can create a [free Azure account here](https://azure.microsoft.com/free).\n- Your app code pushed to [GitHub](https://github.com/).\n- The [SWA Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) in [Visual Studio Code](https://code.visualstudio.com/).\n\nInstall the extension in VS Code and navigate to your app root. Open the Static Web Apps extension, sign in to Azure, and click the '+' sign to create a new Static Web App. You will be prompted to designate which subscription key to use.\n\nFollow the wizard started by the extension to give your app a name, choose a framework preset, and designate the app root (usually `/`) and built file location `/dist`. The wizard will run and will create a GitHub action in your repo in a `.github` folder.\n\nThe action will work to deploy your app (watch its progress in your repo's Actions tab) and, when successfully completed, you can view your app in the address provided in the extension's progress window by clicking the 'Browse Website' button that appears when the GitHub action has run.\n\n## Render\n\nYou can deploy your Vite app as a Static Site on [Render](https://render.com/).\n\n1. Create a [Render account](https://dashboard.render.com/register).\n\n2. In the [Dashboard](https://dashboard.render.com/), click the **New** button and select **Static Site**.\n\n3. Connect your GitHub/GitLab account or use a public repository.\n\n4. Specify a project name and branch.\n\n   - **Build Command**: `npm install && npm run build`\n   - **Publish Directory**: `dist`\n5. Click **Create Static Site**.\n\nYour app should be deployed at `https://<PROJECTNAME>.onrender.com/`.\n\nBy default, any new commit pushed to the specified branch will automatically trigger a new deployment. [Auto-Deploy](https://render.com/docs/deploys#toggling-auto-deploy-for-a-service) can be configured in the project settings.\n\n## Flightcontrol\n\nDeploy your static site using [Flightcontrol](https://www.flightcontrol.dev/?ref=docs-vite) by following these [instructions](https://www.flightcontrol.dev/docs/reference/examples/vite?ref=docs-vite).\n\n## Kinsta Static Site Hosting\n\nDeploy your static site using [Kinsta](https://kinsta.com/static-site-hosting/) by following these [instructions](https://kinsta.com/docs/react-vite-example/).\n\n## xmit Static Site Hosting\n\nDeploy your static site using [xmit](https://xmit.co/) by following this [guide](https://xmit.dev/posts/vite-quickstart/).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "overview", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I building the app in vite-guide?\n\nAssistant: To building the app in vite-guide, here's what you do:\nYou may run `npm run build` command to build the app.\n\n```bash\n$ npm run build\n```\n\nBy default, the build output will be placed at `dist`. You may deploy this `dist` folder to any of your preferred platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I testing the app locally in vite-guide?\n\nAssistant: To testing the app locally in vite-guide, here's what you do:\nOnce you've built the app, you may test it locally by running `npm run preview` command.\n\n```bash\n$ npm run preview\n```\n\nThe `vite preview` command will boot up a local static web server that serves the files from `dist` at `http://localhost:4173`. It's an easy way to check if the production build looks OK in your local environment.\n\nYou may configure the port of the server by passing the `--port` flag as an argument.\n\n```json\n{\n  \"scripts\": {\n    \"preview\": \"vite preview --port 8080\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I github pages in vite-guide?\n\nAssistant: To github pages in vite-guide, here's what you do:\n1. Set the correct `base` in `vite.config.js`.\n\nIf you are deploying to `https://<USERNAME>.github.io/`, or to a custom domain through GitHub Pages (eg. `www.example.com`), set `base` to `'/'`. Alternatively, you can remove `base` from the configuration, as it defaults to `'/'`.\n\nIf you are deploying to `https://<USERNAME>.github.io/<REPO>/` (eg. your repository is at `https://github.com/<USERNAME>/<REPO>`), then set `base` to `'/<REPO>/'.\n\n2. Go to your GitHub Pages configuration in the repository settings page and choose the source of deployment as \"GitHub Actions\", this will lead you to create a workflow that builds and deploys your project, a sample workflow that installs dependencies and builds using npm is provided:\n\n```yaml\n# Simple workflow for deploying static content to GitHub Pages\nname: Deploy static content to Pages\n\non:\n     # Runs on pushes targeting the default branch\n     push:\n       branches: ['main']\n\n     # Allows you to run this workflow manually from the Actions tab\n     workflow_dispatch:\n\n# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages\npermissions:\n     contents: read\n     pages: write\n     id-token: write\n\n# Allow one concurrent deployment\nconcurrency:\n     group: 'pages'\n     cancel-in-progress: true\n\njobs:\n     # Single deploy job since we're just deploying\n     deploy:\n       environment:\n         name: github-pages\n         url: ${{ steps.deployment.outputs.page_url }}\n       runs-on: ubuntu-latest\n       steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Build\n        run: npm run build\n      - name: Setup Pages\n        uses: actions/configure-pages@v4\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          # Upload dist folder\n          path: './dist'\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I gitlab pages and gitlab ci in vite-guide?\n\nAssistant: To gitlab pages and gitlab ci in vite-guide, here's what you do:\n1. Set the correct `base` in `vite.config.js`.\n\nIf you are deploying to `https://<USERNAME or GROUP>.gitlab.io/`, you can omit `base` as it defaults to `'/'`.\n\nIf you are deploying to `https://<USERNAME or GROUP>.gitlab.io/<REPO>/`, for example your repository is at `https://gitlab.com/<USERNAME>/<REPO>`, then set `base` to `'/<REPO>/'.\n\n2. Create a file called `.gitlab-ci.yml` in the root of your project with the content below. This will build and deploy your site whenever you make changes to your content:\n\n```yaml\nimage: node:16.5.0\npages:\n     stage: deploy\n     cache:\n       key:\n         files:\n        - package-lock.json\n      prefix: npm\n    paths:\n      - node_modules/\nscript:\n    - npm install\n    - npm run build\n    - cp -a dist/. public/\nartifacts:\n    paths:\n      - public\nrules:\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I netlify in vite-guide?\n\nAssistant: To netlify in vite-guide, here's what you do:\n### Netlify CLI\n\n1. Install the [Netlify CLI](https://cli.netlify.com/).\n2. Create a new site using `ntl init`.\n3. Deploy using `ntl deploy`.\n\n```bash\n# Install the Netlify CLI\n$ npm install -g netlify-cli\n\n# Create a new site in Netlify\n$ ntl init\n\n# Deploy to a unique preview URL\n$ ntl deploy\n```\n\nThe Netlify CLI will share with you a preview URL to inspect. When you are ready to go into production, use the `prod` flag:\n\n```bash\n# Deploy the site into production\n$ ntl deploy --prod\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I vercel in vite-guide?\n\nAssistant: To vercel in vite-guide, here's what you do:\n### Vercel CLI\n\n1. Install the [Vercel CLI](https://vercel.com/cli) and run `vercel` to deploy.\n2. Vercel will detect that you are using Vite and will enable the correct settings for your deployment.\n3. Your application is deployed! (e.g. [vite-vue-template.vercel.app](https://vite-vue-template.vercel.app/))\n\n```bash\n$ npm i -g vercel\n$ vercel init vite\nVercel CLI\n> Success! Initialized \"vite\" example in ~/your-folder.\n- To deploy, `cd vite` and run `vercel`.\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I cloudflare pages in vite-guide?\n\nAssistant: To cloudflare pages in vite-guide, here's what you do:\n### Cloudflare Pages via Wrangler\n\n1. Install [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/get-started/).\n2. Authenticate Wrangler with your Cloudflare account using `wrangler login`.\n3. Run your build command.\n4. Deploy using `npx wrangler pages deploy dist`.\n\n```bash\n# Install Wrangler CLI\n$ npm install -g wrangler\n\n# Login to Cloudflare account from CLI\n$ wrangler login\n\n# Run your build command\n$ npm run build\n\n# Create new deployment\n$ npx wrangler pages deploy dist\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I google firebase in vite-guide?\n\nAssistant: To google firebase in vite-guide, here's what you do:\n1. Make sure you have [firebase-tools](https://www.npmjs.com/package/firebase-tools) installed.\n\n2. Create `firebase.json` and `.firebaserc` at the root of your project with the following content:\n\n```json\n{\n     \"hosting\": {\n       \"public\": \"dist\",\n       \"ignore\": [],\n       \"rewrites\": [\n         {\n           \"source\": \"**\",\n           \"destination\": \"/index.html\"\n         }\n       ]\n     }\n}\n```\n\n```json\n{\n     \"projects\": {\n       \"default\": \"<YOUR_FIREBASE_ID>\"\n     }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I surge in vite-guide?\n\nAssistant: To surge in vite-guide, here's what you do:\n1. First install [surge](https://www.npmjs.com/package/surge), if you haven’t already.\n\n2. Run `npm run build`.\n\n3. Deploy to surge by typing `surge dist`.\n\nYou can also deploy to a [custom domain](http://surge.sh/help/adding-a-custom-domain) by adding `surge dist yourdomain.com`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I azure static web apps in vite-guide?\n\nAssistant: To azure static web apps in vite-guide, here's what you do:\nYou can quickly deploy your Vite app with Microsoft Azure [Static Web Apps](https://aka.ms/staticwebapps) service. You need:\n\n- An Azure account and a subscription key. You can create a [free Azure account here](https://azure.microsoft.com/free).\n- Your app code pushed to [GitHub](https://github.com/).\n- The [SWA Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) in [Visual Studio Code](https://code.visualstudio.com/).\n\nInstall the extension in VS Code and navigate to your app root. Open the Static Web Apps extension, sign in to Azure, and click the '+' sign to create a new Static Web App. You will be prompted to designate which subscription key to use.\n\nFollow the wizard started by the extension to give your app a name, choose a framework preset, and designate the app root (usually `/`) and built file location `/dist`. The wizard will run and will create a GitHub action in your repo in a `.github` folder.\n\nThe action will work to deploy your app (watch its progress in your repo's Actions tab) and, when successfully completed, you can view your app in the address provided in the extension's progress window by clicking the 'Browse Website' button that appears when the GitHub action has run..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I render in vite-guide?\n\nAssistant: To render in vite-guide, here's what you do:\nYou can deploy your Vite app as a Static Site on [Render](https://render.com/).\n\n1. Create a [Render account](https://dashboard.render.com/register).\n\n2. In the [Dashboard](https://dashboard.render.com/), click the **New** button and select **Static Site**.\n\n3. Connect your GitHub/GitLab account or use a public repository.\n\n4. Specify a project name and branch.\n\n   - **Build Command**: `npm install && npm run build`\n   - **Publish Directory**: `dist`\n5. Click **Create Static Site**.\n\nYour app should be deployed at `https://<PROJECTNAME>.onrender.com/`.\n\nBy default, any new commit pushed to the specified branch will automatically trigger a new deployment. [Auto-Deploy](https://render.com/docs/deploys#toggling-auto-deploy-for-a-service) can be configured in the project settings..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I flightcontrol in vite-guide?\n\nAssistant: To flightcontrol in vite-guide, here's what you do:\nDeploy your static site using [Flightcontrol](https://www.flightcontrol.dev/?ref=docs-vite) by following these [instructions](https://www.flightcontrol.dev/docs/reference/examples/vite?ref=docs-vite)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I kinsta static site hosting in vite-guide?\n\nAssistant: To kinsta static site hosting in vite-guide, here's what you do:\nDeploy your static site using [Kinsta](https://kinsta.com/static-site-hosting/) by following these [instructions](https://kinsta.com/docs/react-vite-example/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I xmit static site hosting in vite-guide?\n\nAssistant: To xmit static site hosting in vite-guide, here's what you do:\nDeploy your static site using [xmit](https://xmit.co/) by following this [guide](https://xmit.dev/posts/vite-quickstart/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Deploying a Static Site in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**package.json for npm scripts**:\n\n```yaml\n{\n  \"scripts\": {\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  }\n}\n```\n\nThis snippet shows you how to package.json for npm scripts, which is an important aspect of deploying a static site.\n\n**Testing the App Locally with Custom Port**:\n\n```yaml\n{\n  \"scripts\": {\n    \"preview\": \"vite preview --port 8080\"\n  }\n}\n```\n\nThis snippet shows you how to testing the app locally with custom port, which is an important aspect of deploying a static site.\n\n**GitHub Actions Workflow for GitHub Pages**:\n\n```yaml\n# Simple workflow for deploying static content to GitHub Pages\nname: Deploy static content to Pages\n\non:\n     # Runs on pushes targeting the default branch\n     push:\n       branches: ['main']\n\n     # Allows you to run this workflow manually from the Actions tab\n     workflow_dispatch:\n\n# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages\npermissions:\n     contents: read\n     pages: write\n     id-token: write\n\n# Allow one concurrent deployment\nconcurrency:\n     group: 'pages'\n     cancel-in-progress: true\n\njobs:\n     # Single deploy job since we're just deploying\n     deploy:\n       environment:\n         name: github-pages\n         url: ${{ steps.deployment.outputs.page_url }}\n       runs-on: ubuntu-latest\n       steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Build\n        run: npm run build\n      - name: Setup Pages\n        uses: actions/configure-pages@v4\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          # Upload dist folder\n          path: './dist'\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n\n```\n\nThis snippet shows you how to github actions workflow for github pages, which is an important aspect of deploying a static site.\n\n", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "code_examples", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Deploying a Static Site in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you are using the default build output location (`dist`).\n\nUse npm or equivalent commands for other package managers like Yarn.\n\nRun `vite preview` for local testing of the production build.\n\nSet the correct `base` in `vite.config.js` for GitHub and GitLab Pages deployments.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/static-deploy", "title": "Deploying a Static Site", "description": "This page provides guides for deploying a static site using Vite, covering various platforms and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:03:30", "type": "best_practices", "page_metadata": {"ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "favicon": "https://vite.dev/logo.svg", "title": "Deploying a Static Site | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "og:title": "Deploying a Static Site", "twitter:card": "summary_large_image", "og:type": "website", "ogTitle": "Deploying a Static Site", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "fd0d68c7-1050-4805-9969-96d76f76df64", "sourceURL": "https://vite.dev/guide/static-deploy", "url": "https://vite.dev/guide/static-deploy", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Environment API is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Environment API in vite-guide.\n\n# Environment API\n\nExperimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.Here's a quick rundown of what this is about:\n\n## Formalizing Environments\n\nVite 6 formalizes the concept of Environments. Until Vite 5, there were two implicit Environments ( `client`, and optionally `ssr`). The new Environment API allows users and framework authors to create as many environments as needed to map the way their apps work in production. This new capability required a big internal refactoring, but a lot of effort has been placed on backward compatibility. The initial goal of Vite 6 is to move the ecosystem to the new major as smoothly as possible, delaying the adoption of these new experimental APIs until enough users have migrated and frameworks and plugin authors have validated the new design.\n\n## Closing the Gap Between Build and Dev\n\nFor a simple SPA/MPA, no new APIs around environments are exposed to the config. Internally, Vite will apply the options to a `client` environment, but it's not necessary to know of this concept when configuring Vite. The config and behavior from Vite 5 should work seamlessly here.\n\nWhen we move to a typical server-side rendered (SSR) app, we'll have two environments:\n\n- `client`: runs the app in the browser.\n- `server`: runs the app in node (or other server runtimes) which renders pages before sending them to the browser.\n\nIn dev, Vite executes the server code in the same Node process as the Vite dev server, giving a close approximation to the production environment. However, it is also possible for servers to run in other JS runtimes, like [Cloudflare's workerd](https://github.com/cloudflare/workerd) which have different constraints. Modern apps may also run in more than two environments, e.g. a browser, a node server, and an edge server. Vite 5 didn't allow to properly represent these environments.\n\nVite 6 allows users to configure their app during build and dev to map all of its environments. During dev, a single Vite dev server can now be used to run code in multiple different environments concurrently. The app source code is still transformed by Vite dev server. On top of the shared HTTP server, middlewares, resolved config, and plugins pipeline, the Vite dev server now has a set of independent dev environments. Each of them is configured to match the production environment as closely as possible, and is connected to a dev runtime where the code is executed (for workerd, the server code can now run in miniflare locally). In the client, the browser imports and executes the code. In other environments, a module runner fetches and evaluates the transformed code.\n\n## Environments Configuration\n\nFor an SPA/MPA, the configuration will look similar to Vite 5. Internally these options are used to configure the `client` environment.\n\n```js\nexport default defineConfig({\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n})\n```\n\nThis is important because we'd like to keep Vite approachable and avoid exposing new concepts until they are needed.\n\nIf the app is composed of several environments, then these environments can be configured explicitly with the `environments` config option.\n\n```js\nexport default {\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n  environments: {\n    server: {},\n    edge: {\n      resolve: {\n        noExternal: true,\n      },\n    },\n  },\n}\n```\n\nWhen not explicitly documented, environment inherits the configured top-level config options (for example, the new `server` and `edge` environments will inherit the `build.sourcemap: false` option). A small number of top-level options, like `optimizeDeps`, only apply to the `client` environment, as they don't work well when applied as a default to server environments. The `client` environment can also be configured explicitly through `environments.client`, but we recommend to do it with the top-level options so the client config remains unchanged when adding new environments.\n\nThe `EnvironmentOptions` interface exposes all the per-environment options. There are environment options that apply to both `build` and `dev`, like `resolve`. And there are `DevEnvironmentOptions` and `BuildEnvironmentOptions` for dev and build specific options (like `dev.warmup` or `build.outDir`). Some options like `optimizeDeps` only applies to dev, but is kept as top level instead of nested in `dev` for backward compatibility.\n\n```ts\ninterface EnvironmentOptions {\n  define?: Record<string, any>\n  resolve?: EnvironmentResolveOptions\n  optimizeDeps: DepOptimizationOptions\n  consumer?: 'client' | 'server'\n  dev: DevOptions\n  build: BuildOptions\n}\n```\n\nThe `UserConfig` interface extends from the `EnvironmentOptions` interface, allowing to configure the client and defaults for other environments, configured through the `environments` option. The `client` and a server environment named `ssr` are always present during dev. This allows backward compatibility with `server.ssrLoadModule(url)` and `server.moduleGraph`. During build, the `client` environment is always present, and the `ssr` environment is only present if it is explicitly configured (using `environments.ssr` or for backward compatibility `build.ssr`). An app doesn't need to use the `ssr` name for its SSR environment, it could name it `server` for example.\n\n```ts\ninterface UserConfig extends EnvironmentOptions {\n  environments: Record<string, EnvironmentOptions>\n  // other options\n}\n```\n\nNote that the `ssr` top-level property is going to be deprecated once the Environment API is stable. This option has the same role as `environments`, but for the default `ssr` environment and only allowed configuring of a small set of options.\n\n## Custom Environment Instances\n\nLow level configuration APIs are available so runtime providers can provide environments with proper defaults for their runtimes. These environments can also spawn other processes or threads to run the modules during dev in a closer runtime to the production environment.\n\n```js\nimport { customEnvironment } from 'vite-environment-provider'\n\nexport default {\n  build: {\n    outDir: '/dist/client',\n  },\n  environments: {\n    ssr: customEnvironment({\n      build: {\n        outDir: '/dist/ssr',\n      },\n    }),\n  },\n}\n```\n\n## Backward Compatibility\n\nThe current Vite server API are not yet deprecated and are backward compatible with Vite 5. The new Environment API is experimental.\n\nThe `server.moduleGraph` returns a mixed view of the client and ssr module graphs. Backward compatible mixed module nodes will be returned from all its methods. The same scheme is used for the module nodes passed to `handleHotUpdate`.\n\nWe don't recommend switching to Environment API yet. We are aiming for a good portion of the user base to adopt Vite 6 before so plugins don't need to maintain two versions. Checkout the future breaking changes section for information on future deprecations and upgrade path:\n\n- [`this.environment` in Hooks](https://vite.dev/changes/this-environment-in-hooks)\n- [HMR `hotUpdate` Plugin Hook](https://vite.dev/changes/hotupdate-hook)\n- [Move to per-environment APIs](https://vite.dev/changes/per-environment-apis)\n- [SSR using `ModuleRunner` API](https://vite.dev/changes/ssr-using-modulerunner)\n- [Shared plugins during build](https://vite.dev/changes/shared-plugins-during-build)\n\n## Target Users\n\nThis guide provides the basic concepts about environments for end users.\n\nPlugin authors have a more consistent API available to interact with the current environment configuration. If you're building on top of Vite, the [Environment API Plugins Guide](https://vite.dev/guide/api-environment-plugins) guide describes the way extended plugin APIs available to support multiple custom environments.\n\nFrameworks could decide to expose environments at different levels. If you're a framework author, continue reading the [Environment API Frameworks Guide](https://vite.dev/guide/api-environment-frameworks) to learn about the Environment API programmatic side.\n\nFor Runtime providers, the [Environment API Runtimes Guide](https://vite.dev/guide/api-environment-runtimes) explains how to offer custom environment to be consumed by frameworks and users.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "overview", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I formalizing environments in vite-guide?\n\nAssistant: To formalizing environments in vite-guide, here's what you do:\nVite 6 formalizes the concept of Environments. Until Vite 5, there were two implicit Environments ( `client`, and optionally `ssr`). The new Environment API allows users and framework authors to create as many environments as needed to map the way their apps work in production. This new capability required a big internal refactoring, but a lot of effort has been placed on backward compatibility. The initial goal of Vite 6 is to move the ecosystem to the new major as smoothly as possible, delaying the adoption of these new experimental APIs until enough users have migrated and frameworks and plugin authors have validated the new design..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I closing the gap between build and dev in vite-guide?\n\nAssistant: To closing the gap between build and dev in vite-guide, here's what you do:\nFor a simple SPA/MPA, no new APIs around environments are exposed to the config. Internally, Vite will apply the options to a `client` environment, but it's not necessary to know of this concept when configuring Vite. The config and behavior from Vite 5 should work seamlessly here.\n\nWhen we move to a typical server-side rendered (SSR) app, we'll have two environments:\n\n- `client`: runs the app in the browser.\n- `server`: runs the app in node (or other server runtimes) which renders pages before sending them to the browser.\n\nIn dev, Vite executes the server code in the same Node process as the Vite dev server, giving a close approximation to the production environment. However, it is also possible for servers to run in other JS runtimes, like [Cloudflare's workerd](https://github.com/cloudflare/workerd) which have different constraints. Modern apps may also run in more than two environments, e.g. a browser, a node server, and an edge server. Vite 5 didn't allow to properly represent these environments.\n\nVite 6 allows users to configure their app during build and dev to map all of its environments. During dev, a single Vite dev server can now be used to run code in multiple different environments concurrently. The app source code is still transformed by Vite dev server. On top of the shared HTTP server, middlewares, resolved config, and plugins pipeline, the Vite dev server now has a set of independent dev environments. Each of them is configured to match the production environment as closely as possible, and is connected to a dev runtime where the code is executed (for workerd, the server code can now run in miniflare locally). In the client, the browser imports and executes the code. In other environments, a module runner fetches and evaluates the transformed code..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environments configuration in vite-guide?\n\nAssistant: To environments configuration in vite-guide, here's what you do:\nFor an SPA/MPA, the configuration will look similar to Vite 5. Internally these options are used to configure the `client` environment.\n\n```js\nexport default defineConfig({\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n})\n```\n\nThis is important because we'd like to keep Vite approachable and avoid exposing new concepts until they are needed.\n\nIf the app is composed of several environments, then these environments can be configured explicitly with the `environments` config option.\n\n```js\nexport default {\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n  environments: {\n    server: {},\n    edge: {\n      resolve: {\n        noExternal: true,\n      },\n    },\n  },\n}\n```\n\nWhen not explicitly documented, environment inherits the configured top-level config options (for example, the new `server` and `edge` environments will inherit the `build.sourcemap: false` option). A small number of top-level options, like `optimizeDeps`, only apply to the `client` environment, as they don't work well when applied as a default to server environments. The `client` environment can also be configured explicitly through `environments.client`, but we recommend to do it with the top-level options so the client config remains unchanged when adding new environments.\n\nThe `EnvironmentOptions` interface exposes all the per-environment options. There are environment options that apply to both `build` and `dev`, like `resolve`. And there are `DevEnvironmentOptions` and `BuildEnvironmentOptions` for dev and build specific options (like `dev.warmup` or `build.outDir`). Some options like `optimizeDeps` only applies to dev, but is kept as top level instead of nested in `dev` for backward compatibility.\n\n```ts\ninterface EnvironmentOptions {\n  define?: Record<string, any>\n  resolve?: EnvironmentResolveOptions\n  optimizeDeps: DepOptimizationOptions\n  consumer?: 'client' | 'server'\n  dev: DevOptions\n  build: BuildOptions\n}\n```\n\nThe `UserConfig` interface extends from the `EnvironmentOptions` interface, allowing to configure the client and defaults for other environments, configured through the `environments` option. The `client` and a server environment named `ssr` are always present during dev. This allows backward compatibility with `server.ssrLoadModule(url)` and `server.moduleGraph`. During build, the `client` environment is always present, and the `ssr` environment is only present if it is explicitly configured (using `environments.ssr` or for backward compatibility `build.ssr`). An app doesn't need to use the `ssr` name for its SSR environment, it could name it `server` for example.\n\n```ts\ninterface UserConfig extends EnvironmentOptions {\n  environments: Record<string, EnvironmentOptions>\n  // other options\n}\n```\n\nNote that the `ssr` top-level property is going to be deprecated once the Environment API is stable. This option has the same role as `environments`, but for the default `ssr` environment and only allowed configuring of a small set of options..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I custom environment instances in vite-guide?\n\nAssistant: To custom environment instances in vite-guide, here's what you do:\nLow level configuration APIs are available so runtime providers can provide environments with proper defaults for their runtimes. These environments can also spawn other processes or threads to run the modules during dev in a closer runtime to the production environment.\n\n```js\nimport { customEnvironment } from 'vite-environment-provider'\n\nexport default {\n  build: {\n    outDir: '/dist/client',\n  },\n  environments: {\n    ssr: customEnvironment({\n      build: {\n        outDir: '/dist/ssr',\n      },\n    }),\n  },\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I backward compatibility in vite-guide?\n\nAssistant: To backward compatibility in vite-guide, here's what you do:\nThe current Vite server API are not yet deprecated and are backward compatible with Vite 5. The new Environment API is experimental.\n\nThe `server.moduleGraph` returns a mixed view of the client and ssr module graphs. Backward compatible mixed module nodes will be returned from all its methods. The same scheme is used for the module nodes passed to `handleHotUpdate`.\n\nWe don't recommend switching to Environment API yet. We are aiming for a good portion of the user base to adopt Vite 6 before so plugins don't need to maintain two versions. Checkout the future breaking changes section for information on future deprecations and upgrade path:\n\n- [`this.environment` in Hooks](https://vite.dev/changes/this-environment-in-hooks)\n- [HMR `hotUpdate` Plugin Hook](https://vite.dev/changes/hotupdate-hook)\n- [Move to per-environment APIs](https://vite.dev/changes/per-environment-apis)\n- [SSR using `ModuleRunner` API](https://vite.dev/changes/ssr-using-modulerunner)\n- [Shared plugins during build](https://vite.dev/changes/shared-plugins-during-build).\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I target users in vite-guide?\n\nAssistant: To target users in vite-guide, here's what you do:\nThis guide provides the basic concepts about environments for end users.\n\nPlugin authors have a more consistent API available to interact with the current environment configuration. If you're building on top of Vite, the [Environment API Plugins Guide](https://vite.dev/guide/api-environment-plugins) guide describes the way extended plugin APIs available to support multiple custom environments.\n\nFrameworks could decide to expose environments at different levels. If you're a framework author, continue reading the [Environment API Frameworks Guide](https://vite.dev/guide/api-environment-frameworks) to learn about the Environment API programmatic side.\n\nFor Runtime providers, the [Environment API Runtimes Guide](https://vite.dev/guide/api-environment-runtimes) explains how to offer custom environment to be consumed by frameworks and users..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Environment API in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic SPA/MPA Configuration**:\n\n```yaml\nexport default defineConfig({\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n})\n```\n\nThis snippet shows you how to basic spa/mpa configuration, which is an important aspect of environment api.\n\n**Multiple Environments Configuration**:\n\n```yaml\nexport default {\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n  environments: {\n    server: {},\n    edge: {\n      resolve: {\n        noExternal: true,\n      },\n    },\n  },\n}\n```\n\nThis snippet shows you how to multiple environments configuration, which is an important aspect of environment api.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "code_examples", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Environment API in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nKeep Vite approachable and avoid exposing new concepts until they are needed.\n\nUse top-level options for client configuration to remain unchanged when adding new environments.\n\nDo not switch to Environment API yet; wait for broader adoption of Vite 6.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-environment", "title": "Environment API", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:03:53", "type": "best_practices", "page_metadata": {"ogSiteName": "vitejs", "og:url": "https://vite.dev", "og:site_name": "vitejs", "favicon": "https://vite.dev/logo.svg", "language": "en-US", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Environment API", "generator": "VitePress v1.6.3", "title": "Environment API | Vite", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Environment API", "scrapeId": "c4720f47-152b-4738-9494-ed0f3be2ec60", "sourceURL": "https://vite.dev/guide/api-environment", "url": "https://vite.dev/guide/api-environment", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Backend Integration is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Backend Integration in vite-guide.\n\n# Backend Integration\n\nThis page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.Here's a quick rundown of what this is about:\n\n## Note\n\nIf you want to serve the HTML using a traditional backend (e.g. Rails, Laravel) but use Vite for serving assets, check for existing integrations listed in Awesome Vite. If you need a custom integration, you can follow the steps in this guide to configure it manually.\n\n## Configuration Steps\n\n1. In your Vite config, configure the entry and enable build manifest:\n\n```javascript\nexport default defineConfig({\n  server: {\n    cors: {\n      // the origin you will be accessing via browser\n      origin: 'http://my-backend.example.com',\n    },\n  },\n  build: {\n    // generate .vite/manifest.json in outDir\n    manifest: true,\n    rollupOptions: {\n      // overwrite default .html entry\n      input: '/path/to/main.js',\n    },\n  },\n})\n```\n\nIf you haven't disabled the module preload polyfill, you also need to import the polyfill in your entry:\n\n```javascript\n// add the beginning of your app entry\nimport 'vite/modulepreload-polyfill'\n```\n\n2. For development, inject the following in your server's HTML template (substitute `http://localhost:5173` with the local URL Vite is running at):\n\n```html\n<!-- if development -->\n<script type=\"module\" src=\"http://localhost:5173/@vite/client\"></script>\n<script type=\"module\" src=\"http://localhost:5173/main.js\"></script>\n```\n\nIn order to properly serve assets, you have two options:\n\n- Make sure the server is configured to proxy static assets requests to the Vite server\n- Set server.origin so that generated asset URLs will be resolved using the back-end server URL instead of a relative path\n\nThis is needed for assets such as images to load properly.\n\nNote if you are using React with @vitejs/plugin-react, you'll also need to add this before the above scripts:\n\n```html\n<script type=\"module\">\n  import RefreshRuntime from 'http://localhost:5173/@react-refresh'\n  RefreshRuntime.injectIntoGlobalHook(window)\n  window.$RefreshReg$ = () => {}\n  window.$RefreshSig$ = () => (type) => type\n  window.__vite_plugin_react_preamble_installed__ = true\n</script>\n```\n\n3. For production: after running `vite build`, a `.vite/manifest.json` file will be generated alongside other asset files. An example manifest file looks like this:\n\n```json\n{\n  \"_shared-B7PI925R.js\": {\n    \"file\": \"assets/shared-B7PI925R.js\",\n    \"name\": \"shared\",\n    \"css\": [\"assets/shared-ChJ_j-JJ.css\"]\n  },\n  \"_shared-ChJ_j-JJ.css\": {\n    \"file\": \"assets/shared-ChJ_j-JJ.css\",\n    \"src\": \"_shared-ChJ_j-JJ.css\"\n  },\n  \"baz.js\": {\n    \"file\": \"assets/baz-B2H3sXNv.js\",\n    \"name\": \"baz\",\n    \"src\": \"baz.js\",\n    \"isDynamicEntry\": true\n  },\n  \"views/bar.js\": {\n    \"file\": \"assets/bar-gkvgaI9m.js\",\n    \"name\": \"bar\",\n    \"src\": \"views/bar.js\",\n    \"isEntry\": true,\n    \"imports\": [\"_shared-B7PI925R.js\"],\n    \"dynamicImports\": [\"baz.js\"]\n  },\n  \"views/foo.js\": {\n    \"file\": \"assets/foo-BRBmoGS9.js\",\n    \"name\": \"foo\",\n    \"src\": \"views/foo.js\",\n    \"isEntry\": true,\n    \"imports\": [\"_shared-B7PI925R.js\"],\n    \"css\": [\"assets/foo-5UjPuW-k.css\"]\n  }\n}\n```\n\nThe manifest has a `Record<name, chunk>` structure. For entry or dynamic entry chunks, the key is the relative src path from project root. For non entry chunks, the key is the base name of the generated file prefixed with `_`. For the CSS file generated when build.cssCodeSplit is `false`, the key is `style.css`. Chunks will contain information on its static and dynamic imports (both are keys that map to the corresponding chunk in the manifest), and also its corresponding CSS and asset files (if any).\n\n4. You can use this file to render links or preload directives with hashed filenames. Here is an example HTML template to render the proper links:\n\n```html\n<!-- if production -->\n<!-- for cssFile of manifest[name].css -->\n<link rel=\"stylesheet\" href=\"/{{ cssFile }}\" />\n\n<!-- for chunk of importedChunks(manifest, name) -->\n<!-- for cssFile of chunk.css -->\n<link rel=\"stylesheet\" href=\"/{{ cssFile }}\" />\n\n<script type=\"module\" src=\"/{{ manifest[name].file }}\"></script>\n\n<!-- for chunk of importedChunks(manifest, name) -->\n<link rel=\"modulepreload\" href=\"/{{ chunk.file }}\" />\n```\n\nSpecifically, a backend generating HTML should include the following tags given a manifest file and an entry point:\n\n- A `<link rel=\"stylesheet\">` tag for each file in the entry point chunk's `css` list\n- Recursively follow all chunks in the entry point's `imports` list and include a `<link rel=\"stylesheet\">` tag for each CSS file of each imported chunk.\n- A tag for the `file` key of the entry point chunk ( `<script type=\"module\">` for JavaScript, or `<link rel=\"stylesheet\">` for CSS)\n- Optionally, `<link rel=\"modulepreload\">` tag for the `file` of each imported JavaScript chunk, again recursively following the imports starting from the entry point chunk.\n\nFollowing the above example manifest, for the entry point `views/foo.js` the following tags should be included in production:\n\n```html\n<link rel=\"stylesheet\" href=\"assets/foo-5UjPuW-k.css\" />\n<link rel=\"stylesheet\" href=\"assets/shared-ChJ_j-JJ.css\" />\n<script type=\"module\" src=\"assets/foo-BRBmoGS9.js\"></script>\n<!-- optional -->\n<link rel=\"modulepreload\" href=\"assets/shared-B7PI925R.js\" />\n```\n\nWhile the following should be included for the entry point `views/bar.js`:\n\n```html\n<link rel=\"stylesheet\" href=\"assets/shared-ChJ_j-JJ.css\" />\n<script type=\"module\" src=\"assets/bar-gkvgaI9m.js\"></script>\n<!-- optional -->\n<link rel=\"modulepreload\" href=\"assets/shared-B7PI925R.js\" />\n```\n\n## Pseudo Implementation of importedChunks\n\nAn example pseudo implementation of `importedChunks` in TypeScript:\n\n```typescript\nimport type { Manifest, ManifestChunk } from 'vite'\n\nexport default function importedChunks(\n  manifest: Manifest,\n  name: string,\n): ManifestChunk[] {\n  const seen = new Set<string>()\n\n  function getImportedChunks(chunk: ManifestChunk): ManifestChunk[] {\n    const chunks: ManifestChunk[] = []\n    for (const file of chunk.imports ?? []) {\n      const importee = manifest[file]\n      if (seen.has(file)) {\n        continue\n      }\n      seen.add(file)\n\n      chunks.push(...getImportedChunks(importee))\n      chunks.push(importee)\n    }\n\n    return chunks\n  }\n\n  return getImportedChunks(manifest[name])\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/backend-integration", "title": "Backend Integration", "description": "This page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:35", "type": "overview", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "title": "Backend Integration | Vite", "og:type": "website", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Backend Integration", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Backend Integration", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "scrapeId": "be87cb0e-0df3-462a-8908-8f6e3a9a76b4", "sourceURL": "https://vite.dev/guide/backend-integration", "url": "https://vite.dev/guide/backend-integration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I note in vite-guide?\n\nAssistant: To note in vite-guide, here's what you do:\nIf you want to serve the HTML using a traditional backend (e.g. Rails, Laravel) but use Vite for serving assets, check for existing integrations listed in Awesome Vite. If you need a custom integration, you can follow the steps in this guide to configure it manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/backend-integration", "title": "Backend Integration", "description": "This page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:35", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "title": "Backend Integration | Vite", "og:type": "website", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Backend Integration", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Backend Integration", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "scrapeId": "be87cb0e-0df3-462a-8908-8f6e3a9a76b4", "sourceURL": "https://vite.dev/guide/backend-integration", "url": "https://vite.dev/guide/backend-integration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I configuration steps in vite-guide?\n\nAssistant: To configuration steps in vite-guide, here's what you do:\n1. In your Vite config, configure the entry and enable build manifest:\n\n```javascript\nexport default defineConfig({\n  server: {\n    cors: {\n      // the origin you will be accessing via browser\n      origin: 'http://my-backend.example.com',\n    },\n  },\n  build: {\n    // generate .vite/manifest.json in outDir\n    manifest: true,\n    rollupOptions: {\n      // overwrite default .html entry\n      input: '/path/to/main.js',\n    },\n  },\n})\n```\n\nIf you haven't disabled the module preload polyfill, you also need to import the polyfill in your entry:\n\n```javascript\n// add the beginning of your app entry\nimport 'vite/modulepreload-polyfill'\n```\n\n2. For development, inject the following in your server's HTML template (substitute `http://localhost:5173` with the local URL Vite is running at):\n\n```html\n<!-- if development -->\n<script type=\"module\" src=\"http://localhost:5173/@vite/client\"></script>\n<script type=\"module\" src=\"http://localhost:5173/main.js\"></script>\n```\n\nIn order to properly serve assets, you have two options:\n\n- Make sure the server is configured to proxy static assets requests to the Vite server\n- Set server.origin so that generated asset URLs will be resolved using the back-end server URL instead of a relative path\n\nThis is needed for assets such as images to load properly.\n\nNote if you are using React with @vitejs/plugin-react, you'll also need to add this before the above scripts:\n\n```html\n<script type=\"module\">\n  import RefreshRuntime from 'http://localhost:5173/@react-refresh'\n  RefreshRuntime.injectIntoGlobalHook(window)\n  window.$RefreshReg$ = () => {}\n  window.$RefreshSig$ = () => (type) => type\n  window.__vite_plugin_react_preamble_installed__ = true\n</script>\n```\n\n3. For production: after running `vite build`, a `.vite/manifest.json` file will be generated alongside other asset files. An example manifest file looks like this:\n\n```json\n{\n  \"_shared-B7PI925R.js\": {\n    \"file\": \"assets/shared-B7PI925R.js\",\n    \"name\": \"shared\",\n    \"css\": [\"assets/shared-ChJ_j-JJ.css\"]\n  },\n  \"_shared-ChJ_j-JJ.css\": {\n    \"file\": \"assets/shared-ChJ_j-JJ.css\",\n    \"src\": \"_shared-ChJ_j-JJ.css\"\n  },\n  \"baz.js\": {\n    \"file\": \"assets/baz-B2H3sXNv.js\",\n    \"name\": \"baz\",\n    \"src\": \"baz.js\",\n    \"isDynamicEntry\": true\n  },\n  \"views/bar.js\": {\n    \"file\": \"assets/bar-gkvgaI9m.js\",\n    \"name\": \"bar\",\n    \"src\": \"views/bar.js\",\n    \"isEntry\": true,\n    \"imports\": [\"_shared-B7PI925R.js\"],\n    \"dynamicImports\": [\"baz.js\"]\n  },\n  \"views/foo.js\": {\n    \"file\": \"assets/foo-BRBmoGS9.js\",\n    \"name\": \"foo\",\n    \"src\": \"views/foo.js\",\n    \"isEntry\": true,\n    \"imports\": [\"_shared-B7PI925R.js\"],\n    \"css\": [\"assets/foo-5UjPuW-k.css\"]\n  }\n}\n```\n\nThe manifest has a `Record<name, chunk>` structure. For entry or dynamic entry chunks, the key is the relative src path from project root. For non entry chunks, the key is the base name of the generated file prefixed with `_`. For the CSS file generated when build.cssCodeSplit is `false`, the key is `style.css`. Chunks will contain information on its static and dynamic imports (both are keys that map to the corresponding chunk in the manifest), and also its corresponding CSS and asset files (if any).\n\n4. You can use this file to render links or preload directives with hashed filenames. Here is an example HTML template to render the proper links:\n\n```html\n<!-- if production -->\n<!-- for cssFile of manifest[name].css -->\n<link rel=\"stylesheet\" href=\"/{{ cssFile }}\" />\n\n<!-- for chunk of importedChunks(manifest, name) -->\n<!-- for cssFile of chunk.css -->\n<link rel=\"stylesheet\" href=\"/{{ cssFile }}\" />\n\n<script type=\"module\" src=\"/{{ manifest[name].file }}\"></script>\n\n<!-- for chunk of importedChunks(manifest, name) -->\n<link rel=\"modulepreload\" href=\"/{{ chunk.file }}\" />\n```\n\nSpecifically, a backend generating HTML should include the following tags given a manifest file and an entry point:\n\n- A `<link rel=\"stylesheet\">` tag for each file in the entry point chunk's `css` list\n- Recursively follow all chunks in the entry point's `imports` list and include a `<link rel=\"stylesheet\">` tag for each CSS file of each imported chunk.\n- A tag for the `file` key of the entry point chunk ( `<script type=\"module\">` for JavaScript, or `<link rel=\"stylesheet\">` for CSS)\n- Optionally, `<link rel=\"modulepreload\">` tag for the `file` of each imported JavaScript chunk, again recursively following the imports starting from the entry point chunk.\n\nFollowing the above example manifest, for the entry point `views/foo.js` the following tags should be included in production:\n\n```html\n<link rel=\"stylesheet\" href=\"assets/foo-5UjPuW-k.css\" />\n<link rel=\"stylesheet\" href=\"assets/shared-ChJ_j-JJ.css\" />\n<script type=\"module\" src=\"assets/foo-BRBmoGS9.js\"></script>\n<!-- optional -->\n<link rel=\"modulepreload\" href=\"assets/shared-B7PI925R.js\" />\n```\n\nWhile the following should be included for the entry point `views/bar.js`:\n\n```html\n<link rel=\"stylesheet\" href=\"assets/shared-ChJ_j-JJ.css\" />\n<script type=\"module\" src=\"assets/bar-gkvgaI9m.js\"></script>\n<!-- optional -->\n<link rel=\"modulepreload\" href=\"assets/shared-B7PI925R.js\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/backend-integration", "title": "Backend Integration", "description": "This page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:35", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "title": "Backend Integration | Vite", "og:type": "website", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Backend Integration", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Backend Integration", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "scrapeId": "be87cb0e-0df3-462a-8908-8f6e3a9a76b4", "sourceURL": "https://vite.dev/guide/backend-integration", "url": "https://vite.dev/guide/backend-integration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I pseudo implementation of importedchunks in vite-guide?\n\nAssistant: To pseudo implementation of importedchunks in vite-guide, here's what you do:\nAn example pseudo implementation of `importedChunks` in TypeScript:\n\n```typescript\nimport type { Manifest, ManifestChunk } from 'vite'\n\nexport default function importedChunks(\n  manifest: Manifest,\n  name: string,\n): ManifestChunk[] {\n  const seen = new Set<string>()\n\n  function getImportedChunks(chunk: ManifestChunk): ManifestChunk[] {\n    const chunks: ManifestChunk[] = []\n    for (const file of chunk.imports ?? []) {\n      const importee = manifest[file]\n      if (seen.has(file)) {\n        continue\n      }\n      seen.add(file)\n\n      chunks.push(...getImportedChunks(importee))\n      chunks.push(importee)\n    }\n\n    return chunks\n  }\n\n  return getImportedChunks(manifest[name])\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/backend-integration", "title": "Backend Integration", "description": "This page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:35", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "title": "Backend Integration | Vite", "og:type": "website", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Backend Integration", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Backend Integration", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "scrapeId": "be87cb0e-0df3-462a-8908-8f6e3a9a76b4", "sourceURL": "https://vite.dev/guide/backend-integration", "url": "https://vite.dev/guide/backend-integration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Backend Integration in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Vite Configuration Example**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    cors: {\n      origin: 'http://my-backend.example.com',\n    },\n  },\n  build: {\n    manifest: true,\n    rollupOptions: {\n      input: '/path/to/main.js',\n    },\n  },\n})\n```\n\nThis snippet shows you how to vite configuration example, which is an important aspect of backend integration.\n\n**Development HTML Template**:\n\n```yaml\n<!-- if development -->\n<script type=\"module\" src=\"http://localhost:5173/@vite/client\"></script>\n<script type=\"module\" src=\"http://localhost:5173/main.js\"></script>\n```\n\nThis snippet shows you how to development html template, which is an important aspect of backend integration.\n\n**Production Manifest Example**:\n\n```yaml\n{\n  \"_shared-B7PI925R.js\": {\n    \"file\": \"assets/shared-B7PI925R.js\",\n    \"name\": \"shared\",\n    \"css\": [\"assets/shared-ChJ_j-JJ.css\"]\n  },\n  \"_shared-ChJ_j-JJ.css\": {\n    \"file\": \"assets/shared-ChJ_j-JJ.css\",\n    \"src\": \"_shared-ChJ_j-JJ.css\"\n  },\n  \"baz.js\": {\n    \"file\": \"assets/baz-B2H3sXNv.js\",\n    \"name\": \"baz\",\n    \"src\": \"baz.js\",\n    \"isDynamicEntry\": true\n  },\n  \"views/bar.js\": {\n    \"file\": \"assets/bar-gkvgaI9m.js\",\n    \"name\": \"bar\",\n    \"src\": \"views/bar.js\",\n    \"isEntry\": true,\n    \"imports\": [\"_shared-B7PI925R.js\"],\n    \"dynamicImports\": [\"baz.js\"]\n  },\n  \"views/foo.js\": {\n    \"file\": \"assets/foo-BRBmoGS9.js\",\n    \"name\": \"foo\",\n    \"src\": \"views/foo.js\",\n    \"isEntry\": true,\n    \"imports\": [\"_shared-B7PI925R.js\"],\n    \"css\": [\"assets/foo-5UjPuW-k.css\"]\n  }\n}\n```\n\nThis snippet shows you how to production manifest example, which is an important aspect of backend integration.\n\n", "metadata": {"source_url": "https://vite.dev/guide/backend-integration", "title": "Backend Integration", "description": "This page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:35", "type": "code_examples", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "title": "Backend Integration | Vite", "og:type": "website", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Backend Integration", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Backend Integration", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "scrapeId": "be87cb0e-0df3-462a-8908-8f6e3a9a76b4", "sourceURL": "https://vite.dev/guide/backend-integration", "url": "https://vite.dev/guide/backend-integration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Backend Integration in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure the server is configured to proxy static assets requests to the Vite server.\n\nSet server.origin so that generated asset URLs will be resolved using the back-end server URL instead of a relative path.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/backend-integration", "title": "Backend Integration", "description": "This page covers how to integrate Vite with traditional backends like Rails or Laravel, including configuration steps for serving HTML and assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:35", "type": "best_practices", "page_metadata": {"og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "title": "Backend Integration | Vite", "og:type": "website", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Backend Integration", "favicon": "https://vite.dev/logo.svg", "ogTitle": "Backend Integration", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "ogImage": "https://vite.dev/og-image.jpg", "scrapeId": "be87cb0e-0df3-462a-8908-8f6e3a9a76b4", "sourceURL": "https://vite.dev/guide/backend-integration", "url": "https://vite.dev/guide/backend-integration", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what JavaScript API is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain JavaScript API in vite-guide.\n\n# JavaScript API\n\nVite's JavaScript APIs are fully typed, and it's recommended to use TypeScript or enable JS type checking in VS Code to leverage the intellisense and validation.Here's a quick rundown of what this is about:\n\n## createServer\n\n**Type Signature:**\n\n```ts\nasync function createServer(inlineConfig?: InlineConfig): Promise<ViteDevServer>\n```\n\n**Example Usage:**\n\n```ts\nimport { fileURLToPath } from 'node:url'\nimport { createServer } from 'vite'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\nconst server = await createServer({\n  // any valid user config options, plus `mode` and `configFile`\n  configFile: false,\n  root: __dirname,\n  server: {\n    port: 1337,\n  },\n})\nawait server.listen()\n\nserver.printUrls()\n\nserver.bindCLIShortcuts({ print: true })\n```\n\nNOTE\n\nWhen using `createServer` and `build` in the same Node.js process, both functions rely on `process.env.NODE_ENV` to work properly, which also depends on the `mode` config option. To prevent conflicting behavior, set `process.env.NODE_ENV` or the `mode` of the two APIs to `development`. Otherwise, you can spawn a child process to run the APIs separately.\n\nNOTE\n\nWhen using [middleware mode](https://vite.dev/config/server-options#server-middlewaremode) combined with [proxy config for WebSocket](https://vite.dev/config/server-options#server-proxy), the parent http server should be provided in `middlewareMode` to bind the proxy correctly.\n\n**Example**\n\n```ts\nimport http from 'http'\nimport { createServer } from 'vite'\n\nconst parentServer = http.createServer() // or express, koa, etc.\n\nconst vite = await createServer({\n  server: {\n    // Enable middleware mode\n    middlewareMode: {\n      // Provide the parent http server for proxy WebSocket\n      server: parentServer,\n    },\n    proxy: {\n      '/ws': {\n        target: 'ws://localhost:3000', // Proxying WebSocket\n        ws: true,\n      },\n    },\n  },\n})\n\nparentServer.use(vite.middlewares)\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-javascript", "title": "JavaScript API", "description": "Vite's JavaScript APIs are fully typed, and it's recommended to use TypeScript or enable JS type checking in VS Code to leverage the intellisense and validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:07:52", "type": "overview", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "JavaScript API", "theme-color": "#646cff", "og:site_name": "vitejs", "title": "JavaScript API | Vite", "favicon": "https://vite.dev/logo.svg", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:card": "summary_large_image", "og:title": "JavaScript API", "ogUrl": "https://vite.dev", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vite.dev", "scrapeId": "1e520c2e-0bac-4b00-8257-d1ddcd68b0be", "sourceURL": "https://vite.dev/guide/api-javascript", "url": "https://vite.dev/guide/api-javascript", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I createserver in vite-guide?\n\nAssistant: To createserver in vite-guide, here's what you do:\n**Type Signature:**\n\n```ts\nasync function createServer(inlineConfig?: InlineConfig): Promise<ViteDevServer>\n```\n\n**Example Usage:**\n\n```ts\nimport { fileURLToPath } from 'node:url'\nimport { createServer } from 'vite'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\nconst server = await createServer({\n  // any valid user config options, plus `mode` and `configFile`\n  configFile: false,\n  root: __dirname,\n  server: {\n    port: 1337,\n  },\n})\nawait server.listen()\n\nserver.printUrls()\n\nserver.bindCLIShortcuts({ print: true })\n```\n\nNOTE\n\nWhen using `createServer` and `build` in the same Node.js process, both functions rely on `process.env.NODE_ENV` to work properly, which also depends on the `mode` config option. To prevent conflicting behavior, set `process.env.NODE_ENV` or the `mode` of the two APIs to `development`. Otherwise, you can spawn a child process to run the APIs separately.\n\nNOTE\n\nWhen using [middleware mode](https://vite.dev/config/server-options#server-middlewaremode) combined with [proxy config for WebSocket](https://vite.dev/config/server-options#server-proxy), the parent http server should be provided in `middlewareMode` to bind the proxy correctly.\n\n**Example**\n\n```ts\nimport http from 'http'\nimport { createServer } from 'vite'\n\nconst parentServer = http.createServer() // or express, koa, etc.\n\nconst vite = await createServer({\n  server: {\n    // Enable middleware mode\n    middlewareMode: {\n      // Provide the parent http server for proxy WebSocket\n      server: parentServer,\n    },\n    proxy: {\n      '/ws': {\n        target: 'ws://localhost:3000', // Proxying WebSocket\n        ws: true,\n      },\n    },\n  },\n})\n\nparentServer.use(vite.middlewares)\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-javascript", "title": "JavaScript API", "description": "Vite's JavaScript APIs are fully typed, and it's recommended to use TypeScript or enable JS type checking in VS Code to leverage the intellisense and validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:07:52", "type": "section_detail", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "JavaScript API", "theme-color": "#646cff", "og:site_name": "vitejs", "title": "JavaScript API | Vite", "favicon": "https://vite.dev/logo.svg", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:card": "summary_large_image", "og:title": "JavaScript API", "ogUrl": "https://vite.dev", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vite.dev", "scrapeId": "1e520c2e-0bac-4b00-8257-d1ddcd68b0be", "sourceURL": "https://vite.dev/guide/api-javascript", "url": "https://vite.dev/guide/api-javascript", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for JavaScript API in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**createServer Example**:\n\n```yaml\nimport { fileURLToPath } from 'node:url'\nimport { createServer } from 'vite'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\nconst server = await createServer({\n  configFile: false,\n  root: __dirname,\n  server: {\n    port: 1337,\n  },\n})\nawait server.listen()\n\nserver.printUrls()\n\nserver.bindCLIShortcuts({ print: true })\n```\n\nThis snippet shows you how to createserver example, which is an important aspect of javascript api.\n\n**Middleware Mode Example**:\n\n```yaml\nimport http from 'http'\nimport { createServer } from 'vite'\n\nconst parentServer = http.createServer() // or express, koa, etc.\n\nconst vite = await createServer({\n  server: {\n    middlewareMode: {\n      server: parentServer,\n    },\n    proxy: {\n      '/ws': {\n        target: 'ws://localhost:3000',\n        ws: true,\n      },\n    },\n  },\n})\n\nparentServer.use(vite.middlewares)\n```\n\nThis snippet shows you how to middleware mode example, which is an important aspect of javascript api.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-javascript", "title": "JavaScript API", "description": "Vite's JavaScript APIs are fully typed, and it's recommended to use TypeScript or enable JS type checking in VS Code to leverage the intellisense and validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:07:52", "type": "code_examples", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "JavaScript API", "theme-color": "#646cff", "og:site_name": "vitejs", "title": "JavaScript API | Vite", "favicon": "https://vite.dev/logo.svg", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:card": "summary_large_image", "og:title": "JavaScript API", "ogUrl": "https://vite.dev", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vite.dev", "scrapeId": "1e520c2e-0bac-4b00-8257-d1ddcd68b0be", "sourceURL": "https://vite.dev/guide/api-javascript", "url": "https://vite.dev/guide/api-javascript", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using JavaScript API in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse TypeScript or enable JS type checking in VS Code for better intellisense and validation.\n\nWhen using createServer and build in the same Node.js process, set process.env.NODE_ENV or the mode of the two APIs to development to prevent conflicting behavior.\n\nIn middleware mode, provide the parent http server for proxy WebSocket to bind correctly.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-javascript", "title": "JavaScript API", "description": "Vite's JavaScript APIs are fully typed, and it's recommended to use TypeScript or enable JS type checking in VS Code to leverage the intellisense and validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:07:52", "type": "best_practices", "page_metadata": {"description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "JavaScript API", "theme-color": "#646cff", "og:site_name": "vitejs", "title": "JavaScript API | Vite", "favicon": "https://vite.dev/logo.svg", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:card": "summary_large_image", "og:title": "JavaScript API", "ogUrl": "https://vite.dev", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vite.dev", "scrapeId": "1e520c2e-0bac-4b00-8257-d1ddcd68b0be", "sourceURL": "https://vite.dev/guide/api-javascript", "url": "https://vite.dev/guide/api-javascript", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what HMR API is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain HMR API in vite-guide.\n\n# HMR API\n\nThis is the client HMR API. For handling HMR update in plugins, see handleHotUpdate.Here's a quick rundown of what this is about:\n\n## HMR API\n\nThe manual HMR API is primarily intended for framework and tooling authors. As an end user, HMR is likely already handled for you in the framework specific starter templates.\n\nVite exposes its manual HMR API via the special `import.meta.hot` object:\n\n```typescript\ninterface ImportMeta {\n  readonly hot?: ViteHotContext\n}\n\ninterface ViteHotContext {\n  readonly data: any\n\n  accept(): void\n\n  accept(cb: (mod: ModuleNamespace | undefined) => void): void\n\n  accept(dep: string, cb: (mod: ModuleNamespace | undefined) => void): void\n\n  accept(deps: readonly string[], cb: (mods: Array<ModuleNamespace | undefined>) => void): void\n\n  dispose(cb: (data: any) => void): void\n\n  prune(cb: (data: any) => void): void\n\n  invalidate(message?: string): void\n\n  on<T extends string>(event: T, cb: (payload: InferCustomEventPayload<T>) => void): void\n\n  off<T extends string>(event: T, cb: (payload: InferCustomEventPayload<T>) => void): void\n\n  send<T extends string>(event: T, data?: InferCustomEventPayload<T>): void\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-hmr", "title": "HMR API", "description": "This is the client HMR API. For handling HMR update in plugins, see handleHotUpdate.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:07:59", "type": "overview", "page_metadata": {"ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogTitle": "HMR API", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "twitter:card": "summary_large_image", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "title": "HMR API | Vite", "viewport": "width=device-width,initial-scale=1", "og:title": "HMR API", "scrapeId": "c7313f78-3269-4eb5-adb6-8770bbd5ca89", "sourceURL": "https://vite.dev/guide/api-hmr", "url": "https://vite.dev/guide/api-hmr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I hmr api in vite-guide?\n\nAssistant: To hmr api in vite-guide, here's what you do:\nThe manual HMR API is primarily intended for framework and tooling authors. As an end user, HMR is likely already handled for you in the framework specific starter templates.\n\nVite exposes its manual HMR API via the special `import.meta.hot` object:\n\n```typescript\ninterface ImportMeta {\n  readonly hot?: ViteHotContext\n}\n\ninterface ViteHotContext {\n  readonly data: any\n\n  accept(): void\n\n  accept(cb: (mod: ModuleNamespace | undefined) => void): void\n\n  accept(dep: string, cb: (mod: ModuleNamespace | undefined) => void): void\n\n  accept(deps: readonly string[], cb: (mods: Array<ModuleNamespace | undefined>) => void): void\n\n  dispose(cb: (data: any) => void): void\n\n  prune(cb: (data: any) => void): void\n\n  invalidate(message?: string): void\n\n  on<T extends string>(event: T, cb: (payload: InferCustomEventPayload<T>) => void): void\n\n  off<T extends string>(event: T, cb: (payload: InferCustomEventPayload<T>) => void): void\n\n  send<T extends string>(event: T, data?: InferCustomEventPayload<T>): void\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-hmr", "title": "HMR API", "description": "This is the client HMR API. For handling HMR update in plugins, see handleHotUpdate.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:07:59", "type": "section_detail", "page_metadata": {"ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogTitle": "HMR API", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "twitter:card": "summary_large_image", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "title": "HMR API | Vite", "viewport": "width=device-width,initial-scale=1", "og:title": "HMR API", "scrapeId": "c7313f78-3269-4eb5-adb6-8770bbd5ca89", "sourceURL": "https://vite.dev/guide/api-hmr", "url": "https://vite.dev/guide/api-hmr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for HMR API in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Required Conditional Guard**:\n\n```yaml\nif (import.meta.hot) {\n  // HMR code\n}\n```\n\nThis snippet shows you how to required conditional guard, which is an important aspect of hmr api.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-hmr", "title": "HMR API", "description": "This is the client HMR API. For handling HMR update in plugins, see handleHotUpdate.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:07:59", "type": "code_examples", "page_metadata": {"ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogTitle": "HMR API", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "twitter:card": "summary_large_image", "og:description": "Next Generation Frontend Tooling", "language": "en-US", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "description": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "title": "HMR API | Vite", "viewport": "width=device-width,initial-scale=1", "og:title": "HMR API", "scrapeId": "c7313f78-3269-4eb5-adb6-8770bbd5ca89", "sourceURL": "https://vite.dev/guide/api-hmr", "url": "https://vite.dev/guide/api-hmr", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Using Plugins is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Using Plugins in vite-guide.\n\n# Using Plugins\n\nVite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.Here's a quick rundown of what this is about:\n\n## Adding a Plugin\n\nTo use a plugin, it needs to be added to the `devDependencies` of the project and included in the `plugins` array in the `vite.config.js` config file. For example, to provide support for legacy browsers, the official [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy) can be used:\n\n```\n$ npm add -D @vitejs/plugin-legacy\n```\n\nvite.config.js\n\n```js\nimport legacy from '@vitejs/plugin-legacy'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    legacy({\n      targets: ['defaults', 'not IE 11'],\n    }),\n  ],\n})\n```\n\n`plugins` also accepts presets including several plugins as a single element. This is useful for complex features (like framework integration) that are implemented using several plugins. The array will be flattened internally.\n\nFalsy plugins will be ignored, which can be used to easily activate or deactivate plugins.\n\n## Finding Plugins\n\nNOTE\n\nVite aims to provide out-of-the-box support for common web development patterns. Before searching for a Vite or compatible Rollup plugin, check out the [Features Guide](https://vite.dev/guide/features). A lot of the cases where a plugin would be needed in a Rollup project are already covered in Vite.\n\nCheck out the [Plugins section](https://vite.dev/plugins/) for information about official plugins. Community plugins are listed in [awesome-vite](https://github.com/vitejs/awesome-vite#plugins).\n\nYou can also find plugins that follow the [recommended conventions](https://vite.dev/guide/api-plugin#conventions) using a [npm search for vite-plugin](https://www.npmjs.com/search?q=vite-plugin&ranking=popularity) for Vite plugins or a [npm search for rollup-plugin](https://www.npmjs.com/search?q=rollup-plugin&ranking=popularity) for Rollup plugins.\n\n## Enforcing Plugin Ordering\n\nFor compatibility with some Rollup plugins, it may be needed to enforce the order of the plugin or only apply at build time. This should be an implementation detail for Vite plugins. You can enforce the position of a plugin with the `enforce` modifier:\n\n- `pre`: invoke plugin before Vite core plugins\n- default: invoke plugin after Vite core plugins\n- `post`: invoke plugin after Vite build plugins\n\nvite.config.js\n\n```js\nimport image from '@rollup/plugin-image'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...image(),\n      enforce: 'pre',\n    },\n  ],\n})\n```\n\nCheck out [Plugins API Guide](https://vite.dev/guide/api-plugin#plugin-ordering) for detailed information.\n\n## Conditional Application\n\nBy default, plugins are invoked for both serve and build. In cases where a plugin needs to be conditionally applied only during serve or build, use the `apply` property to only invoke them during `'build'` or `'serve'`:\n\nvite.config.js\n\n```js\nimport typescript2 from 'rollup-plugin-typescript2'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...typescript2(),\n      apply: 'build',\n    },\n  ],\n})\n```\n\n## Building Plugins\n\nCheck out the [Plugins API Guide](https://vite.dev/guide/api-plugin) for documentation about creating plugins.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "overview", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I adding a plugin in vite-guide?\n\nAssistant: To adding a plugin in vite-guide, here's what you do:\nTo use a plugin, it needs to be added to the `devDependencies` of the project and included in the `plugins` array in the `vite.config.js` config file. For example, to provide support for legacy browsers, the official [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy) can be used:\n\n```\n$ npm add -D @vitejs/plugin-legacy\n```\n\nvite.config.js\n\n```js\nimport legacy from '@vitejs/plugin-legacy'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    legacy({\n      targets: ['defaults', 'not IE 11'],\n    }),\n  ],\n})\n```\n\n`plugins` also accepts presets including several plugins as a single element. This is useful for complex features (like framework integration) that are implemented using several plugins. The array will be flattened internally.\n\nFalsy plugins will be ignored, which can be used to easily activate or deactivate plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I finding plugins in vite-guide?\n\nAssistant: To finding plugins in vite-guide, here's what you do:\nNOTE\n\nVite aims to provide out-of-the-box support for common web development patterns. Before searching for a Vite or compatible Rollup plugin, check out the [Features Guide](https://vite.dev/guide/features). A lot of the cases where a plugin would be needed in a Rollup project are already covered in Vite.\n\nCheck out the [Plugins section](https://vite.dev/plugins/) for information about official plugins. Community plugins are listed in [awesome-vite](https://github.com/vitejs/awesome-vite#plugins).\n\nYou can also find plugins that follow the [recommended conventions](https://vite.dev/guide/api-plugin#conventions) using a [npm search for vite-plugin](https://www.npmjs.com/search?q=vite-plugin&ranking=popularity) for Vite plugins or a [npm search for rollup-plugin](https://www.npmjs.com/search?q=rollup-plugin&ranking=popularity) for Rollup plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I enforcing plugin ordering in vite-guide?\n\nAssistant: To enforcing plugin ordering in vite-guide, here's what you do:\nFor compatibility with some Rollup plugins, it may be needed to enforce the order of the plugin or only apply at build time. This should be an implementation detail for Vite plugins. You can enforce the position of a plugin with the `enforce` modifier:\n\n- `pre`: invoke plugin before Vite core plugins\n- default: invoke plugin after Vite core plugins\n- `post`: invoke plugin after Vite build plugins\n\nvite.config.js\n\n```js\nimport image from '@rollup/plugin-image'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...image(),\n      enforce: 'pre',\n    },\n  ],\n})\n```\n\nCheck out [Plugins API Guide](https://vite.dev/guide/api-plugin#plugin-ordering) for detailed information..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I conditional application in vite-guide?\n\nAssistant: To conditional application in vite-guide, here's what you do:\nBy default, plugins are invoked for both serve and build. In cases where a plugin needs to be conditionally applied only during serve or build, use the `apply` property to only invoke them during `'build'` or `'serve'`:\n\nvite.config.js\n\n```js\nimport typescript2 from 'rollup-plugin-typescript2'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...typescript2(),\n      apply: 'build',\n    },\n  ],\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I building plugins in vite-guide?\n\nAssistant: To building plugins in vite-guide, here's what you do:\nCheck out the [Plugins API Guide](https://vite.dev/guide/api-plugin) for documentation about creating plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Using Plugins in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding a Plugin Example**:\n\n```yaml\n$ npm add -D @vitejs/plugin-legacy\n\nvite.config.js\n\n```js\nimport legacy from '@vitejs/plugin-legacy'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    legacy({\n      targets: ['defaults', 'not IE 11'],\n    }),\n  ],\n})\n```\n```\n\nThis snippet shows you how to adding a plugin example, which is an important aspect of using plugins.\n\n**Enforcing Plugin Ordering Example**:\n\n```yaml\nvite.config.js\n\n```js\nimport image from '@rollup/plugin-image'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...image(),\n      enforce: 'pre',\n    },\n  ],\n})\n```\n```\n\nThis snippet shows you how to enforcing plugin ordering example, which is an important aspect of using plugins.\n\n**Conditional Application Example**:\n\n```yaml\nvite.config.js\n\n```js\nimport typescript2 from 'rollup-plugin-typescript2'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...typescript2(),\n      apply: 'build',\n    },\n  ],\n})\n```\n```\n\nThis snippet shows you how to conditional application example, which is an important aspect of using plugins.\n\n", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "code_examples", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Using Plugins in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVite provides out-of-the-box support for common web development patterns, so check the Features Guide before searching for plugins.\n\nCommunity plugins can be found in awesome-vite.\n\nUse the apply property to conditionally apply plugins during serve or build.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/using-plugins", "title": "Using Plugins", "description": "Vite can be extended using plugins, which are based on Rollup's well-designed plugin interface with a few extra Vite-specific options. This means that Vite users can rely on the mature ecosystem of Rollup plugins, while also being able to extend the dev server and SSR functionality as needed.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:31", "type": "best_practices", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "og:type": "website", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "title": "Using Plugins | Vite", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "ogTitle": "Using Plugins", "twitter:site": "@vite_js", "og:title": "Using Plugins", "og:site_name": "vitejs", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "scrapeId": "681e49c2-dbb7-4d9b-a10f-de91beb35911", "sourceURL": "https://vite.dev/guide/using-plugins", "url": "https://vite.dev/guide/using-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Environment API for Plugins is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Environment API for Plugins in vite-guide.\n\n# Environment API for Plugins\n\nExperimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.Here's a quick rundown of what this is about:\n\n## Accessing the Current Environment in Hooks\n\nGiven that there were only two Environments until Vite 6 ( `client` and `ssr`), a `ssr` boolean was enough to identify the current environment in Vite APIs. Plugin Hooks received a `ssr` boolean in the last options parameter, and several APIs expected an optional last `ssr` parameter to properly associate modules to the correct environment (for example `server.moduleGraph.getModuleByUrl(url, { ssr })`).\n\nWith the advent of configurable environments, we now have a uniform way to access their options and instance in plugins. Plugin hooks now expose `this.environment` in their context, and APIs that previously expected a `ssr` boolean are now scoped to the proper environment (for example `environment.moduleGraph.getModuleByUrl(url)`).\n\nThe Vite server has a shared plugin pipeline, but when a module is processed it is always done in the context of a given environment. The `environment` instance is available in the plugin context.\n\nA plugin could use the `environment` instance to change how a module is processed depending on the configuration for the environment (which can be accessed using `environment.config`).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-plugins", "title": "Environment API for Plugins", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:08:48", "type": "overview", "page_metadata": {"ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "og:url": "https://vite.dev", "title": "Environment API for Plugins | Vite", "og:description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Environment API for Plugins", "og:site_name": "vitejs", "og:title": "Environment API for Plugins", "scrapeId": "a0a15558-a15f-4404-a3b5-0e01f93015c4", "sourceURL": "https://vite.dev/guide/api-environment-plugins", "url": "https://vite.dev/guide/api-environment-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I accessing the current environment in hooks in vite-guide?\n\nAssistant: To accessing the current environment in hooks in vite-guide, here's what you do:\nGiven that there were only two Environments until Vite 6 ( `client` and `ssr`), a `ssr` boolean was enough to identify the current environment in Vite APIs. Plugin Hooks received a `ssr` boolean in the last options parameter, and several APIs expected an optional last `ssr` parameter to properly associate modules to the correct environment (for example `server.moduleGraph.getModuleByUrl(url, { ssr })`).\n\nWith the advent of configurable environments, we now have a uniform way to access their options and instance in plugins. Plugin hooks now expose `this.environment` in their context, and APIs that previously expected a `ssr` boolean are now scoped to the proper environment (for example `environment.moduleGraph.getModuleByUrl(url)`).\n\nThe Vite server has a shared plugin pipeline, but when a module is processed it is always done in the context of a given environment. The `environment` instance is available in the plugin context.\n\nA plugin could use the `environment` instance to change how a module is processed depending on the configuration for the environment (which can be accessed using `environment.config`)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-plugins", "title": "Environment API for Plugins", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:08:48", "type": "section_detail", "page_metadata": {"ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "og:url": "https://vite.dev", "title": "Environment API for Plugins | Vite", "og:description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Environment API for Plugins", "og:site_name": "vitejs", "og:title": "Environment API for Plugins", "scrapeId": "a0a15558-a15f-4404-a3b5-0e01f93015c4", "sourceURL": "https://vite.dev/guide/api-environment-plugins", "url": "https://vite.dev/guide/api-environment-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Environment API for Plugins in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Accessing Environment Config**:\n\n```yaml\ntransform(code, id) {\n    console.log(this.environment.config.resolve.conditions)\n}\n```\n\nThis snippet shows you how to accessing environment config, which is an important aspect of environment api for plugins.\n\n**Registering New Environments**:\n\n```yaml\nconfig(config: UserConfig) {\n    config.environments.rsc ??= {}\n}\n```\n\nThis snippet shows you how to registering new environments, which is an important aspect of environment api for plugins.\n\n**Configuring Environment**:\n\n```yaml\nconfigEnvironment(name: string, options: EnvironmentOptions) {\n    if (name === 'rsc') {\n        options.resolve.conditions = // ...\n    }\n}\n```\n\nThis snippet shows you how to configuring environment, which is an important aspect of environment api for plugins.\n\n**Hot Update Hook Example**:\n\n```yaml\nhotUpdate({ modules, timestamp }) {\n    if (this.environment.name !== 'client')\n        return;\n\n    // Invalidate modules manually\n    const invalidatedModules = new Set();\n    for (const mod of modules) {\n        this.environment.moduleGraph.invalidateModule(\n            mod,\n            invalidatedModules,\n            timestamp,\n            true\n        );\n    }\n    this.environment.hot.send({ type: 'full-reload' });\n    return [];\n}\n```\n\nThis snippet shows you how to hot update hook example, which is an important aspect of environment api for plugins.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-environment-plugins", "title": "Environment API for Plugins", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:08:48", "type": "code_examples", "page_metadata": {"ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "og:url": "https://vite.dev", "title": "Environment API for Plugins | Vite", "og:description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Environment API for Plugins", "og:site_name": "vitejs", "og:title": "Environment API for Plugins", "scrapeId": "a0a15558-a15f-4404-a3b5-0e01f93015c4", "sourceURL": "https://vite.dev/guide/api-environment-plugins", "url": "https://vite.dev/guide/api-environment-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Environment API for Plugins in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPlugins should set default values using the config hook.\n\nUse the configEnvironment hook to configure each environment with its partially resolved config.\n\nThe hotUpdate hook allows plugins to perform custom HMR update handling for a given environment.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-plugins", "title": "Environment API for Plugins", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:08:48", "type": "best_practices", "page_metadata": {"ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "language": "en-US", "og:url": "https://vite.dev", "title": "Environment API for Plugins | Vite", "og:description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Environment API for Plugins", "og:site_name": "vitejs", "og:title": "Environment API for Plugins", "scrapeId": "a0a15558-a15f-4404-a3b5-0e01f93015c4", "sourceURL": "https://vite.dev/guide/api-environment-plugins", "url": "https://vite.dev/guide/api-environment-plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Dependency Pre-Bundling is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Dependency Pre-Bundling in vite-guide.\n\n# Dependency Pre-Bundling\n\nThis page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.Here's a quick rundown of what this is about:\n\n## The Why\n\nThis is Vite performing what we call \"dependency pre-bundling\". This process serves two purposes:\n\n1. **CommonJS and UMD compatibility:** During development, Vite's dev serves all code as native ESM. Therefore, Vite must convert dependencies that are shipped as CommonJS or UMD into ESM first.\n\nWhen converting CommonJS dependencies, Vite performs smart import analysis so that named imports to CommonJS modules will work as expected even if the exports are dynamically assigned (e.g. React):\n\n```js\n// works as expected\nimport React, { useState } from 'react'\n```\n\n2. **Performance:** Vite converts ESM dependencies with many internal modules into a single module to improve subsequent page load performance.\n\nSome packages ship their ES modules builds as many separate files importing one another. For example, [`lodash-es` has over 600 internal modules](https://unpkg.com/browse/lodash-es/)! When we do `import { debounce } from 'lodash-es'`, the browser fires off 600+ HTTP requests at the same time! Even though the server has no problem handling them, the large amount of requests create a network congestion on the browser side, causing the page to load noticeably slower.\n\nBy pre-bundling `lodash-es` into a single module, we now only need one HTTP request instead!\n\nNOTE\n\nDependency pre-bundling only applies in development mode, and uses `esbuild` to convert dependencies to ESM. In production builds, `@rollup/plugin-commonjs` is used instead.\n\n## Automatic Dependency Discovery\n\nIf an existing cache is not found, Vite will crawl your source code and automatically discover dependency imports (i.e. \"bare imports\" that expect to be resolved from `node_modules`) and use these found imports as entry points for the pre-bundle. The pre-bundling is performed with `esbuild` so it's typically very fast.\n\nAfter the server has already started, if a new dependency import is encountered that isn't already in the cache, Vite will re-run the dep bundling process and reload the page if needed.\n\n## Monorepos and Linked Dependencies\n\nIn a monorepo setup, a dependency may be a linked package from the same repo. Vite automatically detects dependencies that are not resolved from `node_modules` and treats the linked dep as source code. It will not attempt to bundle the linked dep, and will analyze the linked dep's dependency list instead.\n\nHowever, this requires the linked dep to be exported as ESM. If not, you can add the dependency to [`optimizeDeps.include`](https://vite.dev/config/dep-optimization-options#optimizedeps-include) and [`build.commonjsOptions.include`](https://vite.dev/config/build-options#build-commonjsoptions) in your config.\n\n```js\n// vite.config.js\nexport default defineConfig({\n  optimizeDeps: {\n    include: ['linked-dep'],\n  },\n  build: {\n    commonjsOptions: {\n      include: [/linked-dep/, /node_modules/],\n    },\n  },\n})\n```\n\nWhen making changes to the linked dep, restart the dev server with the `--force` command line option for the changes to take effect.\n\n## Customizing the Behavior\n\nThe default dependency discovery heuristics may not always be desirable. In cases where you want to explicitly include/exclude dependencies from the list, use the [`optimizeDeps` config options](https://vite.dev/config/dep-optimization-options).\n\nA typical use case for `optimizeDeps.include` or `optimizeDeps.exclude` is when you have an import that is not directly discoverable in the source code. For example, maybe the import is created as a result of a plugin transform. This means Vite won't be able to discover the import on the initial scan - it can only discover it after the file is requested by the browser and transformed. This will cause the server to immediately re-bundle after server start.\n\nBoth `include` and `exclude` can be used to deal with this. If the dependency is large (with many internal modules) or is CommonJS, then you should include it; If the dependency is small and is already valid ESM, you can exclude it and let the browser load it directly.\n\nYou can further customize esbuild too with the [`optimizeDeps.esbuildOptions` option](https://vite.dev/config/dep-optimization-options#optimizedeps-esbuildoptions). For example, adding an esbuild plugin to handle special files in dependencies or changing the [build `target`](https://esbuild.github.io/api/#target).\n\n## Caching\n\n### File System Cache\n\nVite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n\n- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n- Patches folder modification time.\n- Relevant fields in your `vite.config.js`, if present.\n- `NODE_ENV` value.\n\nThe pre-bundling step will only need to be re-run when one of the above has changed.\n\nIf for some reason you want to force Vite to re-bundle deps, you can either start the dev server with the `--force` command line option, or manually delete the `node_modules/.vite` cache directory.\n\n### Browser Cache\n\nResolved dependency requests are strongly cached with HTTP headers `max-age=31536000,immutable` to improve page reload performance during dev. Once cached, these requests will never hit the dev server again. They are auto invalidated by the appended version query if a different version is installed (as reflected in your package manager lockfile). If you want to debug your dependencies by making local edits, you can:\n\n1. Temporarily disable cache via the Network tab of your browser devtools;\n2. Restart Vite dev server with the `--force` flag to re-bundle the deps;\n3. Reload the page.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I the why in vite-guide?\n\nAssistant: To the why in vite-guide, here's what you do:\nThis is Vite performing what we call \"dependency pre-bundling\". This process serves two purposes:\n\n1. **CommonJS and UMD compatibility:** During development, Vite's dev serves all code as native ESM. Therefore, Vite must convert dependencies that are shipped as CommonJS or UMD into ESM first.\n\nWhen converting CommonJS dependencies, Vite performs smart import analysis so that named imports to CommonJS modules will work as expected even if the exports are dynamically assigned (e.g. React):\n\n```js\n// works as expected\nimport React, { useState } from 'react'\n```\n\n2. **Performance:** Vite converts ESM dependencies with many internal modules into a single module to improve subsequent page load performance.\n\nSome packages ship their ES modules builds as many separate files importing one another. For example, [`lodash-es` has over 600 internal modules](https://unpkg.com/browse/lodash-es/)! When we do `import { debounce } from 'lodash-es'`, the browser fires off 600+ HTTP requests at the same time! Even though the server has no problem handling them, the large amount of requests create a network congestion on the browser side, causing the page to load noticeably slower.\n\nBy pre-bundling `lodash-es` into a single module, we now only need one HTTP request instead!\n\nNOTE\n\nDependency pre-bundling only applies in development mode, and uses `esbuild` to convert dependencies to ESM. In production builds, `@rollup/plugin-commonjs` is used instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I automatic dependency discovery in vite-guide?\n\nAssistant: To automatic dependency discovery in vite-guide, here's what you do:\nIf an existing cache is not found, Vite will crawl your source code and automatically discover dependency imports (i.e. \"bare imports\" that expect to be resolved from `node_modules`) and use these found imports as entry points for the pre-bundle. The pre-bundling is performed with `esbuild` so it's typically very fast.\n\nAfter the server has already started, if a new dependency import is encountered that isn't already in the cache, Vite will re-run the dep bundling process and reload the page if needed..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I monorepos and linked dependencies in vite-guide?\n\nAssistant: To monorepos and linked dependencies in vite-guide, here's what you do:\nIn a monorepo setup, a dependency may be a linked package from the same repo. Vite automatically detects dependencies that are not resolved from `node_modules` and treats the linked dep as source code. It will not attempt to bundle the linked dep, and will analyze the linked dep's dependency list instead.\n\nHowever, this requires the linked dep to be exported as ESM. If not, you can add the dependency to [`optimizeDeps.include`](https://vite.dev/config/dep-optimization-options#optimizedeps-include) and [`build.commonjsOptions.include`](https://vite.dev/config/build-options#build-commonjsoptions) in your config.\n\n```js\n// vite.config.js\nexport default defineConfig({\n  optimizeDeps: {\n    include: ['linked-dep'],\n  },\n  build: {\n    commonjsOptions: {\n      include: [/linked-dep/, /node_modules/],\n    },\n  },\n})\n```\n\nWhen making changes to the linked dep, restart the dev server with the `--force` command line option for the changes to take effect..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I customizing the behavior in vite-guide?\n\nAssistant: To customizing the behavior in vite-guide, here's what you do:\nThe default dependency discovery heuristics may not always be desirable. In cases where you want to explicitly include/exclude dependencies from the list, use the [`optimizeDeps` config options](https://vite.dev/config/dep-optimization-options).\n\nA typical use case for `optimizeDeps.include` or `optimizeDeps.exclude` is when you have an import that is not directly discoverable in the source code. For example, maybe the import is created as a result of a plugin transform. This means Vite won't be able to discover the import on the initial scan - it can only discover it after the file is requested by the browser and transformed. This will cause the server to immediately re-bundle after server start.\n\nBoth `include` and `exclude` can be used to deal with this. If the dependency is large (with many internal modules) or is CommonJS, then you should include it; If the dependency is small and is already valid ESM, you can exclude it and let the browser load it directly.\n\nYou can further customize esbuild too with the [`optimizeDeps.esbuildOptions` option](https://vite.dev/config/dep-optimization-options#optimizedeps-esbuildoptions). For example, adding an esbuild plugin to handle special files in dependencies or changing the [build `target`](https://esbuild.github.io/api/#target)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I caching in vite-guide?\n\nAssistant: To caching in vite-guide, here's what you do:\n### File System Cache\n\nVite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n\n- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n- Patches folder modification time.\n- Relevant fields in your `vite.config.js`, if present.\n- `NODE_ENV` value.\n\nThe pre-bundling step will only need to be re-run when one of the above has changed.\n\nIf for some reason you want to force Vite to re-bundle deps, you can either start the dev server with the `--force` command line option, or manually delete the `node_modules/.vite` cache directory.\n\n### Browser Cache\n\nResolved dependency requests are strongly cached with HTTP headers `max-age=31536000,immutable` to improve page reload performance during dev. Once cached, these requests will never hit the dev server again. They are auto invalidated by the appended version query if a different version is installed (as reflected in your package manager lockfile). If you want to debug your dependencies by making local edits, you can:\n\n1. Temporarily disable cache via the Network tab of your browser devtools;\n2. Restart Vite dev server with the `--force` flag to re-bundle the deps;\n3. Reload the page..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Dependency Pre-Bundling in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CommonJS Import Example**:\n\n```yaml\n// works as expected\nimport React, { useState } from 'react'\n```\n\nThis snippet shows you how to commonjs import example, which is an important aspect of dependency pre-bundling.\n\n**Vite Configuration for Linked Dependencies**:\n\n```yaml\n// vite.config.js\nexport default defineConfig({\n  optimizeDeps: {\n    include: ['linked-dep'],\n  },\n  build: {\n    commonjsOptions: {\n      include: [/linked-dep/, /node_modules/],\n    },\n  },\n})\n```\n\nThis snippet shows you how to vite configuration for linked dependencies, which is an important aspect of dependency pre-bundling.\n\n**Force Re-bundling Command**:\n\n```yaml\n--force\n```\n\nThis snippet shows you how to force re-bundling command, which is an important aspect of dependency pre-bundling.\n\n", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Dependency Pre-Bundling in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDependency pre-bundling only applies in development mode, and uses esbuild to convert dependencies to ESM. In production builds, @rollup/plugin-commonjs is used instead.\n\nWhen making changes to the linked dep, restart the dev server with the --force command line option for the changes to take effect.\n\nIf you want to force Vite to re-bundle deps, you can either start the dev server with the --force command line option, or manually delete the node_modules/.vite cache directory.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/dep-pre-bundling", "title": "Dependency Pre-Bundling", "description": "This page covers the process of dependency pre-bundling in Vite, explaining its purpose, automatic discovery, handling of monorepos, customization options, and caching mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:09:18", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Dependency Pre-Bundling", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "twitter:site": "@vite_js", "ogTitle": "Dependency Pre-Bundling", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "twitter:card": "summary_large_image", "og:url": "https://vite.dev", "generator": "VitePress v1.6.3", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "title": "Dependency Pre-Bundling | Vite", "og:site_name": "vitejs", "theme-color": "#646cff", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:type": "website", "description": "Next Generation Frontend Tooling", "scrapeId": "20fa1ee8-016b-4613-9fe7-8bb671d22e1c", "sourceURL": "https://vite.dev/guide/dep-pre-bundling", "url": "https://vite.dev/guide/dep-pre-bundling", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Env Variables and Modes is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Env Variables and Modes in vite-guide.\n\n# Env Variables and Modes\n\nThis page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.Here's a quick rundown of what this is about:\n\n## Built-in constants\n\nSome built-in constants are available in all cases:\n\n- **`import.meta.env.MODE`**: {string} the [mode](https://vite.dev/guide/env-and-mode#modes) the app is running in.\n\n- **`import.meta.env.BASE_URL`**: {string} the base url the app is being served from. This is determined by the [`base` config option](https://vite.dev/config/shared-options#base).\n\n- **`import.meta.env.PROD`**: {boolean} whether the app is running in production (running the dev server with `NODE_ENV='production'` or running an app built with `NODE_ENV='production'`).\n\n- **`import.meta.env.DEV`**: {boolean} whether the app is running in development (always the opposite of `import.meta.env.PROD`)\n\n- **`import.meta.env.SSR`**: {boolean} whether the app is running in the [server](https://vite.dev/guide/ssr#conditional-logic).\n\n## Env Variables\n\nVite exposes env variables under `import.meta.env` object as strings automatically.\n\nTo prevent accidentally leaking env variables to the client, only variables prefixed with `VITE_` are exposed to your Vite-processed code. e.g. for the following env variables:\n\n.env\n\n```\nVITE_SOME_KEY=123\nDB_PASSWORD=foobar\n```\n\nOnly `VITE_SOME_KEY` will be exposed as `import.meta.env.VITE_SOME_KEY` to your client source code, but `DB_PASSWORD` will not.\n\njs\n\n```\nconsole.log(import.meta.env.VITE_SOME_KEY) // \"123\"\nconsole.log(import.meta.env.DB_PASSWORD) // undefined\n```\n\nIf you want to customize the env variables prefix, see the [envPrefix](https://vite.dev/config/shared-options#envprefix) option.\n\nEnv parsing\n\nAs shown above, `VITE_SOME_KEY` is a number but returns a string when parsed. The same would also happen for boolean env variables. Make sure to convert to the desired type when using it in your code.\n\n## .env Files\n\nVite uses [dotenv](https://github.com/motdotla/dotenv) to load additional environment variables from the following files in your [environment directory](https://vite.dev/config/shared-options#envdir):\n\n```\n.env                # loaded in all cases\n.env.local          # loaded in all cases, ignored by git\n.env.[mode]         # only loaded in specified mode\n.env.[mode].local   # only loaded in specified mode, ignored by git\n```\n\nEnv Loading Priorities\n\nAn env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n\nVite will always load `.env` and `.env.local` in addition to the mode-specific `.env.[mode]` file. Variables declared in mode-specific files will take precedence over those in generic files, but variables defined only in `.env` or `.env.local` will still be available in the environment.\n\nIn addition, environment variables that already exist when Vite is executed have the highest priority and will not be overwritten by `.env` files. For example, when running `VITE_SOME_KEY=123 vite build`.\n\n`.env` files are loaded at the start of Vite. Restart the server after making changes.\n\nAlso, Vite uses [dotenv-expand](https://github.com/motdotla/dotenv-expand) to expand variables written in env files out of the box. To learn more about the syntax, check out [their docs](https://github.com/motdotla/dotenv-expand#what-rules-does-the-expansion-engine-follow).\n\nNote that if you want to use `$` inside your environment value, you have to escape it with `\\`.\n\n## SECURITY NOTES\n\n- `.env.*.local` files are local-only and can contain sensitive variables. You should add `*.local` to your `.gitignore` to avoid them being checked into git.\n\n- Since any variables exposed to your Vite source code will end up in your client bundle, `VITE_*` variables should _not_ contain any sensitive information.\n\n## Expanding variables in reverse order\n\nVite supports expanding variables in reverse order. For example, the `.env` below will be evaluated as `VITE_FOO=foobar`, `VITE_BAR=bar`.\n\n.env\n\n```\nVITE_FOO=foo${VITE_BAR}\nVITE_BAR=bar\n```\n\nThis does not work in shell scripts and other tools like `docker-compose`. That said, Vite supports this behavior as this has been supported by `dotenv-expand` for a long time and other tools in JavaScript ecosystem uses older versions that supports this behavior.\n\nTo avoid interop issues, it is recommended to avoid relying on this behavior. Vite may start emitting warnings for this behavior in the future.\n\n## IntelliSense for TypeScript\n\nBy default, Vite provides type definitions for `import.meta.env` in [`vite/client.d.ts`](https://github.com/vitejs/vite/blob/main/packages/vite/client.d.ts). While you can define more custom env variables in `.env.[mode]` files, you may want to get TypeScript IntelliSense for user-defined env variables that are prefixed with `VITE_`.\n\nTo achieve this, you can create an `vite-env.d.ts` in `src` directory, then augment `ImportMetaEnv` like this:\n\nvite-env.d.ts\n\ntypescript\n\n```typescript\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_APP_TITLE: string\n  // more env variables...\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}\n```\n\nIf your code relies on types from browser environments such as [DOM](https://github.com/microsoft/TypeScript/blob/main/src/lib/dom.generated.d.ts) and [WebWorker](https://github.com/microsoft/TypeScript/blob/main/src/lib/webworker.generated.d.ts), you can update the [lib](https://www.typescriptlang.org/tsconfig#lib) field in `tsconfig.json`.\n\n## Imports will break type augmentation\n\nIf the `ImportMetaEnv` augmentation does not work, make sure you do not have any `import` statements in `vite-env.d.ts`. See the [TypeScript documentation](https://www.typescriptlang.org/docs/handbook/2/modules.html#how-javascript-modules-are-defined) for more information.\n\n## HTML Constant Replacement\n\nVite also supports replacing constants in HTML files. Any properties in `import.meta.env` can be used in HTML files with a special `%CONST_NAME%` syntax:\n\nhtml\n\n```\n<h1>Vite is running in %MODE%</h1>\n<p>Using data from %VITE_API_URL%</p>\n```\n\nIf the env doesn't exist in `import.meta.env`, e.g. `%NON_EXISTENT%`, it will be ignored and not replaced, unlike `import.meta.env.NON_EXISTENT` in JS where it's replaced as `undefined`.\n\nGiven that Vite is used by many frameworks, it is intentionally unopinionated about complex replacements like conditionals. Vite can be extended using [an existing userland plugin](https://github.com/vitejs/awesome-vite#transformers) or a custom plugin that implements the [`transformIndexHtml` hook](https://vite.dev/guide/api-plugin#transformindexhtml).\n\n## Modes\n\nBy default, the dev server ( `dev` command) runs in `development` mode and the `build` command runs in `production` mode.\n\nThis means when running `vite build`, it will load the env variables from `.env.production` if there is one:\n\n.env.production\n\n```\nVITE_APP_TITLE=My App\n```\n\nIn your app, you can render the title using `import.meta.env.VITE_APP_TITLE`.\n\nIn some cases, you may want to run `vite build` with a different mode to render a different title. You can overwrite the default mode used for a command by passing the `--mode` option flag. For example, if you want to build your app for a staging mode:\n\nbash\n\n```\nvite build --mode staging\n```\n\nAnd create a `.env.staging` file:\n\n.env.staging\n\n```\nVITE_APP_TITLE=My App (staging)\n```\n\nAs `vite build` runs a production build by default, you can also change this and run a development build by using a different mode and `.env` file configuration:\n\n.env.testing\n\n```\nNODE_ENV=development\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "overview", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I built-in constants in vite-guide?\n\nAssistant: To built-in constants in vite-guide, here's what you do:\nSome built-in constants are available in all cases:\n\n- **`import.meta.env.MODE`**: {string} the [mode](https://vite.dev/guide/env-and-mode#modes) the app is running in.\n\n- **`import.meta.env.BASE_URL`**: {string} the base url the app is being served from. This is determined by the [`base` config option](https://vite.dev/config/shared-options#base).\n\n- **`import.meta.env.PROD`**: {boolean} whether the app is running in production (running the dev server with `NODE_ENV='production'` or running an app built with `NODE_ENV='production'`).\n\n- **`import.meta.env.DEV`**: {boolean} whether the app is running in development (always the opposite of `import.meta.env.PROD`)\n\n- **`import.meta.env.SSR`**: {boolean} whether the app is running in the [server](https://vite.dev/guide/ssr#conditional-logic)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I env variables in vite-guide?\n\nAssistant: To env variables in vite-guide, here's what you do:\nVite exposes env variables under `import.meta.env` object as strings automatically.\n\nTo prevent accidentally leaking env variables to the client, only variables prefixed with `VITE_` are exposed to your Vite-processed code. e.g. for the following env variables:\n\n.env\n\n```\nVITE_SOME_KEY=123\nDB_PASSWORD=foobar\n```\n\nOnly `VITE_SOME_KEY` will be exposed as `import.meta.env.VITE_SOME_KEY` to your client source code, but `DB_PASSWORD` will not.\n\njs\n\n```\nconsole.log(import.meta.env.VITE_SOME_KEY) // \"123\"\nconsole.log(import.meta.env.DB_PASSWORD) // undefined\n```\n\nIf you want to customize the env variables prefix, see the [envPrefix](https://vite.dev/config/shared-options#envprefix) option.\n\nEnv parsing\n\nAs shown above, `VITE_SOME_KEY` is a number but returns a string when parsed. The same would also happen for boolean env variables. Make sure to convert to the desired type when using it in your code..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I .env files in vite-guide?\n\nAssistant: To .env files in vite-guide, here's what you do:\nVite uses [dotenv](https://github.com/motdotla/dotenv) to load additional environment variables from the following files in your [environment directory](https://vite.dev/config/shared-options#envdir):\n\n```\n.env                # loaded in all cases\n.env.local          # loaded in all cases, ignored by git\n.env.[mode]         # only loaded in specified mode\n.env.[mode].local   # only loaded in specified mode, ignored by git\n```\n\nEnv Loading Priorities\n\nAn env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n\nVite will always load `.env` and `.env.local` in addition to the mode-specific `.env.[mode]` file. Variables declared in mode-specific files will take precedence over those in generic files, but variables defined only in `.env` or `.env.local` will still be available in the environment.\n\nIn addition, environment variables that already exist when Vite is executed have the highest priority and will not be overwritten by `.env` files. For example, when running `VITE_SOME_KEY=123 vite build`.\n\n`.env` files are loaded at the start of Vite. Restart the server after making changes.\n\nAlso, Vite uses [dotenv-expand](https://github.com/motdotla/dotenv-expand) to expand variables written in env files out of the box. To learn more about the syntax, check out [their docs](https://github.com/motdotla/dotenv-expand#what-rules-does-the-expansion-engine-follow).\n\nNote that if you want to use `$` inside your environment value, you have to escape it with `\\`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I security notes in vite-guide?\n\nAssistant: To security notes in vite-guide, here's what you do:\n- `.env.*.local` files are local-only and can contain sensitive variables. You should add `*.local` to your `.gitignore` to avoid them being checked into git.\n\n- Since any variables exposed to your Vite source code will end up in your client bundle, `VITE_*` variables should _not_ contain any sensitive information..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I expanding variables in reverse order in vite-guide?\n\nAssistant: To expanding variables in reverse order in vite-guide, here's what you do:\nVite supports expanding variables in reverse order. For example, the `.env` below will be evaluated as `VITE_FOO=foobar`, `VITE_BAR=bar`.\n\n.env\n\n```\nVITE_FOO=foo${VITE_BAR}\nVITE_BAR=bar\n```\n\nThis does not work in shell scripts and other tools like `docker-compose`. That said, Vite supports this behavior as this has been supported by `dotenv-expand` for a long time and other tools in JavaScript ecosystem uses older versions that supports this behavior.\n\nTo avoid interop issues, it is recommended to avoid relying on this behavior. Vite may start emitting warnings for this behavior in the future..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I intellisense for typescript in vite-guide?\n\nAssistant: To intellisense for typescript in vite-guide, here's what you do:\nBy default, Vite provides type definitions for `import.meta.env` in [`vite/client.d.ts`](https://github.com/vitejs/vite/blob/main/packages/vite/client.d.ts). While you can define more custom env variables in `.env.[mode]` files, you may want to get TypeScript IntelliSense for user-defined env variables that are prefixed with `VITE_`.\n\nTo achieve this, you can create an `vite-env.d.ts` in `src` directory, then augment `ImportMetaEnv` like this:\n\nvite-env.d.ts\n\ntypescript\n\n```typescript\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_APP_TITLE: string\n  // more env variables...\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}\n```\n\nIf your code relies on types from browser environments such as [DOM](https://github.com/microsoft/TypeScript/blob/main/src/lib/dom.generated.d.ts) and [WebWorker](https://github.com/microsoft/TypeScript/blob/main/src/lib/webworker.generated.d.ts), you can update the [lib](https://www.typescriptlang.org/tsconfig#lib) field in `tsconfig.json`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I imports will break type augmentation in vite-guide?\n\nAssistant: To imports will break type augmentation in vite-guide, here's what you do:\nIf the `ImportMetaEnv` augmentation does not work, make sure you do not have any `import` statements in `vite-env.d.ts`. See the [TypeScript documentation](https://www.typescriptlang.org/docs/handbook/2/modules.html#how-javascript-modules-are-defined) for more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I html constant replacement in vite-guide?\n\nAssistant: To html constant replacement in vite-guide, here's what you do:\nVite also supports replacing constants in HTML files. Any properties in `import.meta.env` can be used in HTML files with a special `%CONST_NAME%` syntax:\n\nhtml\n\n```\n<h1>Vite is running in %MODE%</h1>\n<p>Using data from %VITE_API_URL%</p>\n```\n\nIf the env doesn't exist in `import.meta.env`, e.g. `%NON_EXISTENT%`, it will be ignored and not replaced, unlike `import.meta.env.NON_EXISTENT` in JS where it's replaced as `undefined`.\n\nGiven that Vite is used by many frameworks, it is intentionally unopinionated about complex replacements like conditionals. Vite can be extended using [an existing userland plugin](https://github.com/vitejs/awesome-vite#transformers) or a custom plugin that implements the [`transformIndexHtml` hook](https://vite.dev/guide/api-plugin#transformindexhtml)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I modes in vite-guide?\n\nAssistant: To modes in vite-guide, here's what you do:\nBy default, the dev server ( `dev` command) runs in `development` mode and the `build` command runs in `production` mode.\n\nThis means when running `vite build`, it will load the env variables from `.env.production` if there is one:\n\n.env.production\n\n```\nVITE_APP_TITLE=My App\n```\n\nIn your app, you can render the title using `import.meta.env.VITE_APP_TITLE`.\n\nIn some cases, you may want to run `vite build` with a different mode to render a different title. You can overwrite the default mode used for a command by passing the `--mode` option flag. For example, if you want to build your app for a staging mode:\n\nbash\n\n```\nvite build --mode staging\n```\n\nAnd create a `.env.staging` file:\n\n.env.staging\n\n```\nVITE_APP_TITLE=My App (staging)\n```\n\nAs `vite build` runs a production build by default, you can also change this and run a development build by using a different mode and `.env` file configuration:\n\n.env.testing\n\n```\nNODE_ENV=development\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "section_detail", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Env Variables and Modes in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of env variable exposure**:\n\n```yaml\nconsole.log(import.meta.env.VITE_SOME_KEY) // \"123\"\nconsole.log(import.meta.env.DB_PASSWORD) // undefined\n```\n\nThis snippet shows you how to example of env variable exposure, which is an important aspect of env variables and modes.\n\n**Example of .env file**:\n\n```yaml\n.env\n\nVITE_SOME_KEY=123\nDB_PASSWORD=foobar\n```\n\nThis snippet shows you how to example of .env file, which is an important aspect of env variables and modes.\n\n**Example of HTML constant replacement**:\n\n```yaml\n<h1>Vite is running in %MODE%</h1>\n<p>Using data from %VITE_API_URL%</p>\n```\n\nThis snippet shows you how to example of html constant replacement, which is an important aspect of env variables and modes.\n\n**Example of TypeScript augmentation**:\n\n```yaml\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_APP_TITLE: string\n  // more env variables...\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}\n```\n\nThis snippet shows you how to example of typescript augmentation, which is an important aspect of env variables and modes.\n\n", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "code_examples", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Env Variables and Modes in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAdd `*.local` to your `.gitignore` to avoid sensitive variables being checked into git.\n\nAvoid using sensitive information in `VITE_*` variables as they will end up in the client bundle.\n\nRestart the server after making changes to `.env` files.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/env-and-mode", "title": "Env Variables and Modes", "description": "This page covers the environment variables and modes in Vite, detailing how to use them effectively in your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:09:55", "type": "best_practices", "page_metadata": {"og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogSiteName": "vitejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "Env Variables and Modes", "ogImage": "https://vite.dev/og-image.jpg", "language": "en-US", "twitter:card": "summary_large_image", "description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "favicon": "https://vite.dev/logo.svg", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "title": "Env Variables and Modes | Vite", "og:type": "website", "twitter:site": "@vite_js", "og:title": "Env Variables and Modes", "scrapeId": "75e2ca85-99ae-4d74-b86c-3333b1ffa43d", "sourceURL": "https://vite.dev/guide/env-and-mode", "url": "https://vite.dev/guide/env-and-mode", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Using `Environment` Instances is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Using `Environment` Instances in vite-guide.\n\n# Using `Environment` Instances\n\nExperimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.Here's a quick rundown of what this is about:\n\n## Accessing the Environments\n\nDuring dev, the available environments in a dev server can be accessed using `server.environments`:\n\n```js\n// create the server, or get it from the configureServer hook\nconst server = await createServer(/* options */)\n\nconst environment = server.environments.client\nenvironment.transformRequest(url)\nconsole.log(server.environments.ssr.moduleGraph)\n```\n\nYou can also access the current environment from plugins. See the [Environment API for Plugins](https://vite.dev/guide/api-environment-plugins#accessing-the-current-environment-in-hooks) for more details.\n\n## `DevEnvironment` class\n\nDuring dev, each environment is an instance of the `DevEnvironment` class:\n\n```ts\nclass DevEnvironment {\n  /**\n   * Unique identifier for the environment in a Vite server.\n   * By default Vite exposes 'client' and 'ssr' environments.\n   */\n  name: string\n  /**\n   * Communication channel to send and receive messages from the\n   * associated module runner in the target runtime.\n   */\n  hot: NormalizedHotChannel\n  /**\n   * Graph of module nodes, with the imported relationship between\n   * processed modules and the cached result of the processed code.\n   */\n  moduleGraph: EnvironmentModuleGraph\n  /**\n   * Resolved plugins for this environment, including the ones\n   * created using the per-environment `create` hook\n   */\n  plugins: Plugin[]\n  /**\n   * Allows to resolve, load, and transform code through the\n   * environment plugins pipeline\n   */\n  pluginContainer: EnvironmentPluginContainer\n  /**\n   * Resolved config options for this environment. Options at the server\n   * global scope are taken as defaults for all environments, and can\n   * be overridden (resolve conditions, external, optimizedDeps)\n   */\n  config: ResolvedConfig & ResolvedDevEnvironmentOptions\n\n  constructor(\n    name: string,\n    config: ResolvedConfig,\n    context: DevEnvironmentContext,\n  )\n\n  /**\n   * Resolve the URL to an id, load it, and process the code using the\n   * plugins pipeline. The module graph is also updated.\n   */\n  async transformRequest(url: string): Promise<TransformResult | null>\n\n  /**\n   * Register a request to be processed with low priority. This is useful\n   * to avoid waterfalls. The Vite server has information about the\n   * imported modules by other requests, so it can warmup the module graph\n   * so the modules are already processed when they are requested.\n   */\n  async warmupRequest(url: string): Promise<void>\n}\n```\n\nWith `DevEnvironmentContext` being:\n\n```ts\ninterface DevEnvironmentContext {\n  hot: boolean\n  transport?: HotChannel | WebSocketServer\n  options?: EnvironmentOptions\n  remoteRunner?: {\n    inlineSourceMap?: boolean\n  }\n  depsOptimizer?: DepsOptimizer\n}\n```\n\nand with `TransformResult` being:\n\n```ts\ninterface TransformResult {\n  code: string\n  map: SourceMap | { mappings: '' } | null\n  etag?: string\n  deps?: string[]\n  dynamicDeps?: string[]\n}\n```\n\nAn environment instance in the Vite server lets you process a URL using the `environment.transformRequest(url)` method. This function will use the plugin pipeline to resolve the `url` to a module `id`, load it (reading the file from the file system or through a plugin that implements a virtual module), and then transform the code. While transforming the module, imports and other metadata will be recorded in the environment module graph by creating or updating the corresponding module node. When processing is done, the transform result is also stored in the module.\n\n## Separate Module Graphs\n\nEach environment has an isolated module graph. All module graphs have the same signature, so generic algorithms can be implemented to crawl or query the graph without depending on the environment. `hotUpdate` is a good example. When a file is modified, the module graph of each environment will be used to discover the affected modules and perform HMR for each environment independently.\n\nINFO\n\nVite v5 had a mixed Client and SSR module graph. Given an unprocessed or invalidated node, it isn't possible to know if it corresponds to the Client, SSR, or both environments. Module nodes have some properties prefixed, like `clientImportedModules` and `ssrImportedModules` (and `importedModules` that returns the union of both). `importers` contains all importers from both the Client and SSR environment for each module node. A module node also has `transformResult` and `ssrTransformResult`. A backward compatibility layer allows the ecosystem to migrate from the deprecated `server.moduleGraph`.\n\nEach module is represented by a `EnvironmentModuleNode` instance. Modules may be registered in the graph without yet being processed ( `transformResult` would be `null` in that case). `importers` and `importedModules` are also updated after the module is processed.\n\n```ts\nclass EnvironmentModuleNode {\n  environment: string\n\n  url: string\n  id: string | null = null\n  file: string | null = null\n\n  type: 'js' | 'css'\n\n  importers = new Set<EnvironmentModuleNode>()\n  importedModules = new Set<EnvironmentModuleNode>()\n  importedBindings: Map<string, Set<string>> | null = null\n\n  info?: ModuleInfo\n  meta?: Record<string, any>\n  transformResult: TransformResult | null = null\n\n  acceptedHmrDeps = new Set<EnvironmentModuleNode>()\n  acceptedHmrExports: Set<string> | null = null\n  isSelfAccepting?: boolean\n  lastHMRTimestamp = 0\n  lastInvalidationTimestamp = 0\n}\n```\n\n`environment.moduleGraph` is an instance of `EnvironmentModuleGraph`:\n\n```ts\nexport class EnvironmentModuleGraph {\n  environment: string\n\n  urlToModuleMap = new Map<string, EnvironmentModuleNode>()\n  idToModuleMap = new Map<string, EnvironmentModuleNode>()\n  etagToModuleMap = new Map<string, EnvironmentModuleNode>()\n  fileToModulesMap = new Map<string, Set<EnvironmentModuleNode>>()\n\n  constructor(\n    environment: string,\n    resolveId: (url: string) => Promise<PartialResolvedId | null>,\n  )\n\n  async getModuleByUrl(\n    rawUrl: string,\n  ): Promise<EnvironmentModuleNode | undefined>\n\n  getModuleById(id: string): EnvironmentModuleNode | undefined\n\n  getModulesByFile(file: string): Set<EnvironmentModuleNode> | undefined\n\n  onFileChange(file: string): void\n\n  onFileDelete(file: string): void\n\n  invalidateModule(\n    mod: EnvironmentModuleNode,\n    seen: Set<EnvironmentModuleNode> = new Set(),\n    timestamp: number = Date.now(),\n    isHmr: boolean = false,\n  ): void\n\n  invalidateAll(): void\n\n  async ensureEntryFromUrl(\n    rawUrl: string,\n    setIsSelfAccepting = true,\n  ): Promise<EnvironmentModuleNode>\n\n  createFileOnlyEntry(file: string): EnvironmentModuleNode\n\n  async resolveUrl(url: string): Promise<ResolvedUrl>\n\n  updateModuleTransformResult(\n    mod: EnvironmentModuleNode,\n    result: TransformResult | null,\n  ): void\n\n  getModuleByEtag(etag: string): EnvironmentModuleNode | undefined\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-instances", "title": "Using `Environment` Instances", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:11:40", "type": "overview", "page_metadata": {"title": "Using Environment Instances | Vite", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Using Environment Instances", "og:type": "website", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Using Environment Instances", "og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "theme-color": "#646cff", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "scrapeId": "b2a283b3-4f8d-4376-a9a7-c368b6807f26", "sourceURL": "https://vite.dev/guide/api-environment-instances", "url": "https://vite.dev/guide/api-environment-instances", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I accessing the environments in vite-guide?\n\nAssistant: To accessing the environments in vite-guide, here's what you do:\nDuring dev, the available environments in a dev server can be accessed using `server.environments`:\n\n```js\n// create the server, or get it from the configureServer hook\nconst server = await createServer(/* options */)\n\nconst environment = server.environments.client\nenvironment.transformRequest(url)\nconsole.log(server.environments.ssr.moduleGraph)\n```\n\nYou can also access the current environment from plugins. See the [Environment API for Plugins](https://vite.dev/guide/api-environment-plugins#accessing-the-current-environment-in-hooks) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-instances", "title": "Using `Environment` Instances", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:11:40", "type": "section_detail", "page_metadata": {"title": "Using Environment Instances | Vite", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Using Environment Instances", "og:type": "website", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Using Environment Instances", "og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "theme-color": "#646cff", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "scrapeId": "b2a283b3-4f8d-4376-a9a7-c368b6807f26", "sourceURL": "https://vite.dev/guide/api-environment-instances", "url": "https://vite.dev/guide/api-environment-instances", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I `devenvironment` class in vite-guide?\n\nAssistant: To `devenvironment` class in vite-guide, here's what you do:\nDuring dev, each environment is an instance of the `DevEnvironment` class:\n\n```ts\nclass DevEnvironment {\n  /**\n   * Unique identifier for the environment in a Vite server.\n   * By default Vite exposes 'client' and 'ssr' environments.\n   */\n  name: string\n  /**\n   * Communication channel to send and receive messages from the\n   * associated module runner in the target runtime.\n   */\n  hot: NormalizedHotChannel\n  /**\n   * Graph of module nodes, with the imported relationship between\n   * processed modules and the cached result of the processed code.\n   */\n  moduleGraph: EnvironmentModuleGraph\n  /**\n   * Resolved plugins for this environment, including the ones\n   * created using the per-environment `create` hook\n   */\n  plugins: Plugin[]\n  /**\n   * Allows to resolve, load, and transform code through the\n   * environment plugins pipeline\n   */\n  pluginContainer: EnvironmentPluginContainer\n  /**\n   * Resolved config options for this environment. Options at the server\n   * global scope are taken as defaults for all environments, and can\n   * be overridden (resolve conditions, external, optimizedDeps)\n   */\n  config: ResolvedConfig & ResolvedDevEnvironmentOptions\n\n  constructor(\n    name: string,\n    config: ResolvedConfig,\n    context: DevEnvironmentContext,\n  )\n\n  /**\n   * Resolve the URL to an id, load it, and process the code using the\n   * plugins pipeline. The module graph is also updated.\n   */\n  async transformRequest(url: string): Promise<TransformResult | null>\n\n  /**\n   * Register a request to be processed with low priority. This is useful\n   * to avoid waterfalls. The Vite server has information about the\n   * imported modules by other requests, so it can warmup the module graph\n   * so the modules are already processed when they are requested.\n   */\n  async warmupRequest(url: string): Promise<void>\n}\n```\n\nWith `DevEnvironmentContext` being:\n\n```ts\ninterface DevEnvironmentContext {\n  hot: boolean\n  transport?: HotChannel | WebSocketServer\n  options?: EnvironmentOptions\n  remoteRunner?: {\n    inlineSourceMap?: boolean\n  }\n  depsOptimizer?: DepsOptimizer\n}\n```\n\nand with `TransformResult` being:\n\n```ts\ninterface TransformResult {\n  code: string\n  map: SourceMap | { mappings: '' } | null\n  etag?: string\n  deps?: string[]\n  dynamicDeps?: string[]\n}\n```\n\nAn environment instance in the Vite server lets you process a URL using the `environment.transformRequest(url)` method. This function will use the plugin pipeline to resolve the `url` to a module `id`, load it (reading the file from the file system or through a plugin that implements a virtual module), and then transform the code. While transforming the module, imports and other metadata will be recorded in the environment module graph by creating or updating the corresponding module node. When processing is done, the transform result is also stored in the module..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-instances", "title": "Using `Environment` Instances", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:11:40", "type": "section_detail", "page_metadata": {"title": "Using Environment Instances | Vite", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Using Environment Instances", "og:type": "website", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Using Environment Instances", "og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "theme-color": "#646cff", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "scrapeId": "b2a283b3-4f8d-4376-a9a7-c368b6807f26", "sourceURL": "https://vite.dev/guide/api-environment-instances", "url": "https://vite.dev/guide/api-environment-instances", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I separate module graphs in vite-guide?\n\nAssistant: To separate module graphs in vite-guide, here's what you do:\nEach environment has an isolated module graph. All module graphs have the same signature, so generic algorithms can be implemented to crawl or query the graph without depending on the environment. `hotUpdate` is a good example. When a file is modified, the module graph of each environment will be used to discover the affected modules and perform HMR for each environment independently.\n\nINFO\n\nVite v5 had a mixed Client and SSR module graph. Given an unprocessed or invalidated node, it isn't possible to know if it corresponds to the Client, SSR, or both environments. Module nodes have some properties prefixed, like `clientImportedModules` and `ssrImportedModules` (and `importedModules` that returns the union of both). `importers` contains all importers from both the Client and SSR environment for each module node. A module node also has `transformResult` and `ssrTransformResult`. A backward compatibility layer allows the ecosystem to migrate from the deprecated `server.moduleGraph`.\n\nEach module is represented by a `EnvironmentModuleNode` instance. Modules may be registered in the graph without yet being processed ( `transformResult` would be `null` in that case). `importers` and `importedModules` are also updated after the module is processed.\n\n```ts\nclass EnvironmentModuleNode {\n  environment: string\n\n  url: string\n  id: string | null = null\n  file: string | null = null\n\n  type: 'js' | 'css'\n\n  importers = new Set<EnvironmentModuleNode>()\n  importedModules = new Set<EnvironmentModuleNode>()\n  importedBindings: Map<string, Set<string>> | null = null\n\n  info?: ModuleInfo\n  meta?: Record<string, any>\n  transformResult: TransformResult | null = null\n\n  acceptedHmrDeps = new Set<EnvironmentModuleNode>()\n  acceptedHmrExports: Set<string> | null = null\n  isSelfAccepting?: boolean\n  lastHMRTimestamp = 0\n  lastInvalidationTimestamp = 0\n}\n```\n\n`environment.moduleGraph` is an instance of `EnvironmentModuleGraph`:\n\n```ts\nexport class EnvironmentModuleGraph {\n  environment: string\n\n  urlToModuleMap = new Map<string, EnvironmentModuleNode>()\n  idToModuleMap = new Map<string, EnvironmentModuleNode>()\n  etagToModuleMap = new Map<string, EnvironmentModuleNode>()\n  fileToModulesMap = new Map<string, Set<EnvironmentModuleNode>>()\n\n  constructor(\n    environment: string,\n    resolveId: (url: string) => Promise<PartialResolvedId | null>,\n  )\n\n  async getModuleByUrl(\n    rawUrl: string,\n  ): Promise<EnvironmentModuleNode | undefined>\n\n  getModuleById(id: string): EnvironmentModuleNode | undefined\n\n  getModulesByFile(file: string): Set<EnvironmentModuleNode> | undefined\n\n  onFileChange(file: string): void\n\n  onFileDelete(file: string): void\n\n  invalidateModule(\n    mod: EnvironmentModuleNode,\n    seen: Set<EnvironmentModuleNode> = new Set(),\n    timestamp: number = Date.now(),\n    isHmr: boolean = false,\n  ): void\n\n  invalidateAll(): void\n\n  async ensureEntryFromUrl(\n    rawUrl: string,\n    setIsSelfAccepting = true,\n  ): Promise<EnvironmentModuleNode>\n\n  createFileOnlyEntry(file: string): EnvironmentModuleNode\n\n  async resolveUrl(url: string): Promise<ResolvedUrl>\n\n  updateModuleTransformResult(\n    mod: EnvironmentModuleNode,\n    result: TransformResult | null,\n  ): void\n\n  getModuleByEtag(etag: string): EnvironmentModuleNode | undefined\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-instances", "title": "Using `Environment` Instances", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:11:40", "type": "section_detail", "page_metadata": {"title": "Using Environment Instances | Vite", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Using Environment Instances", "og:type": "website", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Using Environment Instances", "og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "theme-color": "#646cff", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "scrapeId": "b2a283b3-4f8d-4376-a9a7-c368b6807f26", "sourceURL": "https://vite.dev/guide/api-environment-instances", "url": "https://vite.dev/guide/api-environment-instances", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Using `Environment` Instances in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Accessing the Environments**:\n\n```yaml\n// create the server, or get it from the configureServer hook\nconst server = await createServer(/* options */)\n\nconst environment = server.environments.client\nenvironment.transformRequest(url)\nconsole.log(server.environments.ssr.moduleGraph)\n```\n\nThis snippet shows you how to accessing the environments, which is an important aspect of using `environment` instances.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-environment-instances", "title": "Using `Environment` Instances", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:11:40", "type": "code_examples", "page_metadata": {"title": "Using Environment Instances | Vite", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Using Environment Instances", "og:type": "website", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Using Environment Instances", "og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "theme-color": "#646cff", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "scrapeId": "b2a283b3-4f8d-4376-a9a7-c368b6807f26", "sourceURL": "https://vite.dev/guide/api-environment-instances", "url": "https://vite.dev/guide/api-environment-instances", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Using `Environment` Instances in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe are using `transformRequest(url)` and `warmupRequest(url)` in the current version of this proposal so it is easier to discuss and understand for users used to Vite's current API. Before releasing, we can take the opportunity to review these names too. For example, it could be named `environment.processModule(url)` or `environment.loadModule(url)` taking a page from Rollup's `context.load(id)` in plugin hooks. For the moment, we think keeping the current names and delaying this discussion is better.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-instances", "title": "Using `Environment` Instances", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:11:40", "type": "best_practices", "page_metadata": {"title": "Using Environment Instances | Vite", "favicon": "https://vite.dev/logo.svg", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Using Environment Instances", "og:type": "website", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "og:image": "https://vite.dev/og-image.jpg", "og:title": "Using Environment Instances", "og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vite.dev", "theme-color": "#646cff", "og:site_name": "vitejs", "description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "generator": "VitePress v1.6.3", "scrapeId": "b2a283b3-4f8d-4376-a9a7-c368b6807f26", "sourceURL": "https://vite.dev/guide/api-environment-instances", "url": "https://vite.dev/guide/api-environment-instances", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Environment API for Runtimes is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Environment API for Runtimes in vite-guide.\n\n# Environment API for Runtimes\n\nExperimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.Here's a quick rundown of what this is about:\n\n## Environment Factories\n\nEnvironments factories are intended to be implemented by Environment providers like Cloudflare, and not by end users. Environment factories return a `EnvironmentOptions` for the most common case of using the target runtime for both dev and build environments. The default environment options can also be set so the user doesn't need to do it.\n\n## Creating a New Environment Factory\n\nA Vite dev server exposes two environments by default: a `client` environment and an `ssr` environment. The client environment is a browser environment by default, and the module runner is implemented by importing the virtual module `/@vite/client` to client apps. The SSR environment runs in the same Node runtime as the Vite server by default and allows application servers to be used to render requests during dev with full HMR support.\n\n## ModuleRunner\n\nA module runner is instantiated in the target runtime. All APIs in the next section are imported from `vite/module-runner` unless stated otherwise. This export entry point is kept as lightweight as possible, only exporting the minimal needed to create module runners.\n\n## ModuleRunnerOptions\n\nInterface for configuring the module runner.\n\n## ModuleEvaluator\n\nInterface for evaluating modules.\n\n## ModuleRunnerTransport\n\nInterface for transport methods used in module runners.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "overview", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environment factories in vite-guide?\n\nAssistant: To environment factories in vite-guide, here's what you do:\nEnvironments factories are intended to be implemented by Environment providers like Cloudflare, and not by end users. Environment factories return a `EnvironmentOptions` for the most common case of using the target runtime for both dev and build environments. The default environment options can also be set so the user doesn't need to do it..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I creating a new environment factory in vite-guide?\n\nAssistant: To creating a new environment factory in vite-guide, here's what you do:\nA Vite dev server exposes two environments by default: a `client` environment and an `ssr` environment. The client environment is a browser environment by default, and the module runner is implemented by importing the virtual module `/@vite/client` to client apps. The SSR environment runs in the same Node runtime as the Vite server by default and allows application servers to be used to render requests during dev with full HMR support..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I modulerunner in vite-guide?\n\nAssistant: To modulerunner in vite-guide, here's what you do:\nA module runner is instantiated in the target runtime. All APIs in the next section are imported from `vite/module-runner` unless stated otherwise. This export entry point is kept as lightweight as possible, only exporting the minimal needed to create module runners..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I modulerunneroptions in vite-guide?\n\nAssistant: To modulerunneroptions in vite-guide, here's what you do:\nInterface for configuring the module runner..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I moduleevaluator in vite-guide?\n\nAssistant: To moduleevaluator in vite-guide, here's what you do:\nInterface for evaluating modules..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I modulerunnertransport in vite-guide?\n\nAssistant: To modulerunnertransport in vite-guide, here's what you do:\nInterface for transport methods used in module runners..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Environment API for Runtimes in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating Workerd Environment**:\n\n```yaml\nfunction createWorkerdEnvironment(\n  userConfig: EnvironmentOptions,\n): EnvironmentOptions {\n  return mergeConfig(\n    {\n      resolve: {\n        conditions: [\\\n          /*...*/\\\n        ],\n      },\n      dev: {\n        createEnvironment(name, config) {\n          return createWorkerdDevEnvironment(name, config, {\n            hot: true,\n            transport: customHotChannel(),\n          })\n        },\n      },\n      build: {\n        createEnvironment(name, config) {\n          return createWorkerdBuildEnvironment(name, config)\n        },\n      },\n    },\n    userConfig,\n  )\n}\n```\n\nThis snippet shows you how to creating workerd environment, which is an important aspect of environment api for runtimes.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "code_examples", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Environment API for Runtimes in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nShare feedback on the new APIs through the feedback discussion.\n\nUse environment factories for common runtime configurations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-runtimes", "title": "Environment API for Runtimes", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:57", "type": "best_practices", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "title": "Environment API for Runtimes | Vite", "og:url": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "theme-color": "#646cff", "og:title": "Environment API for Runtimes", "ogUrl": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vite_js", "description": "Next Generation Frontend Tooling", "ogTitle": "Environment API for Runtimes", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "scrapeId": "3e4ae9ae-089f-432a-afc7-1a7e1d0d590a", "sourceURL": "https://vite.dev/guide/api-environment-runtimes", "url": "https://vite.dev/guide/api-environment-runtimes", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Environment API for Frameworks is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Environment API for Frameworks in vite-guide.\n\n# Environment API for Frameworks\n\nExperimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.Here's a quick rundown of what this is about:\n\n## Environments and frameworks\n\nThe implicit `ssr` environment and other non-client environments use a `RunnableDevEnvironment` by default during dev. While this requires the runtime to be the same with the one the Vite server is running in, this works similarly with `ssrLoadModule` and allows frameworks to migrate and enable HMR for their SSR dev story. You can guard any runnable environment with an `isRunnableDevEnvironment` function.\n\n```typescript\nexport class RunnableDevEnvironment extends DevEnvironment {\n  public readonly runner: ModuleRunner\n}\n\nclass ModuleRunner {\n  /**\n   * URL to execute.\n   * Accepts file path, server path, or id relative to the root.\n   * Returns an instantiated module (same as in ssrLoadModule)\n   */\n  public async import(url: string): Promise<Record<string, any>>\n  /**\n   * Other ModuleRunner methods...\n   */\n}\n\nif (isRunnableDevEnvironment(server.environments.ssr)) {\n  await server.environments.ssr.runner.import('/entry-point.js')\n}\n```\n\nWARNING\n\nThe `runner` is evaluated eagerly when it's accessed for the first time. Beware that Vite enables source map support when the `runner` is created by calling `process.setSourceMapsEnabled` or by overriding `Error.prepareStackTrace` if it's not available.\n\n## Default `RunnableDevEnvironment`\n\nGiven a Vite server configured in middleware mode as described by the [SSR setup guide](https://vite.dev/guide/ssr#setting-up-the-dev-server), let's implement the SSR middleware using the environment API. Error handling is omitted.\n\n```javascript\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { createServer } from 'vite'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nconst server = await createServer({\n  server: { middlewareMode: true },\n  appType: 'custom',\n  environments: {\n    server: {\n      // by default, modules are run in the same process as the vite server\n    },\n  },\n})\n\n// You might need to cast this to RunnableDevEnvironment in TypeScript or\n// use isRunnableDevEnvironment to guard the access to the runner\nconst environment = server.environments.node\n\napp.use('*', async (req, res, next) => {\n  const url = req.originalUrl\n\n  // 1. Read index.html\n  const indexHtmlPath = path.resolve(__dirname, 'index.html')\n  let template = fs.readFileSync(indexHtmlPath, 'utf-8')\n\n  // 2. Apply Vite HTML transforms. This injects the Vite HMR client,\n  //    and also applies HTML transforms from Vite plugins, e.g. global\n  //    preambles from @vitejs/plugin-react\n  template = await server.transformIndexHtml(url, template)\n\n  // 3. Load the server entry. import(url) automatically transforms\n  //    ESM source code to be usable in Node.js! There is no bundling\n  //    required, and provides full HMR support.\n  const { render } = await environment.runner.import('/src/entry-server.js')\n\n  // 4. render the app HTML. This assumes entry-server.js's exported\n  //     `render` function calls appropriate framework SSR APIs,\n  //    e.g. ReactDOMServer.renderToString()\n  const appHtml = await render(url)\n\n  // 5. Inject the app-rendered HTML into the template.\n  const html = template.replace(`<!--ssr-outlet-->`, appHtml)\n\n  // 6. Send the rendered HTML back.\n  res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n})\n```\n\n## Runtime Agnostic SSR\n\nSince the `RunnableDevEnvironment` can only be used to run the code in the same runtime as the Vite server, it requires a runtime that can run the Vite Server (a runtime that is compatible with Node.js). This means that you will need to use the raw `DevEnvironment` to make it runtime agnostic.\n\n`FetchableDevEnvironment` proposal\n\nThe initial proposal had a `run` method on the `DevEnvironment` class that would allow consumers to invoke an import on the runner side by using the `transport` option. During our testing we found out that the API was not universal enough to start recommending it. At the moment, we are looking for feedback on [the `FetchableDevEnvironment` proposal](https://github.com/vitejs/vite/discussions/18191).\n\n`RunnableDevEnvironment` has a `runner.import` function that returns the value of the module. But this function is not available in the raw `DevEnvironment` and requires the code using the Vite's APIs and the user modules to be decoupled.\n\nFor example, the following example uses the value of the user module from the code using the Vite's APIs:\n\n```typescript\n// code using the Vite's APIs\nimport { createServer } from 'vite'\n\nconst server = createServer()\nconst ssrEnvironment = server.environment.ssr\nconst input = {}\n\nconst { createHandler } = await ssrEnvironment.runner.import('./entry.js')\nconst handler = createHandler(input)\nconst response = handler(new Request('/'))\n\n// -------------------------------------\n// ./entrypoint.js\nexport function createHandler(input) {\n  return function handler(req) {\n    return new Response('hello')\n  }\n}\n```\n\nIf your code can run in the same runtime as the user modules (i.e., it does not rely on Node.js-specific APIs), you can use a virtual module. This approach eliminates the need to access the value from the code using Vite's APIs.\n\n```typescript\n// code using the Vite's APIs\nimport { createServer } from 'vite'\n\nconst server = createServer({\n  plugins: [\n    // a plugin that handles `virtual:entrypoint`\n    {\n      name: 'virtual-module',\n      /* plugin implementation */\n    },\n  ],\n})\nconst ssrEnvironment = server.environment.ssr\nconst input = {}\n\n// use exposed functions by each environment factories that runs the code\n// check for each environment factories what they provide\nif (ssrEnvironment instanceof RunnableDevEnvironment) {\n  ssrEnvironment.runner.import('virtual:entrypoint')\n} else if (ssrEnvironment instanceof CustomDevEnvironment) {\n  ssrEnvironment.runEntrypoint('virtual:entrypoint')\n} else {\n  throw new Error(`Unsupported runtime for ${ssrEnvironment.name}`)\n}\n\n// -------------------------------------\n// virtual:entrypoint\nconst { createHandler } = await import('./entrypoint.js')\nconst handler = createHandler(input)\nconst response = handler(new Request('/'))\n\n// -------------------------------------\n// ./entrypoint.js\nexport function createHandler(input) {\n  return function handler(req) {\n    return new Response('hello')\n  }\n}\n```\n\nFor example, to call `transformIndexHtml` on the user module, the following plugin can be used:\n\n```typescript\nfunction vitePluginVirtualIndexHtml(): Plugin {\n  let server: ViteDevServer | undefined\n  return {\n    name: vitePluginVirtualIndexHtml.name,\n    configureServer(server_) {\n      server = server_\n    },\n    resolveId(source) {\n      return source === 'virtual:index-html' ? '\\0' + source : undefined\n    },\n    async load(id) {\n      if (id === '\\0' + 'virtual:index-html') {\n        let html: string\n        if (server) {\n          this.addWatchFile('index.html')\n          html = fs.readFileSync('index.html', 'utf-8')\n          html = await server.transformIndexHtml('/', html)\n        } else {\n          html = fs.readFileSync('dist/client/index.html', 'utf-8')\n        }\n        return `export default ${JSON.stringify(html)}`\n      }\n      return\n    },\n  }\n}\n```\n\nIf your code requires Node.js APIs, you can use `hot.send` to communicate with the code that uses Vite's APIs from the user modules. However, be aware that this approach may not work the same way after the build process.\n\n```typescript\n// code using the Vite's APIs\nimport { createServer } from 'vite'\n\nconst server = createServer({\n  plugins: [\n    // a plugin that handles `virtual:entrypoint`\n    {\n      name: 'virtual-module',\n      /* plugin implementation */\n    },\n  ],\n})\nconst ssrEnvironment = server.environment.ssr\nconst input = {}\n\n// use exposed functions by each environment factories that runs the code\n// check for each environment factories what they provide\nif (ssrEnvironment instanceof RunnableDevEnvironment) {\n  ssrEnvironment.runner.import('virtual:entrypoint')\n} else if (ssrEnvironment instanceof CustomDevEnvironment) {\n  ssrEnvironment.runEntrypoint('virtual:entrypoint')\n} else {\n  throw new Error(`Unsupported runtime for ${ssrEnvironment.name}`)\n}\n\nconst req = new Request('/')\n\nconst uniqueId = 'a-unique-id'\nssrEnvironment.send('request', serialize({ req, uniqueId }))\nconst response = await new Promise((resolve) => {\n  ssrEnvironment.on('response', (data) => {\n    data = deserialize(data)\n    if (data.uniqueId === uniqueId) {\n      resolve(data.res)\n    }\n  })\n})\n\n// -------------------------------------\n// virtual:entrypoint\nconst { createHandler } = await import('./entrypoint.js')\nconst handler = createHandler(input)\n\nimport.meta.hot.on('request', (data) => {\n  const { req, uniqueId } = deserialize(data)\n  const res = handler(req)\n  import.meta.hot.send('response', serialize({ res: res, uniqueId }))\n})\n\nconst response = handler(new Request('/'))\n\n// -------------------------------------\n// ./entrypoint.js\nexport function createHandler(input) {\n  return function handler(req) {\n    return new Response('hello')\n  }\n}\n```\n\n## Environments During Build\n\nIn the CLI, calling `vite build` and `vite build --ssr` will still build the client only and ssr only environments for backward compatibility.\n\nWhen `builder` is not `undefined` (or when calling `vite build --app`), `vite build` will opt-in into building the entire app instead. This would later on become the default in a future major. A `ViteBuilder` instance will be created (build-time equivalent to a `ViteDevServer`) to build all configured environments for production. By default the build of environments is run in series respecting the order of the `environments` record. A framework or user can further configure how the environments are built using:\n\n```javascript\nexport default {\n  builder: {\n    buildApp: async (builder) => {\n      const environments = Object.values(builder.environments)\n      return Promise.all(\n        environments.map((environment) => builder.build(environment)),\n      )\n    },\n  },\n}\n```\n\n## Environment Agnostic Code\n\nMost of the time, the current `environment` instance will be available as part of the context of the code being run so the need to access them through `server.environments` should be rare. For example, inside plugin hooks the environment is exposed as part of the `PluginContext`, so it can be accessed using `this.environment`. See [Environment API for Plugins](https://vite.dev/guide/api-environment-plugins) to learn about how to build environment aware plugins.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environments and frameworks in vite-guide?\n\nAssistant: To environments and frameworks in vite-guide, here's what you do:\nThe implicit `ssr` environment and other non-client environments use a `RunnableDevEnvironment` by default during dev. While this requires the runtime to be the same with the one the Vite server is running in, this works similarly with `ssrLoadModule` and allows frameworks to migrate and enable HMR for their SSR dev story. You can guard any runnable environment with an `isRunnableDevEnvironment` function.\n\n```typescript\nexport class RunnableDevEnvironment extends DevEnvironment {\n  public readonly runner: ModuleRunner\n}\n\nclass ModuleRunner {\n  /**\n   * URL to execute.\n   * Accepts file path, server path, or id relative to the root.\n   * Returns an instantiated module (same as in ssrLoadModule)\n   */\n  public async import(url: string): Promise<Record<string, any>>\n  /**\n   * Other ModuleRunner methods...\n   */\n}\n\nif (isRunnableDevEnvironment(server.environments.ssr)) {\n  await server.environments.ssr.runner.import('/entry-point.js')\n}\n```\n\nWARNING\n\nThe `runner` is evaluated eagerly when it's accessed for the first time. Beware that Vite enables source map support when the `runner` is created by calling `process.setSourceMapsEnabled` or by overriding `Error.prepareStackTrace` if it's not available..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I default `runnabledevenvironment` in vite-guide?\n\nAssistant: To default `runnabledevenvironment` in vite-guide, here's what you do:\nGiven a Vite server configured in middleware mode as described by the [SSR setup guide](https://vite.dev/guide/ssr#setting-up-the-dev-server), let's implement the SSR middleware using the environment API. Error handling is omitted.\n\n```javascript\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { createServer } from 'vite'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nconst server = await createServer({\n  server: { middlewareMode: true },\n  appType: 'custom',\n  environments: {\n    server: {\n      // by default, modules are run in the same process as the vite server\n    },\n  },\n})\n\n// You might need to cast this to RunnableDevEnvironment in TypeScript or\n// use isRunnableDevEnvironment to guard the access to the runner\nconst environment = server.environments.node\n\napp.use('*', async (req, res, next) => {\n  const url = req.originalUrl\n\n  // 1. Read index.html\n  const indexHtmlPath = path.resolve(__dirname, 'index.html')\n  let template = fs.readFileSync(indexHtmlPath, 'utf-8')\n\n  // 2. Apply Vite HTML transforms. This injects the Vite HMR client,\n  //    and also applies HTML transforms from Vite plugins, e.g. global\n  //    preambles from @vitejs/plugin-react\n  template = await server.transformIndexHtml(url, template)\n\n  // 3. Load the server entry. import(url) automatically transforms\n  //    ESM source code to be usable in Node.js! There is no bundling\n  //    required, and provides full HMR support.\n  const { render } = await environment.runner.import('/src/entry-server.js')\n\n  // 4. render the app HTML. This assumes entry-server.js's exported\n  //     `render` function calls appropriate framework SSR APIs,\n  //    e.g. ReactDOMServer.renderToString()\n  const appHtml = await render(url)\n\n  // 5. Inject the app-rendered HTML into the template.\n  const html = template.replace(`<!--ssr-outlet-->`, appHtml)\n\n  // 6. Send the rendered HTML back.\n  res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I runtime agnostic ssr in vite-guide?\n\nAssistant: To runtime agnostic ssr in vite-guide, here's what you do:\nSince the `RunnableDevEnvironment` can only be used to run the code in the same runtime as the Vite server, it requires a runtime that can run the Vite Server (a runtime that is compatible with Node.js). This means that you will need to use the raw `DevEnvironment` to make it runtime agnostic.\n\n`FetchableDevEnvironment` proposal\n\nThe initial proposal had a `run` method on the `DevEnvironment` class that would allow consumers to invoke an import on the runner side by using the `transport` option. During our testing we found out that the API was not universal enough to start recommending it. At the moment, we are looking for feedback on [the `FetchableDevEnvironment` proposal](https://github.com/vitejs/vite/discussions/18191).\n\n`RunnableDevEnvironment` has a `runner.import` function that returns the value of the module. But this function is not available in the raw `DevEnvironment` and requires the code using the Vite's APIs and the user modules to be decoupled.\n\nFor example, the following example uses the value of the user module from the code using the Vite's APIs:\n\n```typescript\n// code using the Vite's APIs\nimport { createServer } from 'vite'\n\nconst server = createServer()\nconst ssrEnvironment = server.environment.ssr\nconst input = {}\n\nconst { createHandler } = await ssrEnvironment.runner.import('./entry.js')\nconst handler = createHandler(input)\nconst response = handler(new Request('/'))\n\n// -------------------------------------\n// ./entrypoint.js\nexport function createHandler(input) {\n  return function handler(req) {\n    return new Response('hello')\n  }\n}\n```\n\nIf your code can run in the same runtime as the user modules (i.e., it does not rely on Node.js-specific APIs), you can use a virtual module. This approach eliminates the need to access the value from the code using Vite's APIs.\n\n```typescript\n// code using the Vite's APIs\nimport { createServer } from 'vite'\n\nconst server = createServer({\n  plugins: [\n    // a plugin that handles `virtual:entrypoint`\n    {\n      name: 'virtual-module',\n      /* plugin implementation */\n    },\n  ],\n})\nconst ssrEnvironment = server.environment.ssr\nconst input = {}\n\n// use exposed functions by each environment factories that runs the code\n// check for each environment factories what they provide\nif (ssrEnvironment instanceof RunnableDevEnvironment) {\n  ssrEnvironment.runner.import('virtual:entrypoint')\n} else if (ssrEnvironment instanceof CustomDevEnvironment) {\n  ssrEnvironment.runEntrypoint('virtual:entrypoint')\n} else {\n  throw new Error(`Unsupported runtime for ${ssrEnvironment.name}`)\n}\n\n// -------------------------------------\n// virtual:entrypoint\nconst { createHandler } = await import('./entrypoint.js')\nconst handler = createHandler(input)\nconst response = handler(new Request('/'))\n\n// -------------------------------------\n// ./entrypoint.js\nexport function createHandler(input) {\n  return function handler(req) {\n    return new Response('hello')\n  }\n}\n```\n\nFor example, to call `transformIndexHtml` on the user module, the following plugin can be used:\n\n```typescript\nfunction vitePluginVirtualIndexHtml(): Plugin {\n  let server: ViteDevServer | undefined\n  return {\n    name: vitePluginVirtualIndexHtml.name,\n    configureServer(server_) {\n      server = server_\n    },\n    resolveId(source) {\n      return source === 'virtual:index-html' ? '\\0' + source : undefined\n    },\n    async load(id) {\n      if (id === '\\0' + 'virtual:index-html') {\n        let html: string\n        if (server) {\n          this.addWatchFile('index.html')\n          html = fs.readFileSync('index.html', 'utf-8')\n          html = await server.transformIndexHtml('/', html)\n        } else {\n          html = fs.readFileSync('dist/client/index.html', 'utf-8')\n        }\n        return `export default ${JSON.stringify(html)}`\n      }\n      return\n    },\n  }\n}\n```\n\nIf your code requires Node.js APIs, you can use `hot.send` to communicate with the code that uses Vite's APIs from the user modules. However, be aware that this approach may not work the same way after the build process.\n\n```typescript\n// code using the Vite's APIs\nimport { createServer } from 'vite'\n\nconst server = createServer({\n  plugins: [\n    // a plugin that handles `virtual:entrypoint`\n    {\n      name: 'virtual-module',\n      /* plugin implementation */\n    },\n  ],\n})\nconst ssrEnvironment = server.environment.ssr\nconst input = {}\n\n// use exposed functions by each environment factories that runs the code\n// check for each environment factories what they provide\nif (ssrEnvironment instanceof RunnableDevEnvironment) {\n  ssrEnvironment.runner.import('virtual:entrypoint')\n} else if (ssrEnvironment instanceof CustomDevEnvironment) {\n  ssrEnvironment.runEntrypoint('virtual:entrypoint')\n} else {\n  throw new Error(`Unsupported runtime for ${ssrEnvironment.name}`)\n}\n\nconst req = new Request('/')\n\nconst uniqueId = 'a-unique-id'\nssrEnvironment.send('request', serialize({ req, uniqueId }))\nconst response = await new Promise((resolve) => {\n  ssrEnvironment.on('response', (data) => {\n    data = deserialize(data)\n    if (data.uniqueId === uniqueId) {\n      resolve(data.res)\n    }\n  })\n})\n\n// -------------------------------------\n// virtual:entrypoint\nconst { createHandler } = await import('./entrypoint.js')\nconst handler = createHandler(input)\n\nimport.meta.hot.on('request', (data) => {\n  const { req, uniqueId } = deserialize(data)\n  const res = handler(req)\n  import.meta.hot.send('response', serialize({ res: res, uniqueId }))\n})\n\nconst response = handler(new Request('/'))\n\n// -------------------------------------\n// ./entrypoint.js\nexport function createHandler(input) {\n  return function handler(req) {\n    return new Response('hello')\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environments during build in vite-guide?\n\nAssistant: To environments during build in vite-guide, here's what you do:\nIn the CLI, calling `vite build` and `vite build --ssr` will still build the client only and ssr only environments for backward compatibility.\n\nWhen `builder` is not `undefined` (or when calling `vite build --app`), `vite build` will opt-in into building the entire app instead. This would later on become the default in a future major. A `ViteBuilder` instance will be created (build-time equivalent to a `ViteDevServer`) to build all configured environments for production. By default the build of environments is run in series respecting the order of the `environments` record. A framework or user can further configure how the environments are built using:\n\n```javascript\nexport default {\n  builder: {\n    buildApp: async (builder) => {\n      const environments = Object.values(builder.environments)\n      return Promise.all(\n        environments.map((environment) => builder.build(environment)),\n      )\n    },\n  },\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I environment agnostic code in vite-guide?\n\nAssistant: To environment agnostic code in vite-guide, here's what you do:\nMost of the time, the current `environment` instance will be available as part of the context of the code being run so the need to access them through `server.environments` should be rare. For example, inside plugin hooks the environment is exposed as part of the `PluginContext`, so it can be accessed using `this.environment`. See [Environment API for Plugins](https://vite.dev/guide/api-environment-plugins) to learn about how to build environment aware plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Environment API for Frameworks in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**RunnableDevEnvironment Example**:\n\n```yaml\nexport class RunnableDevEnvironment extends DevEnvironment {\n  public readonly runner: ModuleRunner\n}\n\nclass ModuleRunner {\n  public async import(url: string): Promise<Record<string, any>>\n}\n\nif (isRunnableDevEnvironment(server.environments.ssr)) {\n  await server.environments.ssr.runner.import('/entry-point.js')\n}\n```\n\nThis snippet shows you how to runnabledevenvironment example, which is an important aspect of environment api for frameworks.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Environment API for Frameworks in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe `runner` is evaluated eagerly when it's accessed for the first time. Beware that Vite enables source map support when the `runner` is created by calling `process.setSourceMapsEnabled` or by overriding `Error.prepareStackTrace` if it's not available.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-environment-frameworks", "title": "Environment API for Frameworks", "description": "Experimental Environment API is experimental. We'll keep the APIs stable during Vite 6 to let the ecosystem experiment and build on top of it. We're planning to stabilize these new APIs with potential breaking changes in Vite 7.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:13:54", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "og:image": "https://vite.dev/og-image.jpg", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "ogSiteName": "vitejs", "og:title": "Environment API for Frameworks", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "ogTitle": "Environment API for Frameworks", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Environment API for Frameworks | Vite", "scrapeId": "45ad54f0-0cd1-4904-85d7-4db313af8836", "sourceURL": "https://vite.dev/guide/api-environment-frameworks", "url": "https://vite.dev/guide/api-environment-frameworks", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Plugin API is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Plugin API in vite-guide.\n\n# Plugin API\n\nVite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.Here's a quick rundown of what this is about:\n\n## Authoring a Plugin\n\nVite strives to offer established patterns out of the box, so before creating a new plugin make sure that you check the [Features guide](https://vite.dev/guide/features) to see if your need is covered. Also review available community plugins, both in the form of a [compatible Rollup plugin](https://github.com/rollup/awesome) and [Vite Specific plugins](https://github.com/vitejs/awesome-vite#plugins)\n\nWhen creating a plugin, you can inline it in your `vite.config.js`. There is no need to create a new package for it. Once you see that a plugin was useful in your projects, consider sharing it to help others [in the ecosystem](https://chat.vite.dev/). \n\nTIP\n\nWhen learning, debugging, or authoring plugins, we suggest including [vite-plugin-inspect](https://github.com/antfu/vite-plugin-inspect) in your project. It allows you to inspect the intermediate state of Vite plugins. After installing, you can visit `localhost:5173/__inspect/` to inspect the modules and transformation stack of your project. Check out install instructions in the [vite-plugin-inspect docs](https://github.com/antfu/vite-plugin-inspect). ![vite-plugin-inspect](https://vite.dev/assets/vite-plugin-inspect.y9xM77K_.png)\n\n## Conventions\n\nIf the plugin doesn't use Vite specific hooks and can be implemented as a [Compatible Rollup Plugin](https://vite.dev/guide/api-plugin#rollup-plugin-compatibility), then it is recommended to use the [Rollup Plugin naming conventions](https://rollupjs.org/plugin-development/#conventions).\n\n- Rollup Plugins should have a clear name with `rollup-plugin-` prefix.\n- Include `rollup-plugin` and `vite-plugin` keywords in package.json.\n\nThis exposes the plugin to be also used in pure Rollup or WMR based projects\n\nFor Vite only plugins\n\n- Vite Plugins should have a clear name with `vite-plugin-` prefix.\n- Include `vite-plugin` keyword in package.json.\n- Include a section in the plugin docs detailing why it is a Vite only plugin (for example, it uses Vite specific plugin hooks).\n\nIf your plugin is only going to work for a particular framework, its name should be included as part of the prefix\n\n- `vite-plugin-vue-` prefix for Vue Plugins\n- `vite-plugin-react-` prefix for React Plugins\n- `vite-plugin-svelte-` prefix for Svelte Plugins\n\nSee also [Virtual Modules Convention](https://vite.dev/guide/api-plugin#virtual-modules-convention).\n\n## Plugins config\n\nUsers will add plugins to the project `devDependencies` and configure them using the `plugins` array option.\n\nvite.config.js\n\njs\n\n```\nimport vitePlugin from 'vite-plugin-feature'\nimport rollupPlugin from 'rollup-plugin-feature'\n\nexport default defineConfig({\n  plugins: [vitePlugin(), rollupPlugin()],\n})\n```\n\nFalsy plugins will be ignored, which can be used to easily activate or deactivate plugins.\n\n`plugins` also accepts presets including several plugins as a single element. This is useful for complex features (like framework integration) that are implemented using several plugins. The array will be flattened internally.\n\njs\n\n```javascript\n// framework-plugin\nimport frameworkRefresh from 'vite-plugin-framework-refresh'\nimport frameworkDevtools from 'vite-plugin-framework-devtools'\n\nexport default function framework(config) {\n  return [frameworkRefresh(config), frameworkDevTools(config)]\n}\n```\n\nvite.config.js\n\njs\n\n```\nimport { defineConfig } from 'vite'\nimport framework from 'vite-plugin-framework'\n\nexport default defineConfig({\n  plugins: [framework()],\n})\n```\n\n## Simple Examples\n\nTIP\n\nIt is common convention to author a Vite/Rollup plugin as a factory function that returns the actual plugin object. The function can accept options which allows users to customize the behavior of the plugin.\n\n### Transforming Custom File Types\n\njs\n\n```\nconst fileRegex = /\\.(my-file-ext)$/\n\nexport default function myPlugin() {\n  return {\n    name: 'transform-file',\n\n    transform(src, id) {\n      if (fileRegex.test(id)) {\n        return {\n          code: compileFileToJS(src),\n          map: null, // provide source map if available\n        }\n      }\n    },\n  }\n}\n```\n\n### Importing a Virtual File\n\nSee the example in the [next section](https://vite.dev/guide/api-plugin#virtual-modules-convention).\n\n## Virtual Modules Convention\n\nVirtual modules are a useful scheme that allows you to pass build time information to the source files using normal ESM import syntax.\n\njs\n\n```\nexport default function myPlugin() {\n  const virtualModuleId = 'virtual:my-module'\n  const resolvedVirtualModuleId = '\\0' + virtualModuleId\n\n  return {\n    name: 'my-plugin', // required, will show up in warnings and errors\n    resolveId(id) {\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId\n      }\n    },\n    load(id) {\n      if (id === resolvedVirtualModuleId) {\n        return `export const msg = \"from virtual module\"`\n      }\n    },\n  }\n}\n```\n\nWhich allows importing the module in JavaScript:\n\njs\n\n```\nimport { msg } from 'virtual:my-module'\n\nconsole.log(msg)\n```\n\nVirtual modules in Vite (and Rollup) are prefixed with `virtual:` for the user-facing path by convention. If possible the plugin name should be used as a namespace to avoid collisions with other plugins in the ecosystem. For example, a `vite-plugin-posts` could ask users to import a `virtual:posts` or `virtual:posts/helpers` virtual modules to get build time information. Internally, plugins that use virtual modules should prefix the module ID with `\\0` while resolving the id, a convention from the rollup ecosystem. This prevents other plugins from trying to process the id (like node resolution), and core features like sourcemaps can use this info to differentiate between virtual modules and regular files. `\\0` is not a permitted char in import URLs so we have to replace them during import analysis. A `\\0{id}` virtual id ends up encoded as `/@id/__x00__{id}` during dev in the browser. The id will be decoded back before entering the plugins pipeline, so this is not seen by plugins hooks code.\n\nNote that modules directly derived from a real file, as in the case of a script module in a Single File Component (like a .vue or .svelte SFC) don't need to follow this convention. SFCs generally generate a set of submodules when processed but the code in these can be mapped back to the filesystem. Using `\\0` for these submodules would prevent sourcemaps from working correctly.\n\n## Universal Hooks\n\nDuring dev, the Vite dev server creates a plugin container that invokes [Rollup Build Hooks](https://rollupjs.org/plugin-development/#build-hooks) the same way Rollup does it.\n\nThe following hooks are called once on server start:\n\n- [`options`](https://rollupjs.org/plugin-development/#options)\n- [`buildStart`](https://rollupjs.org/plugin-development/#buildstart)\n\nThe following hooks are called on each incoming module request:\n\n- [`resolveId`](https://rollupjs.org/plugin-development/#resolveid)\n- [`load`](https://rollupjs.org/plugin-development/#load)\n- [`transform`](https://rollupjs.org/plugin-development/#transform)\n\nThese hooks also have an extended `options` parameter with additional Vite-specific properties. You can read more in the [SSR documentation](https://vite.dev/guide/ssr#ssr-specific-plugin-logic).\n\nSome `resolveId` calls' `importer` value may be an absolute path for a generic `index.html` at root as it's not always possible to derive the actual importer due to Vite's unbundled dev server pattern. For imports handled within Vite's resolve pipeline, the importer can be tracked during the import analysis phase, providing the correct `importer` value.\n\nThe following hooks are called when the server is closed:\n\n- [`buildEnd`](https://rollupjs.org/plugin-development/#buildend)\n- [`closeBundle`](https://rollupjs.org/plugin-development/#closebundle)\n\nNote that the [`moduleParsed`](https://rollupjs.org/plugin-development/#moduleparsed) hook is **not** called during dev, because Vite avoids full AST parses for better performance.\n\n[Output Generation Hooks](https://rollupjs.org/plugin-development/#output-generation-hooks) (except `closeBundle`) are **not** called during dev. You can think of Vite's dev server as only calling `rollup.rollup()` without calling `bundle.generate()`. \n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "overview", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I authoring a plugin in vite-guide?\n\nAssistant: To authoring a plugin in vite-guide, here's what you do:\nVite strives to offer established patterns out of the box, so before creating a new plugin make sure that you check the [Features guide](https://vite.dev/guide/features) to see if your need is covered. Also review available community plugins, both in the form of a [compatible Rollup plugin](https://github.com/rollup/awesome) and [Vite Specific plugins](https://github.com/vitejs/awesome-vite#plugins)\n\nWhen creating a plugin, you can inline it in your `vite.config.js`. There is no need to create a new package for it. Once you see that a plugin was useful in your projects, consider sharing it to help others [in the ecosystem](https://chat.vite.dev/). \n\nTIP\n\nWhen learning, debugging, or authoring plugins, we suggest including [vite-plugin-inspect](https://github.com/antfu/vite-plugin-inspect) in your project. It allows you to inspect the intermediate state of Vite plugins. After installing, you can visit `localhost:5173/__inspect/` to inspect the modules and transformation stack of your project. Check out install instructions in the [vite-plugin-inspect docs](https://github.com/antfu/vite-plugin-inspect). ![vite-plugin-inspect](https://vite.dev/assets/vite-plugin-inspect.y9xM77K_.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I conventions in vite-guide?\n\nAssistant: To conventions in vite-guide, here's what you do:\nIf the plugin doesn't use Vite specific hooks and can be implemented as a [Compatible Rollup Plugin](https://vite.dev/guide/api-plugin#rollup-plugin-compatibility), then it is recommended to use the [Rollup Plugin naming conventions](https://rollupjs.org/plugin-development/#conventions).\n\n- Rollup Plugins should have a clear name with `rollup-plugin-` prefix.\n- Include `rollup-plugin` and `vite-plugin` keywords in package.json.\n\nThis exposes the plugin to be also used in pure Rollup or WMR based projects\n\nFor Vite only plugins\n\n- Vite Plugins should have a clear name with `vite-plugin-` prefix.\n- Include `vite-plugin` keyword in package.json.\n- Include a section in the plugin docs detailing why it is a Vite only plugin (for example, it uses Vite specific plugin hooks).\n\nIf your plugin is only going to work for a particular framework, its name should be included as part of the prefix\n\n- `vite-plugin-vue-` prefix for Vue Plugins\n- `vite-plugin-react-` prefix for React Plugins\n- `vite-plugin-svelte-` prefix for Svelte Plugins\n\nSee also [Virtual Modules Convention](https://vite.dev/guide/api-plugin#virtual-modules-convention)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I plugins config in vite-guide?\n\nAssistant: To plugins config in vite-guide, here's what you do:\nUsers will add plugins to the project `devDependencies` and configure them using the `plugins` array option.\n\nvite.config.js\n\njs\n\n```\nimport vitePlugin from 'vite-plugin-feature'\nimport rollupPlugin from 'rollup-plugin-feature'\n\nexport default defineConfig({\n  plugins: [vitePlugin(), rollupPlugin()],\n})\n```\n\nFalsy plugins will be ignored, which can be used to easily activate or deactivate plugins.\n\n`plugins` also accepts presets including several plugins as a single element. This is useful for complex features (like framework integration) that are implemented using several plugins. The array will be flattened internally.\n\njs\n\n```javascript\n// framework-plugin\nimport frameworkRefresh from 'vite-plugin-framework-refresh'\nimport frameworkDevtools from 'vite-plugin-framework-devtools'\n\nexport default function framework(config) {\n  return [frameworkRefresh(config), frameworkDevTools(config)]\n}\n```\n\nvite.config.js\n\njs\n\n```\nimport { defineConfig } from 'vite'\nimport framework from 'vite-plugin-framework'\n\nexport default defineConfig({\n  plugins: [framework()],\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I simple examples in vite-guide?\n\nAssistant: To simple examples in vite-guide, here's what you do:\nTIP\n\nIt is common convention to author a Vite/Rollup plugin as a factory function that returns the actual plugin object. The function can accept options which allows users to customize the behavior of the plugin.\n\n### Transforming Custom File Types\n\njs\n\n```\nconst fileRegex = /\\.(my-file-ext)$/\n\nexport default function myPlugin() {\n  return {\n    name: 'transform-file',\n\n    transform(src, id) {\n      if (fileRegex.test(id)) {\n        return {\n          code: compileFileToJS(src),\n          map: null, // provide source map if available\n        }\n      }\n    },\n  }\n}\n```\n\n### Importing a Virtual File\n\nSee the example in the [next section](https://vite.dev/guide/api-plugin#virtual-modules-convention)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I virtual modules convention in vite-guide?\n\nAssistant: To virtual modules convention in vite-guide, here's what you do:\nVirtual modules are a useful scheme that allows you to pass build time information to the source files using normal ESM import syntax.\n\njs\n\n```\nexport default function myPlugin() {\n  const virtualModuleId = 'virtual:my-module'\n  const resolvedVirtualModuleId = '\\0' + virtualModuleId\n\n  return {\n    name: 'my-plugin', // required, will show up in warnings and errors\n    resolveId(id) {\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId\n      }\n    },\n    load(id) {\n      if (id === resolvedVirtualModuleId) {\n        return `export const msg = \"from virtual module\"`\n      }\n    },\n  }\n}\n```\n\nWhich allows importing the module in JavaScript:\n\njs\n\n```\nimport { msg } from 'virtual:my-module'\n\nconsole.log(msg)\n```\n\nVirtual modules in Vite (and Rollup) are prefixed with `virtual:` for the user-facing path by convention. If possible the plugin name should be used as a namespace to avoid collisions with other plugins in the ecosystem. For example, a `vite-plugin-posts` could ask users to import a `virtual:posts` or `virtual:posts/helpers` virtual modules to get build time information. Internally, plugins that use virtual modules should prefix the module ID with `\\0` while resolving the id, a convention from the rollup ecosystem. This prevents other plugins from trying to process the id (like node resolution), and core features like sourcemaps can use this info to differentiate between virtual modules and regular files. `\\0` is not a permitted char in import URLs so we have to replace them during import analysis. A `\\0{id}` virtual id ends up encoded as `/@id/__x00__{id}` during dev in the browser. The id will be decoded back before entering the plugins pipeline, so this is not seen by plugins hooks code.\n\nNote that modules directly derived from a real file, as in the case of a script module in a Single File Component (like a .vue or .svelte SFC) don't need to follow this convention. SFCs generally generate a set of submodules when processed but the code in these can be mapped back to the filesystem. Using `\\0` for these submodules would prevent sourcemaps from working correctly..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I universal hooks in vite-guide?\n\nAssistant: To universal hooks in vite-guide, here's what you do:\nDuring dev, the Vite dev server creates a plugin container that invokes [Rollup Build Hooks](https://rollupjs.org/plugin-development/#build-hooks) the same way Rollup does it.\n\nThe following hooks are called once on server start:\n\n- [`options`](https://rollupjs.org/plugin-development/#options)\n- [`buildStart`](https://rollupjs.org/plugin-development/#buildstart)\n\nThe following hooks are called on each incoming module request:\n\n- [`resolveId`](https://rollupjs.org/plugin-development/#resolveid)\n- [`load`](https://rollupjs.org/plugin-development/#load)\n- [`transform`](https://rollupjs.org/plugin-development/#transform)\n\nThese hooks also have an extended `options` parameter with additional Vite-specific properties. You can read more in the [SSR documentation](https://vite.dev/guide/ssr#ssr-specific-plugin-logic).\n\nSome `resolveId` calls' `importer` value may be an absolute path for a generic `index.html` at root as it's not always possible to derive the actual importer due to Vite's unbundled dev server pattern. For imports handled within Vite's resolve pipeline, the importer can be tracked during the import analysis phase, providing the correct `importer` value.\n\nThe following hooks are called when the server is closed:\n\n- [`buildEnd`](https://rollupjs.org/plugin-development/#buildend)\n- [`closeBundle`](https://rollupjs.org/plugin-development/#closebundle)\n\nNote that the [`moduleParsed`](https://rollupjs.org/plugin-development/#moduleparsed) hook is **not** called during dev, because Vite avoids full AST parses for better performance.\n\n[Output Generation Hooks](https://rollupjs.org/plugin-development/#output-generation-hooks) (except `closeBundle`) are **not** called during dev. You can think of Vite's dev server as only calling `rollup.rollup()` without calling `bundle.generate()`. \n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "section_detail", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Plugin API in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Plugins config example**:\n\n```yaml\nimport vitePlugin from 'vite-plugin-feature'\nimport rollupPlugin from 'rollup-plugin-feature'\n\nexport default defineConfig({\n  plugins: [vitePlugin(), rollupPlugin()],\n})\n```\n\nThis snippet shows you how to plugins config example, which is an important aspect of plugin api.\n\n**Transforming Custom File Types**:\n\n```yaml\nconst fileRegex = /\\.(my-file-ext)$/\n\nexport default function myPlugin() {\n  return {\n    name: 'transform-file',\n\n    transform(src, id) {\n      if (fileRegex.test(id)) {\n        return {\n          code: compileFileToJS(src),\n          map: null, // provide source map if available\n        }\n      }\n    },\n  }\n}\n```\n\nThis snippet shows you how to transforming custom file types, which is an important aspect of plugin api.\n\n", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "code_examples", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Plugin API in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen learning, debugging, or authoring plugins, we suggest including vite-plugin-inspect in your project. It allows you to inspect the intermediate state of Vite plugins.\n\nIt is common convention to author a Vite/Rollup plugin as a factory function that returns the actual plugin object. The function can accept options which allows users to customize the behavior of the plugin.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/api-plugin", "title": "Plugin API", "description": "Vite plugins extends Rollup's well-designed plugin interface with a few extra Vite-specific options. As a result, you can write a Vite plugin once and have it work for both dev and build.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:18:36", "type": "best_practices", "page_metadata": {"ogDescription": "Next Generation Frontend Tooling", "og:type": "website", "ogSiteName": "vitejs", "twitter:site": "@vite_js", "ogUrl": "https://vite.dev", "ogTitle": "Plugin API", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "language": "en-US", "theme-color": "#646cff", "favicon": "https://vite.dev/logo.svg", "og:title": "Plugin API", "og:site_name": "vitejs", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vite.dev/og-image.jpg", "title": "Plugin API | Vite", "description": "Next Generation Frontend Tooling", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "0ed543a7-b3e3-4341-9a8e-b510d6fc4039", "sourceURL": "https://vite.dev/guide/api-plugin", "url": "https://vite.dev/guide/api-plugin", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you explain what Vite Features is in vite-guide?\n\nAssistant: Sure, I'd be happy to explain Vite Features in vite-guide.\n\n# Vite Features\n\nAn overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.Here's a quick rundown of what this is about:\n\n## npm Dependency Resolving and Pre-Bundling\n\nNative ES imports do not support bare module imports like the following:\n\n```js\nimport { someMethod } from 'my-dep'\n```\n\nThe above will throw an error in the browser. Vite will detect such bare module imports in all served source files and perform the following:\n\n1. Pre-bundle them to improve page loading speed and convert CommonJS / UMD modules to ESM. The pre-bundling step is performed with esbuild and makes Vite's cold start time significantly faster than any JavaScript-based bundler.\n\n2. Rewrite the imports to valid URLs like `/node_modules/.vite/deps/my-dep.js?v=f3sf2ebd` so that the browser can import them properly.\n\n**Dependencies are Strongly Cached**\n\nVite caches dependency requests via HTTP headers, so if you wish to locally edit/debug a dependency, follow the steps here.\n\n## Hot Module Replacement\n\nVite provides an HMR API over native ESM. Frameworks with HMR capabilities can leverage the API to provide instant, precise updates without reloading the page or blowing away application state. Vite provides first-party HMR integrations for Vue Single File Components and React Fast Refresh. There are also official integrations for Preact via @prefresh/vite.\n\nNote you don't need to manually set these up - when you create an app via `create-vite`, the selected templates would have these pre-configured for you already.\n\n## TypeScript\n\nVite supports importing `.ts` files out of the box.\n\n### Transpile Only\n\nNote that Vite only performs transpilation on `.ts` files and does **NOT** perform type checking. It assumes type checking is taken care of by your IDE and build process.\n\nThe reason Vite does not perform type checking as part of the transform process is because the two jobs work fundamentally differently. Transpilation can work on a per-file basis and aligns perfectly with Vite's on-demand compile model. In comparison, type checking requires knowledge of the entire module graph. Shoe-horning type checking into Vite's transform pipeline will inevitably compromise Vite's speed benefits.\n\nVite's job is to get your source modules into a form that can run in the browser as fast as possible. To that end, we recommend separating static analysis checks from Vite's transform pipeline. This principle applies to other static analysis checks such as ESLint.\n\n- For production builds, you can run `tsc --noEmit` in addition to Vite's build command.\n- During development, if you need more than IDE hints, we recommend running `tsc --noEmit --watch` in a separate process, or use vite-plugin-checker if you prefer having type errors directly reported in the browser.\n\n## HTML\n\nHTML files stand front-and-center of a Vite project, serving as the entry points for your application, making it simple to build single-page and multi-page applications.\n\nAny HTML files in your project root can be directly accessed by its respective directory path:\n\n- `<root>/index.html` -> `http://localhost:5173/`\n- `<root>/about.html` -> `http://localhost:5173/about.html`\n- `<root>/blog/index.html` -> `http://localhost:5173/blog/index.html`\n\nAssets referenced by HTML elements such as `<script type=\"module\" src>` and `<link href>` are processed and bundled as part of the app.\n\n## Frameworks\n\nAll modern frameworks maintain integrations with Vite. Most framework plugins are maintained by each framework team, with the exception of the official Vue and React Vite plugins that are maintained in the vite org:\n\n- Vue support via @vitejs/plugin-vue\n- Vue JSX support via @vitejs/plugin-vue-jsx\n- React support via @vitejs/plugin-react\n- React using SWC support via @vitejs/plugin-react-swc\n\nCheck out the Plugins Guide for more information.\n\n## CSS\n\nImporting `.css` files will inject its content to the page via a `<style>` tag with HMR support.\n\n## Static Assets\n\nImporting a static asset will return the resolved public URL when it is served.\n\n## JSON\n\nJSON files can be directly imported - named imports are also supported.\n\n## Glob Import\n\nVite supports importing multiple modules from the file system via the special `import.meta.glob` function.\n\n## Dynamic Import\n\nSimilar to glob import, Vite also supports dynamic import with variables.\n\n## WebAssembly\n\nPre-compiled `.wasm` files can be imported with `?init`. The default export will be an initialization function that returns a Promise of the WebAssembly.Instance.\n\n## Web Workers\n\nA web worker script can be imported using `new Worker()` and `new SharedWorker()`.\n\n## Content Security Policy (CSP)\n\nTo deploy CSP, certain directives or configs must be set due to Vite's internals.\n\n## Build Optimizations\n\nFeatures listed below are automatically applied as part of the build process and there is no need for explicit configuration unless you want to disable them.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "overview", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I npm dependency resolving and pre-bundling in vite-guide?\n\nAssistant: To npm dependency resolving and pre-bundling in vite-guide, here's what you do:\nNative ES imports do not support bare module imports like the following:\n\n```js\nimport { someMethod } from 'my-dep'\n```\n\nThe above will throw an error in the browser. Vite will detect such bare module imports in all served source files and perform the following:\n\n1. Pre-bundle them to improve page loading speed and convert CommonJS / UMD modules to ESM. The pre-bundling step is performed with esbuild and makes Vite's cold start time significantly faster than any JavaScript-based bundler.\n\n2. Rewrite the imports to valid URLs like `/node_modules/.vite/deps/my-dep.js?v=f3sf2ebd` so that the browser can import them properly.\n\n**Dependencies are Strongly Cached**\n\nVite caches dependency requests via HTTP headers, so if you wish to locally edit/debug a dependency, follow the steps here..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I hot module replacement in vite-guide?\n\nAssistant: To hot module replacement in vite-guide, here's what you do:\nVite provides an HMR API over native ESM. Frameworks with HMR capabilities can leverage the API to provide instant, precise updates without reloading the page or blowing away application state. Vite provides first-party HMR integrations for Vue Single File Components and React Fast Refresh. There are also official integrations for Preact via @prefresh/vite.\n\nNote you don't need to manually set these up - when you create an app via `create-vite`, the selected templates would have these pre-configured for you already..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I typescript in vite-guide?\n\nAssistant: To typescript in vite-guide, here's what you do:\nVite supports importing `.ts` files out of the box.\n\n### Transpile Only\n\nNote that Vite only performs transpilation on `.ts` files and does **NOT** perform type checking. It assumes type checking is taken care of by your IDE and build process.\n\nThe reason Vite does not perform type checking as part of the transform process is because the two jobs work fundamentally differently. Transpilation can work on a per-file basis and aligns perfectly with Vite's on-demand compile model. In comparison, type checking requires knowledge of the entire module graph. Shoe-horning type checking into Vite's transform pipeline will inevitably compromise Vite's speed benefits.\n\nVite's job is to get your source modules into a form that can run in the browser as fast as possible. To that end, we recommend separating static analysis checks from Vite's transform pipeline. This principle applies to other static analysis checks such as ESLint.\n\n- For production builds, you can run `tsc --noEmit` in addition to Vite's build command.\n- During development, if you need more than IDE hints, we recommend running `tsc --noEmit --watch` in a separate process, or use vite-plugin-checker if you prefer having type errors directly reported in the browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I html in vite-guide?\n\nAssistant: To html in vite-guide, here's what you do:\nHTML files stand front-and-center of a Vite project, serving as the entry points for your application, making it simple to build single-page and multi-page applications.\n\nAny HTML files in your project root can be directly accessed by its respective directory path:\n\n- `<root>/index.html` -> `http://localhost:5173/`\n- `<root>/about.html` -> `http://localhost:5173/about.html`\n- `<root>/blog/index.html` -> `http://localhost:5173/blog/index.html`\n\nAssets referenced by HTML elements such as `<script type=\"module\" src>` and `<link href>` are processed and bundled as part of the app..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I frameworks in vite-guide?\n\nAssistant: To frameworks in vite-guide, here's what you do:\nAll modern frameworks maintain integrations with Vite. Most framework plugins are maintained by each framework team, with the exception of the official Vue and React Vite plugins that are maintained in the vite org:\n\n- Vue support via @vitejs/plugin-vue\n- Vue JSX support via @vitejs/plugin-vue-jsx\n- React support via @vitejs/plugin-react\n- React using SWC support via @vitejs/plugin-react-swc\n\nCheck out the Plugins Guide for more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I css in vite-guide?\n\nAssistant: To css in vite-guide, here's what you do:\nImporting `.css` files will inject its content to the page via a `<style>` tag with HMR support..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I static assets in vite-guide?\n\nAssistant: To static assets in vite-guide, here's what you do:\nImporting a static asset will return the resolved public URL when it is served..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I json in vite-guide?\n\nAssistant: To json in vite-guide, here's what you do:\nJSON files can be directly imported - named imports are also supported..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I glob import in vite-guide?\n\nAssistant: To glob import in vite-guide, here's what you do:\nVite supports importing multiple modules from the file system via the special `import.meta.glob` function..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I dynamic import in vite-guide?\n\nAssistant: To dynamic import in vite-guide, here's what you do:\nSimilar to glob import, Vite also supports dynamic import with variables..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I webassembly in vite-guide?\n\nAssistant: To webassembly in vite-guide, here's what you do:\nPre-compiled `.wasm` files can be imported with `?init`. The default export will be an initialization function that returns a Promise of the WebAssembly.Instance..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I web workers in vite-guide?\n\nAssistant: To web workers in vite-guide, here's what you do:\nA web worker script can be imported using `new Worker()` and `new SharedWorker()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I content security policy (csp) in vite-guide?\n\nAssistant: To content security policy (csp) in vite-guide, here's what you do:\nTo deploy CSP, certain directives or configs must be set due to Vite's internals..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: How do I build optimizations in vite-guide?\n\nAssistant: To build optimizations in vite-guide, here's what you do:\nFeatures listed below are automatically applied as part of the build process and there is no need for explicit configuration unless you want to disable them..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: Can you give me some code examples for Vite Features in vite-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing a Static Asset**:\n\n```yaml\nimport imgUrl from './img.png'\ndocument.getElementById('hero-img').src = imgUrl\n```\n\nThis snippet shows you how to importing a static asset, which is an important aspect of vite features.\n\n**Dynamic Import Example**:\n\n```yaml\nconst module = await import(`./dir/${file}.js`)\n```\n\nThis snippet shows you how to dynamic import example, which is an important aspect of vite features.\n\n", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "code_examples", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
{"text": "System: You are a helpful vite-guide expert.\n\nUser: What are some tips for using Vite Features in vite-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor production builds, you can run `tsc --noEmit` in addition to Vite's build command.\n\nDuring development, if you need more than IDE hints, we recommend running `tsc --noEmit --watch` in a separate process, or use vite-plugin-checker if you prefer having type errors directly reported in the browser.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/guide/features", "title": "Vite Features", "description": "An overview of the features provided by Vite, including dependency resolving, hot module replacement, TypeScript support, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:22:12", "type": "best_practices", "page_metadata": {"language": "en-US", "og:url": "https://vite.dev", "twitter:card": "summary_large_image", "ogDescription": "Next Generation Frontend Tooling", "ogTitle": "Features", "description": "Next Generation Frontend Tooling", "og:title": "Features", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Features | Vite", "og:image": "https://vite.dev/og-image.jpg", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "theme-color": "#646cff", "scrapeId": "7a42123d-5913-4e4e-ae1d-c2feaefab7ac", "sourceURL": "https://vite.dev/guide/features", "url": "https://vite.dev/guide/features", "statusCode": 200}}}
