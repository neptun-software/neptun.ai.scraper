{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Vue.js API Reference is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Vue.js API Reference in vue-api.\n\n# Vue.js API Reference\n\nComprehensive documentation of the Vue.js API, covering Global API, Composition API, Options API, Built-ins, Single-File Component, Advanced APIs, and more.Here's a quick rundown of what this is about:\n\n## Global API\n\n### Application\n- [createApp()](https://vuejs.org/api/application#createapp)\n- [createSSRApp()](https://vuejs.org/api/application#createssrapp)\n- [app.mount()](https://vuejs.org/api/application#app-mount)\n- [app.unmount()](https://vuejs.org/api/application#app-unmount)\n- [app.onUnmount()](https://vuejs.org/api/application#app-onunmount)\n- [app.component()](https://vuejs.org/api/application#app-component)\n- [app.directive()](https://vuejs.org/api/application#app-directive)\n- [app.use()](https://vuejs.org/api/application#app-use)\n- [app.mixin()](https://vuejs.org/api/application#app-mixin)\n- [app.provide()](https://vuejs.org/api/application#app-provide)\n- [app.runWithContext()](https://vuejs.org/api/application#app-runwithcontext)\n- [app.version](https://vuejs.org/api/application#app-version)\n- [app.config](https://vuejs.org/api/application#app-config)\n- [app.config.errorHandler](https://vuejs.org/api/application#app-config-errorhandler)\n- [app.config.warnHandler](https://vuejs.org/api/application#app-config-warnhandler)\n- [app.config.performance](https://vuejs.org/api/application#app-config-performance)\n- [app.config.compilerOptions](https://vuejs.org/api/application#app-config-compileroptions)\n- [app.config.globalProperties](https://vuejs.org/api/application#app-config-globalproperties)\n- [app.config.optionMergeStrategies](https://vuejs.org/api/application#app-config-optionmergestrategies)\n- [app.config.idPrefix](https://vuejs.org/api/application#app-config-idprefix)\n- [app.config.throwUnhandledErrorInProduction](https://vuejs.org/api/application#app-config-throwunhandlederrorinproduction)\n\n### General\n- [version](https://vuejs.org/api/general#version)\n- [nextTick()](https://vuejs.org/api/general#nexttick)\n- [defineComponent()](https://vuejs.org/api/general#definecomponent)\n- [defineAsyncComponent()](https://vuejs.org/api/general#defineasynccomponent)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api", "title": "Vue.js API Reference", "description": "Comprehensive documentation of the Vue.js API, covering Global API, Composition API, Options API, Built-ins, Single-File Component, Advanced APIs, and more.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 00:58:07", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "API Reference | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "29f460f5-69bf-4351-981a-97bbfecb0ea0", "sourceURL": "https://vuejs.org/api", "url": "https://vuejs.org/api/", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I global api in vue-api?\n\nAssistant: To global api in vue-api, here's what you do:\n### Application\n- [createApp()](https://vuejs.org/api/application#createapp)\n- [createSSRApp()](https://vuejs.org/api/application#createssrapp)\n- [app.mount()](https://vuejs.org/api/application#app-mount)\n- [app.unmount()](https://vuejs.org/api/application#app-unmount)\n- [app.onUnmount()](https://vuejs.org/api/application#app-onunmount)\n- [app.component()](https://vuejs.org/api/application#app-component)\n- [app.directive()](https://vuejs.org/api/application#app-directive)\n- [app.use()](https://vuejs.org/api/application#app-use)\n- [app.mixin()](https://vuejs.org/api/application#app-mixin)\n- [app.provide()](https://vuejs.org/api/application#app-provide)\n- [app.runWithContext()](https://vuejs.org/api/application#app-runwithcontext)\n- [app.version](https://vuejs.org/api/application#app-version)\n- [app.config](https://vuejs.org/api/application#app-config)\n- [app.config.errorHandler](https://vuejs.org/api/application#app-config-errorhandler)\n- [app.config.warnHandler](https://vuejs.org/api/application#app-config-warnhandler)\n- [app.config.performance](https://vuejs.org/api/application#app-config-performance)\n- [app.config.compilerOptions](https://vuejs.org/api/application#app-config-compileroptions)\n- [app.config.globalProperties](https://vuejs.org/api/application#app-config-globalproperties)\n- [app.config.optionMergeStrategies](https://vuejs.org/api/application#app-config-optionmergestrategies)\n- [app.config.idPrefix](https://vuejs.org/api/application#app-config-idprefix)\n- [app.config.throwUnhandledErrorInProduction](https://vuejs.org/api/application#app-config-throwunhandlederrorinproduction)\n\n### General\n- [version](https://vuejs.org/api/general#version)\n- [nextTick()](https://vuejs.org/api/general#nexttick)\n- [defineComponent()](https://vuejs.org/api/general#definecomponent)\n- [defineAsyncComponent()](https://vuejs.org/api/general#defineasynccomponent).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api", "title": "Vue.js API Reference", "description": "Comprehensive documentation of the Vue.js API, covering Global API, Composition API, Options API, Built-ins, Single-File Component, Advanced APIs, and more.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 00:58:07", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "API Reference | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "29f460f5-69bf-4351-981a-97bbfecb0ea0", "sourceURL": "https://vuejs.org/api", "url": "https://vuejs.org/api/", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Application API is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Application API in vue-api.\n\n# Application API\n\nThis page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.Here's a quick rundown of what this is about:\n\n## createApp()\n\nCreates an application instance.\n\n- **Type**\n\nts\n\n```typescript\nfunction createApp(rootComponent: Component, rootProps?: object): App\n```\n\n- **Details**\n\nThe first argument is the root component. The second optional argument is the props to be passed to the root component.\n\n- **Example**\n\nWith inline root component:\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* root component options */\n})\n```\n\nWith imported component:\n\njs\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n- **See also** [Guide - Creating a Vue Application](https://vuejs.org/guide/essentials/application)\n\n## createSSRApp()\n\nCreates an application instance in [SSR Hydration](https://vuejs.org/guide/scaling-up/ssr#client-hydration) mode. Usage is exactly the same as `createApp()`.\n\n## app.mount()\n\nMounts the application instance in a container element.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    mount(rootContainer: Element | string): ComponentPublicInstance\n}\n```\n\n- **Details**\n\nThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.\n\nIf the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the `innerHTML` of the container will be used as the template.\n\nIn SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are [mismatches](https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch), the existing DOM nodes will be morphed to match the expected output.\n\nFor each app instance, `mount()` can only be called once.\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')\n```\n\nCan also mount to an actual DOM element:\n\njs\n\n```javascript\napp.mount(document.body.firstChild)\n```\n\n## app.unmount()\n\nUnmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    unmount(): void\n}\n```\n\n## app.onUnmount()\n\nRegisters a callback to be called when the app is unmounted.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    onUnmount(callback: () => any): void\n}\n```\n\n## app.component()\n\nRegisters a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    component(name: string): Component | undefined\n    component(name: string, component: Component): this\n}\n```\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n    /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')\n```\n\n- **See also** [Component Registration](https://vuejs.org/guide/components/registration)\n\n## app.directive()\n\nRegisters a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    directive(name: string): Directive | undefined\n    directive(name: string, directive: Directive): this\n}\n```\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n    /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n    /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')\n```\n\n- **See also** [Custom Directives](https://vuejs.org/guide/reusability/custom-directives)\n\n## app.use()\n\nInstalls a [plugin](https://vuejs.org/guide/reusability/plugins).\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    use(plugin: Plugin, ...options: any[]): this\n}\n```\n\n- **Details**\n\nExpects the plugin as the first argument, and optional plugin options as the second argument.\n\nThe plugin can either be an object with an `install()` method, or just a function that will be used as the `install()` method. The options (second argument of `app.use()`) will be passed along to the plugin's `install()` method.\n\nWhen `app.use()` is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n    /* ... */\n})\n\napp.use(MyPlugin)\n```\n\n- **See also** [Plugins](https://vuejs.org/guide/reusability/plugins)\n\n## app.mixin()\n\nApplies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.\n\nNot Recommended\n\nMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.\n\nFor logic reuse, prefer [Composables](https://vuejs.org/guide/reusability/composables) instead.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    mixin(mixin: ComponentOptions): this\n}\n```\n\n## app.provide()\n\nProvide a value that can be injected in all descendant components within the application.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}\n```\n\n- **Details**\n\nExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')\n```\n\nInside a component in the application:\n\njs\n\n```javascript\nimport { inject } from 'vue'\n\nexport default {\n    setup() {\n      console.log(inject('message')) // 'hello'\n    }\n}\n```\n\njs\n\n```javascript\nexport default {\n    inject: ['message'],\n    created() {\n      console.log(this.message) // 'hello'\n    }\n}\n```\n\n- **See also**  \n  - [Provide / Inject](https://vuejs.org/guide/components/provide-inject)  \n  - [App-level Provide](https://vuejs.org/guide/components/provide-inject#app-level-provide)  \n  - [app.runWithContext()](https://vuejs.org/api/application.html#app-runwithcontext)\n\n## app.runWithContext()\n\n- Only supported in 3.3+\n\nExecute a callback with the current app as injection context.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    runWithContext<T>(fn: () => T): T\n}\n```\n\n- **Details**\n\nExpects a callback function and runs the callback immediately. During the synchronous call of the callback, `inject()` calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.\n\n- **Example**\n\njs\n\n```javascript\nimport { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n    return inject('id')\n})\n\nconsole.log(injected) // 1\n```\n\n## app.version\n\nProvides the version of Vue that the application was created with. This is useful inside [plugins](https://vuejs.org/guide/reusability/plugins), where you might need conditional logic based on different Vue versions.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    version: string\n}\n```\n\n- **Example**\n\nPerforming a version check inside a plugin:\n\njs\n\n```javascript\nexport default {\n    install(app) {\n      const version = Number(app.version.split('.')[0])\n      if (version < 3) {\n        console.warn('This plugin requires Vue 3')\n      }\n    }\n}\n```\n\n- **See also** [Global API - version](https://vuejs.org/api/general#version)\n\n## app.config\n\nEvery application instance exposes a `config` object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.\n\n## app.config.errorHandler\n\nAssign a global handler for uncaught errors propagating from within the application.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    errorHandler?: (\n      err: unknown,\n      instance: ComponentPublicInstance | null,\n      // `info` is a Vue-specific error info,\n      // e.g. which lifecycle hook the error was thrown in\n      info: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nIt can capture errors from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\n- **Example**\n\njs\n\n```javascript\napp.config.errorHandler = (err, instance, info) => {\n    // handle error, e.g. report to a service\n}\n```\n\n## app.config.warnHandler\n\nAssign a custom handler for runtime warnings from Vue.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    warnHandler?: (\n      msg: string,\n      instance: ComponentPublicInstance | null,\n      trace: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.\n\nIt can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.\n\nTIP\n\nWarnings only work during development, so this config is ignored in production mode.\n\n- **Example**\n\njs\n\n```javascript\napp.config.warnHandler = (msg, instance, trace) => {\n    // `trace` is the component hierarchy trace\n}\n```\n\n## app.config.performance\n\nSet this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n- **Type:** `boolean`\n\n- **See also** [Guide - Performance](https://vuejs.org/guide/best-practices/performance)\n\n## app.config.compilerOptions\n\nConfigure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the [`compilerOptions` option](https://vuejs.org/api/options-rendering#compileroptions).\n\nImportant\n\nThis config option is only respected when using the full build (i.e. the standalone `vue.js` that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to `@vue/compiler-dom` via build tool configurations instead.\n\n- For `vue-loader`: [pass via the `compilerOptions` loader option](https://vue-loader.vuejs.org/options.html#compileroptions). Also see [how to configure it in `vue-cli`](https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader).\n\n- For `vite`: [pass via `@vitejs/plugin-vue` options](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options).\n\n## app.config.compilerOptions.isCustomElement\n\nSpecifies a check method to recognize native custom elements.\n\n- **Type:** `(tag: string) => boolean`\n\n- **Details**\n\nShould return `true` if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.\n\nNative HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.\n\n- **Example**\n\njs\n\n```javascript\n// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n    return tag.startsWith('ion-')\n}\n```\n\n- **See also** [Vue and Web Components](https://vuejs.org/guide/extras/web-components)\n\n## app.config.compilerOptions.whitespace\n\nAdjusts template whitespace handling behavior.\n\n- **Type:** `'condense' | 'preserve'`\n\n- **Default:** `'condense'`\n\n- **Details**\n\nVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:\n\n1. Leading / ending whitespace characters inside an element are condensed into a single space.\n2. Whitespace characters between elements that contain newlines are removed.\n3. Consecutive whitespace characters in text nodes are condensed into a single space.\n\nSetting this option to `'preserve'` will disable (2) and (3).\n\n- **Example**\n\njs\n\n```javascript\napp.config.compilerOptions.whitespace = 'preserve'\n```\n\n## app.config.compilerOptions.delimiters\n\nAdjusts the delimiters used for text interpolation within the template.\n\n- **Type:** `[string, string]`\n\n- **Default:** `['{{', '}}']`\n\n- **Details**\n\nThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.\n\n- **Example**\n\njs\n\n```javascript\n// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']\n```\n\n## app.config.compilerOptions.comments\n\nAdjusts treatment of HTML comments in templates.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, Vue will remove the comments in production. Setting this option to `true` will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.\n\n- **Example**\n\njs\n\n```javascript\napp.config.compilerOptions.comments = true\n```\n\n## app.config.globalProperties\n\nAn object that can be used to register global properties that can be accessed on any component instance inside the application.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    globalProperties: Record<string, any>\n}\n```\n\n- **Details**\n\nThis is a replacement of Vue 2's `Vue.prototype` which is no longer present in Vue 3. As with anything global, this should be used sparingly.\n\nIf a global property conflicts with a component’s own property, the component's own property will have higher priority.\n\n- **Usage**\n\njs\n\n```javascript\napp.config.globalProperties.msg = 'hello'\n```\n\nThis makes `msg` available inside any component template in the application, and also on `this` of any component instance:\n\njs\n\n```javascript\nexport default {\n    mounted() {\n      console.log(this.msg) // 'hello'\n    }\n}\n```\n\n- **See also** [Guide - Augmenting Global Properties](https://vuejs.org/guide/typescript/options-api#augmenting-global-properties)\n\n## app.config.optionMergeStrategies\n\nAn object for defining merging strategies for custom component options.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any\n```\n\n- **Details**\n\nSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).\n\nA merge strategy function can be registered for a custom option by assigning it on the `app.config.optionMergeStrategies` object using the option's name as the key.\n\nThe merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.\n\n- **Example**\n\njs\n\n```javascript\nconst app = createApp({\n    // option from self\n    msg: 'Vue',\n    // option from a mixin\n    mixins: [\n      {\n        msg: 'Hello '\n      }\n    ],\n    mounted() {\n      // merged options exposed on this.$options\n      console.log(this.$options.msg)\n    }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n    return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'\n```\n\n- **See also** [Component Instance - `$options`](https://vuejs.org/api/component-instance#options)\n\n## app.config.idPrefix\n\nConfigure a prefix for all IDs generated via [useId()](https://vuejs.org/api/composition-api-helpers#useid) inside this application.\n\n- **Type:** `string`\n\n- **Default:** `undefined`\n\n- **Example**\n\njs\n\n```javascript\napp.config.idPrefix = 'myApp'\n```\n\njs\n\n```javascript\n// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'\n```\n\n## app.config.throwUnhandledErrorInProduction\n\nForce unhandled errors to be thrown in production mode.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:\n\n  - In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.\n\n  - In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.\n\nBy setting `app.config.throwUnhandledErrorInProduction` to `true`, unhandled errors will be thrown even in production mode.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "overview", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I createapp() in vue-api?\n\nAssistant: To createapp() in vue-api, here's what you do:\nCreates an application instance.\n\n- **Type**\n\nts\n\n```typescript\nfunction createApp(rootComponent: Component, rootProps?: object): App\n```\n\n- **Details**\n\nThe first argument is the root component. The second optional argument is the props to be passed to the root component.\n\n- **Example**\n\nWith inline root component:\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* root component options */\n})\n```\n\nWith imported component:\n\njs\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n- **See also** [Guide - Creating a Vue Application](https://vuejs.org/guide/essentials/application).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I createssrapp() in vue-api?\n\nAssistant: To createssrapp() in vue-api, here's what you do:\nCreates an application instance in [SSR Hydration](https://vuejs.org/guide/scaling-up/ssr#client-hydration) mode. Usage is exactly the same as `createApp()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.mount() in vue-api?\n\nAssistant: To app.mount() in vue-api, here's what you do:\nMounts the application instance in a container element.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    mount(rootContainer: Element | string): ComponentPublicInstance\n}\n```\n\n- **Details**\n\nThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.\n\nIf the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the `innerHTML` of the container will be used as the template.\n\nIn SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are [mismatches](https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch), the existing DOM nodes will be morphed to match the expected output.\n\nFor each app instance, `mount()` can only be called once.\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')\n```\n\nCan also mount to an actual DOM element:\n\njs\n\n```javascript\napp.mount(document.body.firstChild)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.unmount() in vue-api?\n\nAssistant: To app.unmount() in vue-api, here's what you do:\nUnmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    unmount(): void\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.onunmount() in vue-api?\n\nAssistant: To app.onunmount() in vue-api, here's what you do:\nRegisters a callback to be called when the app is unmounted.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    onUnmount(callback: () => any): void\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.component() in vue-api?\n\nAssistant: To app.component() in vue-api, here's what you do:\nRegisters a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    component(name: string): Component | undefined\n    component(name: string, component: Component): this\n}\n```\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n    /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')\n```\n\n- **See also** [Component Registration](https://vuejs.org/guide/components/registration).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.directive() in vue-api?\n\nAssistant: To app.directive() in vue-api, here's what you do:\nRegisters a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    directive(name: string): Directive | undefined\n    directive(name: string, directive: Directive): this\n}\n```\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n    /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n    /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')\n```\n\n- **See also** [Custom Directives](https://vuejs.org/guide/reusability/custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.use() in vue-api?\n\nAssistant: To app.use() in vue-api, here's what you do:\nInstalls a [plugin](https://vuejs.org/guide/reusability/plugins).\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    use(plugin: Plugin, ...options: any[]): this\n}\n```\n\n- **Details**\n\nExpects the plugin as the first argument, and optional plugin options as the second argument.\n\nThe plugin can either be an object with an `install()` method, or just a function that will be used as the `install()` method. The options (second argument of `app.use()`) will be passed along to the plugin's `install()` method.\n\nWhen `app.use()` is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n    /* ... */\n})\n\napp.use(MyPlugin)\n```\n\n- **See also** [Plugins](https://vuejs.org/guide/reusability/plugins).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.mixin() in vue-api?\n\nAssistant: To app.mixin() in vue-api, here's what you do:\nApplies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.\n\nNot Recommended\n\nMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.\n\nFor logic reuse, prefer [Composables](https://vuejs.org/guide/reusability/composables) instead.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    mixin(mixin: ComponentOptions): this\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.provide() in vue-api?\n\nAssistant: To app.provide() in vue-api, here's what you do:\nProvide a value that can be injected in all descendant components within the application.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}\n```\n\n- **Details**\n\nExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.\n\n- **Example**\n\njs\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')\n```\n\nInside a component in the application:\n\njs\n\n```javascript\nimport { inject } from 'vue'\n\nexport default {\n    setup() {\n      console.log(inject('message')) // 'hello'\n    }\n}\n```\n\njs\n\n```javascript\nexport default {\n    inject: ['message'],\n    created() {\n      console.log(this.message) // 'hello'\n    }\n}\n```\n\n- **See also**  \n  - [Provide / Inject](https://vuejs.org/guide/components/provide-inject)  \n  - [App-level Provide](https://vuejs.org/guide/components/provide-inject#app-level-provide)  \n  - [app.runWithContext()](https://vuejs.org/api/application.html#app-runwithcontext).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.runwithcontext() in vue-api?\n\nAssistant: To app.runwithcontext() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nExecute a callback with the current app as injection context.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    runWithContext<T>(fn: () => T): T\n}\n```\n\n- **Details**\n\nExpects a callback function and runs the callback immediately. During the synchronous call of the callback, `inject()` calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.\n\n- **Example**\n\njs\n\n```javascript\nimport { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n    return inject('id')\n})\n\nconsole.log(injected) // 1\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.version in vue-api?\n\nAssistant: To app.version in vue-api, here's what you do:\nProvides the version of Vue that the application was created with. This is useful inside [plugins](https://vuejs.org/guide/reusability/plugins), where you might need conditional logic based on different Vue versions.\n\n- **Type**\n\nts\n\n```typescript\ninterface App {\n    version: string\n}\n```\n\n- **Example**\n\nPerforming a version check inside a plugin:\n\njs\n\n```javascript\nexport default {\n    install(app) {\n      const version = Number(app.version.split('.')[0])\n      if (version < 3) {\n        console.warn('This plugin requires Vue 3')\n      }\n    }\n}\n```\n\n- **See also** [Global API - version](https://vuejs.org/api/general#version).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config in vue-api?\n\nAssistant: To app.config in vue-api, here's what you do:\nEvery application instance exposes a `config` object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.errorhandler in vue-api?\n\nAssistant: To app.config.errorhandler in vue-api, here's what you do:\nAssign a global handler for uncaught errors propagating from within the application.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    errorHandler?: (\n      err: unknown,\n      instance: ComponentPublicInstance | null,\n      // `info` is a Vue-specific error info,\n      // e.g. which lifecycle hook the error was thrown in\n      info: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nIt can capture errors from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\n- **Example**\n\njs\n\n```javascript\napp.config.errorHandler = (err, instance, info) => {\n    // handle error, e.g. report to a service\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.warnhandler in vue-api?\n\nAssistant: To app.config.warnhandler in vue-api, here's what you do:\nAssign a custom handler for runtime warnings from Vue.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    warnHandler?: (\n      msg: string,\n      instance: ComponentPublicInstance | null,\n      trace: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.\n\nIt can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.\n\nTIP\n\nWarnings only work during development, so this config is ignored in production mode.\n\n- **Example**\n\njs\n\n```javascript\napp.config.warnHandler = (msg, instance, trace) => {\n    // `trace` is the component hierarchy trace\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.performance in vue-api?\n\nAssistant: To app.config.performance in vue-api, here's what you do:\nSet this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n- **Type:** `boolean`\n\n- **See also** [Guide - Performance](https://vuejs.org/guide/best-practices/performance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions in vue-api?\n\nAssistant: To app.config.compileroptions in vue-api, here's what you do:\nConfigure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the [`compilerOptions` option](https://vuejs.org/api/options-rendering#compileroptions).\n\nImportant\n\nThis config option is only respected when using the full build (i.e. the standalone `vue.js` that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to `@vue/compiler-dom` via build tool configurations instead.\n\n- For `vue-loader`: [pass via the `compilerOptions` loader option](https://vue-loader.vuejs.org/options.html#compileroptions). Also see [how to configure it in `vue-cli`](https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader).\n\n- For `vite`: [pass via `@vitejs/plugin-vue` options](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.iscustomelement in vue-api?\n\nAssistant: To app.config.compileroptions.iscustomelement in vue-api, here's what you do:\nSpecifies a check method to recognize native custom elements.\n\n- **Type:** `(tag: string) => boolean`\n\n- **Details**\n\nShould return `true` if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.\n\nNative HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.\n\n- **Example**\n\njs\n\n```javascript\n// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n    return tag.startsWith('ion-')\n}\n```\n\n- **See also** [Vue and Web Components](https://vuejs.org/guide/extras/web-components).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.whitespace in vue-api?\n\nAssistant: To app.config.compileroptions.whitespace in vue-api, here's what you do:\nAdjusts template whitespace handling behavior.\n\n- **Type:** `'condense' | 'preserve'`\n\n- **Default:** `'condense'`\n\n- **Details**\n\nVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:\n\n1. Leading / ending whitespace characters inside an element are condensed into a single space.\n2. Whitespace characters between elements that contain newlines are removed.\n3. Consecutive whitespace characters in text nodes are condensed into a single space.\n\nSetting this option to `'preserve'` will disable (2) and (3).\n\n- **Example**\n\njs\n\n```javascript\napp.config.compilerOptions.whitespace = 'preserve'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.delimiters in vue-api?\n\nAssistant: To app.config.compileroptions.delimiters in vue-api, here's what you do:\nAdjusts the delimiters used for text interpolation within the template.\n\n- **Type:** `[string, string]`\n\n- **Default:** `['{{', '}}']`\n\n- **Details**\n\nThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.\n\n- **Example**\n\njs\n\n```javascript\n// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.comments in vue-api?\n\nAssistant: To app.config.compileroptions.comments in vue-api, here's what you do:\nAdjusts treatment of HTML comments in templates.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, Vue will remove the comments in production. Setting this option to `true` will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.\n\n- **Example**\n\njs\n\n```javascript\napp.config.compilerOptions.comments = true\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.globalproperties in vue-api?\n\nAssistant: To app.config.globalproperties in vue-api, here's what you do:\nAn object that can be used to register global properties that can be accessed on any component instance inside the application.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    globalProperties: Record<string, any>\n}\n```\n\n- **Details**\n\nThis is a replacement of Vue 2's `Vue.prototype` which is no longer present in Vue 3. As with anything global, this should be used sparingly.\n\nIf a global property conflicts with a component’s own property, the component's own property will have higher priority.\n\n- **Usage**\n\njs\n\n```javascript\napp.config.globalProperties.msg = 'hello'\n```\n\nThis makes `msg` available inside any component template in the application, and also on `this` of any component instance:\n\njs\n\n```javascript\nexport default {\n    mounted() {\n      console.log(this.msg) // 'hello'\n    }\n}\n```\n\n- **See also** [Guide - Augmenting Global Properties](https://vuejs.org/guide/typescript/options-api#augmenting-global-properties).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.optionmergestrategies in vue-api?\n\nAssistant: To app.config.optionmergestrategies in vue-api, here's what you do:\nAn object for defining merging strategies for custom component options.\n\n- **Type**\n\nts\n\n```typescript\ninterface AppConfig {\n    optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any\n```\n\n- **Details**\n\nSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).\n\nA merge strategy function can be registered for a custom option by assigning it on the `app.config.optionMergeStrategies` object using the option's name as the key.\n\nThe merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.\n\n- **Example**\n\njs\n\n```javascript\nconst app = createApp({\n    // option from self\n    msg: 'Vue',\n    // option from a mixin\n    mixins: [\n      {\n        msg: 'Hello '\n      }\n    ],\n    mounted() {\n      // merged options exposed on this.$options\n      console.log(this.$options.msg)\n    }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n    return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'\n```\n\n- **See also** [Component Instance - `$options`](https://vuejs.org/api/component-instance#options).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.idprefix in vue-api?\n\nAssistant: To app.config.idprefix in vue-api, here's what you do:\nConfigure a prefix for all IDs generated via [useId()](https://vuejs.org/api/composition-api-helpers#useid) inside this application.\n\n- **Type:** `string`\n\n- **Default:** `undefined`\n\n- **Example**\n\njs\n\n```javascript\napp.config.idPrefix = 'myApp'\n```\n\njs\n\n```javascript\n// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.throwunhandlederrorinproduction in vue-api?\n\nAssistant: To app.config.throwunhandlederrorinproduction in vue-api, here's what you do:\nForce unhandled errors to be thrown in production mode.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:\n\n  - In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.\n\n  - In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.\n\nBy setting `app.config.throwUnhandledErrorInProduction` to `true`, unhandled errors will be thrown even in production mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Application API in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**createApp() Example with inline root component**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* root component options */\n})\n```\n\nThis snippet shows you how to createapp() example with inline root component, which is an important aspect of application api.\n\n**createApp() Example with imported component**:\n\n```yaml\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nThis snippet shows you how to createapp() example with imported component, which is an important aspect of application api.\n\n", "metadata": {"source_url": "https://vuejs.org/api/application.html", "title": "Application API", "description": "This page covers the Application API for Vue, detailing methods and properties for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 00:58:59", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "title": "Application API | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "scrapeId": "057963d8-8497-4b27-9ff0-eadc7798d88d", "sourceURL": "https://vuejs.org/api/application.html", "url": "https://vuejs.org/api/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Built-in Components is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Built-in Components in vue-api.\n\n# Built-in Components\n\nThis page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.Here's a quick rundown of what this is about:\n\n## Registration and Usage\n\nBuilt-in components can be used directly in templates without needing to be registered. They are also tree-shakeable: they are only included in the build when they are used.\n\nWhen using them in render functions, they need to be imported explicitly. For example:\n\n```js\nimport { h, Transition } from 'vue'\n\nh(Transition, {\n  /* props */\n})\n```\n\n## <Transition>\n\nProvides animated transition effects to a **single** element or component.\n\n- **Props**\n\n```ts\ninterface TransitionProps {\n    /**\n     * Used to automatically generate transition CSS class names.\n     * e.g. `name: 'fade'` will auto expand to `.fade-enter`,\n     * `.fade-enter-active`, etc.\n     */\n    name?: string\n    /**\n     * Whether to apply CSS transition classes.\n     * Default: true\n     */\n    css?: boolean\n    /**\n     * Specifies the type of transition events to wait for to\n     * determine transition end timing.\n     * Default behavior is auto detecting the type that has\n     * longer duration.\n     */\n    type?: 'transition' | 'animation'\n    /**\n     * Specifies explicit durations of the transition.\n     * Default behavior is wait for the first `transitionend`\n     * or `animationend` event on the root transition element.\n     */\n    duration?: number | { enter: number; leave: number }\n    /**\n     * Controls the timing sequence of leaving/entering transitions.\n     * Default behavior is simultaneous.\n     */\n    mode?: 'in-out' | 'out-in' | 'default'\n    /**\n     * Whether to apply transition on initial render.\n     * Default: false\n     */\n    appear?: boolean\n\n    /**\n     * Props for customizing transition classes.\n     * Use kebab-case in templates, e.g. enter-from-class=\"xxx\"\n     */\n    enterFromClass?: string\n    enterActiveClass?: string\n    enterToClass?: string\n    appearFromClass?: string\n    appearActiveClass?: string\n    appearToClass?: string\n    leaveFromClass?: string\n    leaveActiveClass?: string\n    leaveToClass?: string\n}\n```\n\n- **Events**\n\n  - `@before-enter`\n  - `@before-leave`\n  - `@enter`\n  - `@leave`\n  - `@appear`\n  - `@after-enter`\n  - `@after-leave`\n  - `@after-appear`\n  - `@enter-cancelled`\n  - `@leave-cancelled` ( `v-show` only)\n  - `@appear-cancelled`\n- **Example**\n\nSimple element:\n\n```template\n<Transition>\n    <div v-if=\"ok\">toggled content</div>\n</Transition>\n```\n\nForcing a transition by changing the `key` attribute:\n\n```template\n<Transition>\n    <div :key=\"text\">{{ text }}</div>\n</Transition>\n```\n\nDynamic component, with transition mode + animate on appear:\n\n```template\n<Transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n</Transition>\n```\n\nListening to transition events:\n\n```template\n<Transition @after-enter=\"onTransitionComplete\">\n    <div v-show=\"ok\">toggled content</div>\n</Transition>\n```\n\n- **See also** [Guide - Transition](https://vuejs.org/guide/built-ins/transition)\n\n## <TransitionGroup>\n\nProvides transition effects for **multiple** elements or components in a list.\n\n- **Props**\n\n`<TransitionGroup>` accepts the same props as `<Transition>` except `mode`, plus two additional props:\n\n```ts\ninterface TransitionGroupProps extends Omit<TransitionProps, 'mode'> {\n    /**\n     * If not defined, renders as a fragment.\n     */\n    tag?: string\n    /**\n     * For customizing the CSS class applied during move transitions.\n     * Use kebab-case in templates, e.g. move-class=\"xxx\"\n     */\n    moveClass?: string\n}\n```\n\n- **Events**\n\n`<TransitionGroup>` emits the same events as `<Transition>`.\n\n- **Details**\n\nBy default, `<TransitionGroup>` doesn't render a wrapper DOM element, but one can be defined via the `tag` prop.\n\nNote that every child in a `<transition-group>` must be [**uniquely keyed**](https://vuejs.org/guide/essentials/list#maintaining-state-with-key) for the animations to work properly.\n\n`<TransitionGroup>` supports moving transitions via CSS transform. When a child's position on screen has changed after an update, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` prop). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n- **Example**\n\n```template\n<TransitionGroup tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n</TransitionGroup>\n```\n\n- **See also** [Guide - TransitionGroup](https://vuejs.org/guide/built-ins/transition-group)\n\n## <KeepAlive>\n\nCaches dynamically toggled components wrapped inside.\n\n- **Props**\n\n```ts\ninterface KeepAliveProps {\n    /**\n     * If specified, only components with names matched by\n     * `include` will be cached.\n     */\n    include?: MatchPattern\n    /**\n     * Any component with a name matched by `exclude` will\n     * not be cached.\n     */\n    exclude?: MatchPattern\n    /**\n     * The maximum number of component instances to cache.\n     */\n    max?: number | string\n}\n\ntype MatchPattern = string | RegExp | (string | RegExp)[]\n```\n\n- **Details**\n\nWhen wrapped around a dynamic component, `<KeepAlive>` caches the inactive component instances without destroying them.\n\nThere can only be one active component instance as the direct child of `<KeepAlive>` at any time.\n\nWhen a component is toggled inside `<KeepAlive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly, providing an alternative to `mounted` and `unmounted`, which are not called. This applies to the direct child of `<KeepAlive>` as well as to all of its descendants.\n\n- **Example**\n\nBasic usage:\n\n```template\n<KeepAlive>\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nWhen used with `v-if` / `v-else` branches, there must be only one component rendered at a time:\n\n```template\n<KeepAlive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n</KeepAlive>\n```\n\nUsed together with `<Transition>`:\n\n```template\n<Transition>\n    <KeepAlive>\n      <component :is=\"view\"></component>\n    </KeepAlive>\n</Transition>\n```\n\nUsing `include` / `exclude`:\n\n```template\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nUsage with `max`:\n\n```template\n<KeepAlive :max=\"10\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n- **See also** [Guide - KeepAlive](https://vuejs.org/guide/built-ins/keep-alive)\n\n## <Teleport>\n\nRenders its slot content to another part of the DOM.\n\n- **Props**\n\n```ts\ninterface TeleportProps {\n    /**\n     * Required. Specify target container.\n     * Can either be a selector or an actual element.\n     */\n    to: string | HTMLElement\n    /**\n     * When `true`, the content will remain in its original\n     * location instead of moved into the target container.\n     * Can be changed dynamically.\n     */\n    disabled?: boolean\n    /**\n     * When `true`, the Teleport will defer until other\n     * parts of the application have been mounted before\n     * resolving its target. (3.5+)\n     */\n    defer?: boolean\n}\n```\n\n- **Example**\n\nSpecifying target container:\n\n```template\n<Teleport to=\"#some-id\" />\n<Teleport to=\".some-class\" />\n<Teleport to=\"[data-teleport]\" />\n```\n\nConditionally disabling:\n\n```template\n<Teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n    <video src=\"./my-movie.mp4\">\n</Teleport>\n```\n\nDefer target resolution :\n\n```template\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\n- **See also** [Guide - Teleport](https://vuejs.org/guide/built-ins/teleport)\n\n## <Suspense>\n\nUsed for orchestrating nested async dependencies in a component tree.\n\n- **Props**\n\n```ts\ninterface SuspenseProps {\n    timeout?: string | number\n    suspensible?: boolean\n}\n```\n\n- **Events**\n\n  - `@resolve`\n  - `@pending`\n  - `@fallback`\n- **Details**\n\n`<Suspense>` accepts two slots: the `#default` slot and the `#fallback` slot. It will display the content of the fallback slot while rendering the default slot in memory.\n\nIf it encounters async dependencies ( Async Components and components with [`async setup()`](https://vuejs.org/guide/built-ins/suspense#async-setup)) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.\n\nBy setting the Suspense as `suspensible`, all the async dependency handling will be handled by the parent Suspense. See [implementation details](https://github.com/vuejs/core/pull/6736)\n\n- **See also** [Guide - Suspense](https://vuejs.org/guide/built-ins/suspense)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I registration and usage in vue-api?\n\nAssistant: To registration and usage in vue-api, here's what you do:\nBuilt-in components can be used directly in templates without needing to be registered. They are also tree-shakeable: they are only included in the build when they are used.\n\nWhen using them in render functions, they need to be imported explicitly. For example:\n\n```js\nimport { h, Transition } from 'vue'\n\nh(Transition, {\n  /* props */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <transition> in vue-api?\n\nAssistant: To <transition> in vue-api, here's what you do:\nProvides animated transition effects to a **single** element or component.\n\n- **Props**\n\n```ts\ninterface TransitionProps {\n    /**\n     * Used to automatically generate transition CSS class names.\n     * e.g. `name: 'fade'` will auto expand to `.fade-enter`,\n     * `.fade-enter-active`, etc.\n     */\n    name?: string\n    /**\n     * Whether to apply CSS transition classes.\n     * Default: true\n     */\n    css?: boolean\n    /**\n     * Specifies the type of transition events to wait for to\n     * determine transition end timing.\n     * Default behavior is auto detecting the type that has\n     * longer duration.\n     */\n    type?: 'transition' | 'animation'\n    /**\n     * Specifies explicit durations of the transition.\n     * Default behavior is wait for the first `transitionend`\n     * or `animationend` event on the root transition element.\n     */\n    duration?: number | { enter: number; leave: number }\n    /**\n     * Controls the timing sequence of leaving/entering transitions.\n     * Default behavior is simultaneous.\n     */\n    mode?: 'in-out' | 'out-in' | 'default'\n    /**\n     * Whether to apply transition on initial render.\n     * Default: false\n     */\n    appear?: boolean\n\n    /**\n     * Props for customizing transition classes.\n     * Use kebab-case in templates, e.g. enter-from-class=\"xxx\"\n     */\n    enterFromClass?: string\n    enterActiveClass?: string\n    enterToClass?: string\n    appearFromClass?: string\n    appearActiveClass?: string\n    appearToClass?: string\n    leaveFromClass?: string\n    leaveActiveClass?: string\n    leaveToClass?: string\n}\n```\n\n- **Events**\n\n  - `@before-enter`\n  - `@before-leave`\n  - `@enter`\n  - `@leave`\n  - `@appear`\n  - `@after-enter`\n  - `@after-leave`\n  - `@after-appear`\n  - `@enter-cancelled`\n  - `@leave-cancelled` ( `v-show` only)\n  - `@appear-cancelled`\n- **Example**\n\nSimple element:\n\n```template\n<Transition>\n    <div v-if=\"ok\">toggled content</div>\n</Transition>\n```\n\nForcing a transition by changing the `key` attribute:\n\n```template\n<Transition>\n    <div :key=\"text\">{{ text }}</div>\n</Transition>\n```\n\nDynamic component, with transition mode + animate on appear:\n\n```template\n<Transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n</Transition>\n```\n\nListening to transition events:\n\n```template\n<Transition @after-enter=\"onTransitionComplete\">\n    <div v-show=\"ok\">toggled content</div>\n</Transition>\n```\n\n- **See also** [Guide - Transition](https://vuejs.org/guide/built-ins/transition).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <transitiongroup> in vue-api?\n\nAssistant: To <transitiongroup> in vue-api, here's what you do:\nProvides transition effects for **multiple** elements or components in a list.\n\n- **Props**\n\n`<TransitionGroup>` accepts the same props as `<Transition>` except `mode`, plus two additional props:\n\n```ts\ninterface TransitionGroupProps extends Omit<TransitionProps, 'mode'> {\n    /**\n     * If not defined, renders as a fragment.\n     */\n    tag?: string\n    /**\n     * For customizing the CSS class applied during move transitions.\n     * Use kebab-case in templates, e.g. move-class=\"xxx\"\n     */\n    moveClass?: string\n}\n```\n\n- **Events**\n\n`<TransitionGroup>` emits the same events as `<Transition>`.\n\n- **Details**\n\nBy default, `<TransitionGroup>` doesn't render a wrapper DOM element, but one can be defined via the `tag` prop.\n\nNote that every child in a `<transition-group>` must be [**uniquely keyed**](https://vuejs.org/guide/essentials/list#maintaining-state-with-key) for the animations to work properly.\n\n`<TransitionGroup>` supports moving transitions via CSS transform. When a child's position on screen has changed after an update, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` prop). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n- **Example**\n\n```template\n<TransitionGroup tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n</TransitionGroup>\n```\n\n- **See also** [Guide - TransitionGroup](https://vuejs.org/guide/built-ins/transition-group).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <keepalive> in vue-api?\n\nAssistant: To <keepalive> in vue-api, here's what you do:\nCaches dynamically toggled components wrapped inside.\n\n- **Props**\n\n```ts\ninterface KeepAliveProps {\n    /**\n     * If specified, only components with names matched by\n     * `include` will be cached.\n     */\n    include?: MatchPattern\n    /**\n     * Any component with a name matched by `exclude` will\n     * not be cached.\n     */\n    exclude?: MatchPattern\n    /**\n     * The maximum number of component instances to cache.\n     */\n    max?: number | string\n}\n\ntype MatchPattern = string | RegExp | (string | RegExp)[]\n```\n\n- **Details**\n\nWhen wrapped around a dynamic component, `<KeepAlive>` caches the inactive component instances without destroying them.\n\nThere can only be one active component instance as the direct child of `<KeepAlive>` at any time.\n\nWhen a component is toggled inside `<KeepAlive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly, providing an alternative to `mounted` and `unmounted`, which are not called. This applies to the direct child of `<KeepAlive>` as well as to all of its descendants.\n\n- **Example**\n\nBasic usage:\n\n```template\n<KeepAlive>\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nWhen used with `v-if` / `v-else` branches, there must be only one component rendered at a time:\n\n```template\n<KeepAlive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n</KeepAlive>\n```\n\nUsed together with `<Transition>`:\n\n```template\n<Transition>\n    <KeepAlive>\n      <component :is=\"view\"></component>\n    </KeepAlive>\n</Transition>\n```\n\nUsing `include` / `exclude`:\n\n```template\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nUsage with `max`:\n\n```template\n<KeepAlive :max=\"10\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n- **See also** [Guide - KeepAlive](https://vuejs.org/guide/built-ins/keep-alive).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <teleport> in vue-api?\n\nAssistant: To <teleport> in vue-api, here's what you do:\nRenders its slot content to another part of the DOM.\n\n- **Props**\n\n```ts\ninterface TeleportProps {\n    /**\n     * Required. Specify target container.\n     * Can either be a selector or an actual element.\n     */\n    to: string | HTMLElement\n    /**\n     * When `true`, the content will remain in its original\n     * location instead of moved into the target container.\n     * Can be changed dynamically.\n     */\n    disabled?: boolean\n    /**\n     * When `true`, the Teleport will defer until other\n     * parts of the application have been mounted before\n     * resolving its target. (3.5+)\n     */\n    defer?: boolean\n}\n```\n\n- **Example**\n\nSpecifying target container:\n\n```template\n<Teleport to=\"#some-id\" />\n<Teleport to=\".some-class\" />\n<Teleport to=\"[data-teleport]\" />\n```\n\nConditionally disabling:\n\n```template\n<Teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n    <video src=\"./my-movie.mp4\">\n</Teleport>\n```\n\nDefer target resolution :\n\n```template\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\n- **See also** [Guide - Teleport](https://vuejs.org/guide/built-ins/teleport).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <suspense> in vue-api?\n\nAssistant: To <suspense> in vue-api, here's what you do:\nUsed for orchestrating nested async dependencies in a component tree.\n\n- **Props**\n\n```ts\ninterface SuspenseProps {\n    timeout?: string | number\n    suspensible?: boolean\n}\n```\n\n- **Events**\n\n  - `@resolve`\n  - `@pending`\n  - `@fallback`\n- **Details**\n\n`<Suspense>` accepts two slots: the `#default` slot and the `#fallback` slot. It will display the content of the fallback slot while rendering the default slot in memory.\n\nIf it encounters async dependencies ( Async Components and components with [`async setup()`](https://vuejs.org/guide/built-ins/suspense#async-setup)) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.\n\nBy setting the Suspense as `suspensible`, all the async dependency handling will be handled by the parent Suspense. See [implementation details](https://github.com/vuejs/core/pull/6736)\n\n- **See also** [Guide - Suspense](https://vuejs.org/guide/built-ins/suspense).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Built-in Components in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Built-in Components**:\n\n```yaml\nimport { h, Transition } from 'vue'\nh(Transition, {\n  /* props */\n})\n```\n\nThis snippet shows you how to importing built-in components, which is an important aspect of built-in components.\n\n**Transition Props Interface**:\n\n```yaml\ninterface TransitionProps {\n    name?: string\n    css?: boolean\n    type?: 'transition' | 'animation'\n    duration?: number | { enter: number; leave: number }\n    mode?: 'in-out' | 'out-in' | 'default'\n    appear?: boolean\n    enterFromClass?: string\n    enterActiveClass?: string\n    enterToClass?: string\n    appearFromClass?: string\n    appearActiveClass?: string\n    appearToClass?: string\n    leaveFromClass?: string\n    leaveActiveClass?: string\n    leaveToClass?: string\n}\n```\n\nThis snippet shows you how to transition props interface, which is an important aspect of built-in components.\n\n", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Built-in Components in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBuilt-in components can be used directly in templates without needing to be registered.\n\nWhen using built-in components in render functions, they need to be imported explicitly.\n\nEnsure that every child in a <transition-group> must be uniquely keyed for the animations to work properly.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/built-in-components.html", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:03", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "twitter:card": "summary", "title": "Built-in Components | Vue.js", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "scrapeId": "03707865-8b37-42ae-8b6d-7ce70cac0d0d", "sourceURL": "https://vuejs.org/api/built-in-components.html", "url": "https://vuejs.org/api/built-in-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Built-in Special Attributes is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Built-in Special Attributes in vue-api.\n\n# Built-in Special Attributes\n\nThis page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.Here's a quick rundown of what this is about:\n\n## key\n\nThe `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify vnodes when diffing the new list of nodes against the old list.\n\n- **Expects:** `number | string | symbol`\n\n- **Details**\n\nWithout keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed / destroyed.\n\nChildren of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\nThe most common use case is combined with `v-for`:\n\ntemplate\n\n```\n<ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>\n```\n\nIt can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\nFor example:\n\ntemplate\n\n```\n<transition>\n  <span :key=\"text\">{{ text }}</span>\n</transition>\n```\n\nWhen `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n- **See also** [Guide - List Rendering - Maintaining State with `key`](https://vuejs.org/guide/essentials/list#maintaining-state-with-key)\n\n## ref\n\nDenotes a [template ref](https://vuejs.org/guide/essentials/template-refs).\n\n- **Expects:** `string | Function`\n\n- **Details**\n\n`ref` is used to register a reference to an element or a child component.\n\nIn Options API, the reference will be registered under the component's `this.$refs` object:\n\ntemplate\n\n```\n<!-- stored as this.$refs.p -->\n<p ref=\"p\">hello</p>\n```\n\nIn Composition API, the reference will be stored in a ref with matching name:\n\nvue\n\n```\n<script setup>\nimport { useTemplateRef } from 'vue'\n\nconst pRef = useTemplateRef('p')\n</script>\n\n<template>\n    <p ref=\"p\">hello</p>\n</template>\n```\n\nIf used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be the child component instance.\n\nAlternatively `ref` can accept a function value which provides full control over where to store the reference:\n\ntemplate\n\n```\n<ChildComponent :ref=\"(el) => child = el\" />\n```\n\nAn important note about the ref registration timing: because the refs themselves are created as a result of the render function, you must wait until the component is mounted before accessing them.\n\n`this.$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also**\n\n  - [Guide - Template Refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Guide - Typing Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-template-refs)\n  - [Guide - Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs)\n\n## is\n\nUsed for binding [dynamic components](https://vuejs.org/guide/essentials/component-basics#dynamic-components).\n\n- **Expects:** `string | Component`\n\n- **Usage on native elements**\n\n  - Only supported in 3.1+\n\nWhen the `is` attribute is used on a native HTML element, it will be interpreted as a [Customized built-in element](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example), which is a native web platform feature.\n\nThere is, however, a use case where you may need Vue to replace a native element with a Vue component, as explained in [in-DOM Template Parsing Caveats](https://vuejs.org/guide/essentials/component-basics#in-dom-template-parsing-caveats). You can prefix the value of the `is` attribute with `vue:` so that Vue will render the element as a Vue component instead:\n\ntemplate\n\n```\n<table>\n  <tr is=\"vue:my-row-component\"></tr>\n</table>\n```\n\n- **See also**\n\n  - [Built-in Special Element - `<component>`](https://vuejs.org/api/built-in-special-elements#component)\n  - [Dynamic Components](https://vuejs.org/guide/essentials/component-basics#dynamic-components)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-attributes.html", "title": "Built-in Special Attributes", "description": "This page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:05:49", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "title": "Built-in Special Attributes | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "7a97df03-7ba9-4e2d-a8ba-33c00fbecfc9", "sourceURL": "https://vuejs.org/api/built-in-special-attributes.html", "url": "https://vuejs.org/api/built-in-special-attributes.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I key in vue-api?\n\nAssistant: To key in vue-api, here's what you do:\nThe `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify vnodes when diffing the new list of nodes against the old list.\n\n- **Expects:** `number | string | symbol`\n\n- **Details**\n\nWithout keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed / destroyed.\n\nChildren of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\nThe most common use case is combined with `v-for`:\n\ntemplate\n\n```\n<ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>\n```\n\nIt can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\nFor example:\n\ntemplate\n\n```\n<transition>\n  <span :key=\"text\">{{ text }}</span>\n</transition>\n```\n\nWhen `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n- **See also** [Guide - List Rendering - Maintaining State with `key`](https://vuejs.org/guide/essentials/list#maintaining-state-with-key).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-attributes.html", "title": "Built-in Special Attributes", "description": "This page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:05:49", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "title": "Built-in Special Attributes | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "7a97df03-7ba9-4e2d-a8ba-33c00fbecfc9", "sourceURL": "https://vuejs.org/api/built-in-special-attributes.html", "url": "https://vuejs.org/api/built-in-special-attributes.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I ref in vue-api?\n\nAssistant: To ref in vue-api, here's what you do:\nDenotes a [template ref](https://vuejs.org/guide/essentials/template-refs).\n\n- **Expects:** `string | Function`\n\n- **Details**\n\n`ref` is used to register a reference to an element or a child component.\n\nIn Options API, the reference will be registered under the component's `this.$refs` object:\n\ntemplate\n\n```\n<!-- stored as this.$refs.p -->\n<p ref=\"p\">hello</p>\n```\n\nIn Composition API, the reference will be stored in a ref with matching name:\n\nvue\n\n```\n<script setup>\nimport { useTemplateRef } from 'vue'\n\nconst pRef = useTemplateRef('p')\n</script>\n\n<template>\n    <p ref=\"p\">hello</p>\n</template>\n```\n\nIf used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be the child component instance.\n\nAlternatively `ref` can accept a function value which provides full control over where to store the reference:\n\ntemplate\n\n```\n<ChildComponent :ref=\"(el) => child = el\" />\n```\n\nAn important note about the ref registration timing: because the refs themselves are created as a result of the render function, you must wait until the component is mounted before accessing them.\n\n`this.$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also**\n\n  - [Guide - Template Refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Guide - Typing Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-template-refs)\n  - [Guide - Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-attributes.html", "title": "Built-in Special Attributes", "description": "This page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:05:49", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "title": "Built-in Special Attributes | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "7a97df03-7ba9-4e2d-a8ba-33c00fbecfc9", "sourceURL": "https://vuejs.org/api/built-in-special-attributes.html", "url": "https://vuejs.org/api/built-in-special-attributes.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I is in vue-api?\n\nAssistant: To is in vue-api, here's what you do:\nUsed for binding [dynamic components](https://vuejs.org/guide/essentials/component-basics#dynamic-components).\n\n- **Expects:** `string | Component`\n\n- **Usage on native elements**\n\n  - Only supported in 3.1+\n\nWhen the `is` attribute is used on a native HTML element, it will be interpreted as a [Customized built-in element](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example), which is a native web platform feature.\n\nThere is, however, a use case where you may need Vue to replace a native element with a Vue component, as explained in [in-DOM Template Parsing Caveats](https://vuejs.org/guide/essentials/component-basics#in-dom-template-parsing-caveats). You can prefix the value of the `is` attribute with `vue:` so that Vue will render the element as a Vue component instead:\n\ntemplate\n\n```\n<table>\n  <tr is=\"vue:my-row-component\"></tr>\n</table>\n```\n\n- **See also**\n\n  - [Built-in Special Element - `<component>`](https://vuejs.org/api/built-in-special-elements#component)\n  - [Dynamic Components](https://vuejs.org/guide/essentials/component-basics#dynamic-components).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-attributes.html", "title": "Built-in Special Attributes", "description": "This page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:05:49", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "title": "Built-in Special Attributes | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "7a97df03-7ba9-4e2d-a8ba-33c00fbecfc9", "sourceURL": "https://vuejs.org/api/built-in-special-attributes.html", "url": "https://vuejs.org/api/built-in-special-attributes.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Built-in Special Attributes in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using key with v-for**:\n\n```yaml\n<ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>\n```\n\nThis snippet shows you how to using key with v-for, which is an important aspect of built-in special attributes.\n\n**Using key with transition**:\n\n```yaml\n<transition>\n  <span :key=\"text\">{{ text }}</span>\n</transition>\n```\n\nThis snippet shows you how to using key with transition, which is an important aspect of built-in special attributes.\n\n**Using ref in Options API**:\n\n```yaml\n<p ref=\"p\">hello</p>\n```\n\nThis snippet shows you how to using ref in options api, which is an important aspect of built-in special attributes.\n\n**Using ref in Composition API**:\n\n```yaml\n<script setup>\nimport { useTemplateRef } from 'vue'\n\nconst pRef = useTemplateRef('p')\n</script>\n<template>\n    <p ref=\"p\">hello</p>\n</template>\n```\n\nThis snippet shows you how to using ref in composition api, which is an important aspect of built-in special attributes.\n\n**Using ref with a function**:\n\n```yaml\n<ChildComponent :ref=\"(el) => child = el\" />\n```\n\nThis snippet shows you how to using ref with a function, which is an important aspect of built-in special attributes.\n\n**Using is with dynamic components**:\n\n```yaml\n<table>\n  <tr is=\"vue:my-row-component\"></tr>\n</table>\n```\n\nThis snippet shows you how to using is with dynamic components, which is an important aspect of built-in special attributes.\n\n", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-attributes.html", "title": "Built-in Special Attributes", "description": "This page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:05:49", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "title": "Built-in Special Attributes | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "7a97df03-7ba9-4e2d-a8ba-33c00fbecfc9", "sourceURL": "https://vuejs.org/api/built-in-special-attributes.html", "url": "https://vuejs.org/api/built-in-special-attributes.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Built-in Special Attributes in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nChildren of the same common parent must have unique keys to avoid render errors.\n\nWait until the component is mounted before accessing refs, as they are created as a result of the render function.\n\nDo not use this.$refs in templates for data-binding as it is non-reactive.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-attributes.html", "title": "Built-in Special Attributes", "description": "This page covers the built-in special attributes in Vue.js, including their usage, expectations, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:05:49", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "title": "Built-in Special Attributes | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "7a97df03-7ba9-4e2d-a8ba-33c00fbecfc9", "sourceURL": "https://vuejs.org/api/built-in-special-attributes.html", "url": "https://vuejs.org/api/built-in-special-attributes.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Built-in Special Elements is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Built-in Special Elements in vue-api.\n\n# Built-in Special Elements\n\nThis page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.Here's a quick rundown of what this is about:\n\n## Not Components\n\n`<component>`, `<slot>` and `<template>` are component-like features and part of the template syntax. They are not true components and are compiled away during template compilation. As such, they are conventionally written with lowercase in templates.\n\n## `<component>`\n\nA \"meta component\" for rendering dynamic components or elements.\n\n- **Props**\n\n```ts\ninterface DynamicComponentProps {\n    is: string | Component\n}\n```\n\n- **Details**\n\nThe actual component to render is determined by the `is` prop.\n\n  - When `is` is a string, it could be either an HTML tag name or a component's registered name.\n\n  - Alternatively, `is` can also be directly bound to the definition of a component.\n- **Example**\n\nRendering components by registered name (Options API):\n\n```vue\n<script>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n    components: { Foo, Bar },\n    data() {\n      return {\n        view: 'Foo'\n      }\n    }\n}\n</script>\n\n<template>\n    <component :is=\"view\" />\n</template>\n```\n\nRendering components by definition (Composition API with `<script setup>`):\n\n```vue\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n    <component :is=\"Math.random() > 0.5 ? Foo : Bar\" />\n</template>\n```\n\nRendering HTML elements:\n\n```template\n<component :is=\"href ? 'a' : 'span'\"></component>\n```\n\nThe [built-in components](https://vuejs.org/api/built-in-components) can all be passed to `is`, but you must register them if you want to pass them by name. For example:\n\n```vue\n<script>\nimport { Transition, TransitionGroup } from 'vue'\n\nexport default {\n    components: {\n      Transition,\n      TransitionGroup\n    }\n}\n</script>\n\n<template>\n    <component :is=\"isGroup ? 'TransitionGroup' : 'Transition'\">\n      ...\n    </component>\n</template>\n```\n\nRegistration is not required if you pass the component itself to `is` rather than its name, e.g. in `<script setup>`.\n\nIf `v-model` is used on a `<component>` tag, the template compiler will expand it to a `modelValue` prop and `update:modelValue` event listener, much like it would for any other component. However, this won't be compatible with native HTML elements, such as `<input>` or `<select>`. As a result, using `v-model` with a dynamically created native element won't work:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst tag = ref('input')\nconst username = ref('')\n</script>\n\n<template>\n    <!-- This won't work as 'input' is a native HTML element -->\n    <component :is=\"tag\" v-model=\"username\" />\n</template>\n```\n\nIn practice, this edge case isn't common as native form fields are typically wrapped in components in real applications. If you do need to use a native element directly then you can split the `v-model` into an attribute and event manually.\n\n- **See also** [Dynamic Components](https://vuejs.org/guide/essentials/component-basics#dynamic-components)\n\n## `<slot>`\n\nDenotes slot content outlets in templates.\n\n- **Props**\n\n```ts\ninterface SlotProps {\n    /**\n     * Any props passed to <slot> to passed as arguments\n     * for scoped slots\n     */\n    [key: string]: any\n    /**\n     * Reserved for specifying slot name.\n     */\n    name?: string\n}\n```\n\n- **Details**\n\nThe `<slot>` element can use the `name` attribute to specify a slot name. When no `name` is specified, it will render the default slot. Additional attributes passed to the slot element will be passed as slot props to the scoped slot defined in the parent.\n\nThe element itself will be replaced by its matched slot content.\n\n`<slot>` elements in Vue templates are compiled into JavaScript, so they are not to be confused with [native `<slot>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot).\n\n- **See also** [Component - Slots](https://vuejs.org/guide/components/slots)\n\n## `<template>`\n\nThe `<template>` tag is used as a placeholder when we want to use a built-in directive without rendering an element in the DOM.\n\n- **Details**\n\nThe special handling for `<template>` is only triggered if it is used with one of these directives:\n\n  - `v-if`, `v-else-if`, or `v-else`\n  - `v-for`\n  - `v-slot`\n\nIf none of those directives are present then it will be rendered as a [native `<template>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template) instead.\n\nA `<template>` with a `v-for` can also have a [`key` attribute](https://vuejs.org/api/built-in-special-attributes#key). All other attributes and directives will be discarded, as they aren't meaningful without a corresponding element.\n\nSingle-file components use a [top-level `<template>` tag](https://vuejs.org/api/sfc-spec#language-blocks) to wrap the entire template. That usage is separate from the use of `<template>` described above. That top-level tag is not part of the template itself and doesn't support template syntax, such as directives.\n\n- **See also**\n\n  - [Guide - `v-if` on `<template>`](https://vuejs.org/guide/essentials/conditional#v-if-on-template)\n  - [Guide - `v-for` on `<template>`](https://vuejs.org/guide/essentials/list#v-for-on-template)\n  - [Guide - Named slots](https://vuejs.org/guide/components/slots#named-slots)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-elements.html", "title": "Built-in Special Elements", "description": "This page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:06:40", "type": "overview", "page_metadata": {"language": "en-US", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "title": "Built-in Special Elements | Vue.js", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "46a29213-bdca-401e-8870-379871f6bd65", "sourceURL": "https://vuejs.org/api/built-in-special-elements.html", "url": "https://vuejs.org/api/built-in-special-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I not components in vue-api?\n\nAssistant: To not components in vue-api, here's what you do:\n`<component>`, `<slot>` and `<template>` are component-like features and part of the template syntax. They are not true components and are compiled away during template compilation. As such, they are conventionally written with lowercase in templates..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-elements.html", "title": "Built-in Special Elements", "description": "This page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:06:40", "type": "section_detail", "page_metadata": {"language": "en-US", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "title": "Built-in Special Elements | Vue.js", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "46a29213-bdca-401e-8870-379871f6bd65", "sourceURL": "https://vuejs.org/api/built-in-special-elements.html", "url": "https://vuejs.org/api/built-in-special-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `<component>` in vue-api?\n\nAssistant: To `<component>` in vue-api, here's what you do:\nA \"meta component\" for rendering dynamic components or elements.\n\n- **Props**\n\n```ts\ninterface DynamicComponentProps {\n    is: string | Component\n}\n```\n\n- **Details**\n\nThe actual component to render is determined by the `is` prop.\n\n  - When `is` is a string, it could be either an HTML tag name or a component's registered name.\n\n  - Alternatively, `is` can also be directly bound to the definition of a component.\n- **Example**\n\nRendering components by registered name (Options API):\n\n```vue\n<script>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n    components: { Foo, Bar },\n    data() {\n      return {\n        view: 'Foo'\n      }\n    }\n}\n</script>\n\n<template>\n    <component :is=\"view\" />\n</template>\n```\n\nRendering components by definition (Composition API with `<script setup>`):\n\n```vue\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n    <component :is=\"Math.random() > 0.5 ? Foo : Bar\" />\n</template>\n```\n\nRendering HTML elements:\n\n```template\n<component :is=\"href ? 'a' : 'span'\"></component>\n```\n\nThe [built-in components](https://vuejs.org/api/built-in-components) can all be passed to `is`, but you must register them if you want to pass them by name. For example:\n\n```vue\n<script>\nimport { Transition, TransitionGroup } from 'vue'\n\nexport default {\n    components: {\n      Transition,\n      TransitionGroup\n    }\n}\n</script>\n\n<template>\n    <component :is=\"isGroup ? 'TransitionGroup' : 'Transition'\">\n      ...\n    </component>\n</template>\n```\n\nRegistration is not required if you pass the component itself to `is` rather than its name, e.g. in `<script setup>`.\n\nIf `v-model` is used on a `<component>` tag, the template compiler will expand it to a `modelValue` prop and `update:modelValue` event listener, much like it would for any other component. However, this won't be compatible with native HTML elements, such as `<input>` or `<select>`. As a result, using `v-model` with a dynamically created native element won't work:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst tag = ref('input')\nconst username = ref('')\n</script>\n\n<template>\n    <!-- This won't work as 'input' is a native HTML element -->\n    <component :is=\"tag\" v-model=\"username\" />\n</template>\n```\n\nIn practice, this edge case isn't common as native form fields are typically wrapped in components in real applications. If you do need to use a native element directly then you can split the `v-model` into an attribute and event manually.\n\n- **See also** [Dynamic Components](https://vuejs.org/guide/essentials/component-basics#dynamic-components).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-elements.html", "title": "Built-in Special Elements", "description": "This page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:06:40", "type": "section_detail", "page_metadata": {"language": "en-US", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "title": "Built-in Special Elements | Vue.js", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "46a29213-bdca-401e-8870-379871f6bd65", "sourceURL": "https://vuejs.org/api/built-in-special-elements.html", "url": "https://vuejs.org/api/built-in-special-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `<slot>` in vue-api?\n\nAssistant: To `<slot>` in vue-api, here's what you do:\nDenotes slot content outlets in templates.\n\n- **Props**\n\n```ts\ninterface SlotProps {\n    /**\n     * Any props passed to <slot> to passed as arguments\n     * for scoped slots\n     */\n    [key: string]: any\n    /**\n     * Reserved for specifying slot name.\n     */\n    name?: string\n}\n```\n\n- **Details**\n\nThe `<slot>` element can use the `name` attribute to specify a slot name. When no `name` is specified, it will render the default slot. Additional attributes passed to the slot element will be passed as slot props to the scoped slot defined in the parent.\n\nThe element itself will be replaced by its matched slot content.\n\n`<slot>` elements in Vue templates are compiled into JavaScript, so they are not to be confused with [native `<slot>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot).\n\n- **See also** [Component - Slots](https://vuejs.org/guide/components/slots).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-elements.html", "title": "Built-in Special Elements", "description": "This page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:06:40", "type": "section_detail", "page_metadata": {"language": "en-US", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "title": "Built-in Special Elements | Vue.js", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "46a29213-bdca-401e-8870-379871f6bd65", "sourceURL": "https://vuejs.org/api/built-in-special-elements.html", "url": "https://vuejs.org/api/built-in-special-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `<template>` in vue-api?\n\nAssistant: To `<template>` in vue-api, here's what you do:\nThe `<template>` tag is used as a placeholder when we want to use a built-in directive without rendering an element in the DOM.\n\n- **Details**\n\nThe special handling for `<template>` is only triggered if it is used with one of these directives:\n\n  - `v-if`, `v-else-if`, or `v-else`\n  - `v-for`\n  - `v-slot`\n\nIf none of those directives are present then it will be rendered as a [native `<template>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template) instead.\n\nA `<template>` with a `v-for` can also have a [`key` attribute](https://vuejs.org/api/built-in-special-attributes#key). All other attributes and directives will be discarded, as they aren't meaningful without a corresponding element.\n\nSingle-file components use a [top-level `<template>` tag](https://vuejs.org/api/sfc-spec#language-blocks) to wrap the entire template. That usage is separate from the use of `<template>` described above. That top-level tag is not part of the template itself and doesn't support template syntax, such as directives.\n\n- **See also**\n\n  - [Guide - `v-if` on `<template>`](https://vuejs.org/guide/essentials/conditional#v-if-on-template)\n  - [Guide - `v-for` on `<template>`](https://vuejs.org/guide/essentials/list#v-for-on-template)\n  - [Guide - Named slots](https://vuejs.org/guide/components/slots#named-slots).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-elements.html", "title": "Built-in Special Elements", "description": "This page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:06:40", "type": "section_detail", "page_metadata": {"language": "en-US", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "title": "Built-in Special Elements | Vue.js", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "46a29213-bdca-401e-8870-379871f6bd65", "sourceURL": "https://vuejs.org/api/built-in-special-elements.html", "url": "https://vuejs.org/api/built-in-special-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Built-in Special Elements in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dynamic Component Props Interface**:\n\n```yaml\ninterface DynamicComponentProps {\n    is: string | Component\n}\n```\n\nThis snippet shows you how to dynamic component props interface, which is an important aspect of built-in special elements.\n\n", "metadata": {"source_url": "https://vuejs.org/api/built-in-special-elements.html", "title": "Built-in Special Elements", "description": "This page covers the built-in special elements in Vue.js, including <component>, <slot>, and <template>, detailing their usage and properties.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:06:40", "type": "code_examples", "page_metadata": {"language": "en-US", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "title": "Built-in Special Elements | Vue.js", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "46a29213-bdca-401e-8870-379871f6bd65", "sourceURL": "https://vuejs.org/api/built-in-special-elements.html", "url": "https://vuejs.org/api/built-in-special-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Compile-Time Flags is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Compile-Time Flags in vue-api.\n\n# Compile-Time Flags\n\nThis page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.Here's a quick rundown of what this is about:\n\n## TIP\n\nCompile-time flags only apply when using the `esm-bundler` build of Vue (i.e. `vue/dist/vue.esm-bundler.js`). When using Vue with a build step, it is possible to configure a number of compile-time flags to enable / disable certain features. The benefit of using compile-time flags is that features disabled this way can be removed from the final bundle via tree-shaking. Vue will work even if these flags are not explicitly configured. However, it is recommended to always configure them so that the relevant features can be properly removed when possible. See [Configuration Guides](https://vuejs.org/api/compile-time-flags.html#configuration-guides) on how to configure them depending on your build tool.\n\n## `__VUE_OPTIONS_API__`\n\n- **Default:** `true`\n\nEnable / disable Options API support. Disabling this will result in smaller bundles, but may affect compatibility with 3rd party libraries if they rely on Options API.\n\n## `__VUE_PROD_DEVTOOLS__`\n\n- **Default:** `false`\n\nEnable / disable devtools support in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes.\n\n## `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`\n\n- **Default:** `false`\n\nEnable/disable detailed warnings for hydration mismatches in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes.\n\n- Only available in 3.4+\n\n## Configuration Guides\n\n\n\n## Vite\n\n`@vitejs/plugin-vue` automatically provides default values for these flags. To change the default values, use Vite's [`define` config option](https://vitejs.dev/config/shared-options.html#define):\n\n```js\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  define: {\n    // enable hydration mismatch details in production build\n    __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'true'\n  }\n})\n```\n\n## vue-cli\n\n`@vue/cli-service` automatically provides default values for some of these flags. To configure /change the values:\n\n```js\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.plugin('define').tap((definitions) => {\n      Object.assign(definitions[0], {\n        __VUE_OPTIONS_API__: 'true',\n        __VUE_PROD_DEVTOOLS__: 'false',\n        __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n      })\n      return definitions\n    })\n  }\n}\n```\n\n## webpack\n\nFlags should be defined using webpack's [DefinePlugin](https://webpack.js.org/plugins/define-plugin/):\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.DefinePlugin({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}\n```\n\n## Rollup\n\nFlags should be defined using [@rollup/plugin-replace](https://github.com/rollup/plugins/tree/master/packages/replace):\n\n```js\n// rollup.config.js\nimport replace from '@rollup/plugin-replace'\n\nexport default {\n  plugins: [\n    replace({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "overview", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I tip in vue-api?\n\nAssistant: To tip in vue-api, here's what you do:\nCompile-time flags only apply when using the `esm-bundler` build of Vue (i.e. `vue/dist/vue.esm-bundler.js`). When using Vue with a build step, it is possible to configure a number of compile-time flags to enable / disable certain features. The benefit of using compile-time flags is that features disabled this way can be removed from the final bundle via tree-shaking. Vue will work even if these flags are not explicitly configured. However, it is recommended to always configure them so that the relevant features can be properly removed when possible. See [Configuration Guides](https://vuejs.org/api/compile-time-flags.html#configuration-guides) on how to configure them depending on your build tool..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `__vue_options_api__` in vue-api?\n\nAssistant: To `__vue_options_api__` in vue-api, here's what you do:\n- **Default:** `true`\n\nEnable / disable Options API support. Disabling this will result in smaller bundles, but may affect compatibility with 3rd party libraries if they rely on Options API..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `__vue_prod_devtools__` in vue-api?\n\nAssistant: To `__vue_prod_devtools__` in vue-api, here's what you do:\n- **Default:** `false`\n\nEnable / disable devtools support in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `__vue_prod_hydration_mismatch_details__` in vue-api?\n\nAssistant: To `__vue_prod_hydration_mismatch_details__` in vue-api, here's what you do:\n- **Default:** `false`\n\nEnable/disable detailed warnings for hydration mismatches in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes.\n\n- Only available in 3.4+.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I configuration guides in vue-api?\n\nAssistant: To configuration guides in vue-api, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I vite in vue-api?\n\nAssistant: To vite in vue-api, here's what you do:\n`@vitejs/plugin-vue` automatically provides default values for these flags. To change the default values, use Vite's [`define` config option](https://vitejs.dev/config/shared-options.html#define):\n\n```js\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  define: {\n    // enable hydration mismatch details in production build\n    __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'true'\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I vue-cli in vue-api?\n\nAssistant: To vue-cli in vue-api, here's what you do:\n`@vue/cli-service` automatically provides default values for some of these flags. To configure /change the values:\n\n```js\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.plugin('define').tap((definitions) => {\n      Object.assign(definitions[0], {\n        __VUE_OPTIONS_API__: 'true',\n        __VUE_PROD_DEVTOOLS__: 'false',\n        __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n      })\n      return definitions\n    })\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I webpack in vue-api?\n\nAssistant: To webpack in vue-api, here's what you do:\nFlags should be defined using webpack's [DefinePlugin](https://webpack.js.org/plugins/define-plugin/):\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.DefinePlugin({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rollup in vue-api?\n\nAssistant: To rollup in vue-api, here's what you do:\nFlags should be defined using [@rollup/plugin-replace](https://github.com/rollup/plugins/tree/master/packages/replace):\n\n```js\n// rollup.config.js\nimport replace from '@rollup/plugin-replace'\n\nexport default {\n  plugins: [\n    replace({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Compile-Time Flags in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Vite Configuration Example**:\n\n```yaml\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  define: {\n    // enable hydration mismatch details in production build\n    __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'true'\n  }\n})\n```\n\nThis snippet shows you how to vite configuration example, which is an important aspect of compile-time flags.\n\n**vue-cli Configuration Example**:\n\n```yaml\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.plugin('define').tap((definitions) => {\n      Object.assign(definitions[0], {\n        __VUE_OPTIONS_API__: 'true',\n        __VUE_PROD_DEVTOOLS__: 'false',\n        __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n      })\n      return definitions\n    })\n  }\n}\n```\n\nThis snippet shows you how to vue-cli configuration example, which is an important aspect of compile-time flags.\n\n", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "code_examples", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Compile-Time Flags in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways configure compile-time flags to ensure relevant features can be properly removed when possible.\n\nEnable `__VUE_PROD_DEVTOOLS__` and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` only for debugging purposes to avoid larger bundle sizes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/compile-time-flags.html", "title": "Compile-Time Flags", "description": "This page covers the configuration of compile-time flags in Vue to enable or disable certain features, which can help in optimizing the final bundle size through tree-shaking.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:07:21", "type": "best_practices", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Compile-Time Flags | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "4f9d78ff-ff00-4431-8c59-001481a68081", "sourceURL": "https://vuejs.org/api/compile-time-flags.html", "url": "https://vuejs.org/api/compile-time-flags.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Component Instance is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Component Instance in vue-api.\n\n# Component Instance\n\nThis page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.Here's a quick rundown of what this is about:\n\n## $data\n\nThe object returned from the [`data`](https://vuejs.org/api/options-state#data) option, made reactive by the component. The component instance proxies access to the properties on its data object.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $data: object\n}\n```\n\n## $props\n\nAn object representing the component's current, resolved props.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $props: object\n}\n```\n\n- **Details**\n\nOnly props declared via the [`props`](https://vuejs.org/api/options-state#props) option will be included. The component instance proxies access to the properties on its props object.\n\n## $el\n\nThe root DOM node that the component instance is managing.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $el: any\n}\n```\n\n- **Details**\n\n`$el` will be `undefined` until the component is [mounted](https://vuejs.org/api/options-lifecycle#mounted).\n\n  - For components with a single root element, `$el` will point to that element.\n  - For components with text root, `$el` will point to the text node.\n  - For components with multiple root nodes, `$el` will be the placeholder DOM node that Vue uses to keep track of the component's position in the DOM (a text node, or a comment node in SSR hydration mode).\n\n## $options\n\nThe resolved component options used for instantiating the current component instance.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $options: ComponentOptions\n}\n```\n\n- **Details**\n\nThe `$options` object exposes the resolved options for the current component and is the merge result of these possible sources:\n\n  - Global mixins\n  - Component `extends` base\n  - Component mixins\n\nIt is typically used to support custom component options:\n\njs\n\n```\nconst app = createApp({\n  customOption: 'foo',\n  created() {\n    console.log(this.$options.customOption) // => 'foo'\n  }\n})\n```\n\n- **See also** [`app.config.optionMergeStrategies`](https://vuejs.org/api/application#app-config-optionmergestrategies)\n\n## $parent\n\nThe parent instance, if the current instance has one. It will be `null` for the root instance itself.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $parent: ComponentPublicInstance | null\n}\n```\n\n## $root\n\nThe root component instance of the current component tree. If the current instance has no parents this value will be itself.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $root: ComponentPublicInstance\n}\n```\n\n## $slots\n\nAn object representing the [slots](https://vuejs.org/guide/components/slots) passed by the parent component.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $slots: { [name: string]: Slot }\n}\n\ntype Slot = (...args: any[]) => VNode[]\n```\n\n- **Details**\n\nTypically used when manually authoring [render functions](https://vuejs.org/guide/extras/render-function), but can also be used to detect whether a slot is present.\n\nEach slot is exposed on `this.$slots` as a function that returns an array of vnodes under the key corresponding to that slot's name. The default slot is exposed as `this.$slots.default`.\n\nIf a slot is a [scoped slot](https://vuejs.org/guide/components/slots#scoped-slots), arguments passed to the slot functions are available to the slot as its slot props.\n\n- **See also** [Render Functions - Rendering Slots](https://vuejs.org/guide/extras/render-function#rendering-slots)\n\n## $refs\n\nAn object of DOM elements and component instances, registered via [template refs](https://vuejs.org/guide/essentials/template-refs).\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $refs: { [name: string]: Element | ComponentPublicInstance | null }\n}\n```\n\n- **See also**\n\n  - [Template refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Special Attributes - ref](https://vuejs.org/api/built-in-special-attributes#ref)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $data in vue-api?\n\nAssistant: To $data in vue-api, here's what you do:\nThe object returned from the [`data`](https://vuejs.org/api/options-state#data) option, made reactive by the component. The component instance proxies access to the properties on its data object.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $data: object\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $props in vue-api?\n\nAssistant: To $props in vue-api, here's what you do:\nAn object representing the component's current, resolved props.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $props: object\n}\n```\n\n- **Details**\n\nOnly props declared via the [`props`](https://vuejs.org/api/options-state#props) option will be included. The component instance proxies access to the properties on its props object..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $el in vue-api?\n\nAssistant: To $el in vue-api, here's what you do:\nThe root DOM node that the component instance is managing.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $el: any\n}\n```\n\n- **Details**\n\n`$el` will be `undefined` until the component is [mounted](https://vuejs.org/api/options-lifecycle#mounted).\n\n  - For components with a single root element, `$el` will point to that element.\n  - For components with text root, `$el` will point to the text node.\n  - For components with multiple root nodes, `$el` will be the placeholder DOM node that Vue uses to keep track of the component's position in the DOM (a text node, or a comment node in SSR hydration mode)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $options in vue-api?\n\nAssistant: To $options in vue-api, here's what you do:\nThe resolved component options used for instantiating the current component instance.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $options: ComponentOptions\n}\n```\n\n- **Details**\n\nThe `$options` object exposes the resolved options for the current component and is the merge result of these possible sources:\n\n  - Global mixins\n  - Component `extends` base\n  - Component mixins\n\nIt is typically used to support custom component options:\n\njs\n\n```\nconst app = createApp({\n  customOption: 'foo',\n  created() {\n    console.log(this.$options.customOption) // => 'foo'\n  }\n})\n```\n\n- **See also** [`app.config.optionMergeStrategies`](https://vuejs.org/api/application#app-config-optionmergestrategies).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $parent in vue-api?\n\nAssistant: To $parent in vue-api, here's what you do:\nThe parent instance, if the current instance has one. It will be `null` for the root instance itself.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $parent: ComponentPublicInstance | null\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $root in vue-api?\n\nAssistant: To $root in vue-api, here's what you do:\nThe root component instance of the current component tree. If the current instance has no parents this value will be itself.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $root: ComponentPublicInstance\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $slots in vue-api?\n\nAssistant: To $slots in vue-api, here's what you do:\nAn object representing the [slots](https://vuejs.org/guide/components/slots) passed by the parent component.\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $slots: { [name: string]: Slot }\n}\n\ntype Slot = (...args: any[]) => VNode[]\n```\n\n- **Details**\n\nTypically used when manually authoring [render functions](https://vuejs.org/guide/extras/render-function), but can also be used to detect whether a slot is present.\n\nEach slot is exposed on `this.$slots` as a function that returns an array of vnodes under the key corresponding to that slot's name. The default slot is exposed as `this.$slots.default`.\n\nIf a slot is a [scoped slot](https://vuejs.org/guide/components/slots#scoped-slots), arguments passed to the slot functions are available to the slot as its slot props.\n\n- **See also** [Render Functions - Rendering Slots](https://vuejs.org/guide/extras/render-function#rendering-slots).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I $refs in vue-api?\n\nAssistant: To $refs in vue-api, here's what you do:\nAn object of DOM elements and component instances, registered via [template refs](https://vuejs.org/guide/essentials/template-refs).\n\n- **Type**\n\ntype ts\n\n```\ninterface ComponentPublicInstance {\n    $refs: { [name: string]: Element | ComponentPublicInstance | null }\n}\n```\n\n- **See also**\n\n  - [Template refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Special Attributes - ref](https://vuejs.org/api/built-in-special-attributes#ref).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Component Instance in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**$data Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $data: object\n}\n```\n\nThis snippet shows you how to $data type, which is an important aspect of component instance.\n\n**$props Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $props: object\n}\n```\n\nThis snippet shows you how to $props type, which is an important aspect of component instance.\n\n**$el Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $el: any\n}\n```\n\nThis snippet shows you how to $el type, which is an important aspect of component instance.\n\n**$options Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $options: ComponentOptions\n}\n```\n\nThis snippet shows you how to $options type, which is an important aspect of component instance.\n\n**$parent Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $parent: ComponentPublicInstance | null\n}\n```\n\nThis snippet shows you how to $parent type, which is an important aspect of component instance.\n\n**$root Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $root: ComponentPublicInstance\n}\n```\n\nThis snippet shows you how to $root type, which is an important aspect of component instance.\n\n**$slots Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $slots: { [name: string]: Slot }\n}\n\ntype Slot = (...args: any[]) => VNode[]\n```\n\nThis snippet shows you how to $slots type, which is an important aspect of component instance.\n\n**$refs Type**:\n\n```yaml\ninterface ComponentPublicInstance {\n    $refs: { [name: string]: Element | ComponentPublicInstance | null }\n}\n```\n\nThis snippet shows you how to $refs type, which is an important aspect of component instance.\n\n", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Component Instance in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor consistency, it is recommended to use [template refs](https://vuejs.org/guide/essentials/template-refs) for direct access to elements instead of relying on `$el`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/component-instance.html", "title": "Component Instance", "description": "This page documents the built-in properties and methods exposed on the component public instance, i.e. `this`.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:09:01", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "language": "en-US", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "theme-color": "#3c8772", "title": "Component Instance | Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "scrapeId": "4d51ddb2-acbd-4a4b-a8cf-5661767c4c4c", "sourceURL": "https://vuejs.org/api/component-instance.html", "url": "https://vuejs.org/api/component-instance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Composition API: Dependency Injection is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Composition API: Dependency Injection in vue-api.\n\n# Composition API: Dependency Injection\n\nThis page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.Here's a quick rundown of what this is about:\n\n## provide()\n\nProvides a value that can be injected by descendant components.\n\n- **Type**\n\nts\n\n```typescript\nfunction provide<T>(key: InjectionKey<T> | string, value: T): void\n```\n\n- **Details**\n\n`provide()` takes two arguments: the key, which can be a string or a symbol, and the value to be injected.\n\nWhen using TypeScript, the key can be a symbol casted as `InjectionKey` - a Vue provided utility type that extends `Symbol`, which can be used to sync the value type between `provide()` and `inject()`.\n\nSimilar to lifecycle hook registration APIs, `provide()` must be called synchronously during a component's `setup()` phase.\n\n- **Example**\n\nvue\n\n```vue\n<script setup>\nimport { ref, provide } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// provide static value\nprovide('path', '/project/')\n\n// provide reactive value\nconst count = ref(0)\nprovide('count', count)\n\n// provide with Symbol keys\nprovide(countSymbol, count)\n</script>\n```\n\n- **See also**\n\n  - [Guide - Provide / Inject](https://vuejs.org/guide/components/provide-inject)\n  - [Guide - Typing Provide / Inject](https://vuejs.org/guide/typescript/composition-api#typing-provide-inject)\n\n## inject()\n\nInjects a value provided by an ancestor component or the application (via `app.provide()`).\n\n- **Type**\n\nts\n\n```typescript\n// without default value\nfunction inject<T>(key: InjectionKey<T> | string): T | undefined\n\n// with default value\nfunction inject<T>(key: InjectionKey<T> | string, defaultValue: T): T\n\n// with factory\nfunction inject<T>(\n    key: InjectionKey<T> | string,\n    defaultValue: () => T,\n    treatDefaultAsFactory: true\n): T\n```\n\n- **Details**\n\nThe first argument is the injection key. Vue will walk up the parent chain to locate a provided value with a matching key. If multiple components in the parent chain provides the same key, the one closest to the injecting component will \"shadow\" those higher up the chain. If no value with matching key was found, `inject()` returns `undefined` unless a default value is provided.\n\nThe second argument is optional and is the default value to be used when no matching value was found.\n\nThe second argument can also be a factory function that returns values that are expensive to create. In this case, `true` must be passed as the third argument to indicate that the function should be used as a factory instead of the value itself.\n\nSimilar to lifecycle hook registration APIs, `inject()` must be called synchronously during a component's `setup()` phase.\n\nWhen using TypeScript, the key can be of type of `InjectionKey` - a Vue-provided utility type that extends `Symbol`, which can be used to sync the value type between `provide()` and `inject()`.\n\n- **Example**\n\nAssuming a parent component has provided values as shown in the previous `provide()` example:\n\nvue\n\n```vue\n<script setup>\nimport { inject } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// inject static value without default\nconst path = inject('path')\n\n// inject reactive value\nconst count = inject('count')\n\n// inject with Symbol keys\nconst count2 = inject(countSymbol)\n\n// inject with default value\nconst bar = inject('path', '/default-path')\n\n// inject with function default value\nconst fn = inject('function', () => {})\n\n// inject with default value factory\nconst baz = inject('factory', () => new ExpensiveObject(), true)\n</script>\n```\n\n- **See also**\n\n  - [Guide - Provide / Inject](https://vuejs.org/guide/components/provide-inject)\n  - [Guide - Typing Provide / Inject](https://vuejs.org/guide/typescript/composition-api#typing-provide-inject)\n\n## hasInjectionContext()\n\n- Only supported in 3.3+\n\nReturns true if [inject()](https://vuejs.org/api/composition-api-dependency-injection.html#inject) can be used without warning about being called in the wrong place (e.g. outside of `setup()`). This method is designed to be used by libraries that want to use `inject()` internally without triggering a warning to the end user.\n\n- **Type**\n\nts\n\n```typescript\nfunction hasInjectionContext(): boolean\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-dependency-injection.html", "title": "Composition API: Dependency Injection", "description": "This page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:09:29", "type": "overview", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composition API: Dependency Injection | Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:type": "website", "scrapeId": "a2ef7d1c-d9c5-427e-a820-f1dabc6686aa", "sourceURL": "https://vuejs.org/api/composition-api-dependency-injection.html", "url": "https://vuejs.org/api/composition-api-dependency-injection.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I provide() in vue-api?\n\nAssistant: To provide() in vue-api, here's what you do:\nProvides a value that can be injected by descendant components.\n\n- **Type**\n\nts\n\n```typescript\nfunction provide<T>(key: InjectionKey<T> | string, value: T): void\n```\n\n- **Details**\n\n`provide()` takes two arguments: the key, which can be a string or a symbol, and the value to be injected.\n\nWhen using TypeScript, the key can be a symbol casted as `InjectionKey` - a Vue provided utility type that extends `Symbol`, which can be used to sync the value type between `provide()` and `inject()`.\n\nSimilar to lifecycle hook registration APIs, `provide()` must be called synchronously during a component's `setup()` phase.\n\n- **Example**\n\nvue\n\n```vue\n<script setup>\nimport { ref, provide } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// provide static value\nprovide('path', '/project/')\n\n// provide reactive value\nconst count = ref(0)\nprovide('count', count)\n\n// provide with Symbol keys\nprovide(countSymbol, count)\n</script>\n```\n\n- **See also**\n\n  - [Guide - Provide / Inject](https://vuejs.org/guide/components/provide-inject)\n  - [Guide - Typing Provide / Inject](https://vuejs.org/guide/typescript/composition-api#typing-provide-inject).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-dependency-injection.html", "title": "Composition API: Dependency Injection", "description": "This page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:09:29", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composition API: Dependency Injection | Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:type": "website", "scrapeId": "a2ef7d1c-d9c5-427e-a820-f1dabc6686aa", "sourceURL": "https://vuejs.org/api/composition-api-dependency-injection.html", "url": "https://vuejs.org/api/composition-api-dependency-injection.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I inject() in vue-api?\n\nAssistant: To inject() in vue-api, here's what you do:\nInjects a value provided by an ancestor component or the application (via `app.provide()`).\n\n- **Type**\n\nts\n\n```typescript\n// without default value\nfunction inject<T>(key: InjectionKey<T> | string): T | undefined\n\n// with default value\nfunction inject<T>(key: InjectionKey<T> | string, defaultValue: T): T\n\n// with factory\nfunction inject<T>(\n    key: InjectionKey<T> | string,\n    defaultValue: () => T,\n    treatDefaultAsFactory: true\n): T\n```\n\n- **Details**\n\nThe first argument is the injection key. Vue will walk up the parent chain to locate a provided value with a matching key. If multiple components in the parent chain provides the same key, the one closest to the injecting component will \"shadow\" those higher up the chain. If no value with matching key was found, `inject()` returns `undefined` unless a default value is provided.\n\nThe second argument is optional and is the default value to be used when no matching value was found.\n\nThe second argument can also be a factory function that returns values that are expensive to create. In this case, `true` must be passed as the third argument to indicate that the function should be used as a factory instead of the value itself.\n\nSimilar to lifecycle hook registration APIs, `inject()` must be called synchronously during a component's `setup()` phase.\n\nWhen using TypeScript, the key can be of type of `InjectionKey` - a Vue-provided utility type that extends `Symbol`, which can be used to sync the value type between `provide()` and `inject()`.\n\n- **Example**\n\nAssuming a parent component has provided values as shown in the previous `provide()` example:\n\nvue\n\n```vue\n<script setup>\nimport { inject } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// inject static value without default\nconst path = inject('path')\n\n// inject reactive value\nconst count = inject('count')\n\n// inject with Symbol keys\nconst count2 = inject(countSymbol)\n\n// inject with default value\nconst bar = inject('path', '/default-path')\n\n// inject with function default value\nconst fn = inject('function', () => {})\n\n// inject with default value factory\nconst baz = inject('factory', () => new ExpensiveObject(), true)\n</script>\n```\n\n- **See also**\n\n  - [Guide - Provide / Inject](https://vuejs.org/guide/components/provide-inject)\n  - [Guide - Typing Provide / Inject](https://vuejs.org/guide/typescript/composition-api#typing-provide-inject).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-dependency-injection.html", "title": "Composition API: Dependency Injection", "description": "This page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:09:29", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composition API: Dependency Injection | Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:type": "website", "scrapeId": "a2ef7d1c-d9c5-427e-a820-f1dabc6686aa", "sourceURL": "https://vuejs.org/api/composition-api-dependency-injection.html", "url": "https://vuejs.org/api/composition-api-dependency-injection.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I hasinjectioncontext() in vue-api?\n\nAssistant: To hasinjectioncontext() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nReturns true if [inject()](https://vuejs.org/api/composition-api-dependency-injection.html#inject) can be used without warning about being called in the wrong place (e.g. outside of `setup()`). This method is designed to be used by libraries that want to use `inject()` internally without triggering a warning to the end user.\n\n- **Type**\n\nts\n\n```typescript\nfunction hasInjectionContext(): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-dependency-injection.html", "title": "Composition API: Dependency Injection", "description": "This page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:09:29", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composition API: Dependency Injection | Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:type": "website", "scrapeId": "a2ef7d1c-d9c5-427e-a820-f1dabc6686aa", "sourceURL": "https://vuejs.org/api/composition-api-dependency-injection.html", "url": "https://vuejs.org/api/composition-api-dependency-injection.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Composition API: Dependency Injection in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**provide() Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, provide } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// provide static value\nprovide('path', '/project/')\n\n// provide reactive value\nconst count = ref(0)\nprovide('count', count)\n\n// provide with Symbol keys\nprovide(countSymbol, count)\n</script>\n```\n```\n\nThis snippet shows you how to provide() example, which is an important aspect of composition api: dependency injection.\n\n**inject() Example**:\n\n```yaml\n```vue\n<script setup>\nimport { inject } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// inject static value without default\nconst path = inject('path')\n\n// inject reactive value\nconst count = inject('count')\n\n// inject with Symbol keys\nconst count2 = inject(countSymbol)\n\n// inject with default value\nconst bar = inject('path', '/default-path')\n\n// inject with function default value\nconst fn = inject('function', () => {})\n\n// inject with default value factory\nconst baz = inject('factory', () => new ExpensiveObject(), true)\n</script>\n```\n```\n\nThis snippet shows you how to inject() example, which is an important aspect of composition api: dependency injection.\n\n**hasInjectionContext() Type**:\n\n```yaml\n```typescript\nfunction hasInjectionContext(): boolean\n```\n```\n\nThis snippet shows you how to hasinjectioncontext() type, which is an important aspect of composition api: dependency injection.\n\n", "metadata": {"source_url": "https://vuejs.org/api/composition-api-dependency-injection.html", "title": "Composition API: Dependency Injection", "description": "This page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:09:29", "type": "code_examples", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composition API: Dependency Injection | Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:type": "website", "scrapeId": "a2ef7d1c-d9c5-427e-a820-f1dabc6686aa", "sourceURL": "https://vuejs.org/api/composition-api-dependency-injection.html", "url": "https://vuejs.org/api/composition-api-dependency-injection.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Composition API: Dependency Injection in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n`provide()` and `inject()` must be called synchronously during a component's `setup()` phase.\n\nWhen using TypeScript, use `InjectionKey` to sync value types between `provide()` and `inject()`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-dependency-injection.html", "title": "Composition API: Dependency Injection", "description": "This page covers the provide and inject functions in Vue's Composition API, detailing how to use dependency injection in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:09:29", "type": "best_practices", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composition API: Dependency Injection | Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:type": "website", "scrapeId": "a2ef7d1c-d9c5-427e-a820-f1dabc6686aa", "sourceURL": "https://vuejs.org/api/composition-api-dependency-injection.html", "url": "https://vuejs.org/api/composition-api-dependency-injection.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Composition API: Helpers is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Composition API: Helpers in vue-api.\n\n# Composition API: Helpers\n\nThis page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.Here's a quick rundown of what this is about:\n\n## useAttrs()\n\nReturns the `attrs` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes the [fallthrough attributes](https://vuejs.org/guide/components/attrs#fallthrough-attributes) of the current component. This is intended to be used in `<script setup>` where the setup context object is not available.\n\n- **Type**\n\nts\n\n```\nfunction useAttrs(): Record<string, unknown>\n```\n\n## useSlots()\n\nReturns the `slots` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes parent passed slots as callable functions that return Virtual DOM nodes. This is intended to be used in `<script setup>` where the setup context object is not available.\n\nIf using TypeScript, [`defineSlots()`](https://vuejs.org/api/sfc-script-setup#defineslots) should be preferred instead.\n\n- **Type**\n\nts\n\n```\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```\n\n## useModel()\n\nThis is the underlying helper that powers [`defineModel()`](https://vuejs.org/api/sfc-script-setup#definemodel). If using `<script setup>`, `defineModel()` should be preferred instead.\n\n- Only available in 3.4+\n\n- **Type**\n\nts\n\n```\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n): ModelRef\n\ntype DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n}\n\ntype ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n]\n```\n\n- **Example**\n\njs\n\n```\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n}\n```\n\n- **Details**\n\n`useModel()` can be used in non-SFC components, e.g. when using raw `setup()` function. It expects the `props` object as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlike `defineModel()`, you are responsible for declaring the props and emits yourself.\n\n## useTemplateRef()\n\nReturns a shallow ref whose value will be synced with the template element or component with a matching ref attribute.\n\n- **Type**\n\nts\n\n```\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\n- **Example**\n\nvue\n\n```\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst inputRef = useTemplateRef('input')\n\nonMounted(() => {\n    inputRef.value.focus()\n})\n</script>\n\n<template>\n    <input ref=\"input\" />\n</template>\n```\n\n- **See also**\n\n  - [Guide - Template Refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Guide - Typing Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-template-refs)\n  - [Guide - Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs)\n\n## useId()\n\nUsed to generate unique-per-application IDs for accessibility attributes or form elements.\n\n- **Type**\n\nts\n\n```\nfunction useId(): string\n```\n\n- **Example**\n\nvue\n\n```\n<script setup>\nimport { useId } from 'vue'\n\nconst id = useId()\n</script>\n\n<template>\n    <form>\n      <label :for=\"id\">Name:</label>\n      <input :id=\"id\" type=\"text\" />\n    </form>\n</template>\n```\n\n- **Details**\n\nIDs generated by `useId()` are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component calling `useId()` will also have different IDs.\n\nIDs generated by `useId()` are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches.\n\nIf you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix via [`app.config.idPrefix`](https://vuejs.org/api/application#app-config-idprefix).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "overview", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useattrs() in vue-api?\n\nAssistant: To useattrs() in vue-api, here's what you do:\nReturns the `attrs` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes the [fallthrough attributes](https://vuejs.org/guide/components/attrs#fallthrough-attributes) of the current component. This is intended to be used in `<script setup>` where the setup context object is not available.\n\n- **Type**\n\nts\n\n```\nfunction useAttrs(): Record<string, unknown>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useslots() in vue-api?\n\nAssistant: To useslots() in vue-api, here's what you do:\nReturns the `slots` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes parent passed slots as callable functions that return Virtual DOM nodes. This is intended to be used in `<script setup>` where the setup context object is not available.\n\nIf using TypeScript, [`defineSlots()`](https://vuejs.org/api/sfc-script-setup#defineslots) should be preferred instead.\n\n- **Type**\n\nts\n\n```\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usemodel() in vue-api?\n\nAssistant: To usemodel() in vue-api, here's what you do:\nThis is the underlying helper that powers [`defineModel()`](https://vuejs.org/api/sfc-script-setup#definemodel). If using `<script setup>`, `defineModel()` should be preferred instead.\n\n- Only available in 3.4+\n\n- **Type**\n\nts\n\n```\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n): ModelRef\n\ntype DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n}\n\ntype ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n]\n```\n\n- **Example**\n\njs\n\n```\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n}\n```\n\n- **Details**\n\n`useModel()` can be used in non-SFC components, e.g. when using raw `setup()` function. It expects the `props` object as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlike `defineModel()`, you are responsible for declaring the props and emits yourself..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usetemplateref() in vue-api?\n\nAssistant: To usetemplateref() in vue-api, here's what you do:\nReturns a shallow ref whose value will be synced with the template element or component with a matching ref attribute.\n\n- **Type**\n\nts\n\n```\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\n- **Example**\n\nvue\n\n```\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst inputRef = useTemplateRef('input')\n\nonMounted(() => {\n    inputRef.value.focus()\n})\n</script>\n\n<template>\n    <input ref=\"input\" />\n</template>\n```\n\n- **See also**\n\n  - [Guide - Template Refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Guide - Typing Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-template-refs)\n  - [Guide - Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useid() in vue-api?\n\nAssistant: To useid() in vue-api, here's what you do:\nUsed to generate unique-per-application IDs for accessibility attributes or form elements.\n\n- **Type**\n\nts\n\n```\nfunction useId(): string\n```\n\n- **Example**\n\nvue\n\n```\n<script setup>\nimport { useId } from 'vue'\n\nconst id = useId()\n</script>\n\n<template>\n    <form>\n      <label :for=\"id\">Name:</label>\n      <input :id=\"id\" type=\"text\" />\n    </form>\n</template>\n```\n\n- **Details**\n\nIDs generated by `useId()` are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component calling `useId()` will also have different IDs.\n\nIDs generated by `useId()` are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches.\n\nIf you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix via [`app.config.idPrefix`](https://vuejs.org/api/application#app-config-idprefix)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Composition API: Helpers in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**useAttrs() Type**:\n\n```yaml\nfunction useAttrs(): Record<string, unknown>\n```\n\nThis snippet shows you how to useattrs() type, which is an important aspect of composition api: helpers.\n\n**useSlots() Type**:\n\n```yaml\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```\n\nThis snippet shows you how to useslots() type, which is an important aspect of composition api: helpers.\n\n**useModel() Type**:\n\n```yaml\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n): ModelRef\n\ntype DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n}\n\ntype ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n]\n```\n\nThis snippet shows you how to usemodel() type, which is an important aspect of composition api: helpers.\n\n**useModel() Example**:\n\n```yaml\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n}\n```\n\nThis snippet shows you how to usemodel() example, which is an important aspect of composition api: helpers.\n\n**useTemplateRef() Type**:\n\n```yaml\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\nThis snippet shows you how to usetemplateref() type, which is an important aspect of composition api: helpers.\n\n**useTemplateRef() Example**:\n\n```yaml\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst inputRef = useTemplateRef('input')\n\nonMounted(() => {\n    inputRef.value.focus()\n})\n</script>\n\n<template>\n    <input ref=\"input\" />\n</template>\n```\n\nThis snippet shows you how to usetemplateref() example, which is an important aspect of composition api: helpers.\n\n", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "code_examples", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Composition API: Helpers in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `defineSlots()` instead of `useSlots()` when using TypeScript.\n\nPrefer `defineModel()` over `useModel()` when using `<script setup>` for better integration.\n\nIDs generated by `useId()` are stable across server and client renders, making them suitable for SSR applications.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers.html", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:11:27", "type": "best_practices", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "Composition API: Helpers | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "cdc0d440-ab60-401b-a04e-d8607835c456", "sourceURL": "https://vuejs.org/api/composition-api-helpers.html", "url": "https://vuejs.org/api/composition-api-helpers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Composition API: Lifecycle Hooks is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Composition API: Lifecycle Hooks in vue-api.\n\n# Composition API: Lifecycle Hooks\n\nThis page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.Here's a quick rundown of what this is about:\n\n## Usage Note\n\nAll APIs listed on this page must be called synchronously during the `setup()` phase of a component. See [Guide - Lifecycle Hooks](https://vuejs.org/guide/essentials/lifecycle) for more details.\n\n## onMounted()\n\nRegisters a callback to be called after the component has been mounted.\n\n- **Type**\n\n```ts\nfunction onMounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered mounted after:\n\n  - All of its synchronous child components have been mounted (does not include async components or components inside `<Suspense>` trees).\n  - Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.\n\nThis hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in a [server-rendered application](https://vuejs.org/guide/scaling-up/ssr).\n\n**This hook is not called during server-side rendering.**\n\n## onUpdated()\n\nRegisters a callback to be called after the component has updated its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onUpdated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA parent component's updated hook is called after that of its child components.\n\nThis hook is called after any DOM update of the component, which can be caused by different state changes, because multiple state changes can be batched into a single render cycle for performance reasons. If you need to access the updated DOM after a specific state change, use [nextTick()](https://vuejs.org/api/general#nexttick) instead.\n\n**This hook is not called during server-side rendering.**\n\nWARNING\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n\n## onUnmounted()\n\nRegisters a callback to be called after the component has been unmounted.\n\n- **Type**\n\n```ts\nfunction onUnmounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered unmounted after:\n\n  - All of its child components have been unmounted.\n  - All of its associated reactive effects (render effect and computed / watchers created during `setup()`) have been stopped.\n\nUse this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n\n**This hook is not called during server-side rendering.**\n\n## onBeforeMount()\n\nRegisters a hook to be called right before the component is to be mounted.\n\n- **Type**\n\n```ts\nfunction onBeforeMount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n\n**This hook is not called during server-side rendering.**\n\n## onBeforeUpdate()\n\nRegisters a hook to be called right before the component is about to update its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onBeforeUpdate(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n\n**This hook is not called during server-side rendering.**\n\n## onBeforeUnmount()\n\nRegisters a hook to be called right before a component instance is to be unmounted.\n\n- **Type**\n\n```ts\nfunction onBeforeUnmount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component instance is still fully functional.\n\n**This hook is not called during server-side rendering.**\n\n## onErrorCaptured()\n\nRegisters a hook to be called when an error propagating from a descendant component has been captured.\n\n- **Type**\n\n```ts\nfunction onErrorCaptured(callback: ErrorCapturedHook): void\n\ntype ErrorCapturedHook = (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    info: string\n) => boolean | void\n```\n\n- **Details**\n\nErrors can be captured from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\nYou can modify component state in `errorCaptured()` to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n\nThe hook can return `false` to stop the error from propagating further. See error propagation details below.\n\n## onRenderTracked()\n\nRegisters a debug hook to be called when a reactive dependency has been tracked by the component's render effect.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTracked(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    key: any\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## onRenderTriggered()\n\nRegisters a debug hook to be called when a reactive dependency triggers the component's render effect to be re-run.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTriggered(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n    key: any\n    newValue?: any\n    oldValue?: any\n    oldTarget?: Map<any, any> | Set<any>\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## onActivated()\n\nRegisters a callback to be called after the component instance is inserted into the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onActivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance)\n\n## onDeactivated()\n\nRegisters a callback to be called after the component instance is removed from the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onDeactivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance)\n\n## onServerPrefetch()\n\nRegisters an async function to be resolved before the component instance is to be rendered on the server.\n\n- **Type**\n\n```ts\nfunction onServerPrefetch(callback: () => Promise<any>): void\n```\n\n- **Details**\n\nIf the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n\nThis hook is only called during server-side rendering can be used to perform server-only data fetching.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "overview", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usage note in vue-api?\n\nAssistant: To usage note in vue-api, here's what you do:\nAll APIs listed on this page must be called synchronously during the `setup()` phase of a component. See [Guide - Lifecycle Hooks](https://vuejs.org/guide/essentials/lifecycle) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onmounted() in vue-api?\n\nAssistant: To onmounted() in vue-api, here's what you do:\nRegisters a callback to be called after the component has been mounted.\n\n- **Type**\n\n```ts\nfunction onMounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered mounted after:\n\n  - All of its synchronous child components have been mounted (does not include async components or components inside `<Suspense>` trees).\n  - Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.\n\nThis hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in a [server-rendered application](https://vuejs.org/guide/scaling-up/ssr).\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onupdated() in vue-api?\n\nAssistant: To onupdated() in vue-api, here's what you do:\nRegisters a callback to be called after the component has updated its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onUpdated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA parent component's updated hook is called after that of its child components.\n\nThis hook is called after any DOM update of the component, which can be caused by different state changes, because multiple state changes can be batched into a single render cycle for performance reasons. If you need to access the updated DOM after a specific state change, use [nextTick()](https://vuejs.org/api/general#nexttick) instead.\n\n**This hook is not called during server-side rendering.**\n\nWARNING\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onunmounted() in vue-api?\n\nAssistant: To onunmounted() in vue-api, here's what you do:\nRegisters a callback to be called after the component has been unmounted.\n\n- **Type**\n\n```ts\nfunction onUnmounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered unmounted after:\n\n  - All of its child components have been unmounted.\n  - All of its associated reactive effects (render effect and computed / watchers created during `setup()`) have been stopped.\n\nUse this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onbeforemount() in vue-api?\n\nAssistant: To onbeforemount() in vue-api, here's what you do:\nRegisters a hook to be called right before the component is to be mounted.\n\n- **Type**\n\n```ts\nfunction onBeforeMount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onbeforeupdate() in vue-api?\n\nAssistant: To onbeforeupdate() in vue-api, here's what you do:\nRegisters a hook to be called right before the component is about to update its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onBeforeUpdate(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onbeforeunmount() in vue-api?\n\nAssistant: To onbeforeunmount() in vue-api, here's what you do:\nRegisters a hook to be called right before a component instance is to be unmounted.\n\n- **Type**\n\n```ts\nfunction onBeforeUnmount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component instance is still fully functional.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onerrorcaptured() in vue-api?\n\nAssistant: To onerrorcaptured() in vue-api, here's what you do:\nRegisters a hook to be called when an error propagating from a descendant component has been captured.\n\n- **Type**\n\n```ts\nfunction onErrorCaptured(callback: ErrorCapturedHook): void\n\ntype ErrorCapturedHook = (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    info: string\n) => boolean | void\n```\n\n- **Details**\n\nErrors can be captured from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\nYou can modify component state in `errorCaptured()` to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n\nThe hook can return `false` to stop the error from propagating further. See error propagation details below..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onrendertracked() in vue-api?\n\nAssistant: To onrendertracked() in vue-api, here's what you do:\nRegisters a debug hook to be called when a reactive dependency has been tracked by the component's render effect.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTracked(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    key: any\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onrendertriggered() in vue-api?\n\nAssistant: To onrendertriggered() in vue-api, here's what you do:\nRegisters a debug hook to be called when a reactive dependency triggers the component's render effect to be re-run.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTriggered(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n    key: any\n    newValue?: any\n    oldValue?: any\n    oldTarget?: Map<any, any> | Set<any>\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onactivated() in vue-api?\n\nAssistant: To onactivated() in vue-api, here's what you do:\nRegisters a callback to be called after the component instance is inserted into the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onActivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I ondeactivated() in vue-api?\n\nAssistant: To ondeactivated() in vue-api, here's what you do:\nRegisters a callback to be called after the component instance is removed from the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onDeactivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onserverprefetch() in vue-api?\n\nAssistant: To onserverprefetch() in vue-api, here's what you do:\nRegisters an async function to be resolved before the component instance is to be rendered on the server.\n\n- **Type**\n\n```ts\nfunction onServerPrefetch(callback: () => Promise<any>): void\n```\n\n- **Details**\n\nIf the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n\nThis hook is only called during server-side rendering can be used to perform server-only data fetching..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Composition API: Lifecycle Hooks in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**onMounted Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n    el.value // <div>\n})\n</script>\n\n<template>\n    <div ref=\"el\"></div>\n</template>\n```\n```\n\nThis snippet shows you how to onmounted example, which is an important aspect of composition api: lifecycle hooks.\n\n**onUpdated Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n    // text content should be the same as current `count.value`\n    console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n    <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>\n```\n```\n\nThis snippet shows you how to onupdated example, which is an important aspect of composition api: lifecycle hooks.\n\n**onUnmounted Example**:\n\n```yaml\n```vue\n<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n    intervalId = setInterval(() => {\n      // ...\n    })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>\n```\n```\n\nThis snippet shows you how to onunmounted example, which is an important aspect of composition api: lifecycle hooks.\n\n**onServerPrefetch Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n    if (!data.value) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      data.value = await fetchOnClient(/* ... */)\n    }\n})\n</script>\n```\n```\n\nThis snippet shows you how to onserverprefetch example, which is an important aspect of composition api: lifecycle hooks.\n\n", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "code_examples", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Composition API: Lifecycle Hooks in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn production, the 3rd argument (info) in onErrorCaptured will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.\n\nYou can modify component state in errorCaptured() to display an error state to the user, but ensure that the error state does not render the original content that caused the error to avoid an infinite render loop.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle.html", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue.js Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:13:18", "type": "best_practices", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "theme-color": "#3c8772", "language": "en-US", "og:type": "website", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "9caa4653-48f5-43e9-8919-32c80a418262", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle.html", "url": "https://vuejs.org/api/composition-api-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Composition API: setup() is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Composition API: setup() in vue-api.\n\n# Composition API: setup()\n\nThis page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nThe `setup()` hook serves as the entry point for Composition API usage in components in the following cases:\n\n1. Using Composition API without a build step;\n2. Integrating with Composition-API-based code in an Options API component.\n\nNote\n\nIf you are using Composition API with Single-File Components, [`<script setup>`](https://vuejs.org/api/sfc-script-setup) is strongly recommended for a more succinct and ergonomic syntax.\n\nWe can declare reactive state using [Reactivity APIs](https://vuejs.org/api/reactivity-core) and expose them to the template by returning an object from `setup()`. The properties on the returned object will also be made available on the component instance (if other options are used):\n\n```vue\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    // expose to template and other options API hooks\n    return {\n      count\n    }\n  },\n\n  mounted() {\n    console.log(this.count) // 0\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n[refs](https://vuejs.org/api/reactivity-core#ref) returned from `setup` are [automatically shallow unwrapped](https://vuejs.org/guide/essentials/reactivity-fundamentals#deep-reactivity) when accessed in the template so you do not need to use `.value` when accessing them. They are also unwrapped in the same way when accessed on `this`.\n\n`setup()` itself does not have access to the component instance - `this` will have a value of `undefined` inside `setup()`. You can access Composition-API-exposed values from Options API, but not the other way around.\n\n`setup()` should return an object _synchronously_. The only case when `async setup()` can be used is when the component is a descendant of a [Suspense](https://vuejs.org/guide/built-ins/suspense) component.\n\n## Accessing Props\n\nThe first argument in the `setup` function is the `props` argument. Just as you would expect in a standard component, `props` inside of a `setup` function are reactive and will be updated when new props are passed in.\n\n```js\nexport default {\n  props: {\n    title: String\n  },\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\nNote that if you destructure the `props` object, the destructured variables will lose reactivity. It is therefore recommended to always access props in the form of `props.xxx`.\n\nIf you really need to destructure the props, or need to pass a prop into an external function while retaining reactivity, you can do so with the [toRefs()](https://vuejs.org/api/reactivity-utilities#torefs) and [toRef()](https://vuejs.org/api/reactivity-utilities#toref) utility APIs:\n\n```js\nimport { toRefs, toRef } from 'vue'\n\nexport default {\n  setup(props) {\n    // turn `props` into an object of refs, then destructure\n    const { title } = toRefs(props)\n    // `title` is a ref that tracks `props.title`\n    console.log(title.value)\n\n    // OR, turn a single property on `props` into a ref\n    const title = toRef(props, 'title')\n  }\n}\n```\n\n## Setup Context\n\nThe second argument passed to the `setup` function is a **Setup Context** object. The context object exposes other values that may be useful inside `setup`:\n\n```js\nexport default {\n  setup(props, context) {\n    // Attributes (Non-reactive object, equivalent to $attrs)\n    console.log(context.attrs)\n\n    // Slots (Non-reactive object, equivalent to $slots)\n    console.log(context.slots)\n\n    // Emit events (Function, equivalent to $emit)\n    console.log(context.emit)\n\n    // Expose public properties (Function)\n    console.log(context.expose)\n  }\n}\n```\n\nThe context object is not reactive and can be safely destructured:\n\n```js\nexport default {\n  setup(props, { attrs, slots, emit, expose }) {\n    ...\n  }\n}\n```\n\n`attrs` and `slots` are stateful objects that are always updated when the component itself is updated. This means you should avoid destructuring them and always reference properties as `attrs.x` or `slots.x`. Also note that, unlike `props`, the properties of `attrs` and `slots` are **not** reactive. If you intend to apply side effects based on changes to `attrs` or `slots`, you should do so inside an `onBeforeUpdate` lifecycle hook.\n\n## Exposing Public Properties\n\n`expose` is a function that can be used to explicitly limit the properties exposed when the component instance is accessed by a parent component via [template refs](https://vuejs.org/guide/essentials/template-refs#ref-on-component):\n\n```js\nexport default {\n  setup(props, { expose }) {\n    // make the instance \"closed\" -\n    // i.e. do not expose anything to the parent\n    expose()\n\n    const publicCount = ref(0)\n    const privateCount = ref(0)\n    // selectively expose local state\n    expose({ count: publicCount })\n  }\n}\n```\n\n## Usage with Render Functions\n\n`setup` can also return a [render function](https://vuejs.org/guide/extras/render-function) which can directly make use of the reactive state declared in the same scope:\n\n```js\nimport { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return () => h('div', count.value)\n  }\n}\n```\n\nReturning a render function prevents us from returning anything else. Internally that shouldn't be a problem, but it can be problematic if we want to expose methods of this component to the parent component via template refs.\n\nWe can solve this problem by calling [`expose()`](https://vuejs.org/api/composition-api-setup.html#exposing-public-properties):\n\n```js\nimport { h, ref } from 'vue'\n\nexport default {\n  setup(props, { expose }) {\n    const count = ref(0)\n    const increment = () => ++count.value\n\n    expose({\n      increment\n    })\n\n    return () => h('div', count.value)\n  }\n}\n```\n\nThe `increment` method would then be available in the parent component via a template ref.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I basic usage in vue-api?\n\nAssistant: To basic usage in vue-api, here's what you do:\nThe `setup()` hook serves as the entry point for Composition API usage in components in the following cases:\n\n1. Using Composition API without a build step;\n2. Integrating with Composition-API-based code in an Options API component.\n\nNote\n\nIf you are using Composition API with Single-File Components, [`<script setup>`](https://vuejs.org/api/sfc-script-setup) is strongly recommended for a more succinct and ergonomic syntax.\n\nWe can declare reactive state using [Reactivity APIs](https://vuejs.org/api/reactivity-core) and expose them to the template by returning an object from `setup()`. The properties on the returned object will also be made available on the component instance (if other options are used):\n\n```vue\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    // expose to template and other options API hooks\n    return {\n      count\n    }\n  },\n\n  mounted() {\n    console.log(this.count) // 0\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n[refs](https://vuejs.org/api/reactivity-core#ref) returned from `setup` are [automatically shallow unwrapped](https://vuejs.org/guide/essentials/reactivity-fundamentals#deep-reactivity) when accessed in the template so you do not need to use `.value` when accessing them. They are also unwrapped in the same way when accessed on `this`.\n\n`setup()` itself does not have access to the component instance - `this` will have a value of `undefined` inside `setup()`. You can access Composition-API-exposed values from Options API, but not the other way around.\n\n`setup()` should return an object _synchronously_. The only case when `async setup()` can be used is when the component is a descendant of a [Suspense](https://vuejs.org/guide/built-ins/suspense) component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I accessing props in vue-api?\n\nAssistant: To accessing props in vue-api, here's what you do:\nThe first argument in the `setup` function is the `props` argument. Just as you would expect in a standard component, `props` inside of a `setup` function are reactive and will be updated when new props are passed in.\n\n```js\nexport default {\n  props: {\n    title: String\n  },\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\nNote that if you destructure the `props` object, the destructured variables will lose reactivity. It is therefore recommended to always access props in the form of `props.xxx`.\n\nIf you really need to destructure the props, or need to pass a prop into an external function while retaining reactivity, you can do so with the [toRefs()](https://vuejs.org/api/reactivity-utilities#torefs) and [toRef()](https://vuejs.org/api/reactivity-utilities#toref) utility APIs:\n\n```js\nimport { toRefs, toRef } from 'vue'\n\nexport default {\n  setup(props) {\n    // turn `props` into an object of refs, then destructure\n    const { title } = toRefs(props)\n    // `title` is a ref that tracks `props.title`\n    console.log(title.value)\n\n    // OR, turn a single property on `props` into a ref\n    const title = toRef(props, 'title')\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I setup context in vue-api?\n\nAssistant: To setup context in vue-api, here's what you do:\nThe second argument passed to the `setup` function is a **Setup Context** object. The context object exposes other values that may be useful inside `setup`:\n\n```js\nexport default {\n  setup(props, context) {\n    // Attributes (Non-reactive object, equivalent to $attrs)\n    console.log(context.attrs)\n\n    // Slots (Non-reactive object, equivalent to $slots)\n    console.log(context.slots)\n\n    // Emit events (Function, equivalent to $emit)\n    console.log(context.emit)\n\n    // Expose public properties (Function)\n    console.log(context.expose)\n  }\n}\n```\n\nThe context object is not reactive and can be safely destructured:\n\n```js\nexport default {\n  setup(props, { attrs, slots, emit, expose }) {\n    ...\n  }\n}\n```\n\n`attrs` and `slots` are stateful objects that are always updated when the component itself is updated. This means you should avoid destructuring them and always reference properties as `attrs.x` or `slots.x`. Also note that, unlike `props`, the properties of `attrs` and `slots` are **not** reactive. If you intend to apply side effects based on changes to `attrs` or `slots`, you should do so inside an `onBeforeUpdate` lifecycle hook..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I exposing public properties in vue-api?\n\nAssistant: To exposing public properties in vue-api, here's what you do:\n`expose` is a function that can be used to explicitly limit the properties exposed when the component instance is accessed by a parent component via [template refs](https://vuejs.org/guide/essentials/template-refs#ref-on-component):\n\n```js\nexport default {\n  setup(props, { expose }) {\n    // make the instance \"closed\" -\n    // i.e. do not expose anything to the parent\n    expose()\n\n    const publicCount = ref(0)\n    const privateCount = ref(0)\n    // selectively expose local state\n    expose({ count: publicCount })\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usage with render functions in vue-api?\n\nAssistant: To usage with render functions in vue-api, here's what you do:\n`setup` can also return a [render function](https://vuejs.org/guide/extras/render-function) which can directly make use of the reactive state declared in the same scope:\n\n```js\nimport { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return () => h('div', count.value)\n  }\n}\n```\n\nReturning a render function prevents us from returning anything else. Internally that shouldn't be a problem, but it can be problematic if we want to expose methods of this component to the parent component via template refs.\n\nWe can solve this problem by calling [`expose()`](https://vuejs.org/api/composition-api-setup.html#exposing-public-properties):\n\n```js\nimport { h, ref } from 'vue'\n\nexport default {\n  setup(props, { expose }) {\n    const count = ref(0)\n    const increment = () => ++count.value\n\n    expose({\n      increment\n    })\n\n    return () => h('div', count.value)\n  }\n}\n```\n\nThe `increment` method would then be available in the parent component via a template ref..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Composition API: setup() in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\n```vue\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    // expose to template and other options API hooks\n    return {\n      count\n    }\n  },\n\n  mounted() {\n    console.log(this.count) // 0\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of composition api: setup().\n\n**Accessing Props Example**:\n\n```yaml\n```js\nexport default {\n  props: {\n    title: String\n  },\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n```\n\nThis snippet shows you how to accessing props example, which is an important aspect of composition api: setup().\n\n**Destructuring Props Example**:\n\n```yaml\n```js\nimport { toRefs, toRef } from 'vue'\n\nexport default {\n  setup(props) {\n    // turn `props` into an object of refs, then destructure\n    const { title } = toRefs(props)\n    // `title` is a ref that tracks `props.title`\n    console.log(title.value)\n\n    // OR, turn a single property on `props` into a ref\n    const title = toRef(props, 'title')\n  }\n}\n```\n```\n\nThis snippet shows you how to destructuring props example, which is an important aspect of composition api: setup().\n\n**Setup Context Example**:\n\n```yaml\n```js\nexport default {\n  setup(props, context) {\n    // Attributes (Non-reactive object, equivalent to $attrs)\n    console.log(context.attrs)\n\n    // Slots (Non-reactive object, equivalent to $slots)\n    console.log(context.slots)\n\n    // Emit events (Function, equivalent to $emit)\n    console.log(context.emit)\n\n    // Expose public properties (Function)\n    console.log(context.expose)\n  }\n}\n```\n```\n\nThis snippet shows you how to setup context example, which is an important aspect of composition api: setup().\n\n**Exposing Public Properties Example**:\n\n```yaml\n```js\nexport default {\n  setup(props, { expose }) {\n    // make the instance \"closed\" -\n    // i.e. do not expose anything to the parent\n    expose()\n\n    const publicCount = ref(0)\n    const privateCount = ref(0)\n    // selectively expose local state\n    expose({ count: publicCount })\n  }\n}\n```\n```\n\nThis snippet shows you how to exposing public properties example, which is an important aspect of composition api: setup().\n\n**Usage with Render Functions Example**:\n\n```yaml\n```js\nimport { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return () => h('div', count.value)\n  }\n}\n```\n```\n\nThis snippet shows you how to usage with render functions example, which is an important aspect of composition api: setup().\n\n**Render Function with Expose Example**:\n\n```yaml\n```js\nimport { h, ref } from 'vue'\n\nexport default {\n  setup(props, { expose }) {\n    const count = ref(0)\n    const increment = () => ++count.value\n\n    expose({\n      increment\n    })\n\n    return () => h('div', count.value)\n  }\n}\n```\n```\n\nThis snippet shows you how to render function with expose example, which is an important aspect of composition api: setup().\n\n", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Composition API: setup() in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf using Composition API with Single-File Components, use `<script setup>` for a more succinct syntax.\n\nAlways access props in the form of `props.xxx` to retain reactivity.\n\nAvoid destructuring `attrs` and `slots` to maintain their stateful nature.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-setup.html", "title": "Composition API: setup()", "description": "This page covers the usage of the setup() hook in Vue's Composition API, including basic usage, accessing props, setup context, exposing public properties, and usage with render functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:14:08", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "title": "Composition API: setup() | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "theme-color": "#3c8772", "twitter:site": "@vuejs", "scrapeId": "82902179-e17d-426e-808d-a4825484e53d", "sourceURL": "https://vuejs.org/api/composition-api-setup.html", "url": "https://vuejs.org/api/composition-api-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Custom Elements API is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Custom Elements API in vue-api.\n\n# Custom Elements API\n\nThis page covers the Custom Elements API in Vue, including how to define custom elements and use related features.Here's a quick rundown of what this is about:\n\n## defineCustomElement()\n\nThis method accepts the same argument as [`defineComponent`](https://vuejs.org/api/custom-elements.html#definecomponent), but instead returns a native [Custom Element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) class constructor.\n\n- **Type**\n\ntype ts\n\n```\nfunction defineCustomElement(\n    component:\n      | (ComponentOptions & CustomElementsOptions)\n      | ComponentOptions['setup'],\n    options?: CustomElementsOptions\n): {\n    new (props?: object): HTMLElement\n}\n\ninterface CustomElementsOptions {\n    styles?: string[]\n\n    // the following options are 3.5+\n    configureApp?: (app: App) => void\n    shadowRoot?: boolean\n    nonce?: string\n}\n```\n\n\n\n> Type is simplified for readability.\n\n- **Details**\n\nIn addition to normal component options, `defineCustomElement()` also supports a number of options that are custom-elements-specific:\n\n\n  - **`styles`**: an array of inlined CSS strings for providing CSS that should be injected into the element's shadow root.\n\n  - **`configureApp`**: a function that can be used to configure the Vue app instance for the custom element.\n\n  - **`shadowRoot`**: `boolean`, defaults to `true`. Set to `false` to render the custom element without a shadow root. This means `<style>` in custom element SFCs will no longer be encapsulated.\n\n  - **`nonce`**: `string`, if provided, will be set as the `nonce` attribute on style tags injected to the shadow root.\n\n\nNote that instead of being passed as part of the component itself, these options can also be passed via a second argument:\n\njs\n\n```\nimport Element from './MyElement.ce.vue'\n\ndefineCustomElement(Element, {\n  configureApp(app) {\n    // ...\n  }\n})\n```\n\nThe return value is a custom element constructor that can be registered using [`customElements.define()`](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define).\n\n- **Example**\n\njs\n\n```\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n    /* component options */\n})\n\n// Register the custom element.\ncustomElements.define('my-vue-element', MyVueElement)\n```\n\n- **See also**\n\n  - [Guide - Building Custom Elements with Vue](https://vuejs.org/guide/extras/web-components#building-custom-elements-with-vue)\n\n  - Also note that `defineCustomElement()` requires [special config](https://vuejs.org/guide/extras/web-components#sfc-as-custom-element) when used with Single-File Components.\n\n## useHost()\n\nA Composition API helper that returns the host element of the current Vue custom element.\n\n## useShadowRoot()\n\nA Composition API helper that returns the shadow root of the current Vue custom element.\n\n## this.$host\n\nAn Options API property that exposes the host element of the current Vue custom element.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "overview", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I definecustomelement() in vue-api?\n\nAssistant: To definecustomelement() in vue-api, here's what you do:\nThis method accepts the same argument as [`defineComponent`](https://vuejs.org/api/custom-elements.html#definecomponent), but instead returns a native [Custom Element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) class constructor.\n\n- **Type**\n\ntype ts\n\n```\nfunction defineCustomElement(\n    component:\n      | (ComponentOptions & CustomElementsOptions)\n      | ComponentOptions['setup'],\n    options?: CustomElementsOptions\n): {\n    new (props?: object): HTMLElement\n}\n\ninterface CustomElementsOptions {\n    styles?: string[]\n\n    // the following options are 3.5+\n    configureApp?: (app: App) => void\n    shadowRoot?: boolean\n    nonce?: string\n}\n```\n\n\n\n> Type is simplified for readability.\n\n- **Details**\n\nIn addition to normal component options, `defineCustomElement()` also supports a number of options that are custom-elements-specific:\n\n\n  - **`styles`**: an array of inlined CSS strings for providing CSS that should be injected into the element's shadow root.\n\n  - **`configureApp`**: a function that can be used to configure the Vue app instance for the custom element.\n\n  - **`shadowRoot`**: `boolean`, defaults to `true`. Set to `false` to render the custom element without a shadow root. This means `<style>` in custom element SFCs will no longer be encapsulated.\n\n  - **`nonce`**: `string`, if provided, will be set as the `nonce` attribute on style tags injected to the shadow root.\n\n\nNote that instead of being passed as part of the component itself, these options can also be passed via a second argument:\n\njs\n\n```\nimport Element from './MyElement.ce.vue'\n\ndefineCustomElement(Element, {\n  configureApp(app) {\n    // ...\n  }\n})\n```\n\nThe return value is a custom element constructor that can be registered using [`customElements.define()`](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define).\n\n- **Example**\n\njs\n\n```\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n    /* component options */\n})\n\n// Register the custom element.\ncustomElements.define('my-vue-element', MyVueElement)\n```\n\n- **See also**\n\n  - [Guide - Building Custom Elements with Vue](https://vuejs.org/guide/extras/web-components#building-custom-elements-with-vue)\n\n  - Also note that `defineCustomElement()` requires [special config](https://vuejs.org/guide/extras/web-components#sfc-as-custom-element) when used with Single-File Components..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usehost() in vue-api?\n\nAssistant: To usehost() in vue-api, here's what you do:\nA Composition API helper that returns the host element of the current Vue custom element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useshadowroot() in vue-api?\n\nAssistant: To useshadowroot() in vue-api, here's what you do:\nA Composition API helper that returns the shadow root of the current Vue custom element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I this.$host in vue-api?\n\nAssistant: To this.$host in vue-api, here's what you do:\nAn Options API property that exposes the host element of the current Vue custom element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Custom Elements API in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**defineCustomElement() Example**:\n\n```yaml\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n    /* component options */\n})\n\n// Register the custom element.\ncustomElements.define('my-vue-element', MyVueElement)\n```\n\nThis snippet shows you how to definecustomelement() example, which is an important aspect of custom elements api.\n\n", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "code_examples", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Custom Elements API in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `styles` to inject CSS into the shadow root for encapsulation.\n\nUtilize `configureApp` to customize the Vue app instance for your custom element.\n\nSet `shadowRoot` to false if you want to render without a shadow root, but be aware of style encapsulation issues.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/custom-elements.html", "title": "Custom Elements API", "description": "This page covers the Custom Elements API in Vue, including how to define custom elements and use related features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:14:35", "type": "best_practices", "page_metadata": {"title": "Custom Elements API | Vue.js", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:url": "https://vuejs.org/", "scrapeId": "ce462fbe-f9f8-4d7f-9581-ac88b1d993b6", "sourceURL": "https://vuejs.org/api/custom-elements.html", "url": "https://vuejs.org/api/custom-elements.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Custom Renderer API is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Custom Renderer API in vue-api.\n\n# Custom Renderer API\n\nCreates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.Here's a quick rundown of what this is about:\n\n## createRenderer()\n\nCreates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.\n\n- **Type**\n\ntypeScript\n\n```typescript\nfunction createRenderer<HostNode, HostElement>(\n    options: RendererOptions<HostNode, HostElement>\n): Renderer<HostElement>\n\ninterface Renderer<HostElement> {\n    render: RootRenderFunction<HostElement>\n    createApp: CreateAppFunction<HostElement>\n}\n\ninterface RendererOptions<HostNode, HostElement> {\n    patchProp(\n      el: HostElement,\n      key: string,\n      prevValue: any,\n      nextValue: any,\n      namespace?: ElementNamespace,\n      parentComponent?: ComponentInternalInstance | null,\n    ): void\n    insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void\n    remove(el: HostNode): void\n    createElement(\n      type: string,\n      namespace?: ElementNamespace,\n      isCustomizedBuiltIn?: string,\n      vnodeProps?: (VNodeProps & { [key: string]: any }) | null,\n    ): HostElement\n    createText(text: string): HostNode\n    createComment(text: string): HostNode\n    setText(node: HostNode, text: string): void\n    setElementText(node: HostElement, text: string): void\n    parentNode(node: HostNode): HostElement | null\n    nextSibling(node: HostNode): HostNode | null\n    querySelector?(selector: string): HostElement | null\n    setScopeId?(el: HostElement, id: string): void\n    cloneNode?(node: HostNode): HostNode\n    insertStaticContent?(\n      content: string,\n      parent: HostElement,\n      anchor: HostNode | null,\n      namespace: ElementNamespace,\n      start?: HostNode | null,\n      end?: HostNode | null,\n    ): [HostNode, HostNode]\n}\n```\n\n- **Example**\n\nJavaScript\n\n```javascript\nimport { createRenderer } from '@vue/runtime-core'\n\nconst { render, createApp } = createRenderer({\n    patchProp,\n    insert,\n    remove,\n    createElement\n    // ...\n})\n\n// `render` is the low-level API\n// `createApp` returns an app instance\nexport { render, createApp }\n\n// re-export Vue core APIs\nexport * from '@vue/runtime-core'\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/custom-renderer.html", "title": "Custom Renderer API", "description": "Creates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:15:02", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Custom Renderer API | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "2c6ae8b7-a0c4-4d22-a725-80d589c503e1", "sourceURL": "https://vuejs.org/api/custom-renderer.html", "url": "https://vuejs.org/api/custom-renderer.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I createrenderer() in vue-api?\n\nAssistant: To createrenderer() in vue-api, here's what you do:\nCreates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.\n\n- **Type**\n\ntypeScript\n\n```typescript\nfunction createRenderer<HostNode, HostElement>(\n    options: RendererOptions<HostNode, HostElement>\n): Renderer<HostElement>\n\ninterface Renderer<HostElement> {\n    render: RootRenderFunction<HostElement>\n    createApp: CreateAppFunction<HostElement>\n}\n\ninterface RendererOptions<HostNode, HostElement> {\n    patchProp(\n      el: HostElement,\n      key: string,\n      prevValue: any,\n      nextValue: any,\n      namespace?: ElementNamespace,\n      parentComponent?: ComponentInternalInstance | null,\n    ): void\n    insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void\n    remove(el: HostNode): void\n    createElement(\n      type: string,\n      namespace?: ElementNamespace,\n      isCustomizedBuiltIn?: string,\n      vnodeProps?: (VNodeProps & { [key: string]: any }) | null,\n    ): HostElement\n    createText(text: string): HostNode\n    createComment(text: string): HostNode\n    setText(node: HostNode, text: string): void\n    setElementText(node: HostElement, text: string): void\n    parentNode(node: HostNode): HostElement | null\n    nextSibling(node: HostNode): HostNode | null\n    querySelector?(selector: string): HostElement | null\n    setScopeId?(el: HostElement, id: string): void\n    cloneNode?(node: HostNode): HostNode\n    insertStaticContent?(\n      content: string,\n      parent: HostElement,\n      anchor: HostNode | null,\n      namespace: ElementNamespace,\n      start?: HostNode | null,\n      end?: HostNode | null,\n    ): [HostNode, HostNode]\n}\n```\n\n- **Example**\n\nJavaScript\n\n```javascript\nimport { createRenderer } from '@vue/runtime-core'\n\nconst { render, createApp } = createRenderer({\n    patchProp,\n    insert,\n    remove,\n    createElement\n    // ...\n})\n\n// `render` is the low-level API\n// `createApp` returns an app instance\nexport { render, createApp }\n\n// re-export Vue core APIs\nexport * from '@vue/runtime-core'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/custom-renderer.html", "title": "Custom Renderer API", "description": "Creates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:15:02", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Custom Renderer API | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "2c6ae8b7-a0c4-4d22-a725-80d589c503e1", "sourceURL": "https://vuejs.org/api/custom-renderer.html", "url": "https://vuejs.org/api/custom-renderer.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Custom Renderer API in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**createRenderer Example**:\n\n```yaml\nimport { createRenderer } from '@vue/runtime-core'\n\nconst { render, createApp } = createRenderer({\n    patchProp,\n    insert,\n    remove,\n    createElement\n    // ...\n})\n\n// `render` is the low-level API\n// `createApp` returns an app instance\nexport { render, createApp }\n\n// re-export Vue core APIs\nexport * from '@vue/runtime-core'\n```\n\nThis snippet shows you how to createrenderer example, which is an important aspect of custom renderer api.\n\n", "metadata": {"source_url": "https://vuejs.org/api/custom-renderer.html", "title": "Custom Renderer API", "description": "Creates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:15:02", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Custom Renderer API | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "2c6ae8b7-a0c4-4d22-a725-80d589c503e1", "sourceURL": "https://vuejs.org/api/custom-renderer.html", "url": "https://vuejs.org/api/custom-renderer.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Custom Renderer API in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVue's own `@vue/runtime-dom` is implemented using the same API.\n\nFor a simpler implementation, check out `@vue/runtime-test` which is a private package for Vue's own unit testing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/custom-renderer.html", "title": "Custom Renderer API", "description": "Creates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:15:02", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Custom Renderer API | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "2c6ae8b7-a0c4-4d22-a725-80d589c503e1", "sourceURL": "https://vuejs.org/api/custom-renderer.html", "url": "https://vuejs.org/api/custom-renderer.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Global API: General is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Global API: General in vue-api.\n\n# Global API: General\n\nThis page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.Here's a quick rundown of what this is about:\n\n## version\n\nExposes the current version of Vue.\n\n- **Type:** `string`\n\n- **Example**\n\n```js\nimport { version } from 'vue'\n\nconsole.log(version)\n```\n\n## nextTick()\n\nA utility for waiting for the next DOM update flush.\n\n- **Type**\n\n```ts\nfunction nextTick(callback?: () => void): Promise<void>\n```\n\n- **Details**\n\nWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.\n\n`nextTick()` can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.\n\n- **Example**\n\n```vue\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n    count.value++\n\n    // DOM not yet updated\n    console.log(document.getElementById('counter').textContent) // 0\n\n    await nextTick()\n    // DOM is now updated\n    console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n```vue\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      async increment() {\n        this.count++\n\n        // DOM not yet updated\n        console.log(document.getElementById('counter').textContent) // 0\n\n        await nextTick()\n        // DOM is now updated\n        console.log(document.getElementById('counter').textContent) // 1\n      }\n    }\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n``` \n\n- **See also** [`this.$nextTick()`](https://vuejs.org/api/component-instance#nexttick)\n\n## defineComponent()\n\nA type helper for defining a Vue component with type inference.\n\n- **Type**\n\n```ts\n// options syntax\nfunction defineComponent(\n    component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n    setup: ComponentOptions['setup'],\n    extraOptions?: ComponentOptions\n): () => any\n```\n\n> Type is simplified for readability.\n\n- **Details**\n\nThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.\n\nNote that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.\n\nYou can extract the instance type of a component (equivalent to the type of `this` in its options) from the return type of `defineComponent()` like this:\n\n```ts\nconst Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>\n```\n\n### Function Signature\n\nOnly supported in 3.3+\n\n`defineComponent()` also has an alternative signature that is meant to be used with the Composition API and [render functions or JSX](https://vuejs.org/guide/extras/render-function).\n\nInstead of passing in an options object, a function is expected instead. This function works the same as the Composition API [`setup()`](https://vuejs.org/api/composition-api-setup#composition-api-setup) function: it receives the props and the setup context. The return value should be a render function - both `h()` and JSX are supported:\n\n```js\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\nThe main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:\n\n```tsx\nconst Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)\n```\n\nIn the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for `defineProps` in SFCs) so that the runtime props declaration can be omitted.\n\n### Note on webpack Treeshaking\n\nBecause `defineComponent()` is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.\n\nTo tell webpack that this function call is safe to be tree-shaken, you can add a `/*#__PURE__*/` comment notation before the function call:\n\n```js\nexport default /*#__PURE__*/ defineComponent(/* ... */)\n```\n\nNote this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that `defineComponent()` is in fact side-effect-free without the need for manual annotations.\n\n- **See also** [Guide - Using Vue with TypeScript](https://vuejs.org/guide/typescript/overview#general-usage-notes)\n\n## defineAsyncComponent()\n\nDefine an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.\n\n- **Type**\n\n```ts\nfunction defineAsyncComponent(\n    source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n    loader: AsyncComponentLoader\n    loadingComponent?: Component\n    errorComponent?: Component\n    delay?: number\n    timeout?: number\n    suspensible?: boolean\n    onError?: (\n      error: Error,\n      retry: () => void,\n      fail: () => void,\n      attempts: number\n    ) => any\n}\n```\n\n- **See also** [Guide - Async Components](https://vuejs.org/guide/components/async)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I version in vue-api?\n\nAssistant: To version in vue-api, here's what you do:\nExposes the current version of Vue.\n\n- **Type:** `string`\n\n- **Example**\n\n```js\nimport { version } from 'vue'\n\nconsole.log(version)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I nexttick() in vue-api?\n\nAssistant: To nexttick() in vue-api, here's what you do:\nA utility for waiting for the next DOM update flush.\n\n- **Type**\n\n```ts\nfunction nextTick(callback?: () => void): Promise<void>\n```\n\n- **Details**\n\nWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.\n\n`nextTick()` can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.\n\n- **Example**\n\n```vue\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n    count.value++\n\n    // DOM not yet updated\n    console.log(document.getElementById('counter').textContent) // 0\n\n    await nextTick()\n    // DOM is now updated\n    console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n```vue\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      async increment() {\n        this.count++\n\n        // DOM not yet updated\n        console.log(document.getElementById('counter').textContent) // 0\n\n        await nextTick()\n        // DOM is now updated\n        console.log(document.getElementById('counter').textContent) // 1\n      }\n    }\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n``` \n\n- **See also** [`this.$nextTick()`](https://vuejs.org/api/component-instance#nexttick).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I definecomponent() in vue-api?\n\nAssistant: To definecomponent() in vue-api, here's what you do:\nA type helper for defining a Vue component with type inference.\n\n- **Type**\n\n```ts\n// options syntax\nfunction defineComponent(\n    component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n    setup: ComponentOptions['setup'],\n    extraOptions?: ComponentOptions\n): () => any\n```\n\n> Type is simplified for readability.\n\n- **Details**\n\nThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.\n\nNote that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.\n\nYou can extract the instance type of a component (equivalent to the type of `this` in its options) from the return type of `defineComponent()` like this:\n\n```ts\nconst Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>\n```\n\n### Function Signature\n\nOnly supported in 3.3+\n\n`defineComponent()` also has an alternative signature that is meant to be used with the Composition API and [render functions or JSX](https://vuejs.org/guide/extras/render-function).\n\nInstead of passing in an options object, a function is expected instead. This function works the same as the Composition API [`setup()`](https://vuejs.org/api/composition-api-setup#composition-api-setup) function: it receives the props and the setup context. The return value should be a render function - both `h()` and JSX are supported:\n\n```js\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\nThe main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:\n\n```tsx\nconst Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)\n```\n\nIn the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for `defineProps` in SFCs) so that the runtime props declaration can be omitted.\n\n### Note on webpack Treeshaking\n\nBecause `defineComponent()` is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.\n\nTo tell webpack that this function call is safe to be tree-shaken, you can add a `/*#__PURE__*/` comment notation before the function call:\n\n```js\nexport default /*#__PURE__*/ defineComponent(/* ... */)\n```\n\nNote this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that `defineComponent()` is in fact side-effect-free without the need for manual annotations.\n\n- **See also** [Guide - Using Vue with TypeScript](https://vuejs.org/guide/typescript/overview#general-usage-notes).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I defineasynccomponent() in vue-api?\n\nAssistant: To defineasynccomponent() in vue-api, here's what you do:\nDefine an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.\n\n- **Type**\n\n```ts\nfunction defineAsyncComponent(\n    source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n    loader: AsyncComponentLoader\n    loadingComponent?: Component\n    errorComponent?: Component\n    delay?: number\n    timeout?: number\n    suspensible?: boolean\n    onError?: (\n      error: Error,\n      retry: () => void,\n      fail: () => void,\n      attempts: number\n    ) => any\n}\n```\n\n- **See also** [Guide - Async Components](https://vuejs.org/guide/components/async).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Global API: General in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Version Example**:\n\n```yaml\nimport { version } from 'vue'\n\nconsole.log(version)\n```\n\nThis snippet shows you how to version example, which is an important aspect of global api: general.\n\n**nextTick Example (Composition API)**:\n\n```yaml\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n    count.value++\n\n    // DOM not yet updated\n    console.log(document.getElementById('counter').textContent) // 0\n\n    await nextTick()\n    // DOM is now updated\n    console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to nexttick example (composition api), which is an important aspect of global api: general.\n\n**nextTick Example (Options API)**:\n\n```yaml\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      async increment() {\n        this.count++\n\n        // DOM not yet updated\n        console.log(document.getElementById('counter').textContent) // 0\n\n        await nextTick()\n        // DOM is now updated\n        console.log(document.getElementById('counter').textContent) // 1\n      }\n    }\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to nexttick example (options api), which is an important aspect of global api: general.\n\n**defineComponent Example**:\n\n```yaml\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\nThis snippet shows you how to definecomponent example, which is an important aspect of global api: general.\n\n", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Global API: General in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `nextTick()` to ensure DOM updates are applied after state changes.\n\nWhen using `defineComponent()`, consider using the function syntax for better type inference with TypeScript.\n\nAdd `/*#__PURE__*/` before `defineComponent()` calls to help webpack with tree-shaking.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/general.html", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, component definition, and async components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:15:43", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Global API: General | Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "scrapeId": "b131d604-7bab-4206-8c8d-58e479dbe0cf", "sourceURL": "https://vuejs.org/api/general.html", "url": "https://vuejs.org/api/general.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Options: Composition is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Options: Composition in vue-api.\n\n# Options: Composition\n\nThis page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.Here's a quick rundown of what this is about:\n\n## provide\n\nProvide values that can be injected by descendant components.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    provide?: object | ((this: ComponentPublicInstance) => object)\n}\n```\n\n- **Details**\n\n`provide` and [`inject`](https://vuejs.org/api/options-composition.html#inject) are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain.\n\nThe `provide` option should be either an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use Symbols as keys in this object.\n\n- **Example**\n\nBasic usage:\n\n```js\nconst s = Symbol()\n\nexport default {\n    provide: {\n      foo: 'foo',\n      [s]: 'bar'\n    }\n}\n```\n\nUsing a function to provide per-component state:\n\n```js\nexport default {\n    data() {\n      return {\n        msg: 'foo'\n      }\n    }\n    provide() {\n      return {\n        msg: this.msg\n      }\n    }\n}\n```\n\nNote in the above example, the provided `msg` will NOT be reactive. See [Working with Reactivity](https://vuejs.org/guide/components/provide-inject#working-with-reactivity) for more details.\n\n- **See also** [Provide / Inject](https://vuejs.org/guide/components/provide-inject)\n\n## inject\n\nDeclare properties to inject into the current component by locating them from ancestor providers.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    inject?: ArrayInjectOptions | ObjectInjectOptions\n}\n\ntype ArrayInjectOptions = string[]\n\ntype ObjectInjectOptions = {\n    [key: string | symbol]:\n      | string\n      | symbol\n      | { from?: string | symbol; default?: any }\n}\n```\n\n- **Details**\n\nThe `inject` option should be either:\n\n  - An array of strings, or\n  - An object where the keys are the local binding name and the value is either:\n    - The key (string or Symbol) to search for in available injections, or\n    - An object where:\n      - The `from` property is the key (string or Symbol) to search for in available injections, and\n      - The `default` property is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.\n\nAn injected property will be `undefined` if neither a matching property nor a default value was provided.\n\nNote that injected bindings are NOT reactive. This is intentional. However, if the injected value is a reactive object, properties on that object do remain reactive. See [Working with Reactivity](https://vuejs.org/guide/components/provide-inject#working-with-reactivity) for more details.\n\n- **Example**\n\nBasic usage:\n\n```js\nexport default {\n    inject: ['foo'],\n    created() {\n      console.log(this.foo)\n    }\n}\n```\n\nUsing an injected value as the default for a prop:\n\n```js\nconst Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default() {\n          return this.foo\n        }\n      }\n    }\n}\n```\n\nUsing an injected value as data entry:\n\n```js\nconst Child = {\n    inject: ['foo'],\n    data() {\n      return {\n        bar: this.foo\n      }\n    }\n}\n```\n\nInjections can be optional with default value:\n\n```js\nconst Child = {\n    inject: {\n      foo: { default: 'foo' }\n    }\n}\n```\n\nIf it needs to be injected from a property with a different name, use `from` to denote the source property:\n\n```js\nconst Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: 'foo'\n      }\n    }\n}\n```\n\nSimilar to prop defaults, you need to use a factory function for non-primitive values:\n\n```js\nconst Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: () => [1, 2, 3]\n      }\n    }\n}\n```\n\n- **See also** [Provide / Inject](https://vuejs.org/guide/components/provide-inject)\n\n## mixins\n\nAn array of option objects to be mixed into the current component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    mixins?: ComponentOptions[]\n}\n```\n\n- **Details**\n\nThe `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains a `created` hook and the component itself also has one, both functions will be called.\n\nMixin hooks are called in the order they are provided, and called before the component's own hooks.\n\nNo Longer Recommended\n\nIn Vue 2, mixins were the primary mechanism for creating reusable chunks of component logic. While mixins continue to be supported in Vue 3, [Composable functions using Composition API](https://vuejs.org/guide/reusability/composables) is now the preferred approach for code reuse between components.\n\n- **Example**\n\n```js\nconst mixin = {\n    created() {\n      console.log(1)\n    }\n}\n\ncreateApp({\n    created() {\n      console.log(2)\n    },\n    mixins: [mixin]\n})\n\n// => 1\n// => 2\n```\n\n## extends\n\nA \"base class\" component to extend from.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    extends?: ComponentOptions\n}\n```\n\n- **Details**\n\nAllows one component to extend another, inheriting its component options.\n\nFrom an implementation perspective, `extends` is almost identical to `mixins`. The component specified by `extends` will be treated as though it were the first mixin.\n\nHowever, `extends` and `mixins` express different intents. The `mixins` option is primarily used to compose chunks of functionality, whereas `extends` is primarily concerned with inheritance.\n\nAs with `mixins`, any options (except for `setup()`) will be merged using the relevant merge strategy.\n\n- **Example**\n\n```js\nconst CompA = { ... }\n\nconst CompB = {\n    extends: CompA,\n    ...\n}\n```\n\nNot Recommended for Composition API\n\n`extends` is designed for Options API and does not handle the merging of the `setup()` hook.\n\nIn Composition API, the preferred mental model for logic reuse is \"compose\" over \"inheritance\". If you have logic from a component that needs to be reused in another one, consider extracting the relevant logic into a [Composable](https://vuejs.org/guide/reusability/composables#composables).\n\nIf you still intend to \"extend\" a component using Composition API, you can call the base component's `setup()` in the extending component's `setup()`:\n\n```js\nimport Base from './Base.js'\nexport default {\n    extends: Base,\n    setup(props, ctx) {\n      return {\n        ...Base.setup(props, ctx),\n        // local bindings\n      }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I provide in vue-api?\n\nAssistant: To provide in vue-api, here's what you do:\nProvide values that can be injected by descendant components.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    provide?: object | ((this: ComponentPublicInstance) => object)\n}\n```\n\n- **Details**\n\n`provide` and [`inject`](https://vuejs.org/api/options-composition.html#inject) are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain.\n\nThe `provide` option should be either an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use Symbols as keys in this object.\n\n- **Example**\n\nBasic usage:\n\n```js\nconst s = Symbol()\n\nexport default {\n    provide: {\n      foo: 'foo',\n      [s]: 'bar'\n    }\n}\n```\n\nUsing a function to provide per-component state:\n\n```js\nexport default {\n    data() {\n      return {\n        msg: 'foo'\n      }\n    }\n    provide() {\n      return {\n        msg: this.msg\n      }\n    }\n}\n```\n\nNote in the above example, the provided `msg` will NOT be reactive. See [Working with Reactivity](https://vuejs.org/guide/components/provide-inject#working-with-reactivity) for more details.\n\n- **See also** [Provide / Inject](https://vuejs.org/guide/components/provide-inject).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I inject in vue-api?\n\nAssistant: To inject in vue-api, here's what you do:\nDeclare properties to inject into the current component by locating them from ancestor providers.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    inject?: ArrayInjectOptions | ObjectInjectOptions\n}\n\ntype ArrayInjectOptions = string[]\n\ntype ObjectInjectOptions = {\n    [key: string | symbol]:\n      | string\n      | symbol\n      | { from?: string | symbol; default?: any }\n}\n```\n\n- **Details**\n\nThe `inject` option should be either:\n\n  - An array of strings, or\n  - An object where the keys are the local binding name and the value is either:\n    - The key (string or Symbol) to search for in available injections, or\n    - An object where:\n      - The `from` property is the key (string or Symbol) to search for in available injections, and\n      - The `default` property is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.\n\nAn injected property will be `undefined` if neither a matching property nor a default value was provided.\n\nNote that injected bindings are NOT reactive. This is intentional. However, if the injected value is a reactive object, properties on that object do remain reactive. See [Working with Reactivity](https://vuejs.org/guide/components/provide-inject#working-with-reactivity) for more details.\n\n- **Example**\n\nBasic usage:\n\n```js\nexport default {\n    inject: ['foo'],\n    created() {\n      console.log(this.foo)\n    }\n}\n```\n\nUsing an injected value as the default for a prop:\n\n```js\nconst Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default() {\n          return this.foo\n        }\n      }\n    }\n}\n```\n\nUsing an injected value as data entry:\n\n```js\nconst Child = {\n    inject: ['foo'],\n    data() {\n      return {\n        bar: this.foo\n      }\n    }\n}\n```\n\nInjections can be optional with default value:\n\n```js\nconst Child = {\n    inject: {\n      foo: { default: 'foo' }\n    }\n}\n```\n\nIf it needs to be injected from a property with a different name, use `from` to denote the source property:\n\n```js\nconst Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: 'foo'\n      }\n    }\n}\n```\n\nSimilar to prop defaults, you need to use a factory function for non-primitive values:\n\n```js\nconst Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: () => [1, 2, 3]\n      }\n    }\n}\n```\n\n- **See also** [Provide / Inject](https://vuejs.org/guide/components/provide-inject).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I mixins in vue-api?\n\nAssistant: To mixins in vue-api, here's what you do:\nAn array of option objects to be mixed into the current component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    mixins?: ComponentOptions[]\n}\n```\n\n- **Details**\n\nThe `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains a `created` hook and the component itself also has one, both functions will be called.\n\nMixin hooks are called in the order they are provided, and called before the component's own hooks.\n\nNo Longer Recommended\n\nIn Vue 2, mixins were the primary mechanism for creating reusable chunks of component logic. While mixins continue to be supported in Vue 3, [Composable functions using Composition API](https://vuejs.org/guide/reusability/composables) is now the preferred approach for code reuse between components.\n\n- **Example**\n\n```js\nconst mixin = {\n    created() {\n      console.log(1)\n    }\n}\n\ncreateApp({\n    created() {\n      console.log(2)\n    },\n    mixins: [mixin]\n})\n\n// => 1\n// => 2\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I extends in vue-api?\n\nAssistant: To extends in vue-api, here's what you do:\nA \"base class\" component to extend from.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    extends?: ComponentOptions\n}\n```\n\n- **Details**\n\nAllows one component to extend another, inheriting its component options.\n\nFrom an implementation perspective, `extends` is almost identical to `mixins`. The component specified by `extends` will be treated as though it were the first mixin.\n\nHowever, `extends` and `mixins` express different intents. The `mixins` option is primarily used to compose chunks of functionality, whereas `extends` is primarily concerned with inheritance.\n\nAs with `mixins`, any options (except for `setup()`) will be merged using the relevant merge strategy.\n\n- **Example**\n\n```js\nconst CompA = { ... }\n\nconst CompB = {\n    extends: CompA,\n    ...\n}\n```\n\nNot Recommended for Composition API\n\n`extends` is designed for Options API and does not handle the merging of the `setup()` hook.\n\nIn Composition API, the preferred mental model for logic reuse is \"compose\" over \"inheritance\". If you have logic from a component that needs to be reused in another one, consider extracting the relevant logic into a [Composable](https://vuejs.org/guide/reusability/composables#composables).\n\nIf you still intend to \"extend\" a component using Composition API, you can call the base component's `setup()` in the extending component's `setup()`:\n\n```js\nimport Base from './Base.js'\nexport default {\n    extends: Base,\n    setup(props, ctx) {\n      return {\n        ...Base.setup(props, ctx),\n        // local bindings\n      }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Options: Composition in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic usage of provide**:\n\n```yaml\nconst s = Symbol()\n\nexport default {\n    provide: {\n      foo: 'foo',\n      [s]: 'bar'\n    }\n}\n```\n\nThis snippet shows you how to basic usage of provide, which is an important aspect of options: composition.\n\n**Using a function to provide per-component state**:\n\n```yaml\nexport default {\n    data() {\n      return {\n        msg: 'foo'\n      }\n    }\n    provide() {\n      return {\n        msg: this.msg\n      }\n    }\n}\n```\n\nThis snippet shows you how to using a function to provide per-component state, which is an important aspect of options: composition.\n\n**Basic usage of inject**:\n\n```yaml\nexport default {\n    inject: ['foo'],\n    created() {\n      console.log(this.foo)\n    }\n}\n```\n\nThis snippet shows you how to basic usage of inject, which is an important aspect of options: composition.\n\n**Using an injected value as the default for a prop**:\n\n```yaml\nconst Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default() {\n          return this.foo\n        }\n      }\n    }\n}\n```\n\nThis snippet shows you how to using an injected value as the default for a prop, which is an important aspect of options: composition.\n\n**Using an injected value as data entry**:\n\n```yaml\nconst Child = {\n    inject: ['foo'],\n    data() {\n      return {\n        bar: this.foo\n      }\n    }\n}\n```\n\nThis snippet shows you how to using an injected value as data entry, which is an important aspect of options: composition.\n\n**Injections can be optional with default value**:\n\n```yaml\nconst Child = {\n    inject: {\n      foo: { default: 'foo' }\n    }\n}\n```\n\nThis snippet shows you how to injections can be optional with default value, which is an important aspect of options: composition.\n\n**If it needs to be injected from a property with a different name**:\n\n```yaml\nconst Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: 'foo'\n      }\n    }\n}\n```\n\nThis snippet shows you how to if it needs to be injected from a property with a different name, which is an important aspect of options: composition.\n\n**Using a factory function for non-primitive values**:\n\n```yaml\nconst Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: () => [1, 2, 3]\n      }\n    }\n}\n```\n\nThis snippet shows you how to using a factory function for non-primitive values, which is an important aspect of options: composition.\n\n**Example of mixins**:\n\n```yaml\nconst mixin = {\n    created() {\n      console.log(1)\n    }\n}\n\ncreateApp({\n    created() {\n      console.log(2)\n    },\n    mixins: [mixin]\n})\n\n// => 1\n// => 2\n\n```\n\nThis snippet shows you how to example of mixins, which is an important aspect of options: composition.\n\n**Example of extends**:\n\n```yaml\nconst CompA = { ... }\n\nconst CompB = {\n    extends: CompA,\n    ...\n}\n```\n\nThis snippet shows you how to example of extends, which is an important aspect of options: composition.\n\n", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Options: Composition in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn Vue 2, mixins were the primary mechanism for creating reusable chunks of component logic. While mixins continue to be supported in Vue 3, Composable functions using Composition API is now the preferred approach for code reuse between components.\n\nIf you have logic from a component that needs to be reused in another one, consider extracting the relevant logic into a Composable.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/options-composition.html", "title": "Options: Composition", "description": "This page covers the options available in Vue.js for component composition, including provide, inject, mixins, and extends.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:16:32", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Options: Composition | Vue.js", "twitter:card": "summary", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "a73fdb07-73ba-4aec-9458-8500ab95b837", "sourceURL": "https://vuejs.org/api/options-composition.html", "url": "https://vuejs.org/api/options-composition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Options: Lifecycle is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Options: Lifecycle in vue-api.\n\n# Options: Lifecycle\n\nThis page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.Here's a quick rundown of what this is about:\n\n## beforeCreate\n\nCalled when the instance is initialized.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeCreate?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nCalled immediately when the instance is initialized and props are resolved.\n\nThen the props will be defined as reactive properties and the state such as `data()` or `computed` will be set up.\n\nNote that the `setup()` hook of Composition API is called before any Options API hooks, even `beforeCreate()`.\n\n## created\n\nCalled after the instance has finished processing all state-related options.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    created?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nWhen this hook is called, the following have been set up: reactive data, computed properties, methods, and watchers. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n## beforeMount\n\nCalled right before the component is to be mounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeMount?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n\n**This hook is not called during server-side rendering.**\n\n## mounted\n\nCalled after the component has been mounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    mounted?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nA component is considered mounted after:\n\n  - All of its synchronous child components have been mounted (does not include async components or components inside `<Suspense>` trees).\n\n  - Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.\n\nThis hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in a [server-rendered application](https://vuejs.org/guide/scaling-up/ssr).\n\n**This hook is not called during server-side rendering.**\n\n## beforeUpdate\n\nCalled right before the component is about to update its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeUpdate?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n\n**This hook is not called during server-side rendering.**\n\n## updated\n\nCalled after the component has updated its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    updated?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nA parent component's updated hook is called after that of its child components.\n\nThis hook is called after any DOM update of the component, which can be caused by different state changes. If you need to access the updated DOM after a specific state change, use [nextTick()](https://vuejs.org/api/general#nexttick) instead.\n\n**This hook is not called during server-side rendering.**\n\nWARNING\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n\n## beforeUnmount\n\nCalled right before a component instance is to be unmounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeUnmount?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nWhen this hook is called, the component instance is still fully functional.\n\n**This hook is not called during server-side rendering.**\n\n## unmounted\n\nCalled after the component has been unmounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    unmounted?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nA component is considered unmounted after:\n\n  - All of its child components have been unmounted.\n\n  - All of its associated reactive effects (render effect and computed / watchers created during `setup()`) have been stopped.\n\nUse this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n\n**This hook is not called during server-side rendering.**\n\n## errorCaptured\n\nCalled when an error propagating from a descendant component has been captured.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    errorCaptured?(\n      this: ComponentPublicInstance,\n      err: unknown,\n      instance: ComponentPublicInstance | null,\n      info: string\n    ): boolean | void\n}\n```\n\n- **Details**\n\nErrors can be captured from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\nYou can modify component state in `errorCaptured()` to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n\nThe hook can return `false` to stop the error from propagating further. See error propagation details below.\n\n**Error Propagation Rules**\n\n  - By default, all errors are still sent to the application-level [`app.config.errorHandler`](https://vuejs.org/api/application#app-config-errorhandler) if it is defined, so that these errors can still be reported to an analytics service in a single place.\n\n  - If multiple `errorCaptured` hooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.\n\n  - If the `errorCaptured` hook itself throws an error, both this error and the original captured error are sent to `app.config.errorHandler`.\n\n  - An `errorCaptured` hook can return `false` to prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additional `errorCaptured` hooks or `app.config.errorHandler` from being invoked for this error.\n\n**Error Capturing Caveats**\n\n  - In components with async `setup()` function (with top-level `await`) Vue **will always** try to render component template, even if `setup()` throwed error. This will likely cause more errors because during render component's template might try to access non-existing properties of failed `setup()` context. When capturing errors in such components, be ready to handle errors from both failed async `setup()` (they will always come first) and failed render process.\n\n  - Replacing errored child component in parent component deep inside `<Suspense>` will cause hydration mismatches in SSR. Instead, try to separate logic that can possibly throw from child `setup()` into separate function and execute it in the parent component's `setup()`, where you can safely `try/catch` the execution process and make replacement if needed before rendering the actual child component.\n\n## renderTracked\n\nCalled when a reactive dependency has been tracked by the component's render effect.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    renderTracked?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    key: any\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## renderTriggered\n\nCalled when a reactive dependency triggers the component's render effect to be re-run.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    renderTriggered?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n    key: any\n    newValue?: any\n    oldValue?: any\n    oldTarget?: Map<any, any> | Set<any>\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## activated\n\nCalled after the component instance is inserted into the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    activated?(this: ComponentPublicInstance): void\n}\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance)\n\n## deactivated\n\nCalled after the component instance is removed from the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    deactivated?(this: ComponentPublicInstance): void\n}\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance)\n\n## serverPrefetch\n\nAsync function to be resolved before the component instance is to be rendered on the server.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    serverPrefetch?(this: ComponentPublicInstance): Promise<any>\n}\n```\n\n- **Details**\n\nIf the hook returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n\nThis hook is only called during server-side rendering can be used to perform server-only data fetching.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return {\n        data: null\n      }\n    },\n    async serverPrefetch() {\n      // component is rendered as part of the initial request\n      // pre-fetch data on server as it is faster than on the client\n      this.data = await fetchOnServer(/* ... */)\n    },\n    async mounted() {\n      if (!this.data) {\n        // if data is null on mount, it means the component\n        // is dynamically rendered on the client. Perform a\n        // client-side fetch instead.\n        this.data = await fetchOnClient(/* ... */)\n      }\n    }\n}\n```\n\n- **See also** [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I beforecreate in vue-api?\n\nAssistant: To beforecreate in vue-api, here's what you do:\nCalled when the instance is initialized.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeCreate?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nCalled immediately when the instance is initialized and props are resolved.\n\nThen the props will be defined as reactive properties and the state such as `data()` or `computed` will be set up.\n\nNote that the `setup()` hook of Composition API is called before any Options API hooks, even `beforeCreate()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I created in vue-api?\n\nAssistant: To created in vue-api, here's what you do:\nCalled after the instance has finished processing all state-related options.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    created?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nWhen this hook is called, the following have been set up: reactive data, computed properties, methods, and watchers. However, the mounting phase has not been started, and the `$el` property will not be available yet..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I beforemount in vue-api?\n\nAssistant: To beforemount in vue-api, here's what you do:\nCalled right before the component is to be mounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeMount?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I mounted in vue-api?\n\nAssistant: To mounted in vue-api, here's what you do:\nCalled after the component has been mounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    mounted?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nA component is considered mounted after:\n\n  - All of its synchronous child components have been mounted (does not include async components or components inside `<Suspense>` trees).\n\n  - Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.\n\nThis hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in a [server-rendered application](https://vuejs.org/guide/scaling-up/ssr).\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I beforeupdate in vue-api?\n\nAssistant: To beforeupdate in vue-api, here's what you do:\nCalled right before the component is about to update its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeUpdate?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I updated in vue-api?\n\nAssistant: To updated in vue-api, here's what you do:\nCalled after the component has updated its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    updated?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nA parent component's updated hook is called after that of its child components.\n\nThis hook is called after any DOM update of the component, which can be caused by different state changes. If you need to access the updated DOM after a specific state change, use [nextTick()](https://vuejs.org/api/general#nexttick) instead.\n\n**This hook is not called during server-side rendering.**\n\nWARNING\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I beforeunmount in vue-api?\n\nAssistant: To beforeunmount in vue-api, here's what you do:\nCalled right before a component instance is to be unmounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    beforeUnmount?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nWhen this hook is called, the component instance is still fully functional.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I unmounted in vue-api?\n\nAssistant: To unmounted in vue-api, here's what you do:\nCalled after the component has been unmounted.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    unmounted?(this: ComponentPublicInstance): void\n}\n```\n\n- **Details**\n\nA component is considered unmounted after:\n\n  - All of its child components have been unmounted.\n\n  - All of its associated reactive effects (render effect and computed / watchers created during `setup()`) have been stopped.\n\nUse this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I errorcaptured in vue-api?\n\nAssistant: To errorcaptured in vue-api, here's what you do:\nCalled when an error propagating from a descendant component has been captured.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    errorCaptured?(\n      this: ComponentPublicInstance,\n      err: unknown,\n      instance: ComponentPublicInstance | null,\n      info: string\n    ): boolean | void\n}\n```\n\n- **Details**\n\nErrors can be captured from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\nYou can modify component state in `errorCaptured()` to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n\nThe hook can return `false` to stop the error from propagating further. See error propagation details below.\n\n**Error Propagation Rules**\n\n  - By default, all errors are still sent to the application-level [`app.config.errorHandler`](https://vuejs.org/api/application#app-config-errorhandler) if it is defined, so that these errors can still be reported to an analytics service in a single place.\n\n  - If multiple `errorCaptured` hooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.\n\n  - If the `errorCaptured` hook itself throws an error, both this error and the original captured error are sent to `app.config.errorHandler`.\n\n  - An `errorCaptured` hook can return `false` to prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additional `errorCaptured` hooks or `app.config.errorHandler` from being invoked for this error.\n\n**Error Capturing Caveats**\n\n  - In components with async `setup()` function (with top-level `await`) Vue **will always** try to render component template, even if `setup()` throwed error. This will likely cause more errors because during render component's template might try to access non-existing properties of failed `setup()` context. When capturing errors in such components, be ready to handle errors from both failed async `setup()` (they will always come first) and failed render process.\n\n  - Replacing errored child component in parent component deep inside `<Suspense>` will cause hydration mismatches in SSR. Instead, try to separate logic that can possibly throw from child `setup()` into separate function and execute it in the parent component's `setup()`, where you can safely `try/catch` the execution process and make replacement if needed before rendering the actual child component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rendertracked in vue-api?\n\nAssistant: To rendertracked in vue-api, here's what you do:\nCalled when a reactive dependency has been tracked by the component's render effect.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    renderTracked?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    key: any\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rendertriggered in vue-api?\n\nAssistant: To rendertriggered in vue-api, here's what you do:\nCalled when a reactive dependency triggers the component's render effect to be re-run.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    renderTriggered?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n    key: any\n    newValue?: any\n    oldValue?: any\n    oldTarget?: Map<any, any> | Set<any>\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I activated in vue-api?\n\nAssistant: To activated in vue-api, here's what you do:\nCalled after the component instance is inserted into the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    activated?(this: ComponentPublicInstance): void\n}\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I deactivated in vue-api?\n\nAssistant: To deactivated in vue-api, here's what you do:\nCalled after the component instance is removed from the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    deactivated?(this: ComponentPublicInstance): void\n}\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I serverprefetch in vue-api?\n\nAssistant: To serverprefetch in vue-api, here's what you do:\nAsync function to be resolved before the component instance is to be rendered on the server.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    serverPrefetch?(this: ComponentPublicInstance): Promise<any>\n}\n```\n\n- **Details**\n\nIf the hook returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n\nThis hook is only called during server-side rendering can be used to perform server-only data fetching.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return {\n        data: null\n      }\n    },\n    async serverPrefetch() {\n      // component is rendered as part of the initial request\n      // pre-fetch data on server as it is faster than on the client\n      this.data = await fetchOnServer(/* ... */)\n    },\n    async mounted() {\n      if (!this.data) {\n        // if data is null on mount, it means the component\n        // is dynamically rendered on the client. Perform a\n        // client-side fetch instead.\n        this.data = await fetchOnClient(/* ... */)\n      }\n    }\n}\n```\n\n- **See also** [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Options: Lifecycle in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**serverPrefetch Example**:\n\n```yaml\n```js\nexport default {\n    data() {\n      return {\n        data: null\n      }\n    },\n    async serverPrefetch() {\n      // component is rendered as part of the initial request\n      // pre-fetch data on server as it is faster than on the client\n      this.data = await fetchOnServer(/* ... */)\n    },\n    async mounted() {\n      if (!this.data) {\n        // if data is null on mount, it means the component\n        // is dynamically rendered on the client. Perform a\n        // client-side fetch instead.\n        this.data = await fetchOnClient(/* ... */)\n      }\n    }\n}\n```\n```\n\nThis snippet shows you how to serverprefetch example, which is an important aspect of options: lifecycle.\n\n", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "code_examples", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Options: Lifecycle in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/options-lifecycle.html", "title": "Options: Lifecycle", "description": "This page covers the lifecycle hooks available in Vue.js, detailing when each hook is called and its purpose.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:17:29", "type": "best_practices", "page_metadata": {"twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Options: Lifecycle | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "8093dc56-19b1-43c4-9a3b-021170424ac5", "sourceURL": "https://vuejs.org/api/options-lifecycle.html", "url": "https://vuejs.org/api/options-lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Options: Misc is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Options: Misc in vue-api.\n\n# Options: Misc\n\nThis page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.Here's a quick rundown of what this is about:\n\n## name\n\nExplicitly declare a display name for the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    name?: string\n}\n```\n\n- **Details**\n\nThe name of a component is used for the following:\n\n  - Recursive self-reference in the component's own template\n  - Display in Vue DevTools' component inspection tree\n  - Display in warning component traces\n\nWhen you use Single-File Components, the component already infers its own name from the filename. For example, a file named `MyComponent.vue` will have the inferred display name \"MyComponent\".\n\nAnother case is that when a component is registered globally with [`app.component`](https://vuejs.org/api/application#app-component), the global ID is automatically set as its name.\n\nThe `name` option allows you to override the inferred name, or to explicitly provide a name when no name can be inferred (e.g. when not using build tools, or an inlined non-SFC component).\n\nThere is one case where `name` is explicitly necessary: when matching against cacheable components in [`<KeepAlive>`](https://vuejs.org/guide/built-ins/keep-alive) via its `include / exclude` props.\n\nTIP\n\nSince version 3.2.34, a single-file component using `<script setup>` will automatically infer its `name` option based on the filename, removing the need to manually declare the name even when used with `<KeepAlive>`.\n\n## inheritAttrs\n\nControls whether the default component attribute fallthrough behavior should be enabled.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    inheritAttrs?: boolean // default: true\n}\n```\n\n- **Details**\n\nBy default, parent scope attribute bindings that are not recognized as props will \"fallthrough\". This means that when we have a single-root component, these bindings will be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting `inheritAttrs` to `false`, this default behavior can be disabled. The attributes are available via the `$attrs` instance property and can be explicitly bound to a non-root element using `v-bind`.\n\n- **Example**\n\n```vue\n<script>\nexport default {\n    inheritAttrs: false,\n    props: ['label', 'value'],\n    emits: ['input']\n}\n</script>\n\n<template>\n    <label>\n      {{ label }}\n      <input\n        v-bind=\"$attrs\"\n        v-bind:value=\"value\"\n        v-on:input=\"$emit('input', $event.target.value)\"\n      />\n    </label>\n</template>\n```\n\nWhen declaring this option in a component that uses `<script setup>`, you can use the [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) macro:\n\n```vue\n<script setup>\ndefineProps(['label', 'value'])\ndefineEmits(['input'])\ndefineOptions({\n    inheritAttrs: false\n})\n</script>\n\n<template>\n    <label>\n      {{ label }}\n      <input\n        v-bind=\"$attrs\"\n        v-bind:value=\"value\"\n        v-on:input=\"$emit('input', $event.target.value)\"\n      />\n    </label>\n</template>\n```\n\n- **See also**\n\n  - [Fallthrough Attributes](https://vuejs.org/guide/components/attrs)\n  - [Using `inheritAttrs` in normal `<script>`](https://vuejs.org/api/sfc-script-setup#usage-alongside-normal-script)\n\n## components\n\nAn object that registers components to be made available to the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    components?: { [key: string]: Component }\n}\n```\n\n- **Example**\n\n```js\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n    components: {\n      // shorthand\n      Foo,\n      // register under a different name\n      RenamedBar: Bar\n    }\n}\n```\n\n- **See also** [Component Registration](https://vuejs.org/guide/components/registration)\n\n## directives\n\nAn object that registers directives to be made available to the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    directives?: { [key: string]: Directive }\n}\n```\n\n- **Example**\n\n```js\nexport default {\n    directives: {\n      // enables v-focus in template\n      focus: {\n        mounted(el) {\n          el.focus()\n        }\n      }\n    }\n}\n```\n\n```template\n<input v-focus>\n```\n\n- **See also** [Custom Directives](https://vuejs.org/guide/reusability/custom-directives)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/options-misc.html", "title": "Options: Misc", "description": "This page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:17:59", "type": "overview", "page_metadata": {"ogUrl": "https://vuejs.org/", "title": "Options: Misc | Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "scrapeId": "7d2610b8-7cc0-45cc-8d8d-cb0f80066c90", "sourceURL": "https://vuejs.org/api/options-misc.html", "url": "https://vuejs.org/api/options-misc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I name in vue-api?\n\nAssistant: To name in vue-api, here's what you do:\nExplicitly declare a display name for the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    name?: string\n}\n```\n\n- **Details**\n\nThe name of a component is used for the following:\n\n  - Recursive self-reference in the component's own template\n  - Display in Vue DevTools' component inspection tree\n  - Display in warning component traces\n\nWhen you use Single-File Components, the component already infers its own name from the filename. For example, a file named `MyComponent.vue` will have the inferred display name \"MyComponent\".\n\nAnother case is that when a component is registered globally with [`app.component`](https://vuejs.org/api/application#app-component), the global ID is automatically set as its name.\n\nThe `name` option allows you to override the inferred name, or to explicitly provide a name when no name can be inferred (e.g. when not using build tools, or an inlined non-SFC component).\n\nThere is one case where `name` is explicitly necessary: when matching against cacheable components in [`<KeepAlive>`](https://vuejs.org/guide/built-ins/keep-alive) via its `include / exclude` props.\n\nTIP\n\nSince version 3.2.34, a single-file component using `<script setup>` will automatically infer its `name` option based on the filename, removing the need to manually declare the name even when used with `<KeepAlive>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-misc.html", "title": "Options: Misc", "description": "This page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:17:59", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "title": "Options: Misc | Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "scrapeId": "7d2610b8-7cc0-45cc-8d8d-cb0f80066c90", "sourceURL": "https://vuejs.org/api/options-misc.html", "url": "https://vuejs.org/api/options-misc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I inheritattrs in vue-api?\n\nAssistant: To inheritattrs in vue-api, here's what you do:\nControls whether the default component attribute fallthrough behavior should be enabled.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    inheritAttrs?: boolean // default: true\n}\n```\n\n- **Details**\n\nBy default, parent scope attribute bindings that are not recognized as props will \"fallthrough\". This means that when we have a single-root component, these bindings will be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting `inheritAttrs` to `false`, this default behavior can be disabled. The attributes are available via the `$attrs` instance property and can be explicitly bound to a non-root element using `v-bind`.\n\n- **Example**\n\n```vue\n<script>\nexport default {\n    inheritAttrs: false,\n    props: ['label', 'value'],\n    emits: ['input']\n}\n</script>\n\n<template>\n    <label>\n      {{ label }}\n      <input\n        v-bind=\"$attrs\"\n        v-bind:value=\"value\"\n        v-on:input=\"$emit('input', $event.target.value)\"\n      />\n    </label>\n</template>\n```\n\nWhen declaring this option in a component that uses `<script setup>`, you can use the [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) macro:\n\n```vue\n<script setup>\ndefineProps(['label', 'value'])\ndefineEmits(['input'])\ndefineOptions({\n    inheritAttrs: false\n})\n</script>\n\n<template>\n    <label>\n      {{ label }}\n      <input\n        v-bind=\"$attrs\"\n        v-bind:value=\"value\"\n        v-on:input=\"$emit('input', $event.target.value)\"\n      />\n    </label>\n</template>\n```\n\n- **See also**\n\n  - [Fallthrough Attributes](https://vuejs.org/guide/components/attrs)\n  - [Using `inheritAttrs` in normal `<script>`](https://vuejs.org/api/sfc-script-setup#usage-alongside-normal-script).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-misc.html", "title": "Options: Misc", "description": "This page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:17:59", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "title": "Options: Misc | Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "scrapeId": "7d2610b8-7cc0-45cc-8d8d-cb0f80066c90", "sourceURL": "https://vuejs.org/api/options-misc.html", "url": "https://vuejs.org/api/options-misc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I components in vue-api?\n\nAssistant: To components in vue-api, here's what you do:\nAn object that registers components to be made available to the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    components?: { [key: string]: Component }\n}\n```\n\n- **Example**\n\n```js\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n    components: {\n      // shorthand\n      Foo,\n      // register under a different name\n      RenamedBar: Bar\n    }\n}\n```\n\n- **See also** [Component Registration](https://vuejs.org/guide/components/registration).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-misc.html", "title": "Options: Misc", "description": "This page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:17:59", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "title": "Options: Misc | Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "scrapeId": "7d2610b8-7cc0-45cc-8d8d-cb0f80066c90", "sourceURL": "https://vuejs.org/api/options-misc.html", "url": "https://vuejs.org/api/options-misc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I directives in vue-api?\n\nAssistant: To directives in vue-api, here's what you do:\nAn object that registers directives to be made available to the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    directives?: { [key: string]: Directive }\n}\n```\n\n- **Example**\n\n```js\nexport default {\n    directives: {\n      // enables v-focus in template\n      focus: {\n        mounted(el) {\n          el.focus()\n        }\n      }\n    }\n}\n```\n\n```template\n<input v-focus>\n```\n\n- **See also** [Custom Directives](https://vuejs.org/guide/reusability/custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-misc.html", "title": "Options: Misc", "description": "This page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:17:59", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "title": "Options: Misc | Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "scrapeId": "7d2610b8-7cc0-45cc-8d8d-cb0f80066c90", "sourceURL": "https://vuejs.org/api/options-misc.html", "url": "https://vuejs.org/api/options-misc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Options: Misc in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**name option example**:\n\n```yaml\ninterface ComponentOptions {\n    name?: string\n}\n```\n\nThis snippet shows you how to name option example, which is an important aspect of options: misc.\n\n", "metadata": {"source_url": "https://vuejs.org/api/options-misc.html", "title": "Options: Misc", "description": "This page covers various options available in Vue.js components, including how to declare component names, control attribute inheritance, register components and directives, and more.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:17:59", "type": "code_examples", "page_metadata": {"ogUrl": "https://vuejs.org/", "title": "Options: Misc | Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "scrapeId": "7d2610b8-7cc0-45cc-8d8d-cb0f80066c90", "sourceURL": "https://vuejs.org/api/options-misc.html", "url": "https://vuejs.org/api/options-misc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Options: Rendering is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Options: Rendering in vue-api.\n\n# Options: Rendering\n\nThis page covers the options available for rendering components in Vue, including template, render functions, compiler options, and slots.Here's a quick rundown of what this is about:\n\n## template\n\nA string template for the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    template?: string\n}\n```\n\n- **Details**\n\nA template provided via the `template` option will be compiled on-the-fly at runtime. It is only supported when using a build of Vue that includes the template compiler. The template compiler is **NOT** included in Vue builds that have the word `runtime` in their names, e.g. `vue.runtime.esm-bundler.js`. Consult the [dist file guide](https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use) for more details about the different builds.\n\nIf the string starts with `#` it will be used as a `querySelector` and use the selected element's `innerHTML` as the template string. This allows the source template to be authored using native `<template>` elements.\n\nIf the `render` option is also present in the same component, `template` will be ignored.\n\nIf the root component of your application doesn't have a `template` or `render` option specified, Vue will try to use the `innerHTML` of the mounted element as the template instead.\n\n\nSecurity Note\n\nOnly use template sources that you can trust. Do not use user-provided content as your template. See [Security Guide](https://vuejs.org/guide/best-practices/security#rule-no-1-never-use-non-trusted-templates) for more details.\n\n## render\n\nA function that programmatically returns the virtual DOM tree of the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    render?(this: ComponentPublicInstance) => VNodeChild\n}\n\ntype VNodeChild = VNodeChildAtom | VNodeArrayChildren\n\ntype VNodeChildAtom =\n    | VNode\n    | string\n    | number\n    | boolean\n    | null\n    | undefined\n    | void\n\ntype VNodeArrayChildren = (VNodeArrayChildren | VNodeChildAtom)[]\n```\n\n- **Details**\n\n`render` is an alternative to string templates that allows you to leverage the full programmatic power of JavaScript to declare the render output of the component.\n\nPre-compiled templates, for example those in Single-File Components, are compiled into the `render` option at build time. If both `render` and `template` are present in a component, `render` will take higher priority.\n\n- **See also**\n\n  - [Rendering Mechanism](https://vuejs.org/guide/extras/rendering-mechanism)\n  - [Render Functions](https://vuejs.org/guide/extras/render-function)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/options-rendering.html", "title": "Options: Rendering", "description": "This page covers the options available for rendering components in Vue, including template, render functions, compiler options, and slots.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:18:21", "type": "overview", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "title": "Options: Rendering | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "8c390658-b9ef-40a0-bba6-345c04c05401", "sourceURL": "https://vuejs.org/api/options-rendering.html", "url": "https://vuejs.org/api/options-rendering.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I template in vue-api?\n\nAssistant: To template in vue-api, here's what you do:\nA string template for the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    template?: string\n}\n```\n\n- **Details**\n\nA template provided via the `template` option will be compiled on-the-fly at runtime. It is only supported when using a build of Vue that includes the template compiler. The template compiler is **NOT** included in Vue builds that have the word `runtime` in their names, e.g. `vue.runtime.esm-bundler.js`. Consult the [dist file guide](https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use) for more details about the different builds.\n\nIf the string starts with `#` it will be used as a `querySelector` and use the selected element's `innerHTML` as the template string. This allows the source template to be authored using native `<template>` elements.\n\nIf the `render` option is also present in the same component, `template` will be ignored.\n\nIf the root component of your application doesn't have a `template` or `render` option specified, Vue will try to use the `innerHTML` of the mounted element as the template instead.\n\n\nSecurity Note\n\nOnly use template sources that you can trust. Do not use user-provided content as your template. See [Security Guide](https://vuejs.org/guide/best-practices/security#rule-no-1-never-use-non-trusted-templates) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-rendering.html", "title": "Options: Rendering", "description": "This page covers the options available for rendering components in Vue, including template, render functions, compiler options, and slots.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:18:21", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "title": "Options: Rendering | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "8c390658-b9ef-40a0-bba6-345c04c05401", "sourceURL": "https://vuejs.org/api/options-rendering.html", "url": "https://vuejs.org/api/options-rendering.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I render in vue-api?\n\nAssistant: To render in vue-api, here's what you do:\nA function that programmatically returns the virtual DOM tree of the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    render?(this: ComponentPublicInstance) => VNodeChild\n}\n\ntype VNodeChild = VNodeChildAtom | VNodeArrayChildren\n\ntype VNodeChildAtom =\n    | VNode\n    | string\n    | number\n    | boolean\n    | null\n    | undefined\n    | void\n\ntype VNodeArrayChildren = (VNodeArrayChildren | VNodeChildAtom)[]\n```\n\n- **Details**\n\n`render` is an alternative to string templates that allows you to leverage the full programmatic power of JavaScript to declare the render output of the component.\n\nPre-compiled templates, for example those in Single-File Components, are compiled into the `render` option at build time. If both `render` and `template` are present in a component, `render` will take higher priority.\n\n- **See also**\n\n  - [Rendering Mechanism](https://vuejs.org/guide/extras/rendering-mechanism)\n  - [Render Functions](https://vuejs.org/guide/extras/render-function).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-rendering.html", "title": "Options: Rendering", "description": "This page covers the options available for rendering components in Vue, including template, render functions, compiler options, and slots.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:18:21", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "title": "Options: Rendering | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "8c390658-b9ef-40a0-bba6-345c04c05401", "sourceURL": "https://vuejs.org/api/options-rendering.html", "url": "https://vuejs.org/api/options-rendering.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Options: Rendering in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Component Options Interface for Template**:\n\n```yaml\ninterface ComponentOptions {\n    template?: string\n}\n```\n\nThis snippet shows you how to component options interface for template, which is an important aspect of options: rendering.\n\n", "metadata": {"source_url": "https://vuejs.org/api/options-rendering.html", "title": "Options: Rendering", "description": "This page covers the options available for rendering components in Vue, including template, render functions, compiler options, and slots.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:18:21", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "title": "Options: Rendering | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "8c390658-b9ef-40a0-bba6-345c04c05401", "sourceURL": "https://vuejs.org/api/options-rendering.html", "url": "https://vuejs.org/api/options-rendering.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Options: Rendering in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOnly use template sources that you can trust. Do not use user-provided content as your template.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/options-rendering.html", "title": "Options: Rendering", "description": "This page covers the options available for rendering components in Vue, including template, render functions, compiler options, and slots.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:18:21", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "title": "Options: Rendering | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "8c390658-b9ef-40a0-bba6-345c04c05401", "sourceURL": "https://vuejs.org/api/options-rendering.html", "url": "https://vuejs.org/api/options-rendering.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Reactivity API: Advanced is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Reactivity API: Advanced in vue-api.\n\n# Reactivity API: Advanced\n\nThis page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.Here's a quick rundown of what this is about:\n\n## shallowRef()\n\nShallow version of `ref()`. Unlike `ref()`, the inner value of a shallow ref is stored and exposed as-is, and will not be made deeply reactive. Only the `.value` access is reactive. `shallowRef()` is typically used for performance optimizations of large data structures, or integration with external state management systems.\n\n## triggerRef()\n\nForce trigger effects that depend on a shallow ref. This is typically used after making deep mutations to the inner value of a shallow ref.\n\n## customRef()\n\nCreates a customized ref with explicit control over its dependency tracking and updates triggering. `customRef()` expects a factory function, which receives `track` and `trigger` functions as arguments and should return an object with `get` and `set` methods.\n\n## shallowReactive()\n\nShallow version of `reactive()`. Unlike `reactive()`, there is no deep conversion: only root-level properties are reactive for a shallow reactive object.\n\n## shallowReadonly()\n\nShallow version of `readonly()`. Unlike `readonly()`, there is no deep conversion: only root-level properties are made readonly.\n\n## toRaw()\n\nReturns the raw, original object of a Vue-created proxy. `toRaw()` can return the original object from proxies created by `reactive()`, `readonly()`, `shallowReactive()`, or `shallowReadonly()`.\n\n## markRaw()\n\nMarks an object so that it will never be converted to a proxy. Returns the object itself.\n\n## effectScope()\n\nCreates an effect scope object which can capture the reactive effects (i.e. computed and watchers) created within it so that these effects can be disposed together.\n\n## getCurrentScope()\n\nReturns the current active effect scope if there is one.\n\n## onScopeDispose()\n\nRegisters a dispose callback on the current active effect scope. The callback will be invoked when the associated effect scope is stopped.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I shallowref() in vue-api?\n\nAssistant: To shallowref() in vue-api, here's what you do:\nShallow version of `ref()`. Unlike `ref()`, the inner value of a shallow ref is stored and exposed as-is, and will not be made deeply reactive. Only the `.value` access is reactive. `shallowRef()` is typically used for performance optimizations of large data structures, or integration with external state management systems..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I triggerref() in vue-api?\n\nAssistant: To triggerref() in vue-api, here's what you do:\nForce trigger effects that depend on a shallow ref. This is typically used after making deep mutations to the inner value of a shallow ref..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I customref() in vue-api?\n\nAssistant: To customref() in vue-api, here's what you do:\nCreates a customized ref with explicit control over its dependency tracking and updates triggering. `customRef()` expects a factory function, which receives `track` and `trigger` functions as arguments and should return an object with `get` and `set` methods..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I shallowreactive() in vue-api?\n\nAssistant: To shallowreactive() in vue-api, here's what you do:\nShallow version of `reactive()`. Unlike `reactive()`, there is no deep conversion: only root-level properties are reactive for a shallow reactive object..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I shallowreadonly() in vue-api?\n\nAssistant: To shallowreadonly() in vue-api, here's what you do:\nShallow version of `readonly()`. Unlike `readonly()`, there is no deep conversion: only root-level properties are made readonly..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I toraw() in vue-api?\n\nAssistant: To toraw() in vue-api, here's what you do:\nReturns the raw, original object of a Vue-created proxy. `toRaw()` can return the original object from proxies created by `reactive()`, `readonly()`, `shallowReactive()`, or `shallowReadonly()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I markraw() in vue-api?\n\nAssistant: To markraw() in vue-api, here's what you do:\nMarks an object so that it will never be converted to a proxy. Returns the object itself..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I effectscope() in vue-api?\n\nAssistant: To effectscope() in vue-api, here's what you do:\nCreates an effect scope object which can capture the reactive effects (i.e. computed and watchers) created within it so that these effects can be disposed together..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I getcurrentscope() in vue-api?\n\nAssistant: To getcurrentscope() in vue-api, here's what you do:\nReturns the current active effect scope if there is one..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onscopedispose() in vue-api?\n\nAssistant: To onscopedispose() in vue-api, here's what you do:\nRegisters a dispose callback on the current active effect scope. The callback will be invoked when the associated effect scope is stopped..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Reactivity API: Advanced in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**shallowRef() Example**:\n\n```yaml\nconst state = shallowRef({ count: 1 })\n\n// does NOT trigger change\nstate.value.count = 2\n\n// does trigger change\nstate.value = { count: 2 }\n```\n\nThis snippet shows you how to shallowref() example, which is an important aspect of reactivity api: advanced.\n\n**triggerRef() Example**:\n\n```yaml\nconst shallow = shallowRef({\n    greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n    console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)\n```\n\nThis snippet shows you how to triggerref() example, which is an important aspect of reactivity api: advanced.\n\n", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Reactivity API: Advanced in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse with caution when using customRef, particularly when generating new object datatypes each time the getter is run.\n\nShallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug.\n\n`markRaw()` and shallow APIs such as `shallowReactive()` allow you to selectively opt-out of the default deep reactive/readonly conversion and embed raw, non-proxied objects in your state graph.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-advanced.html", "title": "Reactivity API: Advanced", "description": "This page covers advanced features of the Vue.js reactivity API, including shallowRef, triggerRef, customRef, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:21:41", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "og:type": "website", "title": "Reactivity API: Advanced | Vue.js", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "268a063c-fcba-4e6a-8b6e-8acb81b84933", "sourceURL": "https://vuejs.org/api/reactivity-advanced.html", "url": "https://vuejs.org/api/reactivity-advanced.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Reactivity API: Core is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Reactivity API: Core in vue-api.\n\n# Reactivity API: Core\n\nThis page covers the core reactivity API in Vue.js, including functions like ref(), computed(), reactive(), and more.Here's a quick rundown of what this is about:\n\n## ref()\n\nTakes an inner value and returns a reactive and mutable ref object, which has a single property `.value` that points to the inner value.\n\n- **Type**\n\n```ts\nfunction ref<T>(value: T): Ref<UnwrapRef<T>>\n\ninterface Ref<T> {\n    value: T\n}\n```\n\n- **Details**\n\nThe ref object is mutable - i.e. you can assign new values to `.value`. It is also reactive - i.e. any read operations to `.value` are tracked, and write operations will trigger associated effects.\n\nIf an object is assigned as a ref's value, the object is made deeply reactive with [reactive()](https://vuejs.org/api/reactivity-core.html#reactive). This also means if the object contains nested refs, they will be deeply unwrapped.\n\nTo avoid the deep conversion, use [`shallowRef()`](https://vuejs.org/api/reactivity-advanced#shallowref) instead.\n\n- **Example**\n\n```js\nconst count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1\n```\n\n- **See also**\n\n  - [Guide - Reactivity Fundamentals with `ref()`](https://vuejs.org/guide/essentials/reactivity-fundamentals#ref)\n  - [Guide - Typing `ref()`](https://vuejs.org/guide/typescript/composition-api#typing-ref)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-core.html", "title": "Reactivity API: Core", "description": "This page covers the core reactivity API in Vue.js, including functions like ref(), computed(), reactive(), and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:22:08", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Reactivity API: Core | Vue.js", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "scrapeId": "0d63fae2-6a91-4938-b485-ab13469dfc04", "sourceURL": "https://vuejs.org/api/reactivity-core.html", "url": "https://vuejs.org/api/reactivity-core.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I ref() in vue-api?\n\nAssistant: To ref() in vue-api, here's what you do:\nTakes an inner value and returns a reactive and mutable ref object, which has a single property `.value` that points to the inner value.\n\n- **Type**\n\n```ts\nfunction ref<T>(value: T): Ref<UnwrapRef<T>>\n\ninterface Ref<T> {\n    value: T\n}\n```\n\n- **Details**\n\nThe ref object is mutable - i.e. you can assign new values to `.value`. It is also reactive - i.e. any read operations to `.value` are tracked, and write operations will trigger associated effects.\n\nIf an object is assigned as a ref's value, the object is made deeply reactive with [reactive()](https://vuejs.org/api/reactivity-core.html#reactive). This also means if the object contains nested refs, they will be deeply unwrapped.\n\nTo avoid the deep conversion, use [`shallowRef()`](https://vuejs.org/api/reactivity-advanced#shallowref) instead.\n\n- **Example**\n\n```js\nconst count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1\n```\n\n- **See also**\n\n  - [Guide - Reactivity Fundamentals with `ref()`](https://vuejs.org/guide/essentials/reactivity-fundamentals#ref)\n  - [Guide - Typing `ref()`](https://vuejs.org/guide/typescript/composition-api#typing-ref).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-core.html", "title": "Reactivity API: Core", "description": "This page covers the core reactivity API in Vue.js, including functions like ref(), computed(), reactive(), and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:22:08", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Reactivity API: Core | Vue.js", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "scrapeId": "0d63fae2-6a91-4938-b485-ab13469dfc04", "sourceURL": "https://vuejs.org/api/reactivity-core.html", "url": "https://vuejs.org/api/reactivity-core.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Reactivity API: Core in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**ref() Example**:\n\n```yaml\nconst count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1\n```\n\nThis snippet shows you how to ref() example, which is an important aspect of reactivity api: core.\n\n**computed() Example - Readonly**:\n\n```yaml\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\n\nplusOne.value++ // error\n```\n\nThis snippet shows you how to computed() example - readonly, which is an important aspect of reactivity api: core.\n\n**computed() Example - Writable**:\n\n```yaml\nconst count = ref(1)\nconst plusOne = computed({\n    get: () => count.value + 1,\n    set: (val) => {\n      count.value = val - 1\n    }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0\n```\n\nThis snippet shows you how to computed() example - writable, which is an important aspect of reactivity api: core.\n\n**watchEffect() Example**:\n\n```yaml\nconst count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> logs 0\n\ncount.value++\n// -> logs 1\n```\n\nThis snippet shows you how to watcheffect() example, which is an important aspect of reactivity api: core.\n\n", "metadata": {"source_url": "https://vuejs.org/api/reactivity-core.html", "title": "Reactivity API: Core", "description": "This page covers the core reactivity API in Vue.js, including functions like ref(), computed(), reactive(), and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:22:08", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Reactivity API: Core | Vue.js", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "scrapeId": "0d63fae2-6a91-4938-b485-ab13469dfc04", "sourceURL": "https://vuejs.org/api/reactivity-core.html", "url": "https://vuejs.org/api/reactivity-core.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Reactivity API: Core in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `ref()` for primitive values and mutable objects.\n\nUse `computed()` for derived state that depends on other reactive state.\n\nUse `reactive()` for creating reactive objects.\n\nUse `watch()` for side effects based on reactive state changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-core.html", "title": "Reactivity API: Core", "description": "This page covers the core reactivity API in Vue.js, including functions like ref(), computed(), reactive(), and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:22:08", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Reactivity API: Core | Vue.js", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "scrapeId": "0d63fae2-6a91-4938-b485-ab13469dfc04", "sourceURL": "https://vuejs.org/api/reactivity-core.html", "url": "https://vuejs.org/api/reactivity-core.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Reactivity API: Utilities is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Reactivity API: Utilities in vue-api.\n\n# Reactivity API: Utilities\n\nThis page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.Here's a quick rundown of what this is about:\n\n## isRef()\n\nChecks if a value is a ref object.\n\n- **Type**\n\nt\n```\nfunction isRef<T>(r: Ref<T> | unknown): r is Ref<T>\n```\n\nNote the return type is a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates), which means `isRef` can be used as a type guard:\n\nt\n```\nlet foo: unknown\nif (isRef(foo)) {\n    // foo's type is narrowed to Ref<unknown>\n    foo.value\n}\n```\n\n## unref()\n\nReturns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function for `val = isRef(val) ? val.value : val`.\n\n- **Type**\n\nt\n```\nfunction unref<T>(ref: T | Ref<T>): T\n```\n\n- **Example**\n\nt\n```\nfunction useFoo(x: number | Ref<number>) {\n    const unwrapped = unref(x)\n    // unwrapped is guaranteed to be number now\n}\n```\n\n## toRef()\n\nCan be used to normalize values / refs / getters into refs (3.3+).\n\nCan also be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa.\n\n- **Type**\n\nt\n```ts\n// normalization signature (3.3+)\nfunction toRef<T>(\n    value: T\n): T extends () => infer R\n    ? Readonly<Ref<R>>\n    : T extends Ref\n    ? T\n    : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n    object: T,\n    key: K,\n    defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\nNormalization signature (3.3+):\n\n```js\n// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)\n```\n\nObject property signature:\n\n```js\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3\n```\n\nNote this is different from:\n\n```js\nconst fooRef = ref(state.foo)\n```\n\nThe above ref is **not** synced with `state.foo`, because the `ref()` receives a plain number value.\n\n`toRef()` is useful when you want to pass the ref of a prop to a composable function:\n\n```vue\n<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>\n```\n\nWhen `toRef` is used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider using [`computed`](https://vuejs.org/api/reactivity-core#computed) with `get` and `set` instead. See the guide to [using `v-model` with components](https://vuejs.org/guide/components/v-model) for more information.\n\nWhen using the object property signature, `toRef()` will return a usable ref even if the source property doesn't currently exist. This makes it possible to work with optional properties, which wouldn't be picked up by [`toRefs`](https://vuejs.org/api/reactivity-utilities.html#torefs).\n\n## toValue()\n\n- Only supported in 3.3+\n\nNormalizes values / refs / getters to values. This is similar to [unref()](https://vuejs.org/api/reactivity-utilities.html#unref), except that it also normalizes getters. If the argument is a getter, it will be invoked and its return value will be returned.\n\nThis can be used in [Composables](https://vuejs.org/guide/reusability/composables) to normalize an argument that can be either a value, a ref, or a getter.\n\n- **Type**\n\nt\n```\nfunction toValue<T>(source: T | Ref<T> | (() => T)): T\n```\n\n- **Example**\n\n```js\ntoValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1\n```\n\nNormalizing arguments in composables:\n\nt\n```ts\nimport type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n    watch(() => toValue(id), id => {\n      // react to id changes\n    })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)\n```\n\n## toRefs()\n\nConverts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created using [`toRef()`](https://vuejs.org/api/reactivity-utilities.html#toref).\n\n- **Type**\n\nt\n```\nfunction toRefs<T extends object>(\n    object: T\n): {\n    [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\n```js\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n    foo: Ref<number>,\n    bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3\n```\n\n`toRefs` is useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:\n\n```js\nfunction useFeatureX() {\n    const state = reactive({\n      foo: 1,\n      bar: 2\n    })\n\n    // ...logic operating on state\n\n    // convert to refs when returning\n    return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()\n```\n\n`toRefs` will only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, use [`toRef`](https://vuejs.org/api/reactivity-utilities.html#toref) instead.\n\n## isProxy()\n\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive), [`readonly()`](https://vuejs.org/api/reactivity-core#readonly), [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive) or [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly).\n\n- **Type**\n\nt\n```\nfunction isProxy(value: any): boolean\n```\n\n## isReactive()\n\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) or [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive).\n\n- **Type**\n\nt\n```\nfunction isReactive(value: unknown): boolean\n```\n\n## isReadonly()\n\nChecks whether the passed value is a readonly object. The properties of a readonly object can change, but they can't be assigned directly via the passed object.\n\nThe proxies created by [`readonly()`](https://vuejs.org/api/reactivity-core#readonly) and [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly) are both considered readonly, as is a [`computed()`](https://vuejs.org/api/reactivity-core#computed) ref without a `set` function.\n\n- **Type**\n\nt\n```\nfunction isReadonly(value: unknown): boolean\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isref() in vue-api?\n\nAssistant: To isref() in vue-api, here's what you do:\nChecks if a value is a ref object.\n\n- **Type**\n\nt\n```\nfunction isRef<T>(r: Ref<T> | unknown): r is Ref<T>\n```\n\nNote the return type is a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates), which means `isRef` can be used as a type guard:\n\nt\n```\nlet foo: unknown\nif (isRef(foo)) {\n    // foo's type is narrowed to Ref<unknown>\n    foo.value\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I unref() in vue-api?\n\nAssistant: To unref() in vue-api, here's what you do:\nReturns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function for `val = isRef(val) ? val.value : val`.\n\n- **Type**\n\nt\n```\nfunction unref<T>(ref: T | Ref<T>): T\n```\n\n- **Example**\n\nt\n```\nfunction useFoo(x: number | Ref<number>) {\n    const unwrapped = unref(x)\n    // unwrapped is guaranteed to be number now\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I toref() in vue-api?\n\nAssistant: To toref() in vue-api, here's what you do:\nCan be used to normalize values / refs / getters into refs (3.3+).\n\nCan also be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa.\n\n- **Type**\n\nt\n```ts\n// normalization signature (3.3+)\nfunction toRef<T>(\n    value: T\n): T extends () => infer R\n    ? Readonly<Ref<R>>\n    : T extends Ref\n    ? T\n    : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n    object: T,\n    key: K,\n    defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\nNormalization signature (3.3+):\n\n```js\n// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)\n```\n\nObject property signature:\n\n```js\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3\n```\n\nNote this is different from:\n\n```js\nconst fooRef = ref(state.foo)\n```\n\nThe above ref is **not** synced with `state.foo`, because the `ref()` receives a plain number value.\n\n`toRef()` is useful when you want to pass the ref of a prop to a composable function:\n\n```vue\n<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>\n```\n\nWhen `toRef` is used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider using [`computed`](https://vuejs.org/api/reactivity-core#computed) with `get` and `set` instead. See the guide to [using `v-model` with components](https://vuejs.org/guide/components/v-model) for more information.\n\nWhen using the object property signature, `toRef()` will return a usable ref even if the source property doesn't currently exist. This makes it possible to work with optional properties, which wouldn't be picked up by [`toRefs`](https://vuejs.org/api/reactivity-utilities.html#torefs)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I tovalue() in vue-api?\n\nAssistant: To tovalue() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nNormalizes values / refs / getters to values. This is similar to [unref()](https://vuejs.org/api/reactivity-utilities.html#unref), except that it also normalizes getters. If the argument is a getter, it will be invoked and its return value will be returned.\n\nThis can be used in [Composables](https://vuejs.org/guide/reusability/composables) to normalize an argument that can be either a value, a ref, or a getter.\n\n- **Type**\n\nt\n```\nfunction toValue<T>(source: T | Ref<T> | (() => T)): T\n```\n\n- **Example**\n\n```js\ntoValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1\n```\n\nNormalizing arguments in composables:\n\nt\n```ts\nimport type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n    watch(() => toValue(id), id => {\n      // react to id changes\n    })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I torefs() in vue-api?\n\nAssistant: To torefs() in vue-api, here's what you do:\nConverts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created using [`toRef()`](https://vuejs.org/api/reactivity-utilities.html#toref).\n\n- **Type**\n\nt\n```\nfunction toRefs<T extends object>(\n    object: T\n): {\n    [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\n```js\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n    foo: Ref<number>,\n    bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3\n```\n\n`toRefs` is useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:\n\n```js\nfunction useFeatureX() {\n    const state = reactive({\n      foo: 1,\n      bar: 2\n    })\n\n    // ...logic operating on state\n\n    // convert to refs when returning\n    return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()\n```\n\n`toRefs` will only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, use [`toRef`](https://vuejs.org/api/reactivity-utilities.html#toref) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isproxy() in vue-api?\n\nAssistant: To isproxy() in vue-api, here's what you do:\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive), [`readonly()`](https://vuejs.org/api/reactivity-core#readonly), [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive) or [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly).\n\n- **Type**\n\nt\n```\nfunction isProxy(value: any): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isreactive() in vue-api?\n\nAssistant: To isreactive() in vue-api, here's what you do:\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) or [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive).\n\n- **Type**\n\nt\n```\nfunction isReactive(value: unknown): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isreadonly() in vue-api?\n\nAssistant: To isreadonly() in vue-api, here's what you do:\nChecks whether the passed value is a readonly object. The properties of a readonly object can change, but they can't be assigned directly via the passed object.\n\nThe proxies created by [`readonly()`](https://vuejs.org/api/reactivity-core#readonly) and [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly) are both considered readonly, as is a [`computed()`](https://vuejs.org/api/reactivity-core#computed) ref without a `set` function.\n\n- **Type**\n\nt\n```\nfunction isReadonly(value: unknown): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Reactivity API: Utilities in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**isRef() Example**:\n\n```yaml\nlet foo: unknown\nif (isRef(foo)) {\n    // foo's type is narrowed to Ref<unknown>\n    foo.value\n}\n```\n\nThis snippet shows you how to isref() example, which is an important aspect of reactivity api: utilities.\n\n**unref() Example**:\n\n```yaml\nfunction useFoo(x: number | Ref<number>) {\n    const unwrapped = unref(x)\n    // unwrapped is guaranteed to be number now\n}\n```\n\nThis snippet shows you how to unref() example, which is an important aspect of reactivity api: utilities.\n\n", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Reactivity API: Utilities in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen using the object property signature, `toRef()` will return a usable ref even if the source property doesn't currently exist.\n\n`toRefs` will only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, use `toRef` instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities.html", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to work with refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:22:41", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "title": "Reactivity API: Utilities | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2dcee736-2e25-4f66-b573-fd131191f195", "sourceURL": "https://vuejs.org/api/reactivity-utilities.html", "url": "https://vuejs.org/api/reactivity-utilities.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Render Function APIs is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Render Function APIs in vue-api.\n\n# Render Function APIs\n\nThis page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.Here's a quick rundown of what this is about:\n\n## h()\n\nCreates virtual DOM nodes (vnodes).\n\n- **Type**\n\ntype ts\n\n```typescript\n// full signature\nfunction h(\n    type: string | Component,\n    props?: object | null,\n    children?: Children | Slot | Slots\n): VNode\n\n// omitting props\nfunction h(type: string | Component, children?: Children | Slot): VNode\n\ntype Children = string | number | boolean | VNode | null | Children[]\n\ntype Slot = () => Children\n\ntype Slots = { [name: string]: Slot }\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nThe first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.\n\nWhen creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.\n\nFor convenience, the props argument can be omitted when the children is not a slots object.\n\n- **Example**\n\nCreating native elements:\n\n```javascript\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nCreating components:\n\n```javascript\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n    // equivalent of some-prop=\"hello\"\n    someProp: 'hello',\n    // equivalent of @update=\"() => {}\"\n    onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n    default: () => 'default slot',\n    foo: () => h('div', 'foo'),\n    bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\n- **See also** [Guide - Render Functions - Creating VNodes](https://vuejs.org/guide/extras/render-function#creating-vnodes)\n\n## mergeProps()\n\nMerge multiple props objects with special handling for certain props.\n\n- **Type**\n\ntype ts\n\n```\nfunction mergeProps(...args: object[]): object\n```\n\n- **Details**\n\n`mergeProps()` supports merging multiple props objects with special handling for the following props:\n\n  - `class`\n  - `style`\n  - `onXxx` event listeners - multiple listeners with the same name will be merged into an array.\n\nIf you do not need the merge behavior and want simple overwrites, native object spread can be used instead.\n\n- **Example**\n\n```javascript\nimport { mergeProps } from 'vue'\n\nconst one = {\n    class: 'foo',\n    onClick: handlerA\n}\n\nconst two = {\n    class: { bar: true },\n    onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n{\n     class: 'foo bar',\n     onClick: [handlerA, handlerB]\n}\n*/\n```\n\n## cloneVNode()\n\nClones a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction cloneVNode(vnode: VNode, extraProps?: object): VNode\n```\n\n- **Details**\n\nReturns a cloned vnode, optionally with extra props to merge with the original.\n\nVnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n\nVnodes have special internal properties, so cloning them is not as simple as an object spread. `cloneVNode()` handles most of the internal logic.\n\n- **Example**\n\n```javascript\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```\n\n## isVNode()\n\nChecks if a value is a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction isVNode(value: unknown): boolean\n```\n\n## resolveComponent()\n\nFor manually resolving a registered component by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveComponent(name: string): Component | string\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the component directly.**\n\n`resolveComponent()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the component is not found, a runtime warning will be emitted, and the name string is returned.\n\n- **Example**\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    setup() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n\n      return () => {\n        return h(ButtonCounter)\n      }\n    }\n}\n```\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    render() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n      return h(ButtonCounter)\n    }\n}\n```\n\n- **See also** [Guide - Render Functions - Components](https://vuejs.org/guide/extras/render-function#components)\n\n## resolveDirective()\n\nFor manually resolving a registered directive by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveDirective(name: string): Directive | undefined\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the directive directly.**\n\n`resolveDirective()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the directive is not found, a runtime warning will be emitted, and the function returns `undefined`.\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives)\n\n## withDirectives()\n\nFor adding custom directives to vnodes.\n\n- **Type**\n\ntype ts\n\n```\nfunction withDirectives(\n    vnode: VNode,\n    directives: DirectiveArguments\n): VNode\n\n// [Directive, value, argument, modifiers]\ntype DirectiveArguments = Array<\n    | [Directive]\n    | [Directive, any]\n    | [Directive, any, string]\n    | [Directive, any, string, DirectiveModifiers]\n>\n```\n\n- **Details**\n\nWraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of `[Directive, value, argument, modifiers]`. Tailing elements of the array can be omitted if not needed.\n\n- **Example**\n\n```javascript\nimport { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n    mounted() {\n      /* ... */\n    },\n    updated() {\n      /* ... */\n    }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n    [pin, 200, 'top', { animate: true }]\n])\n```\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives)\n\n## withModifiers()\n\nFor adding built-in [`v-on` modifiers](https://vuejs.org/guide/essentials/event-handling#event-modifiers) to an event handler function.\n\n- **Type**\n\ntype ts\n\n```\nfunction withModifiers(fn: Function, modifiers: ModifierGuardsKeys[]): Function\n```\n\n- **Example**\n\n```javascript\nimport { h, withModifiers } from 'vue'\n\nconst vnode = h('button', {\n    // equivalent of v-on:click.stop.prevent\n    onClick: withModifiers(() => {\n      // ...\n    }, ['stop', 'prevent'])\n})\n```\n\n- **See also** [Guide - Render Functions - Event Modifiers](https://vuejs.org/guide/extras/render-function#event-modifiers)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I h() in vue-api?\n\nAssistant: To h() in vue-api, here's what you do:\nCreates virtual DOM nodes (vnodes).\n\n- **Type**\n\ntype ts\n\n```typescript\n// full signature\nfunction h(\n    type: string | Component,\n    props?: object | null,\n    children?: Children | Slot | Slots\n): VNode\n\n// omitting props\nfunction h(type: string | Component, children?: Children | Slot): VNode\n\ntype Children = string | number | boolean | VNode | null | Children[]\n\ntype Slot = () => Children\n\ntype Slots = { [name: string]: Slot }\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nThe first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.\n\nWhen creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.\n\nFor convenience, the props argument can be omitted when the children is not a slots object.\n\n- **Example**\n\nCreating native elements:\n\n```javascript\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nCreating components:\n\n```javascript\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n    // equivalent of some-prop=\"hello\"\n    someProp: 'hello',\n    // equivalent of @update=\"() => {}\"\n    onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n    default: () => 'default slot',\n    foo: () => h('div', 'foo'),\n    bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\n- **See also** [Guide - Render Functions - Creating VNodes](https://vuejs.org/guide/extras/render-function#creating-vnodes).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I mergeprops() in vue-api?\n\nAssistant: To mergeprops() in vue-api, here's what you do:\nMerge multiple props objects with special handling for certain props.\n\n- **Type**\n\ntype ts\n\n```\nfunction mergeProps(...args: object[]): object\n```\n\n- **Details**\n\n`mergeProps()` supports merging multiple props objects with special handling for the following props:\n\n  - `class`\n  - `style`\n  - `onXxx` event listeners - multiple listeners with the same name will be merged into an array.\n\nIf you do not need the merge behavior and want simple overwrites, native object spread can be used instead.\n\n- **Example**\n\n```javascript\nimport { mergeProps } from 'vue'\n\nconst one = {\n    class: 'foo',\n    onClick: handlerA\n}\n\nconst two = {\n    class: { bar: true },\n    onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n{\n     class: 'foo bar',\n     onClick: [handlerA, handlerB]\n}\n*/\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I clonevnode() in vue-api?\n\nAssistant: To clonevnode() in vue-api, here's what you do:\nClones a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction cloneVNode(vnode: VNode, extraProps?: object): VNode\n```\n\n- **Details**\n\nReturns a cloned vnode, optionally with extra props to merge with the original.\n\nVnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n\nVnodes have special internal properties, so cloning them is not as simple as an object spread. `cloneVNode()` handles most of the internal logic.\n\n- **Example**\n\n```javascript\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isvnode() in vue-api?\n\nAssistant: To isvnode() in vue-api, here's what you do:\nChecks if a value is a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction isVNode(value: unknown): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I resolvecomponent() in vue-api?\n\nAssistant: To resolvecomponent() in vue-api, here's what you do:\nFor manually resolving a registered component by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveComponent(name: string): Component | string\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the component directly.**\n\n`resolveComponent()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the component is not found, a runtime warning will be emitted, and the name string is returned.\n\n- **Example**\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    setup() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n\n      return () => {\n        return h(ButtonCounter)\n      }\n    }\n}\n```\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    render() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n      return h(ButtonCounter)\n    }\n}\n```\n\n- **See also** [Guide - Render Functions - Components](https://vuejs.org/guide/extras/render-function#components).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I resolvedirective() in vue-api?\n\nAssistant: To resolvedirective() in vue-api, here's what you do:\nFor manually resolving a registered directive by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveDirective(name: string): Directive | undefined\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the directive directly.**\n\n`resolveDirective()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the directive is not found, a runtime warning will be emitted, and the function returns `undefined`.\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I withdirectives() in vue-api?\n\nAssistant: To withdirectives() in vue-api, here's what you do:\nFor adding custom directives to vnodes.\n\n- **Type**\n\ntype ts\n\n```\nfunction withDirectives(\n    vnode: VNode,\n    directives: DirectiveArguments\n): VNode\n\n// [Directive, value, argument, modifiers]\ntype DirectiveArguments = Array<\n    | [Directive]\n    | [Directive, any]\n    | [Directive, any, string]\n    | [Directive, any, string, DirectiveModifiers]\n>\n```\n\n- **Details**\n\nWraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of `[Directive, value, argument, modifiers]`. Tailing elements of the array can be omitted if not needed.\n\n- **Example**\n\n```javascript\nimport { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n    mounted() {\n      /* ... */\n    },\n    updated() {\n      /* ... */\n    }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n    [pin, 200, 'top', { animate: true }]\n])\n```\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I withmodifiers() in vue-api?\n\nAssistant: To withmodifiers() in vue-api, here's what you do:\nFor adding built-in [`v-on` modifiers](https://vuejs.org/guide/essentials/event-handling#event-modifiers) to an event handler function.\n\n- **Type**\n\ntype ts\n\n```\nfunction withModifiers(fn: Function, modifiers: ModifierGuardsKeys[]): Function\n```\n\n- **Example**\n\n```javascript\nimport { h, withModifiers } from 'vue'\n\nconst vnode = h('button', {\n    // equivalent of v-on:click.stop.prevent\n    onClick: withModifiers(() => {\n      // ...\n    }, ['stop', 'prevent'])\n})\n```\n\n- **See also** [Guide - Render Functions - Event Modifiers](https://vuejs.org/guide/extras/render-function#event-modifiers).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Render Function APIs in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**h() Example - Creating Native Elements**:\n\n```yaml\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nThis snippet shows you how to h() example - creating native elements, which is an important aspect of render function apis.\n\n**h() Example - Creating Components**:\n\n```yaml\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n    // equivalent of some-prop=\"hello\"\n    someProp: 'hello',\n    // equivalent of @update=\"() => {}\"\n    onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n    default: () => 'default slot',\n    foo: () => h('div', 'foo'),\n    bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\nThis snippet shows you how to h() example - creating components, which is an important aspect of render function apis.\n\n**mergeProps() Example**:\n\n```yaml\nimport { mergeProps } from 'vue'\n\nconst one = {\n    class: 'foo',\n    onClick: handlerA\n}\n\nconst two = {\n    class: { bar: true },\n    onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n{\n     class: 'foo bar',\n     onClick: [handlerA, handlerB]\n}\n*/\n```\n\nThis snippet shows you how to mergeprops() example, which is an important aspect of render function apis.\n\n**cloneVNode() Example**:\n\n```yaml\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```\n\nThis snippet shows you how to clonevnode() example, which is an important aspect of render function apis.\n\n**resolveComponent() Example**:\n\n```yaml\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    setup() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n\n      return () => {\n        return h(ButtonCounter)\n      }\n    }\n}\n```\n\nThis snippet shows you how to resolvecomponent() example, which is an important aspect of render function apis.\n\n", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Render Function APIs in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTypes are simplified for readability.\n\nVnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/render-function.html", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:23:25", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Render Function APIs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "8bb3717a-2ca0-4dd3-ad7c-43783728732c", "sourceURL": "https://vuejs.org/api/render-function.html", "url": "https://vuejs.org/api/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what SFC CSS Features is in vue-api?\n\nAssistant: Sure, I'd be happy to explain SFC CSS Features in vue-api.\n\n# SFC CSS Features\n\nThis page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.Here's a quick rundown of what this is about:\n\n## Scoped CSS\n\nWhen a `<style>` tag has the `scoped` attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM. It comes with some caveats, but doesn't require any polyfills. It is achieved by using PostCSS to transform the following:\n\n```vue\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\nInto the following:\n\n```vue\n<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>\n```\n\n## Child Component Root Elements\n\nWith `scoped`, the parent component's styles will not leak into child components. However, a child component's root node will be affected by both the parent's scoped CSS and the child's scoped CSS. This is by design so that the parent can style the child root element for layout purposes.\n\n## Deep Selectors\n\nIf you want a selector in `scoped` styles to be \"deep\", i.e. affecting child components, you can use the `:deep()` pseudo-class:\n\n```vue\n<style scoped>\n.a :deep(.b) {\n  /* ... */\n}\n</style>\n```\n\nThe above will be compiled into:\n\n```css\n.a[data-v-f3f3eg9] .b {\n  /* ... */\n}\n``` \n\nTIP\n\nDOM content created with `v-html` are not affected by scoped styles, but you can still style them using deep selectors.\n\n## Slotted Selectors\n\nBy default, scoped styles do not affect contents rendered by `<slot/>`, as they are considered to be owned by the parent component passing them in. To explicitly target slot content, use the `:slotted` pseudo-class:\n\n```vue\n<style scoped>\n:slotted(div) {\n  color: red;\n}\n</style>\n```\n\n## Global Selectors\n\nIf you want just one rule to apply globally, you can use the `:global` pseudo-class rather than creating another `<style>` (see below):\n\n```vue\n<style scoped>\n:global(.red) {\n  color: red;\n}\n</style>\n```\n\n## Mixing Local and Global Styles\n\nYou can also include both scoped and non-scoped styles in the same component:\n\n```vue\n<style>\n/* global styles */\n</style>\n\n<style scoped>\n/* local styles */\n</style>\n```\n\n## Scoped Style Tips\n\n- **Scoped styles do not eliminate the need for classes**. Due to the way browsers render various CSS selectors, `p { color: red }` will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in `.example { color: red }`, then you virtually eliminate that performance hit.\n\n- **Be careful with descendant selectors in recursive components!** For a CSS rule with the selector `.a .b`, if the element that matches `.a` contains a recursive child component, then all `.b` in that child component will be matched by the rule.\n\n## CSS Modules\n\nA `<style module>` tag is compiled as [CSS Modules](https://github.com/css-modules/css-modules) and exposes the resulting CSS classes to the component as an object under the key of `$style`:\n\n```vue\n<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\nThe resulting classes are hashed to avoid collision, achieving the same effect of scoping the CSS to the current component only.\n\nRefer to the [CSS Modules spec](https://github.com/css-modules/css-modules) for more details such as [global exceptions](https://github.com/css-modules/css-modules/blob/master/docs/composition.md#exceptions) and [composition](https://github.com/css-modules/css-modules/blob/master/docs/composition.md#composition).\n\n## Custom Inject Name\n\nYou can customize the property key of the injected classes object by giving the `module` attribute a value:\n\n```vue\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module=\"classes\">\n.red {\n  color: red;\n}\n</style>\n```\n\n## Usage with Composition API\n\nThe injected classes can be accessed in `setup()` and `<script setup>` via the `useCssModule` API. For `<style module>` blocks with custom injection names, `useCssModule` accepts the matching `module` attribute value as the first argument:\n\n```js\nimport { useCssModule } from 'vue'\n\n// inside setup() scope...\n// default, returns classes for <style module>\nuseCssModule()\n\n// named, returns classes for <style module=\"classes\">\nuseCssModule('classes')\n```\n\n- **Example**\n\n```vue\n<script setup lang=\"ts\">\nimport { useCssModule } from 'vue'\n\nconst classes = useCssModule()\n</script>\n\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\n## `v-bind()` in CSS\n\nSFC `<style>` tags support linking CSS values to dynamic component state using the `v-bind` CSS function:\n\n```vue\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>\n```\n\nThe syntax works with [`<script setup>`](https://vuejs.org/api/sfc-script-setup), and supports JavaScript expressions (must be wrapped in quotes):\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst theme = ref({\n    color: 'red',\n})\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\np {\n  color: v-bind('theme.color');\n}\n</style>\n```\n\nThe actual value will be compiled into a hashed CSS custom property, so the CSS is still static. The custom property will be applied to the component's root element via inline styles and reactively updated if the source value changes.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I scoped css in vue-api?\n\nAssistant: To scoped css in vue-api, here's what you do:\nWhen a `<style>` tag has the `scoped` attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM. It comes with some caveats, but doesn't require any polyfills. It is achieved by using PostCSS to transform the following:\n\n```vue\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\nInto the following:\n\n```vue\n<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I child component root elements in vue-api?\n\nAssistant: To child component root elements in vue-api, here's what you do:\nWith `scoped`, the parent component's styles will not leak into child components. However, a child component's root node will be affected by both the parent's scoped CSS and the child's scoped CSS. This is by design so that the parent can style the child root element for layout purposes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I deep selectors in vue-api?\n\nAssistant: To deep selectors in vue-api, here's what you do:\nIf you want a selector in `scoped` styles to be \"deep\", i.e. affecting child components, you can use the `:deep()` pseudo-class:\n\n```vue\n<style scoped>\n.a :deep(.b) {\n  /* ... */\n}\n</style>\n```\n\nThe above will be compiled into:\n\n```css\n.a[data-v-f3f3eg9] .b {\n  /* ... */\n}\n``` \n\nTIP\n\nDOM content created with `v-html` are not affected by scoped styles, but you can still style them using deep selectors..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I slotted selectors in vue-api?\n\nAssistant: To slotted selectors in vue-api, here's what you do:\nBy default, scoped styles do not affect contents rendered by `<slot/>`, as they are considered to be owned by the parent component passing them in. To explicitly target slot content, use the `:slotted` pseudo-class:\n\n```vue\n<style scoped>\n:slotted(div) {\n  color: red;\n}\n</style>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I global selectors in vue-api?\n\nAssistant: To global selectors in vue-api, here's what you do:\nIf you want just one rule to apply globally, you can use the `:global` pseudo-class rather than creating another `<style>` (see below):\n\n```vue\n<style scoped>\n:global(.red) {\n  color: red;\n}\n</style>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I mixing local and global styles in vue-api?\n\nAssistant: To mixing local and global styles in vue-api, here's what you do:\nYou can also include both scoped and non-scoped styles in the same component:\n\n```vue\n<style>\n/* global styles */\n</style>\n\n<style scoped>\n/* local styles */\n</style>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I scoped style tips in vue-api?\n\nAssistant: To scoped style tips in vue-api, here's what you do:\n- **Scoped styles do not eliminate the need for classes**. Due to the way browsers render various CSS selectors, `p { color: red }` will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in `.example { color: red }`, then you virtually eliminate that performance hit.\n\n- **Be careful with descendant selectors in recursive components!** For a CSS rule with the selector `.a .b`, if the element that matches `.a` contains a recursive child component, then all `.b` in that child component will be matched by the rule..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I css modules in vue-api?\n\nAssistant: To css modules in vue-api, here's what you do:\nA `<style module>` tag is compiled as [CSS Modules](https://github.com/css-modules/css-modules) and exposes the resulting CSS classes to the component as an object under the key of `$style`:\n\n```vue\n<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\nThe resulting classes are hashed to avoid collision, achieving the same effect of scoping the CSS to the current component only.\n\nRefer to the [CSS Modules spec](https://github.com/css-modules/css-modules) for more details such as [global exceptions](https://github.com/css-modules/css-modules/blob/master/docs/composition.md#exceptions) and [composition](https://github.com/css-modules/css-modules/blob/master/docs/composition.md#composition)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I custom inject name in vue-api?\n\nAssistant: To custom inject name in vue-api, here's what you do:\nYou can customize the property key of the injected classes object by giving the `module` attribute a value:\n\n```vue\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module=\"classes\">\n.red {\n  color: red;\n}\n</style>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usage with composition api in vue-api?\n\nAssistant: To usage with composition api in vue-api, here's what you do:\nThe injected classes can be accessed in `setup()` and `<script setup>` via the `useCssModule` API. For `<style module>` blocks with custom injection names, `useCssModule` accepts the matching `module` attribute value as the first argument:\n\n```js\nimport { useCssModule } from 'vue'\n\n// inside setup() scope...\n// default, returns classes for <style module>\nuseCssModule()\n\n// named, returns classes for <style module=\"classes\">\nuseCssModule('classes')\n```\n\n- **Example**\n\n```vue\n<script setup lang=\"ts\">\nimport { useCssModule } from 'vue'\n\nconst classes = useCssModule()\n</script>\n\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `v-bind()` in css in vue-api?\n\nAssistant: To `v-bind()` in css in vue-api, here's what you do:\nSFC `<style>` tags support linking CSS values to dynamic component state using the `v-bind` CSS function:\n\n```vue\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>\n```\n\nThe syntax works with [`<script setup>`](https://vuejs.org/api/sfc-script-setup), and supports JavaScript expressions (must be wrapped in quotes):\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst theme = ref({\n    color: 'red',\n})\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\np {\n  color: v-bind('theme.color');\n}\n</style>\n```\n\nThe actual value will be compiled into a hashed CSS custom property, so the CSS is still static. The custom property will be applied to the component's root element via inline styles and reactively updated if the source value changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for SFC CSS Features in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Scoped CSS Example**:\n\n```yaml\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\nThis snippet shows you how to scoped css example, which is an important aspect of sfc css features.\n\n**Compiled Scoped CSS Example**:\n\n```yaml\n<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>\n```\n\nThis snippet shows you how to compiled scoped css example, which is an important aspect of sfc css features.\n\n**Deep Selector Example**:\n\n```yaml\n<style scoped>\n.a :deep(.b) {\n  /* ... */\n}\n</style>\n```\n\nThis snippet shows you how to deep selector example, which is an important aspect of sfc css features.\n\n**Slotted Selector Example**:\n\n```yaml\n<style scoped>\n:slotted(div) {\n  color: red;\n}\n</style>\n```\n\nThis snippet shows you how to slotted selector example, which is an important aspect of sfc css features.\n\n**Global Selector Example**:\n\n```yaml\n<style scoped>\n:global(.red) {\n  color: red;\n}\n</style>\n```\n\nThis snippet shows you how to global selector example, which is an important aspect of sfc css features.\n\n**Mixing Local and Global Styles Example**:\n\n```yaml\n<style>\n/* global styles */\n</style>\n\n<style scoped>\n/* local styles */\n</style>\n```\n\nThis snippet shows you how to mixing local and global styles example, which is an important aspect of sfc css features.\n\n**CSS Modules Example**:\n\n```yaml\n<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\nThis snippet shows you how to css modules example, which is an important aspect of sfc css features.\n\n**Custom Inject Name Example**:\n\n```yaml\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module=\"classes\">\n.red {\n  color: red;\n}\n</style>\n```\n\nThis snippet shows you how to custom inject name example, which is an important aspect of sfc css features.\n\n**Usage with Composition API Example**:\n\n```yaml\n<script setup lang=\"ts\">\nimport { useCssModule } from 'vue'\n\nconst classes = useCssModule()\n</script>\n\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\nThis snippet shows you how to usage with composition api example, which is an important aspect of sfc css features.\n\n**v-bind() in CSS Example**:\n\n```yaml\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>\n```\n\nThis snippet shows you how to v-bind() in css example, which is an important aspect of sfc css features.\n\n", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using SFC CSS Features in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nScoped styles do not eliminate the need for classes. Due to the way browsers render various CSS selectors, `p { color: red }` will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in `.example { color: red }`, then you virtually eliminate that performance hit.\n\nBe careful with descendant selectors in recursive components! For a CSS rule with the selector `.a .b`, if the element that matches `.a` contains a recursive child component, then all `.b` in that child component will be matched by the rule.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/sfc-css-features.html", "title": "SFC CSS Features", "description": "This page covers the CSS features available in Single File Components (SFC) in Vue.js, including scoped CSS, CSS modules, and dynamic CSS binding.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:57", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "title": "SFC CSS Features | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "4af66631-3f9f-421b-8848-6386d6d4750d", "sourceURL": "https://vuejs.org/api/sfc-css-features.html", "url": "https://vuejs.org/api/sfc-css-features.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what SFC Syntax Specification is in vue-api?\n\nAssistant: Sure, I'd be happy to explain SFC Syntax Specification in vue-api.\n\n# SFC Syntax Specification\n\nA Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.Here's a quick rundown of what this is about:\n\n## Overview\n\nA Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.\n\nEach `*.vue` file consists of three types of top-level language blocks: `<template>`, `<script>`, and `<style>`, and optionally additional custom blocks:\n\n```vue\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>\n```\n\n## Language Blocks\n\n### `<template>`\n\n- Each `*.vue` file can contain at most one top-level `<template>` block.\n\n- Contents will be extracted and passed on to `@vue/compiler-dom`, pre-compiled into JavaScript render functions, and attached to the exported component as its `render` option.\n\n### `<script>`\n\n- Each `*.vue` file can contain at most one `<script>` block (excluding [`<script setup>`](https://vuejs.org/api/sfc-script-setup)).\n\n- The script is executed as an ES Module.\n\n- The **default export** should be a Vue component options object, either as a plain object or as the return value of [defineComponent](https://vuejs.org/api/general#definecomponent).\n\n### `<script setup>`\n\n- Each `*.vue` file can contain at most one `<script setup>` block (excluding normal `<script>`).\n\n- The script is pre-processed and used as the component's `setup()` function, which means it will be executed **for each instance of the component**. Top-level bindings in `<script setup>` are automatically exposed to the template. For more details, see [dedicated documentation on `<script setup>`](https://vuejs.org/api/sfc-script-setup).\n\n### `<style>`\n\n- A single `*.vue` file can contain multiple `<style>` tags.\n\n- A `<style>` tag can have `scoped` or `module` attributes (see [SFC Style Features](https://vuejs.org/api/sfc-css-features) for more details) to help encapsulate the styles to the current component. Multiple `<style>` tags with different encapsulation modes can be mixed in the same component.\n\n### Custom Blocks\n\nAdditional custom blocks can be included in a `*.vue` file for any project-specific needs, for example a `<docs>` block. Some real-world examples of custom blocks include:\n\n- [Gridsome: `<page-query>`](https://gridsome.org/docs/querying-data/)\n- [vite-plugin-vue-gql: `<gql>`](https://github.com/wheatjs/vite-plugin-vue-gql)\n- [vue-i18n: `<i18n>`](https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#i18n-custom-block)\n\nHandling of Custom Blocks will depend on tooling - if you want to build your own custom block integrations, see the [SFC custom block integrations tooling section](https://vuejs.org/guide/scaling-up/tooling#sfc-custom-block-integrations) for more details.\n\n## Automatic Name Inference\n\nAn SFC automatically infers the component's name from its **filename** in the following cases:\n\n- Dev warning formatting\n- DevTools inspection\n- Recursive self-reference, e.g. a file named `FooBar.vue` can refer to itself as `<FooBar/>` in its template. This has lower priority than explicitly registered/imported components.\n\n## Pre-Processors\n\nBlocks can declare pre-processor languages using the `lang` attribute. The most common case is using TypeScript for the `<script>` block:\n\n```template\n<script lang=\"ts\">\n  // use TypeScript\n</script>\n```\n\n`lang` can be applied to any block - for example we can use `<style>` with [Sass](https://sass-lang.com/) and `<template>` with [Pug](https://pugjs.org/api/getting-started.html):\n\n```template\n<template lang=\"pug\">\np {{ msg }}\n</template>\n\n<style lang=\"scss\">\n  $primary-color: #333;\n  body {\n    color: $primary-color;\n  }\n</style>\n```\n\nNote that integration with various pre-processors may differ by toolchain. Check out the respective documentation for examples:\n\n- [Vite](https://vitejs.dev/guide/features.html#css-pre-processors)\n- [Vue CLI](https://cli.vuejs.org/guide/css.html#pre-processors)\n- [webpack + vue-loader](https://vue-loader.vuejs.org/guide/pre-processors.html#using-pre-processors)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "overview", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I overview in vue-api?\n\nAssistant: To overview in vue-api, here's what you do:\nA Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.\n\nEach `*.vue` file consists of three types of top-level language blocks: `<template>`, `<script>`, and `<style>`, and optionally additional custom blocks:\n\n```vue\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I language blocks in vue-api?\n\nAssistant: To language blocks in vue-api, here's what you do:\n### `<template>`\n\n- Each `*.vue` file can contain at most one top-level `<template>` block.\n\n- Contents will be extracted and passed on to `@vue/compiler-dom`, pre-compiled into JavaScript render functions, and attached to the exported component as its `render` option.\n\n### `<script>`\n\n- Each `*.vue` file can contain at most one `<script>` block (excluding [`<script setup>`](https://vuejs.org/api/sfc-script-setup)).\n\n- The script is executed as an ES Module.\n\n- The **default export** should be a Vue component options object, either as a plain object or as the return value of [defineComponent](https://vuejs.org/api/general#definecomponent).\n\n### `<script setup>`\n\n- Each `*.vue` file can contain at most one `<script setup>` block (excluding normal `<script>`).\n\n- The script is pre-processed and used as the component's `setup()` function, which means it will be executed **for each instance of the component**. Top-level bindings in `<script setup>` are automatically exposed to the template. For more details, see [dedicated documentation on `<script setup>`](https://vuejs.org/api/sfc-script-setup).\n\n### `<style>`\n\n- A single `*.vue` file can contain multiple `<style>` tags.\n\n- A `<style>` tag can have `scoped` or `module` attributes (see [SFC Style Features](https://vuejs.org/api/sfc-css-features) for more details) to help encapsulate the styles to the current component. Multiple `<style>` tags with different encapsulation modes can be mixed in the same component.\n\n### Custom Blocks\n\nAdditional custom blocks can be included in a `*.vue` file for any project-specific needs, for example a `<docs>` block. Some real-world examples of custom blocks include:\n\n- [Gridsome: `<page-query>`](https://gridsome.org/docs/querying-data/)\n- [vite-plugin-vue-gql: `<gql>`](https://github.com/wheatjs/vite-plugin-vue-gql)\n- [vue-i18n: `<i18n>`](https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#i18n-custom-block)\n\nHandling of Custom Blocks will depend on tooling - if you want to build your own custom block integrations, see the [SFC custom block integrations tooling section](https://vuejs.org/guide/scaling-up/tooling#sfc-custom-block-integrations) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I automatic name inference in vue-api?\n\nAssistant: To automatic name inference in vue-api, here's what you do:\nAn SFC automatically infers the component's name from its **filename** in the following cases:\n\n- Dev warning formatting\n- DevTools inspection\n- Recursive self-reference, e.g. a file named `FooBar.vue` can refer to itself as `<FooBar/>` in its template. This has lower priority than explicitly registered/imported components..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I pre-processors in vue-api?\n\nAssistant: To pre-processors in vue-api, here's what you do:\nBlocks can declare pre-processor languages using the `lang` attribute. The most common case is using TypeScript for the `<script>` block:\n\n```template\n<script lang=\"ts\">\n  // use TypeScript\n</script>\n```\n\n`lang` can be applied to any block - for example we can use `<style>` with [Sass](https://sass-lang.com/) and `<template>` with [Pug](https://pugjs.org/api/getting-started.html):\n\n```template\n<template lang=\"pug\">\np {{ msg }}\n</template>\n\n<style lang=\"scss\">\n  $primary-color: #333;\n  body {\n    color: $primary-color;\n  }\n</style>\n```\n\nNote that integration with various pre-processors may differ by toolchain. Check out the respective documentation for examples:\n\n- [Vite](https://vitejs.dev/guide/features.html#css-pre-processors)\n- [Vue CLI](https://cli.vuejs.org/guide/css.html#pre-processors)\n- [webpack + vue-loader](https://vue-loader.vuejs.org/guide/pre-processors.html#using-pre-processors).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for SFC Syntax Specification in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Vue SFC Example**:\n\n```yaml\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>\n\n```\n\nThis snippet shows you how to basic vue sfc example, which is an important aspect of sfc syntax specification.\n\n**Using TypeScript in `<script>` Block**:\n\n```yaml\n<script lang=\"ts\">\n  // use TypeScript\n</script>\n\n```\n\nThis snippet shows you how to using typescript in `<script>` block, which is an important aspect of sfc syntax specification.\n\n**Using Pug in `<template>` Block**:\n\n```yaml\n<template lang=\"pug\">\np {{ msg }}\n</template>\n\n```\n\nThis snippet shows you how to using pug in `<template>` block, which is an important aspect of sfc syntax specification.\n\n**Using SCSS in `<style>` Block**:\n\n```yaml\n<style lang=\"scss\">\n  $primary-color: #333;\n  body {\n    color: $primary-color;\n  }\n</style>\n\n```\n\nThis snippet shows you how to using scss in `<style>` block, which is an important aspect of sfc syntax specification.\n\n**Using `src` Attribute for Imports**:\n\n```yaml\n<template src=\"./template.html\"></template>\n<style src=\"./style.css\"></style>\n<script src=\"./script.js\"></script>\n\n```\n\nThis snippet shows you how to using `src` attribute for imports, which is an important aspect of sfc syntax specification.\n\n", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using SFC Syntax Specification in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a single top-level `<template>`, `<script>`, and `<style>` block in your SFC.\n\nUtilize the `lang` attribute for pre-processors to enhance your code.\n\nBe cautious with the `src` attribute and ensure paths are correct.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/sfc-spec.html", "title": "SFC Syntax Specification", "description": "A Vue Single-File Component (SFC), conventionally using the `*.vue` file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:27:28", "type": "best_practices", "page_metadata": {"og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "title": "SFC Syntax Specification | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "scrapeId": "4b84b8d2-dce3-4a14-84fd-e641018721b3", "sourceURL": "https://vuejs.org/api/sfc-spec.html", "url": "https://vuejs.org/api/sfc-spec.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Server-Side Rendering API is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Server-Side Rendering API in vue-api.\n\n# Server-Side Rendering API\n\nThis page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.Here's a quick rundown of what this is about:\n\n## renderToString()\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToString(\n    input: App | VNode,\n    context?: SSRContext\n): Promise<string>\n```\n\n- **Example**\n\njs\n\n```\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n    data: () => ({ msg: 'hello' }),\n    template: `<div>{{ msg }}</div>`\n})\n\n;(async () => {\n    const html = await renderToString(app)\n    console.log(html)\n})()\n```\n\n## SSR Context\n\nYou can pass an optional context object, which can be used to record additional data during the render, for example [accessing content of Teleports](https://vuejs.org/guide/scaling-up/ssr#teleports):\n\njs\n\n```\nconst ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }\n```\n\nMost other SSR APIs on this page also optionally accept a context object. The context object can be accessed in component code via the [useSSRContext](https://vuejs.org/api/ssr.html#usessrcontext) helper.\n\n- **See also** [Guide - Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr)\n\n## renderToNodeStream()\n\nRenders input as a [Node.js Readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToNodeStream(\n    input: App | VNode,\n    context?: SSRContext\n): Readable\n```\n\n- **Example**\n\njs\n\n```javascript\n// inside a Node.js http handler\nrenderToNodeStream(app).pipe(res)\n```\n\nNote\n\nThis method is not supported in the ESM build of `vue/server-renderer`, which is decoupled from Node.js environments. Use [`pipeToNodeWritable`](https://vuejs.org/api/ssr.html#pipetonodewritable) instead.\n\n## pipeToNodeWritable()\n\nRender and pipe to an existing [Node.js Writable stream](https://nodejs.org/api/stream.html#stream_writable_streams) instance.\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction pipeToNodeWritable(\n    input: App | VNode,\n    context: SSRContext = {},\n    writable: Writable\n): void\n```\n\n- **Example**\n\njs\n\n```javascript\n// inside a Node.js http handler\npipeToNodeWritable(app, {}, res)\n```\n\n## renderToWebStream()\n\nRenders input as a [Web ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API).\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToWebStream(\n    input: App | VNode,\n    context?: SSRContext\n): ReadableStream\n```\n\n- **Example**\n\njs\n\n```javascript\n// inside an environment with ReadableStream support\nreturn new Response(renderToWebStream(app))\n```\n\nNote\n\nIn environments that do not expose `ReadableStream` constructor in the global scope, [`pipeToWebWritable()`](https://vuejs.org/api/ssr.html#pipetowebwritable) should be used instead.\n\n## pipeToWebWritable()\n\nRender and pipe to an existing [Web WritableStream](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) instance.\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction pipeToWebWritable(\n    input: App | VNode,\n    context: SSRContext = {},\n    writable: WritableStream\n): void\n```\n\n- **Example**\n\nThis is typically used in combination with [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream):\n\njs\n\n```javascript\n// TransformStream is available in environments such as CloudFlare workers.\n// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'\nconst { readable, writable } = new TransformStream()\npipeToWebWritable(app, {}, writable)\n\nreturn new Response(readable)\n```\n\n## renderToSimpleStream()\n\nRenders input in streaming mode using a simple readable interface.\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToSimpleStream(\n    input: App | VNode,\n    context: SSRContext,\n    options: SimpleReadable\n): SimpleReadable\n\ninterface SimpleReadable {\n    push(content: string | null): void\n    destroy(err: any): void\n}\n```\n\n- **Example**\n\njs\n\n```\nlet res = ''\n\nrenderToSimpleStream(\n    app,\n    {},\n    {\n      push(chunk) {\n        if (chunk === null) {\n          // done\n          console(`render complete: ${res}`)\n        } else {\n          res += chunk\n        }\n      },\n      destroy(err) {\n        // error encountered\n      }\n    }\n)\n```\n\n## useSSRContext()\n\nA runtime API used to retrieve the context object passed to `renderToString()` or other server render APIs.\n\n- **Type**\n\nts\n\n```\nfunction useSSRContext<T = Record<string, any>>(): T | undefined\n```\n\n- **Example**\n\nThe retrieved context can be used to attach information that is needed for rendering the final HTML (e.g. head metadata).\n\nvue\n\n```\n<script setup>\nimport { useSSRContext } from 'vue'\n\n// make sure to only call it during SSR\n// https://vitejs.dev/guide/ssr.html#conditional-logic\nif (import.meta.env.SSR) {\n    const ctx = useSSRContext()\n    // ...attach properties to the context\n}\n</script>\n```\n\n## data-allow-mismatch\n\nA special attribute that can be used to suppress [hydration mismatch](https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch) warnings.\n\n- **Example**\n\nhtml\n\n```\n<div data-allow-mismatch=\"text\">{{ data.toLocaleString() }}</div>\n```\n\nThe value can limit the allowed mismatch to a specific type. Allowed values are:\n\n  - `text`\n  - `children` (only allows mismatch for direct children)\n  - `class`\n  - `style`\n  - `attribute`\n\nIf no value is provided, all types of mismatches will be allowed.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rendertostring() in vue-api?\n\nAssistant: To rendertostring() in vue-api, here's what you do:\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToString(\n    input: App | VNode,\n    context?: SSRContext\n): Promise<string>\n```\n\n- **Example**\n\njs\n\n```\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n    data: () => ({ msg: 'hello' }),\n    template: `<div>{{ msg }}</div>`\n})\n\n;(async () => {\n    const html = await renderToString(app)\n    console.log(html)\n})()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I ssr context in vue-api?\n\nAssistant: To ssr context in vue-api, here's what you do:\nYou can pass an optional context object, which can be used to record additional data during the render, for example [accessing content of Teleports](https://vuejs.org/guide/scaling-up/ssr#teleports):\n\njs\n\n```\nconst ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }\n```\n\nMost other SSR APIs on this page also optionally accept a context object. The context object can be accessed in component code via the [useSSRContext](https://vuejs.org/api/ssr.html#usessrcontext) helper.\n\n- **See also** [Guide - Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rendertonodestream() in vue-api?\n\nAssistant: To rendertonodestream() in vue-api, here's what you do:\nRenders input as a [Node.js Readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToNodeStream(\n    input: App | VNode,\n    context?: SSRContext\n): Readable\n```\n\n- **Example**\n\njs\n\n```javascript\n// inside a Node.js http handler\nrenderToNodeStream(app).pipe(res)\n```\n\nNote\n\nThis method is not supported in the ESM build of `vue/server-renderer`, which is decoupled from Node.js environments. Use [`pipeToNodeWritable`](https://vuejs.org/api/ssr.html#pipetonodewritable) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I pipetonodewritable() in vue-api?\n\nAssistant: To pipetonodewritable() in vue-api, here's what you do:\nRender and pipe to an existing [Node.js Writable stream](https://nodejs.org/api/stream.html#stream_writable_streams) instance.\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction pipeToNodeWritable(\n    input: App | VNode,\n    context: SSRContext = {},\n    writable: Writable\n): void\n```\n\n- **Example**\n\njs\n\n```javascript\n// inside a Node.js http handler\npipeToNodeWritable(app, {}, res)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rendertowebstream() in vue-api?\n\nAssistant: To rendertowebstream() in vue-api, here's what you do:\nRenders input as a [Web ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API).\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToWebStream(\n    input: App | VNode,\n    context?: SSRContext\n): ReadableStream\n```\n\n- **Example**\n\njs\n\n```javascript\n// inside an environment with ReadableStream support\nreturn new Response(renderToWebStream(app))\n```\n\nNote\n\nIn environments that do not expose `ReadableStream` constructor in the global scope, [`pipeToWebWritable()`](https://vuejs.org/api/ssr.html#pipetowebwritable) should be used instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I pipetowebwritable() in vue-api?\n\nAssistant: To pipetowebwritable() in vue-api, here's what you do:\nRender and pipe to an existing [Web WritableStream](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) instance.\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction pipeToWebWritable(\n    input: App | VNode,\n    context: SSRContext = {},\n    writable: WritableStream\n): void\n```\n\n- **Example**\n\nThis is typically used in combination with [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream):\n\njs\n\n```javascript\n// TransformStream is available in environments such as CloudFlare workers.\n// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'\nconst { readable, writable } = new TransformStream()\npipeToWebWritable(app, {}, writable)\n\nreturn new Response(readable)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I rendertosimplestream() in vue-api?\n\nAssistant: To rendertosimplestream() in vue-api, here's what you do:\nRenders input in streaming mode using a simple readable interface.\n\n- **Exported from `vue/server-renderer`**\n\n- **Type**\n\nts\n\n```\nfunction renderToSimpleStream(\n    input: App | VNode,\n    context: SSRContext,\n    options: SimpleReadable\n): SimpleReadable\n\ninterface SimpleReadable {\n    push(content: string | null): void\n    destroy(err: any): void\n}\n```\n\n- **Example**\n\njs\n\n```\nlet res = ''\n\nrenderToSimpleStream(\n    app,\n    {},\n    {\n      push(chunk) {\n        if (chunk === null) {\n          // done\n          console(`render complete: ${res}`)\n        } else {\n          res += chunk\n        }\n      },\n      destroy(err) {\n        // error encountered\n      }\n    }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usessrcontext() in vue-api?\n\nAssistant: To usessrcontext() in vue-api, here's what you do:\nA runtime API used to retrieve the context object passed to `renderToString()` or other server render APIs.\n\n- **Type**\n\nts\n\n```\nfunction useSSRContext<T = Record<string, any>>(): T | undefined\n```\n\n- **Example**\n\nThe retrieved context can be used to attach information that is needed for rendering the final HTML (e.g. head metadata).\n\nvue\n\n```\n<script setup>\nimport { useSSRContext } from 'vue'\n\n// make sure to only call it during SSR\n// https://vitejs.dev/guide/ssr.html#conditional-logic\nif (import.meta.env.SSR) {\n    const ctx = useSSRContext()\n    // ...attach properties to the context\n}\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I data-allow-mismatch in vue-api?\n\nAssistant: To data-allow-mismatch in vue-api, here's what you do:\nA special attribute that can be used to suppress [hydration mismatch](https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch) warnings.\n\n- **Example**\n\nhtml\n\n```\n<div data-allow-mismatch=\"text\">{{ data.toLocaleString() }}</div>\n```\n\nThe value can limit the allowed mismatch to a specific type. Allowed values are:\n\n  - `text`\n  - `children` (only allows mismatch for direct children)\n  - `class`\n  - `style`\n  - `attribute`\n\nIf no value is provided, all types of mismatches will be allowed..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Server-Side Rendering API in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**renderToString Example**:\n\n```yaml\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n    data: () => ({ msg: 'hello' }),\n    template: `<div>{{ msg }}</div>`\n})\n\n;(async () => {\n    const html = await renderToString(app)\n    console.log(html)\n})()\n```\n\nThis snippet shows you how to rendertostring example, which is an important aspect of server-side rendering api.\n\n**SSR Context Example**:\n\n```yaml\nconst ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }\n```\n\nThis snippet shows you how to ssr context example, which is an important aspect of server-side rendering api.\n\n**renderToNodeStream Example**:\n\n```yaml\n// inside a Node.js http handler\nrenderToNodeStream(app).pipe(res)\n```\n\nThis snippet shows you how to rendertonodestream example, which is an important aspect of server-side rendering api.\n\n", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Server-Side Rendering API in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to only call useSSRContext during SSR to avoid errors.\n\nUse data-allow-mismatch attribute to suppress hydration mismatch warnings.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/ssr.html", "title": "Server-Side Rendering API", "description": "This page covers the Server-Side Rendering (SSR) API for Vue.js, detailing various functions and their usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:01", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Server-Side Rendering API | Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "scrapeId": "9499f6f3-cb85-4462-9683-f3e921a026cf", "sourceURL": "https://vuejs.org/api/ssr.html", "url": "https://vuejs.org/api/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Utility Types is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Utility Types in vue-api.\n\n# Utility Types\n\nThis page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.Here's a quick rundown of what this is about:\n\n## PropType<T>\n\nUsed to annotate a prop with more advanced types when using runtime props declarations.\n\n- **Example**\n\n```ts\nimport type { PropType } from 'vue'\n\ninterface Book {\n    title: string\n    author: string\n    year: number\n}\n\nexport default {\n    props: {\n      book: {\n        // provide more specific type to `Object`\n        type: Object as PropType<Book>,\n        required: true\n      }\n    }\n}\n```\n\n- **See also** [Guide - Typing Component Props](https://vuejs.org/guide/typescript/options-api#typing-component-props)\n\n## MaybeRef<T>\n\n- Only supported in 3.3+\n\nAlias for `T | Ref<T>`. Useful for annotating arguments of [Composables](https://vuejs.org/guide/reusability/composables).\n\n## MaybeRefOrGetter<T>\n\n- Only supported in 3.3+\n\nAlias for `T | Ref<T> | (() => T)`. Useful for annotating arguments of [Composables](https://vuejs.org/guide/reusability/composables).\n\n## ExtractPropTypes<T>\n\nExtract prop types from a runtime props options object. The extracted types are internal facing - i.e. the resolved props received by the component. This means boolean props and props with default values are always defined, even if they are not required.\n\nTo extract public facing props, i.e. props that the parent is allowed to pass, use [`ExtractPublicPropTypes`](https://vuejs.org/api/utility-types.html#extractpublicproptypes).\n\n- **Example**\n\n```ts\nconst propsOptions = {\n    foo: String,\n    bar: Boolean,\n    baz: {\n      type: Number,\n      required: true\n    },\n    qux: {\n      type: Number,\n      default: 1\n    }\n} as const\n\ntype Props = ExtractPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar: boolean,\n//   baz: number,\n//   qux: number\n// }\n```\n\n## ExtractPublicPropTypes<T>\n\n- Only supported in 3.3+\n\nExtract prop types from a runtime props options object. The extracted types are public facing - i.e. the props that the parent is allowed to pass.\n\n- **Example**\n\n```ts\nconst propsOptions = {\n    foo: String,\n    bar: Boolean,\n    baz: {\n      type: Number,\n      required: true\n    },\n    qux: {\n      type: Number,\n      default: 1\n    }\n} as const\n\ntype Props = ExtractPublicPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar?: boolean,\n//   baz: number,\n//   qux?: number\n// }\n```\n\n## ComponentCustomProperties\n\nUsed to augment the component instance type to support custom global properties.\n\n- **Example**\n\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n    interface ComponentCustomProperties {\n      $http: typeof axios\n      $translate: (key: string) => string\n    }\n}\n```\n\n## ComponentCustomOptions\n\nUsed to augment the component options type to support custom options.\n\n- **Example**\n\n```ts\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n    interface ComponentCustomOptions {\n      beforeRouteEnter?(to: any, from: any, next: () => void): void\n    }\n}\n```\n\n## ComponentCustomProps\n\nUsed to augment allowed TSX props in order to use non-declared props on TSX elements.\n\n- **Example**\n\n```ts\ndeclare module 'vue' {\n    interface ComponentCustomProps {\n      hello?: string\n    }\n}\n\nexport {}\n```\n\n```tsx\n// now works even if hello is not a declared prop\n<MyComponent hello=\"world\" />\n```\n\n## CSSProperties\n\nUsed to augment allowed values in style property bindings.\n\n- **Example**\n\nAllow any custom CSS property\n\n```ts\ndeclare module 'vue' {\n    interface CSSProperties {\n      [key: `--${string}`]: string\n    }\n}\n```\n\n```tsx\n<div style={ { '--bg-color': 'blue' } }>\n```\n\n```html\n<div :style=\"{ '--bg-color': 'blue' }\"></div>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I proptype<t> in vue-api?\n\nAssistant: To proptype<t> in vue-api, here's what you do:\nUsed to annotate a prop with more advanced types when using runtime props declarations.\n\n- **Example**\n\n```ts\nimport type { PropType } from 'vue'\n\ninterface Book {\n    title: string\n    author: string\n    year: number\n}\n\nexport default {\n    props: {\n      book: {\n        // provide more specific type to `Object`\n        type: Object as PropType<Book>,\n        required: true\n      }\n    }\n}\n```\n\n- **See also** [Guide - Typing Component Props](https://vuejs.org/guide/typescript/options-api#typing-component-props).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I mayberef<t> in vue-api?\n\nAssistant: To mayberef<t> in vue-api, here's what you do:\n- Only supported in 3.3+\n\nAlias for `T | Ref<T>`. Useful for annotating arguments of [Composables](https://vuejs.org/guide/reusability/composables)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I maybereforgetter<t> in vue-api?\n\nAssistant: To maybereforgetter<t> in vue-api, here's what you do:\n- Only supported in 3.3+\n\nAlias for `T | Ref<T> | (() => T)`. Useful for annotating arguments of [Composables](https://vuejs.org/guide/reusability/composables)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I extractproptypes<t> in vue-api?\n\nAssistant: To extractproptypes<t> in vue-api, here's what you do:\nExtract prop types from a runtime props options object. The extracted types are internal facing - i.e. the resolved props received by the component. This means boolean props and props with default values are always defined, even if they are not required.\n\nTo extract public facing props, i.e. props that the parent is allowed to pass, use [`ExtractPublicPropTypes`](https://vuejs.org/api/utility-types.html#extractpublicproptypes).\n\n- **Example**\n\n```ts\nconst propsOptions = {\n    foo: String,\n    bar: Boolean,\n    baz: {\n      type: Number,\n      required: true\n    },\n    qux: {\n      type: Number,\n      default: 1\n    }\n} as const\n\ntype Props = ExtractPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar: boolean,\n//   baz: number,\n//   qux: number\n// }\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I extractpublicproptypes<t> in vue-api?\n\nAssistant: To extractpublicproptypes<t> in vue-api, here's what you do:\n- Only supported in 3.3+\n\nExtract prop types from a runtime props options object. The extracted types are public facing - i.e. the props that the parent is allowed to pass.\n\n- **Example**\n\n```ts\nconst propsOptions = {\n    foo: String,\n    bar: Boolean,\n    baz: {\n      type: Number,\n      required: true\n    },\n    qux: {\n      type: Number,\n      default: 1\n    }\n} as const\n\ntype Props = ExtractPublicPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar?: boolean,\n//   baz: number,\n//   qux?: number\n// }\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I componentcustomproperties in vue-api?\n\nAssistant: To componentcustomproperties in vue-api, here's what you do:\nUsed to augment the component instance type to support custom global properties.\n\n- **Example**\n\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n    interface ComponentCustomProperties {\n      $http: typeof axios\n      $translate: (key: string) => string\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I componentcustomoptions in vue-api?\n\nAssistant: To componentcustomoptions in vue-api, here's what you do:\nUsed to augment the component options type to support custom options.\n\n- **Example**\n\n```ts\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n    interface ComponentCustomOptions {\n      beforeRouteEnter?(to: any, from: any, next: () => void): void\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I componentcustomprops in vue-api?\n\nAssistant: To componentcustomprops in vue-api, here's what you do:\nUsed to augment allowed TSX props in order to use non-declared props on TSX elements.\n\n- **Example**\n\n```ts\ndeclare module 'vue' {\n    interface ComponentCustomProps {\n      hello?: string\n    }\n}\n\nexport {}\n```\n\n```tsx\n// now works even if hello is not a declared prop\n<MyComponent hello=\"world\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I cssproperties in vue-api?\n\nAssistant: To cssproperties in vue-api, here's what you do:\nUsed to augment allowed values in style property bindings.\n\n- **Example**\n\nAllow any custom CSS property\n\n```ts\ndeclare module 'vue' {\n    interface CSSProperties {\n      [key: `--${string}`]: string\n    }\n}\n```\n\n```tsx\n<div style={ { '--bg-color': 'blue' } }>\n```\n\n```html\n<div :style=\"{ '--bg-color': 'blue' }\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Utility Types in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**PropType Example**:\n\n```yaml\n```ts\nimport type { PropType } from 'vue'\n\ninterface Book {\n    title: string\n    author: string\n    year: number\n}\n\nexport default {\n    props: {\n      book: {\n        // provide more specific type to `Object`\n        type: Object as PropType<Book>,\n        required: true\n      }\n    }\n}\n```\n```\n\nThis snippet shows you how to proptype example, which is an important aspect of utility types.\n\n**ExtractPropTypes Example**:\n\n```yaml\n```ts\nconst propsOptions = {\n    foo: String,\n    bar: Boolean,\n    baz: {\n      type: Number,\n      required: true\n    },\n    qux: {\n      type: Number,\n      default: 1\n    }\n} as const\n\ntype Props = ExtractPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar: boolean,\n//   baz: number,\n//   qux: number\n// }\n```\n```\n\nThis snippet shows you how to extractproptypes example, which is an important aspect of utility types.\n\n**ExtractPublicPropTypes Example**:\n\n```yaml\n```ts\nconst propsOptions = {\n    foo: String,\n    bar: Boolean,\n    baz: {\n      type: Number,\n      required: true\n    },\n    qux: {\n      type: Number,\n      default: 1\n    }\n} as const\n\ntype Props = ExtractPublicPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar?: boolean,\n//   baz: number,\n//   qux?: number\n// }\n```\n```\n\nThis snippet shows you how to extractpublicproptypes example, which is an important aspect of utility types.\n\n**ComponentCustomProperties Example**:\n\n```yaml\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n    interface ComponentCustomProperties {\n      $http: typeof axios\n      $translate: (key: string) => string\n    }\n}\n```\n```\n\nThis snippet shows you how to componentcustomproperties example, which is an important aspect of utility types.\n\n**ComponentCustomOptions Example**:\n\n```yaml\n```ts\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n    interface ComponentCustomOptions {\n      beforeRouteEnter?(to: any, from: any, next: () => void): void\n    }\n}\n```\n```\n\nThis snippet shows you how to componentcustomoptions example, which is an important aspect of utility types.\n\n**ComponentCustomProps Example**:\n\n```yaml\n```ts\ndeclare module 'vue' {\n    interface ComponentCustomProps {\n      hello?: string\n    }\n}\n\nexport {}\n```\n\n```tsx\n// now works even if hello is not a declared prop\n<MyComponent hello=\"world\" />\n```\n```\n\nThis snippet shows you how to componentcustomprops example, which is an important aspect of utility types.\n\n**CSSProperties Example**:\n\n```yaml\n```ts\ndeclare module 'vue' {\n    interface CSSProperties {\n      [key: `--${string}`]: string\n    }\n}\n```\n\n```tsx\n<div style={ { '--bg-color': 'blue' } }>\n```\n\n```html\n<div :style=\"{ '--bg-color': 'blue' }\"></div>\n```\n```\n\nThis snippet shows you how to cssproperties example, which is an important aspect of utility types.\n\n", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Utility Types in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAugmentations must be placed in a module `.ts` or `.d.ts` file. See [Type Augmentation Placement](https://vuejs.org/guide/typescript/options-api#augmenting-global-properties) for more details.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/utility-types.html", "title": "Utility Types", "description": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:28:56", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Utility Types | Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "scrapeId": "1468626f-b41a-4527-a6fc-309d9f86b594", "sourceURL": "https://vuejs.org/api/utility-types.html", "url": "https://vuejs.org/api/utility-types.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Global API: General is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Global API: General in vue-api.\n\n# Global API: General\n\nThis page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.Here's a quick rundown of what this is about:\n\n## version\n\nExposes the current version of Vue.\n\n- **Type:** `string`\n\n- **Example**\n\n```js\nimport { version } from 'vue'\n\nconsole.log(version)\n```\n\n## nextTick()\n\nA utility for waiting for the next DOM update flush.\n\n- **Type**\n\n```ts\nfunction nextTick(callback?: () => void): Promise<void>\n```\n\n- **Details**\n\nWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.\n\n`nextTick()` can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.\n\n- **Example**\n\n```vue\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n    count.value++\n\n    // DOM not yet updated\n    console.log(document.getElementById('counter').textContent) // 0\n\n    await nextTick()\n    // DOM is now updated\n    console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n```vue\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      async increment() {\n        this.count++\n\n        // DOM not yet updated\n        console.log(document.getElementById('counter').textContent) // 0\n\n        await nextTick()\n        // DOM is now updated\n        console.log(document.getElementById('counter').textContent) // 1\n      }\n    }\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n``` \n\n- **See also** [`this.$nextTick()`](https://vuejs.org/api/component-instance#nexttick)\n\n## defineComponent()\n\nA type helper for defining a Vue component with type inference.\n\n- **Type**\n\n```ts\n// options syntax\nfunction defineComponent(\n    component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n    setup: ComponentOptions['setup'],\n    extraOptions?: ComponentOptions\n): () => any\n```\n\n> Type is simplified for readability.\n\n- **Details**\n\nThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.\n\nNote that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.\n\nYou can extract the instance type of a component (equivalent to the type of `this` in its options) from the return type of `defineComponent()` like this:\n\n```ts\nconst Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>\n```\n\n### Function Signature\n\n- Only supported in 3.3+\n\n`defineComponent()` also has an alternative signature that is meant to be used with the Composition API and [render functions or JSX](https://vuejs.org/guide/extras/render-function).\n\nInstead of passing in an options object, a function is expected instead. This function works the same as the Composition API [`setup()`](https://vuejs.org/api/composition-api-setup#composition-api-setup) function: it receives the props and the setup context. The return value should be a render function - both `h()` and JSX are supported:\n\n```js\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\nThe main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:\n\n```tsx\nconst Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)\n```\n\nIn the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for `defineProps` in SFCs) so that the runtime props declaration can be omitted.\n\n### Note on webpack Treeshaking\n\nBecause `defineComponent()` is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.\n\nTo tell webpack that this function call is safe to be tree-shaken, you can add a `/*#__PURE__*/` comment notation before the function call:\n\n```js\nexport default /*#__PURE__*/ defineComponent(/* ... */)\n```\n\nNote this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that `defineComponent()` is in fact side-effect-free without the need for manual annotations.\n\n- **See also** [Guide - Using Vue with TypeScript](https://vuejs.org/guide/typescript/overview#general-usage-notes)\n\n## defineAsyncComponent()\n\nDefine an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.\n\n- **Type**\n\n```ts\nfunction defineAsyncComponent(\n    source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n    loader: AsyncComponentLoader\n    loadingComponent?: Component\n    errorComponent?: Component\n    delay?: number\n    timeout?: number\n    suspensible?: boolean\n    onError?: (\n      error: Error,\n      retry: () => void,\n      fail: () => void,\n      attempts: number\n    ) => any\n}\n```\n\n- **See also** [Guide - Async Components](https://vuejs.org/guide/components/async)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "overview", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I version in vue-api?\n\nAssistant: To version in vue-api, here's what you do:\nExposes the current version of Vue.\n\n- **Type:** `string`\n\n- **Example**\n\n```js\nimport { version } from 'vue'\n\nconsole.log(version)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I nexttick() in vue-api?\n\nAssistant: To nexttick() in vue-api, here's what you do:\nA utility for waiting for the next DOM update flush.\n\n- **Type**\n\n```ts\nfunction nextTick(callback?: () => void): Promise<void>\n```\n\n- **Details**\n\nWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.\n\n`nextTick()` can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.\n\n- **Example**\n\n```vue\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n    count.value++\n\n    // DOM not yet updated\n    console.log(document.getElementById('counter').textContent) // 0\n\n    await nextTick()\n    // DOM is now updated\n    console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n```vue\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      async increment() {\n        this.count++\n\n        // DOM not yet updated\n        console.log(document.getElementById('counter').textContent) // 0\n\n        await nextTick()\n        // DOM is now updated\n        console.log(document.getElementById('counter').textContent) // 1\n      }\n    }\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n``` \n\n- **See also** [`this.$nextTick()`](https://vuejs.org/api/component-instance#nexttick).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I definecomponent() in vue-api?\n\nAssistant: To definecomponent() in vue-api, here's what you do:\nA type helper for defining a Vue component with type inference.\n\n- **Type**\n\n```ts\n// options syntax\nfunction defineComponent(\n    component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n    setup: ComponentOptions['setup'],\n    extraOptions?: ComponentOptions\n): () => any\n```\n\n> Type is simplified for readability.\n\n- **Details**\n\nThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.\n\nNote that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.\n\nYou can extract the instance type of a component (equivalent to the type of `this` in its options) from the return type of `defineComponent()` like this:\n\n```ts\nconst Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>\n```\n\n### Function Signature\n\n- Only supported in 3.3+\n\n`defineComponent()` also has an alternative signature that is meant to be used with the Composition API and [render functions or JSX](https://vuejs.org/guide/extras/render-function).\n\nInstead of passing in an options object, a function is expected instead. This function works the same as the Composition API [`setup()`](https://vuejs.org/api/composition-api-setup#composition-api-setup) function: it receives the props and the setup context. The return value should be a render function - both `h()` and JSX are supported:\n\n```js\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\nThe main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:\n\n```tsx\nconst Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)\n```\n\nIn the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for `defineProps` in SFCs) so that the runtime props declaration can be omitted.\n\n### Note on webpack Treeshaking\n\nBecause `defineComponent()` is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.\n\nTo tell webpack that this function call is safe to be tree-shaken, you can add a `/*#__PURE__*/` comment notation before the function call:\n\n```js\nexport default /*#__PURE__*/ defineComponent(/* ... */)\n```\n\nNote this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that `defineComponent()` is in fact side-effect-free without the need for manual annotations.\n\n- **See also** [Guide - Using Vue with TypeScript](https://vuejs.org/guide/typescript/overview#general-usage-notes).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I defineasynccomponent() in vue-api?\n\nAssistant: To defineasynccomponent() in vue-api, here's what you do:\nDefine an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.\n\n- **Type**\n\n```ts\nfunction defineAsyncComponent(\n    source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n    loader: AsyncComponentLoader\n    loadingComponent?: Component\n    errorComponent?: Component\n    delay?: number\n    timeout?: number\n    suspensible?: boolean\n    onError?: (\n      error: Error,\n      retry: () => void,\n      fail: () => void,\n      attempts: number\n    ) => any\n}\n```\n\n- **See also** [Guide - Async Components](https://vuejs.org/guide/components/async).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Global API: General in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Version Example**:\n\n```yaml\nimport { version } from 'vue'\n\nconsole.log(version)\n```\n\nThis snippet shows you how to version example, which is an important aspect of global api: general.\n\n**nextTick Type**:\n\n```yaml\nfunction nextTick(callback?: () => void): Promise<void>\n```\n\nThis snippet shows you how to nexttick type, which is an important aspect of global api: general.\n\n**nextTick Example 1**:\n\n```yaml\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n    count.value++\n\n    // DOM not yet updated\n    console.log(document.getElementById('counter').textContent) // 0\n\n    await nextTick()\n    // DOM is now updated\n    console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to nexttick example 1, which is an important aspect of global api: general.\n\n**nextTick Example 2**:\n\n```yaml\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      async increment() {\n        this.count++\n\n        // DOM not yet updated\n        console.log(document.getElementById('counter').textContent) // 0\n\n        await nextTick()\n        // DOM is now updated\n        console.log(document.getElementById('counter').textContent) // 1\n      }\n    }\n}\n</script>\n\n<template>\n    <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to nexttick example 2, which is an important aspect of global api: general.\n\n**defineComponent Type**:\n\n```yaml\n// options syntax\nfunction defineComponent(\n    component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n    setup: ComponentOptions['setup'],\n    extraOptions?: ComponentOptions\n): () => any\n```\n\nThis snippet shows you how to definecomponent type, which is an important aspect of global api: general.\n\n**defineComponent Example**:\n\n```yaml\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\nThis snippet shows you how to definecomponent example, which is an important aspect of global api: general.\n\n", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Global API: General in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `nextTick()` to ensure DOM updates are completed after state changes.\n\nWhen using `defineComponent()`, consider using the function syntax for better type inference with TypeScript.\n\nAdd `/*#__PURE__*/` before `defineComponent()` calls to help webpack with tree-shaking.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/general", "title": "Global API: General", "description": "This page covers the general global API features of Vue, including versioning, nextTick, defineComponent, and defineAsyncComponent.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:32:36", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Global API: General | Vue.js", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8fef9e60-dfb2-4143-8c0f-31fa0ef111ee", "sourceURL": "https://vuejs.org/api/general", "url": "https://vuejs.org/api/general", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Composition API: Lifecycle Hooks is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Composition API: Lifecycle Hooks in vue-api.\n\n# Composition API: Lifecycle Hooks\n\nThis page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.Here's a quick rundown of what this is about:\n\n## Usage Note\n\nAll APIs listed on this page must be called synchronously during the `setup()` phase of a component. See [Guide - Lifecycle Hooks](https://vuejs.org/guide/essentials/lifecycle) for more details.\n\n## onMounted()\n\nRegisters a callback to be called after the component has been mounted.\n\n- **Type**\n\n```ts\nfunction onMounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered mounted after:\n\n\n  - All of its synchronous child components have been mounted (does not include async components or components inside `<Suspense>` trees).\n\n  - Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.\n\nThis hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in a [server-rendered application](https://vuejs.org/guide/scaling-up/ssr).\n\n**This hook is not called during server-side rendering.**\n\n- **Example**\n\nAccessing an element via template ref:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n    el.value // <div>\n})\n</script>\n\n<template>\n    <div ref=\"el\"></div>\n</template>\n```\n\n## onUpdated()\n\nRegisters a callback to be called after the component has updated its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onUpdated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA parent component's updated hook is called after that of its child components.\n\nThis hook is called after any DOM update of the component, which can be caused by different state changes, because multiple state changes can be batched into a single render cycle for performance reasons. If you need to access the updated DOM after a specific state change, use [nextTick()](https://vuejs.org/api/general#nexttick) instead.\n\n**This hook is not called during server-side rendering.**\n\nWARNING\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n\n- **Example**\n\nAccessing updated DOM:\n\n```vue\n<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n    // text content should be the same as current `count.value`\n    console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n    <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n## onUnmounted()\n\nRegisters a callback to be called after the component has been unmounted.\n\n- **Type**\n\n```ts\nfunction onUnmounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered unmounted after:\n\n\n  - All of its child components have been unmounted.\n\n  - All of its associated reactive effects (render effect and computed / watchers created during `setup()`) have been stopped.\n\nUse this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n\n**This hook is not called during server-side rendering.**\n\n- **Example**\n\n```vue\n<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n    intervalId = setInterval(() => {\n      // ...\n    })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>\n```\n\n## onBeforeMount()\n\nRegisters a hook to be called right before the component is to be mounted.\n\n- **Type**\n\n```ts\nfunction onBeforeMount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n\n**This hook is not called during server-side rendering.**\n\n## onBeforeUpdate()\n\nRegisters a hook to be called right before the component is about to update its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onBeforeUpdate(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n\n**This hook is not called during server-side rendering.**\n\n## onBeforeUnmount()\n\nRegisters a hook to be called right before a component instance is to be unmounted.\n\n- **Type**\n\n```ts\nfunction onBeforeUnmount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component instance is still fully functional.\n\n**This hook is not called during server-side rendering.**\n\n## onErrorCaptured()\n\nRegisters a hook to be called when an error propagating from a descendant component has been captured.\n\n- **Type**\n\n```ts\nfunction onErrorCaptured(callback: ErrorCapturedHook): void\n\ntype ErrorCapturedHook = (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    info: string\n) => boolean | void\n```\n\n- **Details**\n\nErrors can be captured from the following sources:\n\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\nYou can modify component state in `errorCaptured()` to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n\nThe hook can return `false` to stop the error from propagating further. See error propagation details below.\n\n**Error Propagation Rules**\n\n  - By default, all errors are still sent to the application-level [`app.config.errorHandler`](https://vuejs.org/api/application#app-config-errorhandler) if it is defined, so that these errors can still be reported to an analytics service in a single place.\n\n  - If multiple `errorCaptured` hooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.\n\n  - If the `errorCaptured` hook itself throws an error, both this error and the original captured error are sent to `app.config.errorHandler`.\n\n  - An `errorCaptured` hook can return `false` to prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additional `errorCaptured` hooks or `app.config.errorHandler` from being invoked for this error.\n\n## onRenderTracked()\n\nRegisters a debug hook to be called when a reactive dependency has been tracked by the component's render effect.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTracked(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    key: any\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## onRenderTriggered()\n\nRegisters a debug hook to be called when a reactive dependency triggers the component's render effect to be re-run.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTriggered(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n    key: any\n    newValue?: any\n    oldValue?: any\n    oldTarget?: Map<any, any>\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## onActivated()\n\nRegisters a callback to be called after the component instance is inserted into the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onActivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance)\n\n## onDeactivated()\n\nRegisters a callback to be called after the component instance is removed from the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onDeactivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance)\n\n## onServerPrefetch()\n\nRegisters an async function to be resolved before the component instance is to be rendered on the server.\n\n- **Type**\n\n```ts\nfunction onServerPrefetch(callback: () => Promise<any>): void\n```\n\n- **Details**\n\nIf the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n\nThis hook is only called during server-side rendering can be used to perform server-only data fetching.\n\n- **Example**\n\n```vue\n<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n    if (!data.value) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      data.value = await fetchOnClient(/* ... */)\n    }\n})\n</script>\n```\n\n- **See also** [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "overview", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usage note in vue-api?\n\nAssistant: To usage note in vue-api, here's what you do:\nAll APIs listed on this page must be called synchronously during the `setup()` phase of a component. See [Guide - Lifecycle Hooks](https://vuejs.org/guide/essentials/lifecycle) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onmounted() in vue-api?\n\nAssistant: To onmounted() in vue-api, here's what you do:\nRegisters a callback to be called after the component has been mounted.\n\n- **Type**\n\n```ts\nfunction onMounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered mounted after:\n\n\n  - All of its synchronous child components have been mounted (does not include async components or components inside `<Suspense>` trees).\n\n  - Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.\n\nThis hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in a [server-rendered application](https://vuejs.org/guide/scaling-up/ssr).\n\n**This hook is not called during server-side rendering.**\n\n- **Example**\n\nAccessing an element via template ref:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n    el.value // <div>\n})\n</script>\n\n<template>\n    <div ref=\"el\"></div>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onupdated() in vue-api?\n\nAssistant: To onupdated() in vue-api, here's what you do:\nRegisters a callback to be called after the component has updated its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onUpdated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA parent component's updated hook is called after that of its child components.\n\nThis hook is called after any DOM update of the component, which can be caused by different state changes, because multiple state changes can be batched into a single render cycle for performance reasons. If you need to access the updated DOM after a specific state change, use [nextTick()](https://vuejs.org/api/general#nexttick) instead.\n\n**This hook is not called during server-side rendering.**\n\nWARNING\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n\n- **Example**\n\nAccessing updated DOM:\n\n```vue\n<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n    // text content should be the same as current `count.value`\n    console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n    <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onunmounted() in vue-api?\n\nAssistant: To onunmounted() in vue-api, here's what you do:\nRegisters a callback to be called after the component has been unmounted.\n\n- **Type**\n\n```ts\nfunction onUnmounted(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nA component is considered unmounted after:\n\n\n  - All of its child components have been unmounted.\n\n  - All of its associated reactive effects (render effect and computed / watchers created during `setup()`) have been stopped.\n\nUse this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n\n**This hook is not called during server-side rendering.**\n\n- **Example**\n\n```vue\n<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n    intervalId = setInterval(() => {\n      // ...\n    })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onbeforemount() in vue-api?\n\nAssistant: To onbeforemount() in vue-api, here's what you do:\nRegisters a hook to be called right before the component is to be mounted.\n\n- **Type**\n\n```ts\nfunction onBeforeMount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onbeforeupdate() in vue-api?\n\nAssistant: To onbeforeupdate() in vue-api, here's what you do:\nRegisters a hook to be called right before the component is about to update its DOM tree due to a reactive state change.\n\n- **Type**\n\n```ts\nfunction onBeforeUpdate(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onbeforeunmount() in vue-api?\n\nAssistant: To onbeforeunmount() in vue-api, here's what you do:\nRegisters a hook to be called right before a component instance is to be unmounted.\n\n- **Type**\n\n```ts\nfunction onBeforeUnmount(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **Details**\n\nWhen this hook is called, the component instance is still fully functional.\n\n**This hook is not called during server-side rendering.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onerrorcaptured() in vue-api?\n\nAssistant: To onerrorcaptured() in vue-api, here's what you do:\nRegisters a hook to be called when an error propagating from a descendant component has been captured.\n\n- **Type**\n\n```ts\nfunction onErrorCaptured(callback: ErrorCapturedHook): void\n\ntype ErrorCapturedHook = (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    info: string\n) => boolean | void\n```\n\n- **Details**\n\nErrors can be captured from the following sources:\n\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\nYou can modify component state in `errorCaptured()` to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n\nThe hook can return `false` to stop the error from propagating further. See error propagation details below.\n\n**Error Propagation Rules**\n\n  - By default, all errors are still sent to the application-level [`app.config.errorHandler`](https://vuejs.org/api/application#app-config-errorhandler) if it is defined, so that these errors can still be reported to an analytics service in a single place.\n\n  - If multiple `errorCaptured` hooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.\n\n  - If the `errorCaptured` hook itself throws an error, both this error and the original captured error are sent to `app.config.errorHandler`.\n\n  - An `errorCaptured` hook can return `false` to prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additional `errorCaptured` hooks or `app.config.errorHandler` from being invoked for this error..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onrendertracked() in vue-api?\n\nAssistant: To onrendertracked() in vue-api, here's what you do:\nRegisters a debug hook to be called when a reactive dependency has been tracked by the component's render effect.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTracked(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    key: any\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onrendertriggered() in vue-api?\n\nAssistant: To onrendertriggered() in vue-api, here's what you do:\nRegisters a debug hook to be called when a reactive dependency triggers the component's render effect to be re-run.\n\n**This hook is development-mode-only and not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onRenderTriggered(callback: DebuggerHook): void\n\ntype DebuggerHook = (e: DebuggerEvent) => void\n\ntype DebuggerEvent = {\n    effect: ReactiveEffect\n    target: object\n    type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n    key: any\n    newValue?: any\n    oldValue?: any\n    oldTarget?: Map<any, any>\n}\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onactivated() in vue-api?\n\nAssistant: To onactivated() in vue-api, here's what you do:\nRegisters a callback to be called after the component instance is inserted into the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onActivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I ondeactivated() in vue-api?\n\nAssistant: To ondeactivated() in vue-api, here's what you do:\nRegisters a callback to be called after the component instance is removed from the DOM as part of a tree cached by [`<KeepAlive>`](https://vuejs.org/api/built-in-components#keepalive).\n\n**This hook is not called during server-side rendering.**\n\n- **Type**\n\n```ts\nfunction onDeactivated(callback: () => void, target?: ComponentInternalInstance | null): void\n```\n\n- **See also** [Guide - Lifecycle of Cached Instance](https://vuejs.org/guide/built-ins/keep-alive#lifecycle-of-cached-instance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I onserverprefetch() in vue-api?\n\nAssistant: To onserverprefetch() in vue-api, here's what you do:\nRegisters an async function to be resolved before the component instance is to be rendered on the server.\n\n- **Type**\n\n```ts\nfunction onServerPrefetch(callback: () => Promise<any>): void\n```\n\n- **Details**\n\nIf the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n\nThis hook is only called during server-side rendering can be used to perform server-only data fetching.\n\n- **Example**\n\n```vue\n<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n    if (!data.value) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      data.value = await fetchOnClient(/* ... */)\n    }\n})\n</script>\n```\n\n- **See also** [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "section_detail", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Composition API: Lifecycle Hooks in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**onMounted Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n    el.value // <div>\n})\n</script>\n\n<template>\n    <div ref=\"el\"></div>\n</template>\n```\n```\n\nThis snippet shows you how to onmounted example, which is an important aspect of composition api: lifecycle hooks.\n\n**onUpdated Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n    // text content should be the same as current `count.value`\n    console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n    <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>\n```\n```\n\nThis snippet shows you how to onupdated example, which is an important aspect of composition api: lifecycle hooks.\n\n**onUnmounted Example**:\n\n```yaml\n```vue\n<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n    intervalId = setInterval(() => {\n      // ...\n    })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>\n```\n```\n\nThis snippet shows you how to onunmounted example, which is an important aspect of composition api: lifecycle hooks.\n\n**onServerPrefetch Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n    if (!data.value) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      data.value = await fetchOnClient(/* ... */)\n    }\n})\n</script>\n```\n```\n\nThis snippet shows you how to onserverprefetch example, which is an important aspect of composition api: lifecycle hooks.\n\n", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "code_examples", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Composition API: Lifecycle Hooks in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n\nIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-lifecycle", "title": "Composition API: Lifecycle Hooks", "description": "This page covers the lifecycle hooks available in the Vue Composition API, detailing their usage, types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:34:31", "type": "best_practices", "page_metadata": {"title": "Composition API: Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "5a2302a5-a75b-40e8-9173-86ad00972609", "sourceURL": "https://vuejs.org/api/composition-api-lifecycle", "url": "https://vuejs.org/api/composition-api-lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Render Function APIs is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Render Function APIs in vue-api.\n\n# Render Function APIs\n\nThis page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.Here's a quick rundown of what this is about:\n\n## h()\n\nCreates virtual DOM nodes (vnodes).\n\n- **Type**\n\ntype ts\n\n```typescript\n// full signature\nfunction h(\n    type: string | Component,\n    props?: object | null,\n    children?: Children | Slot | Slots\n): VNode\n\n// omitting props\nfunction h(type: string | Component, children?: Children | Slot): VNode\n\ntype Children = string | number | boolean | VNode | null | Children[]\n\ntype Slot = () => Children\n\ntype Slots = { [name: string]: Slot }\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nThe first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.\n\nWhen creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.\n\nFor convenience, the props argument can be omitted when the children is not a slots object.\n\n- **Example**\n\nCreating native elements:\n\n```javascript\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nCreating components:\n\n```javascript\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n    // equivalent of some-prop=\"hello\"\n    someProp: 'hello',\n    // equivalent of @update=\"() => {}\"\n    onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n    default: () => 'default slot',\n    foo: () => h('div', 'foo'),\n    bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\n- **See also** [Guide - Render Functions - Creating VNodes](https://vuejs.org/guide/extras/render-function#creating-vnodes)\n\n## mergeProps()\n\nMerge multiple props objects with special handling for certain props.\n\n- **Type**\n\ntype ts\n\n```\nfunction mergeProps(...args: object[]): object\n```\n\n- **Details**\n\n`mergeProps()` supports merging multiple props objects with special handling for the following props:\n\n  - `class`\n  - `style`\n  - `onXxx` event listeners - multiple listeners with the same name will be merged into an array.\n\nIf you do not need the merge behavior and want simple overwrites, native object spread can be used instead.\n\n- **Example**\n\n```javascript\nimport { mergeProps } from 'vue'\n\nconst one = {\n    class: 'foo',\n    onClick: handlerA\n}\n\nconst two = {\n    class: { bar: true },\n    onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n{\n     class: 'foo bar',\n     onClick: [handlerA, handlerB]\n}\n*/\n```\n\n## cloneVNode()\n\nClones a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction cloneVNode(vnode: VNode, extraProps?: object): VNode\n```\n\n- **Details**\n\nReturns a cloned vnode, optionally with extra props to merge with the original.\n\nVnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n\nVnodes have special internal properties, so cloning them is not as simple as an object spread. `cloneVNode()` handles most of the internal logic.\n\n- **Example**\n\n```javascript\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```\n\n## isVNode()\n\nChecks if a value is a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction isVNode(value: unknown): boolean\n```\n\n## resolveComponent()\n\nFor manually resolving a registered component by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveComponent(name: string): Component | string\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the component directly.**\n\n`resolveComponent()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the component is not found, a runtime warning will be emitted, and the name string is returned.\n\n- **Example**\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    setup() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n\n      return () => {\n        return h(ButtonCounter)\n      }\n    }\n}\n```\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    render() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n      return h(ButtonCounter)\n    }\n}\n}\n```\n\n- **See also** [Guide - Render Functions - Components](https://vuejs.org/guide/extras/render-function#components)\n\n## resolveDirective()\n\nFor manually resolving a registered directive by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveDirective(name: string): Directive | undefined\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the directive directly.**\n\n`resolveDirective()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the directive is not found, a runtime warning will be emitted, and the function returns `undefined`.\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives)\n\n## withDirectives()\n\nFor adding custom directives to vnodes.\n\n- **Type**\n\ntype ts\n\n```\nfunction withDirectives(\n    vnode: VNode,\n    directives: DirectiveArguments\n): VNode\n\n// [Directive, value, argument, modifiers]\ntype DirectiveArguments = Array<\n    | [Directive]\n    | [Directive, any]\n    | [Directive, any, string]\n    | [Directive, any, string, DirectiveModifiers]\n>\n```\n\n- **Details**\n\nWraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of `[Directive, value, argument, modifiers]`. Tailing elements of the array can be omitted if not needed.\n\n- **Example**\n\n```javascript\nimport { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n    mounted() {\n      /* ... */\n    },\n    updated() {\n      /* ... */\n    }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n    [pin, 200, 'top', { animate: true }]\n])\n```\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives)\n\n## withModifiers()\n\nFor adding built-in [`v-on` modifiers](https://vuejs.org/guide/essentials/event-handling#event-modifiers) to an event handler function.\n\n- **Type**\n\ntype ts\n\n```\nfunction withModifiers(fn: Function, modifiers: ModifierGuardsKeys[]): Function\n```\n\n- **Example**\n\n```javascript\nimport { h, withModifiers } from 'vue'\n\nconst vnode = h('button', {\n    // equivalent of v-on:click.stop.prevent\n    onClick: withModifiers(() => {\n      // ...\n    }, ['stop', 'prevent'])\n})\n```\n\n- **See also** [Guide - Render Functions - Event Modifiers](https://vuejs.org/guide/extras/render-function#event-modifiers)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "overview", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I h() in vue-api?\n\nAssistant: To h() in vue-api, here's what you do:\nCreates virtual DOM nodes (vnodes).\n\n- **Type**\n\ntype ts\n\n```typescript\n// full signature\nfunction h(\n    type: string | Component,\n    props?: object | null,\n    children?: Children | Slot | Slots\n): VNode\n\n// omitting props\nfunction h(type: string | Component, children?: Children | Slot): VNode\n\ntype Children = string | number | boolean | VNode | null | Children[]\n\ntype Slot = () => Children\n\ntype Slots = { [name: string]: Slot }\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nThe first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.\n\nWhen creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.\n\nFor convenience, the props argument can be omitted when the children is not a slots object.\n\n- **Example**\n\nCreating native elements:\n\n```javascript\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nCreating components:\n\n```javascript\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n    // equivalent of some-prop=\"hello\"\n    someProp: 'hello',\n    // equivalent of @update=\"() => {}\"\n    onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n    default: () => 'default slot',\n    foo: () => h('div', 'foo'),\n    bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\n- **See also** [Guide - Render Functions - Creating VNodes](https://vuejs.org/guide/extras/render-function#creating-vnodes).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I mergeprops() in vue-api?\n\nAssistant: To mergeprops() in vue-api, here's what you do:\nMerge multiple props objects with special handling for certain props.\n\n- **Type**\n\ntype ts\n\n```\nfunction mergeProps(...args: object[]): object\n```\n\n- **Details**\n\n`mergeProps()` supports merging multiple props objects with special handling for the following props:\n\n  - `class`\n  - `style`\n  - `onXxx` event listeners - multiple listeners with the same name will be merged into an array.\n\nIf you do not need the merge behavior and want simple overwrites, native object spread can be used instead.\n\n- **Example**\n\n```javascript\nimport { mergeProps } from 'vue'\n\nconst one = {\n    class: 'foo',\n    onClick: handlerA\n}\n\nconst two = {\n    class: { bar: true },\n    onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n{\n     class: 'foo bar',\n     onClick: [handlerA, handlerB]\n}\n*/\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I clonevnode() in vue-api?\n\nAssistant: To clonevnode() in vue-api, here's what you do:\nClones a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction cloneVNode(vnode: VNode, extraProps?: object): VNode\n```\n\n- **Details**\n\nReturns a cloned vnode, optionally with extra props to merge with the original.\n\nVnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n\nVnodes have special internal properties, so cloning them is not as simple as an object spread. `cloneVNode()` handles most of the internal logic.\n\n- **Example**\n\n```javascript\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isvnode() in vue-api?\n\nAssistant: To isvnode() in vue-api, here's what you do:\nChecks if a value is a vnode.\n\n- **Type**\n\ntype ts\n\n```\nfunction isVNode(value: unknown): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I resolvecomponent() in vue-api?\n\nAssistant: To resolvecomponent() in vue-api, here's what you do:\nFor manually resolving a registered component by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveComponent(name: string): Component | string\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the component directly.**\n\n`resolveComponent()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the component is not found, a runtime warning will be emitted, and the name string is returned.\n\n- **Example**\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    setup() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n\n      return () => {\n        return h(ButtonCounter)\n      }\n    }\n}\n```\n\n```javascript\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    render() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n      return h(ButtonCounter)\n    }\n}\n}\n```\n\n- **See also** [Guide - Render Functions - Components](https://vuejs.org/guide/extras/render-function#components).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I resolvedirective() in vue-api?\n\nAssistant: To resolvedirective() in vue-api, here's what you do:\nFor manually resolving a registered directive by name.\n\n- **Type**\n\ntype ts\n\n```\nfunction resolveDirective(name: string): Directive | undefined\n```\n\n- **Details**\n\n**Note: you do not need this if you can import the directive directly.**\n\n`resolveDirective()` must be called inside either `setup()` or the render function in order to resolve from the correct component context.\n\nIf the directive is not found, a runtime warning will be emitted, and the function returns `undefined`.\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I withdirectives() in vue-api?\n\nAssistant: To withdirectives() in vue-api, here's what you do:\nFor adding custom directives to vnodes.\n\n- **Type**\n\ntype ts\n\n```\nfunction withDirectives(\n    vnode: VNode,\n    directives: DirectiveArguments\n): VNode\n\n// [Directive, value, argument, modifiers]\ntype DirectiveArguments = Array<\n    | [Directive]\n    | [Directive, any]\n    | [Directive, any, string]\n    | [Directive, any, string, DirectiveModifiers]\n>\n```\n\n- **Details**\n\nWraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of `[Directive, value, argument, modifiers]`. Tailing elements of the array can be omitted if not needed.\n\n- **Example**\n\n```javascript\nimport { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n    mounted() {\n      /* ... */\n    },\n    updated() {\n      /* ... */\n    }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n    [pin, 200, 'top', { animate: true }]\n])\n```\n\n- **See also** [Guide - Render Functions - Custom Directives](https://vuejs.org/guide/extras/render-function#custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I withmodifiers() in vue-api?\n\nAssistant: To withmodifiers() in vue-api, here's what you do:\nFor adding built-in [`v-on` modifiers](https://vuejs.org/guide/essentials/event-handling#event-modifiers) to an event handler function.\n\n- **Type**\n\ntype ts\n\n```\nfunction withModifiers(fn: Function, modifiers: ModifierGuardsKeys[]): Function\n```\n\n- **Example**\n\n```javascript\nimport { h, withModifiers } from 'vue'\n\nconst vnode = h('button', {\n    // equivalent of v-on:click.stop.prevent\n    onClick: withModifiers(() => {\n      // ...\n    }, ['stop', 'prevent'])\n})\n```\n\n- **See also** [Guide - Render Functions - Event Modifiers](https://vuejs.org/guide/extras/render-function#event-modifiers).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "section_detail", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Render Function APIs in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**h() Example - Creating Native Elements**:\n\n```yaml\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nThis snippet shows you how to h() example - creating native elements, which is an important aspect of render function apis.\n\n**h() Example - Creating Components**:\n\n```yaml\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n    // equivalent of some-prop=\"hello\"\n    someProp: 'hello',\n    // equivalent of @update=\"() => {}\"\n    onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n    default: () => 'default slot',\n    foo: () => h('div', 'foo'),\n    bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\nThis snippet shows you how to h() example - creating components, which is an important aspect of render function apis.\n\n**mergeProps() Example**:\n\n```yaml\nimport { mergeProps } from 'vue'\n\nconst one = {\n    class: 'foo',\n    onClick: handlerA\n}\n\nconst two = {\n    class: { bar: true },\n    onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n{\n     class: 'foo bar',\n     onClick: [handlerA, handlerB]\n}\n*/\n```\n\nThis snippet shows you how to mergeprops() example, which is an important aspect of render function apis.\n\n**cloneVNode() Example**:\n\n```yaml\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```\n\nThis snippet shows you how to clonevnode() example, which is an important aspect of render function apis.\n\n**resolveComponent() Example**:\n\n```yaml\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n    setup() {\n      const ButtonCounter = resolveComponent('ButtonCounter')\n\n      return () => {\n        return h(ButtonCounter)\n      }\n    }\n}\n```\n\nThis snippet shows you how to resolvecomponent() example, which is an important aspect of render function apis.\n\n", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "code_examples", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Render Function APIs in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTypes are simplified for readability.\n\nVnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/render-function", "title": "Render Function APIs", "description": "This page covers the various APIs available for rendering functions in Vue.js, including how to create virtual DOM nodes, merge props, clone vnodes, and resolve components and directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:15", "type": "best_practices", "page_metadata": {"language": "en-US", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Function APIs | Vue.js", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "d2db513f-4a0c-41b7-a094-b9b2fd199714", "sourceURL": "https://vuejs.org/api/render-function", "url": "https://vuejs.org/api/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Reactivity API: Utilities is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Reactivity API: Utilities in vue-api.\n\n# Reactivity API: Utilities\n\nThis page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.Here's a quick rundown of what this is about:\n\n## isRef()\n\nChecks if a value is a ref object.\n\n- **Type**\n\nts\n\n```\nfunction isRef<T>(r: Ref<T> | unknown): r is Ref<T>\n```\n\nNote the return type is a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates), which means `isRef` can be used as a type guard:\n\nts\n\n```\nlet foo: unknown\nif (isRef(foo)) {\n    // foo's type is narrowed to Ref<unknown>\n    foo.value\n}\n```\n\n## unref()\n\nReturns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function for `val = isRef(val) ? val.value : val`.\n\n- **Type**\n\nts\n\n```\nfunction unref<T>(ref: T | Ref<T>): T\n```\n\n- **Example**\n\nts\n\n```\nfunction useFoo(x: number | Ref<number>) {\n    const unwrapped = unref(x)\n    // unwrapped is guaranteed to be number now\n}\n```\n\n## toRef()\n\nCan be used to normalize values / refs / getters into refs (3.3+).\n\nCan also be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa.\n\n- **Type**\n\nts\n\n```ts\n// normalization signature (3.3+)\nfunction toRef<T>(\n    value: T\n): T extends () => infer R\n    ? Readonly<Ref<R>>\n    : T extends Ref\n    ? T\n    : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n    object: T,\n    key: K,\n    defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\nNormalization signature (3.3+):\n\njs\n\n```js\n// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)\n```\n\nObject property signature:\n\njs\n\n```\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3\n```\n\nNote this is different from:\n\njs\n\n```\nconst fooRef = ref(state.foo)\n```\n\nThe above ref is **not** synced with `state.foo`, because the `ref()` receives a plain number value.\n\n`toRef()` is useful when you want to pass the ref of a prop to a composable function:\n\nvue\n\n```\n<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>\n```\n\nWhen `toRef` is used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider using [`computed`](https://vuejs.org/api/reactivity-core#computed) with `get` and `set` instead. See the guide to [using `v-model` with components](https://vuejs.org/guide/components/v-model) for more information.\n\nWhen using the object property signature, `toRef()` will return a usable ref even if the source property doesn't currently exist. This makes it possible to work with optional properties, which wouldn't be picked up by [`toRefs`](https://vuejs.org/api/reactivity-utilities#torefs).\n\n## toValue()\n\n- Only supported in 3.3+\n\nNormalizes values / refs / getters to values. This is similar to [unref()](https://vuejs.org/api/reactivity-utilities#unref), except that it also normalizes getters. If the argument is a getter, it will be invoked and its return value will be returned.\n\nThis can be used in [Composables](https://vuejs.org/guide/reusability/composables) to normalize an argument that can be either a value, a ref, or a getter.\n\n- **Type**\n\nts\n\n```\nfunction toValue<T>(source: T | Ref<T> | (() => T)): T\n```\n\n- **Example**\n\njs\n\n```\ntoValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1\n```\n\nNormalizing arguments in composables:\n\nts\n\n```\nimport type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n    watch(() => toValue(id), id => {\n      // react to id changes\n    })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)\n```\n\n## toRefs()\n\nConverts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created using [`toRef()`](https://vuejs.org/api/reactivity-utilities#toref).\n\n- **Type**\n\nts\n\n```\nfunction toRefs<T extends object>(\n    object: T\n): {\n    [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\njs\n\n```\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n    foo: Ref<number>,\n    bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3\n```\n\n`toRefs` is useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:\n\njs\n\n```\nfunction useFeatureX() {\n    const state = reactive({\n      foo: 1,\n      bar: 2\n    })\n\n    // ...logic operating on state\n\n    // convert to refs when returning\n    return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()\n```\n\n## isProxy()\n\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive), [`readonly()`](https://vuejs.org/api/reactivity-core#readonly), [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive) or [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly).\n\n- **Type**\n\nts\n\n```\nfunction isProxy(value: any): boolean\n```\n\n## isReactive()\n\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) or [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive).\n\n- **Type**\n\nts\n\n```\nfunction isReactive(value: unknown): boolean\n```\n\n## isReadonly()\n\nChecks whether the passed value is a readonly object. The properties of a readonly object can change, but they can't be assigned directly via the passed object.\n\nThe proxies created by [`readonly()`](https://vuejs.org/api/reactivity-core#readonly) and [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly) are both considered readonly, as is a [`computed()`](https://vuejs.org/api/reactivity-core#computed) ref without a `set` function.\n\n- **Type**\n\nts\n\n```\nfunction isReadonly(value: unknown): boolean\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "overview", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isref() in vue-api?\n\nAssistant: To isref() in vue-api, here's what you do:\nChecks if a value is a ref object.\n\n- **Type**\n\nts\n\n```\nfunction isRef<T>(r: Ref<T> | unknown): r is Ref<T>\n```\n\nNote the return type is a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates), which means `isRef` can be used as a type guard:\n\nts\n\n```\nlet foo: unknown\nif (isRef(foo)) {\n    // foo's type is narrowed to Ref<unknown>\n    foo.value\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I unref() in vue-api?\n\nAssistant: To unref() in vue-api, here's what you do:\nReturns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function for `val = isRef(val) ? val.value : val`.\n\n- **Type**\n\nts\n\n```\nfunction unref<T>(ref: T | Ref<T>): T\n```\n\n- **Example**\n\nts\n\n```\nfunction useFoo(x: number | Ref<number>) {\n    const unwrapped = unref(x)\n    // unwrapped is guaranteed to be number now\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I toref() in vue-api?\n\nAssistant: To toref() in vue-api, here's what you do:\nCan be used to normalize values / refs / getters into refs (3.3+).\n\nCan also be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa.\n\n- **Type**\n\nts\n\n```ts\n// normalization signature (3.3+)\nfunction toRef<T>(\n    value: T\n): T extends () => infer R\n    ? Readonly<Ref<R>>\n    : T extends Ref\n    ? T\n    : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n    object: T,\n    key: K,\n    defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\nNormalization signature (3.3+):\n\njs\n\n```js\n// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)\n```\n\nObject property signature:\n\njs\n\n```\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3\n```\n\nNote this is different from:\n\njs\n\n```\nconst fooRef = ref(state.foo)\n```\n\nThe above ref is **not** synced with `state.foo`, because the `ref()` receives a plain number value.\n\n`toRef()` is useful when you want to pass the ref of a prop to a composable function:\n\nvue\n\n```\n<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>\n```\n\nWhen `toRef` is used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider using [`computed`](https://vuejs.org/api/reactivity-core#computed) with `get` and `set` instead. See the guide to [using `v-model` with components](https://vuejs.org/guide/components/v-model) for more information.\n\nWhen using the object property signature, `toRef()` will return a usable ref even if the source property doesn't currently exist. This makes it possible to work with optional properties, which wouldn't be picked up by [`toRefs`](https://vuejs.org/api/reactivity-utilities#torefs)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I tovalue() in vue-api?\n\nAssistant: To tovalue() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nNormalizes values / refs / getters to values. This is similar to [unref()](https://vuejs.org/api/reactivity-utilities#unref), except that it also normalizes getters. If the argument is a getter, it will be invoked and its return value will be returned.\n\nThis can be used in [Composables](https://vuejs.org/guide/reusability/composables) to normalize an argument that can be either a value, a ref, or a getter.\n\n- **Type**\n\nts\n\n```\nfunction toValue<T>(source: T | Ref<T> | (() => T)): T\n```\n\n- **Example**\n\njs\n\n```\ntoValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1\n```\n\nNormalizing arguments in composables:\n\nts\n\n```\nimport type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n    watch(() => toValue(id), id => {\n      // react to id changes\n    })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I torefs() in vue-api?\n\nAssistant: To torefs() in vue-api, here's what you do:\nConverts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created using [`toRef()`](https://vuejs.org/api/reactivity-utilities#toref).\n\n- **Type**\n\nts\n\n```\nfunction toRefs<T extends object>(\n    object: T\n): {\n    [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>\n```\n\n- **Example**\n\njs\n\n```\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n    foo: Ref<number>,\n    bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3\n```\n\n`toRefs` is useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:\n\njs\n\n```\nfunction useFeatureX() {\n    const state = reactive({\n      foo: 1,\n      bar: 2\n    })\n\n    // ...logic operating on state\n\n    // convert to refs when returning\n    return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isproxy() in vue-api?\n\nAssistant: To isproxy() in vue-api, here's what you do:\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive), [`readonly()`](https://vuejs.org/api/reactivity-core#readonly), [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive) or [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly).\n\n- **Type**\n\nts\n\n```\nfunction isProxy(value: any): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isreactive() in vue-api?\n\nAssistant: To isreactive() in vue-api, here's what you do:\nChecks if an object is a proxy created by [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) or [`shallowReactive()`](https://vuejs.org/api/reactivity-advanced#shallowreactive).\n\n- **Type**\n\nts\n\n```\nfunction isReactive(value: unknown): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I isreadonly() in vue-api?\n\nAssistant: To isreadonly() in vue-api, here's what you do:\nChecks whether the passed value is a readonly object. The properties of a readonly object can change, but they can't be assigned directly via the passed object.\n\nThe proxies created by [`readonly()`](https://vuejs.org/api/reactivity-core#readonly) and [`shallowReadonly()`](https://vuejs.org/api/reactivity-advanced#shallowreadonly) are both considered readonly, as is a [`computed()`](https://vuejs.org/api/reactivity-core#computed) ref without a `set` function.\n\n- **Type**\n\nts\n\n```\nfunction isReadonly(value: unknown): boolean\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Reactivity API: Utilities in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**isRef() Example**:\n\n```yaml\nlet foo: unknown\nif (isRef(foo)) {\n    // foo's type is narrowed to Ref<unknown>\n    foo.value\n}\n```\n\nThis snippet shows you how to isref() example, which is an important aspect of reactivity api: utilities.\n\n**unref() Example**:\n\n```yaml\nfunction useFoo(x: number | Ref<number>) {\n    const unwrapped = unref(x)\n    // unwrapped is guaranteed to be number now\n}\n```\n\nThis snippet shows you how to unref() example, which is an important aspect of reactivity api: utilities.\n\n", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "code_examples", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Reactivity API: Utilities in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen using the object property signature, `toRef()` will return a usable ref even if the source property doesn't currently exist.\n\n`toRefs` will only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, use `toRef` instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/reactivity-utilities", "title": "Reactivity API: Utilities", "description": "This page covers various utilities provided by the Vue.js reactivity API, including functions to check and manipulate refs and reactive objects.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:35:48", "type": "best_practices", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity API: Utilities | Vue.js", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "830aac5e-cec5-4fe7-a753-68d2d13c21de", "sourceURL": "https://vuejs.org/api/reactivity-utilities", "url": "https://vuejs.org/api/reactivity-utilities", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Composition API: Helpers is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Composition API: Helpers in vue-api.\n\n# Composition API: Helpers\n\nThis page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.Here's a quick rundown of what this is about:\n\n## useAttrs()\n\nReturns the `attrs` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes the [fallthrough attributes](https://vuejs.org/guide/components/attrs#fallthrough-attributes) of the current component. This is intended to be used in `<script setup>` where the setup context object is not available.\n\n- **Type**\n\nts\n\n```typescript\nfunction useAttrs(): Record<string, unknown>\n```\n\n## useSlots()\n\nReturns the `slots` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes parent passed slots as callable functions that return Virtual DOM nodes. This is intended to be used in `<script setup>` where the setup context object is not available.\n\nIf using TypeScript, [`defineSlots()`](https://vuejs.org/api/sfc-script-setup#defineslots) should be preferred instead.\n\n- **Type**\n\nts\n\n```typescript\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```\n\n## useModel()\n\nThis is the underlying helper that powers [`defineModel()`](https://vuejs.org/api/sfc-script-setup#definemodel). If using `<script setup>`, `defineModel()` should be preferred instead.\n\n- Only available in 3.4+\n\n- **Type**\n\nts\n\n```typescript\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n): ModelRef\n\ntype DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n}\n\ntype ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n]\n``` \n\n- **Example**\n\njs\n\n```javascript\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n}\n```\n\n- **Details**\n\n`useModel()` can be used in non-SFC components, e.g. when using raw `setup()` function. It expects the `props` object as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlike `defineModel()`, you are responsible for declaring the props and emits yourself.\n\n## useTemplateRef()\n\nReturns a shallow ref whose value will be synced with the template element or component with a matching ref attribute.\n\n- **Type**\n\nts\n\n```typescript\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\n- **Example**\n\nvue\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst inputRef = useTemplateRef('input')\n\nonMounted(() => {\n    inputRef.value.focus()\n})\n</script>\n\n<template>\n    <input ref=\"input\" />\n</template>\n```\n\n- **See also**\n  - [Guide - Template Refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Guide - Typing Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-template-refs)\n  - [Guide - Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs)\n\n## useId()\n\nUsed to generate unique-per-application IDs for accessibility attributes or form elements.\n\n- **Type**\n\nts\n\n```typescript\nfunction useId(): string\n```\n\n- **Example**\n\nvue\n\n```vue\n<script setup>\nimport { useId } from 'vue'\n\nconst id = useId()\n</script>\n\n<template>\n    <form>\n      <label :for=\"id\">Name:</label>\n      <input :id=\"id\" type=\"text\" />\n    </form>\n</template>\n```\n\n- **Details**\n\nIDs generated by `useId()` are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component calling `useId()` will also have different IDs.\n\nIDs generated by `useId()` are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches.\n\nIf you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix via [`app.config.idPrefix`](https://vuejs.org/api/application#app-config-idprefix).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "overview", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useattrs() in vue-api?\n\nAssistant: To useattrs() in vue-api, here's what you do:\nReturns the `attrs` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes the [fallthrough attributes](https://vuejs.org/guide/components/attrs#fallthrough-attributes) of the current component. This is intended to be used in `<script setup>` where the setup context object is not available.\n\n- **Type**\n\nts\n\n```typescript\nfunction useAttrs(): Record<string, unknown>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useslots() in vue-api?\n\nAssistant: To useslots() in vue-api, here's what you do:\nReturns the `slots` object from the [Setup Context](https://vuejs.org/api/composition-api-setup#setup-context), which includes parent passed slots as callable functions that return Virtual DOM nodes. This is intended to be used in `<script setup>` where the setup context object is not available.\n\nIf using TypeScript, [`defineSlots()`](https://vuejs.org/api/sfc-script-setup#defineslots) should be preferred instead.\n\n- **Type**\n\nts\n\n```typescript\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usemodel() in vue-api?\n\nAssistant: To usemodel() in vue-api, here's what you do:\nThis is the underlying helper that powers [`defineModel()`](https://vuejs.org/api/sfc-script-setup#definemodel). If using `<script setup>`, `defineModel()` should be preferred instead.\n\n- Only available in 3.4+\n\n- **Type**\n\nts\n\n```typescript\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n): ModelRef\n\ntype DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n}\n\ntype ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n]\n``` \n\n- **Example**\n\njs\n\n```javascript\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n}\n```\n\n- **Details**\n\n`useModel()` can be used in non-SFC components, e.g. when using raw `setup()` function. It expects the `props` object as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlike `defineModel()`, you are responsible for declaring the props and emits yourself..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usetemplateref() in vue-api?\n\nAssistant: To usetemplateref() in vue-api, here's what you do:\nReturns a shallow ref whose value will be synced with the template element or component with a matching ref attribute.\n\n- **Type**\n\nts\n\n```typescript\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\n- **Example**\n\nvue\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst inputRef = useTemplateRef('input')\n\nonMounted(() => {\n    inputRef.value.focus()\n})\n</script>\n\n<template>\n    <input ref=\"input\" />\n</template>\n```\n\n- **See also**\n  - [Guide - Template Refs](https://vuejs.org/guide/essentials/template-refs)\n  - [Guide - Typing Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-template-refs)\n  - [Guide - Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I useid() in vue-api?\n\nAssistant: To useid() in vue-api, here's what you do:\nUsed to generate unique-per-application IDs for accessibility attributes or form elements.\n\n- **Type**\n\nts\n\n```typescript\nfunction useId(): string\n```\n\n- **Example**\n\nvue\n\n```vue\n<script setup>\nimport { useId } from 'vue'\n\nconst id = useId()\n</script>\n\n<template>\n    <form>\n      <label :for=\"id\">Name:</label>\n      <input :id=\"id\" type=\"text\" />\n    </form>\n</template>\n```\n\n- **Details**\n\nIDs generated by `useId()` are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component calling `useId()` will also have different IDs.\n\nIDs generated by `useId()` are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches.\n\nIf you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix via [`app.config.idPrefix`](https://vuejs.org/api/application#app-config-idprefix)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Composition API: Helpers in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**useAttrs() Type**:\n\n```yaml\nfunction useAttrs(): Record<string, unknown>\n```\n\nThis snippet shows you how to useattrs() type, which is an important aspect of composition api: helpers.\n\n**useSlots() Type**:\n\n```yaml\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```\n\nThis snippet shows you how to useslots() type, which is an important aspect of composition api: helpers.\n\n**useModel() Type**:\n\n```yaml\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n): ModelRef\n\ntype DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n}\n\ntype ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n]\n```\n\nThis snippet shows you how to usemodel() type, which is an important aspect of composition api: helpers.\n\n**useModel() Example**:\n\n```yaml\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n}\n```\n\nThis snippet shows you how to usemodel() example, which is an important aspect of composition api: helpers.\n\n**useTemplateRef() Type**:\n\n```yaml\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\nThis snippet shows you how to usetemplateref() type, which is an important aspect of composition api: helpers.\n\n**useTemplateRef() Example**:\n\n```yaml\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst inputRef = useTemplateRef('input')\n\nonMounted(() => {\n    inputRef.value.focus()\n})\n</script>\n\n<template>\n    <input ref=\"input\" />\n</template>\n```\n\nThis snippet shows you how to usetemplateref() example, which is an important aspect of composition api: helpers.\n\n", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Composition API: Helpers in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `defineSlots()` instead of `useSlots()` when using TypeScript.\n\nPrefer `defineModel()` over `useModel()` when using `<script setup>` for better integration.\n\nIDs generated by `useId()` are stable across server and client renders, making them suitable for SSR applications.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/composition-api-helpers", "title": "Composition API: Helpers", "description": "This page covers various helper functions available in the Composition API of Vue.js, including useAttrs, useSlots, useModel, useTemplateRef, and useId.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:36:20", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "title": "Composition API: Helpers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:type": "website", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "b6e9725c-1575-4cfe-97f9-2ca6984f82a7", "sourceURL": "https://vuejs.org/api/composition-api-helpers", "url": "https://vuejs.org/api/composition-api-helpers", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Built-in Components is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Built-in Components in vue-api.\n\n# Built-in Components\n\nThis page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.Here's a quick rundown of what this is about:\n\n## Registration and Usage\n\nBuilt-in components can be used directly in templates without needing to be registered. They are also tree-shakeable: they are only included in the build when they are used.\n\nWhen using them in render functions, they need to be imported explicitly. For example:\n\n```js\nimport { h, Transition } from 'vue'\n\nh(Transition, {\n  /* props */\n})\n```\n\n## <Transition>\n\nProvides animated transition effects to a **single** element or component.\n\n- **Props**\n\n```ts\ninterface TransitionProps {\n    /**\n     * Used to automatically generate transition CSS class names.\n     * e.g. `name: 'fade'` will auto expand to `.fade-enter`,\n     * `.fade-enter-active`, etc.\n     */\n    name?: string\n    /**\n     * Whether to apply CSS transition classes.\n     * Default: true\n     */\n    css?: boolean\n    /**\n     * Specifies the type of transition events to wait for to\n     * determine transition end timing.\n     * Default behavior is auto detecting the type that has\n     * longer duration.\n     */\n    type?: 'transition' | 'animation'\n    /**\n     * Specifies explicit durations of the transition.\n     * Default behavior is wait for the first `transitionend`\n     * or `animationend` event on the root transition element.\n     */\n    duration?: number | { enter: number; leave: number }\n    /**\n     * Controls the timing sequence of leaving/entering transitions.\n     * Default behavior is simultaneous.\n     */\n    mode?: 'in-out' | 'out-in' | 'default'\n    /**\n     * Whether to apply transition on initial render.\n     * Default: false\n     */\n    appear?: boolean\n\n    /**\n     * Props for customizing transition classes.\n     * Use kebab-case in templates, e.g. enter-from-class=\"xxx\"\n     */\n    enterFromClass?: string\n    enterActiveClass?: string\n    enterToClass?: string\n    appearFromClass?: string\n    appearActiveClass?: string\n    appearToClass?: string\n    leaveFromClass?: string\n    leaveActiveClass?: string\n    leaveToClass?: string\n}\n```\n\n- **Events**\n\n  - `@before-enter`\n  - `@before-leave`\n  - `@enter`\n  - `@leave`\n  - `@appear`\n  - `@after-enter`\n  - `@after-leave`\n  - `@after-appear`\n  - `@enter-cancelled`\n  - `@leave-cancelled` ( `v-show` only)\n  - `@appear-cancelled`\n- **Example**\n\nSimple element:\n\n```template\n<Transition>\n    <div v-if=\"ok\">toggled content</div>\n</Transition>\n```\n\nForcing a transition by changing the `key` attribute:\n\n```template\n<Transition>\n    <div :key=\"text\">{{ text }}</div>\n</Transition>\n```\n\nDynamic component, with transition mode + animate on appear:\n\n```template\n<Transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n</Transition>\n```\n\nListening to transition events:\n\n```template\n<Transition @after-enter=\"onTransitionComplete\">\n    <div v-show=\"ok\">toggled content</div>\n</Transition>\n```\n\n- **See also** [Guide - Transition](https://vuejs.org/guide/built-ins/transition)\n\n## <TransitionGroup>\n\nProvides transition effects for **multiple** elements or components in a list.\n\n- **Props**\n\n`<TransitionGroup>` accepts the same props as `<Transition>` except `mode`, plus two additional props:\n\n```ts\ninterface TransitionGroupProps extends Omit<TransitionProps, 'mode'> {\n    /**\n     * If not defined, renders as a fragment.\n     */\n    tag?: string\n    /**\n     * For customizing the CSS class applied during move transitions.\n     * Use kebab-case in templates, e.g. move-class=\"xxx\"\n     */\n    moveClass?: string\n}\n```\n\n- **Events**\n\n`<TransitionGroup>` emits the same events as `<Transition>`.\n\n- **Details**\n\nBy default, `<TransitionGroup>` doesn't render a wrapper DOM element, but one can be defined via the `tag` prop.\n\nNote that every child in a `<transition-group>` must be [**uniquely keyed**](https://vuejs.org/guide/essentials/list#maintaining-state-with-key) for the animations to work properly.\n\n`<TransitionGroup>` supports moving transitions via CSS transform. When a child's position on screen has changed after an update, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` prop). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n- **Example**\n\n```template\n<TransitionGroup tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n</TransitionGroup>\n```\n\n- **See also** [Guide - TransitionGroup](https://vuejs.org/guide/built-ins/transition-group)\n\n## <KeepAlive>\n\nCaches dynamically toggled components wrapped inside.\n\n- **Props**\n\n```ts\ninterface KeepAliveProps {\n    /**\n     * If specified, only components with names matched by\n     * `include` will be cached.\n     */\n    include?: MatchPattern\n    /**\n     * Any component with a name matched by `exclude` will\n     * not be cached.\n     */\n    exclude?: MatchPattern\n    /**\n     * The maximum number of component instances to cache.\n     */\n    max?: number | string\n}\n\ntype MatchPattern = string | RegExp | (string | RegExp)[]\n```\n\n- **Details**\n\nWhen wrapped around a dynamic component, `<KeepAlive>` caches the inactive component instances without destroying them.\n\nThere can only be one active component instance as the direct child of `<KeepAlive>` at any time.\n\nWhen a component is toggled inside `<KeepAlive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly, providing an alternative to `mounted` and `unmounted`, which are not called. This applies to the direct child of `<KeepAlive>` as well as to all of its descendants.\n\n- **Example**\n\nBasic usage:\n\n```template\n<KeepAlive>\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nWhen used with `v-if` / `v-else` branches, there must be only one component rendered at a time:\n\n```template\n<KeepAlive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n</KeepAlive>\n```\n\nUsed together with `<Transition>`:\n\n```template\n<Transition>\n    <KeepAlive>\n      <component :is=\"view\"></component>\n    </KeepAlive>\n</Transition>\n```\n\nUsing `include` / `exclude`:\n\n```template\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nUsage with `max`:\n\n```template\n<KeepAlive :max=\"10\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n- **See also** [Guide - KeepAlive](https://vuejs.org/guide/built-ins/keep-alive)\n\n## <Teleport>\n\nRenders its slot content to another part of the DOM.\n\n- **Props**\n\n```ts\ninterface TeleportProps {\n    /**\n     * Required. Specify target container.\n     * Can either be a selector or an actual element.\n     */\n    to: string | HTMLElement\n    /**\n     * When `true`, the content will remain in its original\n     * location instead of moved into the target container.\n     * Can be changed dynamically.\n     */\n    disabled?: boolean\n    /**\n     * When `true`, the Teleport will defer until other\n     * parts of the application have been mounted before\n     * resolving its target. (3.5+)\n     */\n    defer?: boolean\n}\n```\n\n- **Example**\n\nSpecifying target container:\n\n```template\n<Teleport to=\"#some-id\" />\n<Teleport to=\".some-class\" />\n<Teleport to=\"[data-teleport]\" />\n```\n\nConditionally disabling:\n\n```template\n<Teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n    <video src=\"./my-movie.mp4\">\n</Teleport>\n```\n\nDefer target resolution :\n\n```template\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\n- **See also** [Guide - Teleport](https://vuejs.org/guide/built-ins/teleport)\n\n## <Suspense>\n\nUsed for orchestrating nested async dependencies in a component tree.\n\n- **Props**\n\n```ts\ninterface SuspenseProps {\n    timeout?: string | number\n    suspensible?: boolean\n}\n```\n\n- **Events**\n\n  - `@resolve`\n  - `@pending`\n  - `@fallback`\n- **Details**\n\n`<Suspense>` accepts two slots: the `#default` slot and the `#fallback` slot. It will display the content of the fallback slot while rendering the default slot in memory.\n\nIf it encounters async dependencies ( Async Components and components with [`async setup()`](https://vuejs.org/guide/built-ins/suspense#async-setup)) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.\n\nBy setting the Suspense as `suspensible`, all the async dependency handling will be handled by the parent Suspense. See [implementation details](https://github.com/vuejs/core/pull/6736)\n\n- **See also** [Guide - Suspense](https://vuejs.org/guide/built-ins/suspense)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "overview", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I registration and usage in vue-api?\n\nAssistant: To registration and usage in vue-api, here's what you do:\nBuilt-in components can be used directly in templates without needing to be registered. They are also tree-shakeable: they are only included in the build when they are used.\n\nWhen using them in render functions, they need to be imported explicitly. For example:\n\n```js\nimport { h, Transition } from 'vue'\n\nh(Transition, {\n  /* props */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <transition> in vue-api?\n\nAssistant: To <transition> in vue-api, here's what you do:\nProvides animated transition effects to a **single** element or component.\n\n- **Props**\n\n```ts\ninterface TransitionProps {\n    /**\n     * Used to automatically generate transition CSS class names.\n     * e.g. `name: 'fade'` will auto expand to `.fade-enter`,\n     * `.fade-enter-active`, etc.\n     */\n    name?: string\n    /**\n     * Whether to apply CSS transition classes.\n     * Default: true\n     */\n    css?: boolean\n    /**\n     * Specifies the type of transition events to wait for to\n     * determine transition end timing.\n     * Default behavior is auto detecting the type that has\n     * longer duration.\n     */\n    type?: 'transition' | 'animation'\n    /**\n     * Specifies explicit durations of the transition.\n     * Default behavior is wait for the first `transitionend`\n     * or `animationend` event on the root transition element.\n     */\n    duration?: number | { enter: number; leave: number }\n    /**\n     * Controls the timing sequence of leaving/entering transitions.\n     * Default behavior is simultaneous.\n     */\n    mode?: 'in-out' | 'out-in' | 'default'\n    /**\n     * Whether to apply transition on initial render.\n     * Default: false\n     */\n    appear?: boolean\n\n    /**\n     * Props for customizing transition classes.\n     * Use kebab-case in templates, e.g. enter-from-class=\"xxx\"\n     */\n    enterFromClass?: string\n    enterActiveClass?: string\n    enterToClass?: string\n    appearFromClass?: string\n    appearActiveClass?: string\n    appearToClass?: string\n    leaveFromClass?: string\n    leaveActiveClass?: string\n    leaveToClass?: string\n}\n```\n\n- **Events**\n\n  - `@before-enter`\n  - `@before-leave`\n  - `@enter`\n  - `@leave`\n  - `@appear`\n  - `@after-enter`\n  - `@after-leave`\n  - `@after-appear`\n  - `@enter-cancelled`\n  - `@leave-cancelled` ( `v-show` only)\n  - `@appear-cancelled`\n- **Example**\n\nSimple element:\n\n```template\n<Transition>\n    <div v-if=\"ok\">toggled content</div>\n</Transition>\n```\n\nForcing a transition by changing the `key` attribute:\n\n```template\n<Transition>\n    <div :key=\"text\">{{ text }}</div>\n</Transition>\n```\n\nDynamic component, with transition mode + animate on appear:\n\n```template\n<Transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n</Transition>\n```\n\nListening to transition events:\n\n```template\n<Transition @after-enter=\"onTransitionComplete\">\n    <div v-show=\"ok\">toggled content</div>\n</Transition>\n```\n\n- **See also** [Guide - Transition](https://vuejs.org/guide/built-ins/transition).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <transitiongroup> in vue-api?\n\nAssistant: To <transitiongroup> in vue-api, here's what you do:\nProvides transition effects for **multiple** elements or components in a list.\n\n- **Props**\n\n`<TransitionGroup>` accepts the same props as `<Transition>` except `mode`, plus two additional props:\n\n```ts\ninterface TransitionGroupProps extends Omit<TransitionProps, 'mode'> {\n    /**\n     * If not defined, renders as a fragment.\n     */\n    tag?: string\n    /**\n     * For customizing the CSS class applied during move transitions.\n     * Use kebab-case in templates, e.g. move-class=\"xxx\"\n     */\n    moveClass?: string\n}\n```\n\n- **Events**\n\n`<TransitionGroup>` emits the same events as `<Transition>`.\n\n- **Details**\n\nBy default, `<TransitionGroup>` doesn't render a wrapper DOM element, but one can be defined via the `tag` prop.\n\nNote that every child in a `<transition-group>` must be [**uniquely keyed**](https://vuejs.org/guide/essentials/list#maintaining-state-with-key) for the animations to work properly.\n\n`<TransitionGroup>` supports moving transitions via CSS transform. When a child's position on screen has changed after an update, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` prop). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n- **Example**\n\n```template\n<TransitionGroup tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n</TransitionGroup>\n```\n\n- **See also** [Guide - TransitionGroup](https://vuejs.org/guide/built-ins/transition-group).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <keepalive> in vue-api?\n\nAssistant: To <keepalive> in vue-api, here's what you do:\nCaches dynamically toggled components wrapped inside.\n\n- **Props**\n\n```ts\ninterface KeepAliveProps {\n    /**\n     * If specified, only components with names matched by\n     * `include` will be cached.\n     */\n    include?: MatchPattern\n    /**\n     * Any component with a name matched by `exclude` will\n     * not be cached.\n     */\n    exclude?: MatchPattern\n    /**\n     * The maximum number of component instances to cache.\n     */\n    max?: number | string\n}\n\ntype MatchPattern = string | RegExp | (string | RegExp)[]\n```\n\n- **Details**\n\nWhen wrapped around a dynamic component, `<KeepAlive>` caches the inactive component instances without destroying them.\n\nThere can only be one active component instance as the direct child of `<KeepAlive>` at any time.\n\nWhen a component is toggled inside `<KeepAlive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly, providing an alternative to `mounted` and `unmounted`, which are not called. This applies to the direct child of `<KeepAlive>` as well as to all of its descendants.\n\n- **Example**\n\nBasic usage:\n\n```template\n<KeepAlive>\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nWhen used with `v-if` / `v-else` branches, there must be only one component rendered at a time:\n\n```template\n<KeepAlive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n</KeepAlive>\n```\n\nUsed together with `<Transition>`:\n\n```template\n<Transition>\n    <KeepAlive>\n      <component :is=\"view\"></component>\n    </KeepAlive>\n</Transition>\n```\n\nUsing `include` / `exclude`:\n\n```template\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\nUsage with `max`:\n\n```template\n<KeepAlive :max=\"10\">\n    <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n- **See also** [Guide - KeepAlive](https://vuejs.org/guide/built-ins/keep-alive).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <teleport> in vue-api?\n\nAssistant: To <teleport> in vue-api, here's what you do:\nRenders its slot content to another part of the DOM.\n\n- **Props**\n\n```ts\ninterface TeleportProps {\n    /**\n     * Required. Specify target container.\n     * Can either be a selector or an actual element.\n     */\n    to: string | HTMLElement\n    /**\n     * When `true`, the content will remain in its original\n     * location instead of moved into the target container.\n     * Can be changed dynamically.\n     */\n    disabled?: boolean\n    /**\n     * When `true`, the Teleport will defer until other\n     * parts of the application have been mounted before\n     * resolving its target. (3.5+)\n     */\n    defer?: boolean\n}\n```\n\n- **Example**\n\nSpecifying target container:\n\n```template\n<Teleport to=\"#some-id\" />\n<Teleport to=\".some-class\" />\n<Teleport to=\"[data-teleport]\" />\n```\n\nConditionally disabling:\n\n```template\n<Teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n    <video src=\"./my-movie.mp4\">\n</Teleport>\n```\n\nDefer target resolution :\n\n```template\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\n- **See also** [Guide - Teleport](https://vuejs.org/guide/built-ins/teleport).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I <suspense> in vue-api?\n\nAssistant: To <suspense> in vue-api, here's what you do:\nUsed for orchestrating nested async dependencies in a component tree.\n\n- **Props**\n\n```ts\ninterface SuspenseProps {\n    timeout?: string | number\n    suspensible?: boolean\n}\n```\n\n- **Events**\n\n  - `@resolve`\n  - `@pending`\n  - `@fallback`\n- **Details**\n\n`<Suspense>` accepts two slots: the `#default` slot and the `#fallback` slot. It will display the content of the fallback slot while rendering the default slot in memory.\n\nIf it encounters async dependencies ( Async Components and components with [`async setup()`](https://vuejs.org/guide/built-ins/suspense#async-setup)) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.\n\nBy setting the Suspense as `suspensible`, all the async dependency handling will be handled by the parent Suspense. See [implementation details](https://github.com/vuejs/core/pull/6736)\n\n- **See also** [Guide - Suspense](https://vuejs.org/guide/built-ins/suspense).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Built-in Components in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Built-in Components**:\n\n```yaml\nimport { h, Transition } from 'vue'\nh(Transition, {\n  /* props */\n})\n```\n\nThis snippet shows you how to importing built-in components, which is an important aspect of built-in components.\n\n**Transition Props Interface**:\n\n```yaml\ninterface TransitionProps {\n    name?: string\n    css?: boolean\n    type?: 'transition' | 'animation'\n    duration?: number | { enter: number; leave: number }\n    mode?: 'in-out' | 'out-in' | 'default'\n    appear?: boolean\n    enterFromClass?: string\n    enterActiveClass?: string\n    enterToClass?: string\n    appearFromClass?: string\n    appearActiveClass?: string\n    appearToClass?: string\n    leaveFromClass?: string\n    leaveActiveClass?: string\n    leaveToClass?: string\n}\n```\n\nThis snippet shows you how to transition props interface, which is an important aspect of built-in components.\n\n", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "code_examples", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Built-in Components in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBuilt-in components are tree-shakeable, meaning they are only included in the build when they are used.\n\nWhen using built-in components in render functions, ensure to import them explicitly.\n\nEnsure that every child in a <transition-group> is uniquely keyed for animations to work properly.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/built-in-components", "title": "Built-in Components", "description": "This page covers the built-in components available in Vue.js, including their registration, usage, props, events, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:36:57", "type": "best_practices", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "title": "Built-in Components | Vue.js", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "scrapeId": "5c17ca0d-87f8-40bd-8633-850c630b24c2", "sourceURL": "https://vuejs.org/api/built-in-components", "url": "https://vuejs.org/api/built-in-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what <script setup> is in vue-api?\n\nAssistant: Sure, I'd be happy to explain <script setup> in vue-api.\n\n# <script setup>\n\n`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.Here's a quick rundown of what this is about:\n\n## Basic Syntax\n\nTo opt-in to the syntax, add the `setup` attribute to the `<script>` block:\n\n```vue\n<script setup>\nconsole.log('hello script setup')\n</script>\n```\n\nThe code inside is compiled as the content of the component's `setup()` function. This means that unlike normal `<script>`, which only executes once when the component is first imported, code inside `<script setup>` will **execute every time an instance of the component is created**.\n\n## Top-level bindings are exposed to template\n\nWhen using `<script setup>`, any top-level bindings (including variables, function declarations, and imports) declared inside `<script setup>` are directly usable in the template:\n\n```vue\n<script setup>\n// variable\nconst msg = 'Hello!'\n\n// functions\nfunction log() {\n  console.log(msg)\n}\n</script>\n\n<template>\n  <button @click=\"log\">{{ msg }}</button>\n</template>\n```\n\n## Reactivity\n\nReactive state needs to be explicitly created using [Reactivity APIs](https://vuejs.org/api/reactivity-core). Similar to values returned from a `setup()` function, refs are automatically unwrapped when referenced in templates:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n## Using Components\n\nValues in the scope of `<script setup>` can also be used directly as custom component tag names:\n\n```vue\n<script setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <MyComponent />\n</template>\n```\n\nThink of `MyComponent` as being referenced as a variable. If you have used JSX, the mental model is similar here. The kebab-case equivalent `<my-component>` also works in the template - however PascalCase component tags are strongly recommended for consistency. It also helps differentiating from native custom elements.\n\n## Dynamic Components\n\nSince components are referenced as variables instead of registered under string keys, we should use dynamic `:is` binding when using dynamic components inside `<script setup>`:\n\n```vue\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Foo\" />\n  <component :is=\"someCondition ? Foo : Bar\" />\n</template>\n```\n\n## Recursive Components\n\nAn SFC can implicitly refer to itself via its filename. E.g. a file named `FooBar.vue` can refer to itself as `<FooBar/>` in its template.\n\nNote this has lower priority than imported components. If you have a named import that conflicts with the component's inferred name, you can alias the import:\n\n```js\nimport { FooBar as FooBarChild } from './components'\n```\n\n## Namespaced Components\n\nYou can use component tags with dots like `<Foo.Bar>` to refer to components nested under object properties. This is useful when you import multiple components from a single file:\n\n```vue\n<script setup>\nimport * as Form from './form-components'\n</script>\n\n<template>\n  <Form.Input>\n    <Form.Label>label</Form.Label>\n  </Form.Input>\n</template>\n```\n\n## Using Custom Directives\n\nGlobally registered custom directives just work as normal. Local custom directives don't need to be explicitly registered with `<script setup>`, but they must follow the naming scheme `vNameOfDirective`:\n\n```vue\n<script setup>\nconst vMyDirective = {\n  beforeMount: (el) => {\n    // do something with the element\n  }\n}\n}\n</script>\n<template>\n  <h1 v-my-directive>This is a Heading</h1>\n</template>\n```\n\n## defineProps() & defineEmits()\n\nTo declare options like `props` and `emits` with full type inference support, we can use the `defineProps` and `defineEmits` APIs, which are automatically available inside `<script setup>`:\n\n```vue\n<script setup>\nconst props = defineProps({\n  foo: String\n})\n\nconst emit = defineEmits(['change', 'delete'])\n// setup code\n</script>\n```\n\n## Type-only props/emit declarations\n\nProps and emits can also be declared using pure-type syntax by passing a literal type argument to `defineProps` or `defineEmits`:\n\n```ts\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number] // named tuple syntax\n  update: [value: string]\n}>()\n```\n\n## Reactive Props Destructure\n\nIn Vue 3.5 and above, variables destructured from the return value of `defineProps` are reactive. Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`:\n\n```ts\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n```\n\n## Default props values when using type declaration\n\nIn 3.5 and above, default values can be naturally declared when using Reactive Props Destructure. But in 3.4 and below, Reactive Props Destructure is not enabled by default. In order to declare props default values with type-based declaration, the `withDefaults` compiler macro is needed:\n\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```\n\n## defineModel()\n\n- Only available in 3.4+\n\nThis macro can be used to declare a two-way binding prop that can be consumed via `v-model` from the parent component. Example usage is also discussed in the [Component `v-model`](https://vuejs.org/guide/components/v-model) guide.\n\nUnder the hood, this macro declares a model prop and a corresponding value update event. If the first argument is a literal string, it will be used as the prop name; Otherwise the prop name will default to \"modelValue\". In both cases, you can also pass an additional object which can include the prop's options and the model ref's value transform options.\n\n```js\n// declares \"modelValue\" prop, consumed by parent via v-model\nconst model = defineModel()\n// OR: declares \"modelValue\" prop with options\nconst model = defineModel({ type: String })\n\n// emits \"update:modelValue\" when mutated\nmodel.value = 'hello'\n\n// declares \"count\" prop, consumed by parent via v-model:count\nconst count = defineModel('count')\n// OR: declares \"count\" prop with options\nconst count = defineModel('count', { type: Number, default: 0 })\n\nfunction inc() {\n  // emits \"update:count\" when mutated\n  count.value++\n}\n```\n\n## Modifiers and Transformers\n\nTo access modifiers used with the `v-model` directive, we can destructure the return value of `defineModel()` like this:\n\n```js\nconst [modelValue, modelModifiers] = defineModel()\n\n// corresponds to v-model.trim\nif (modelModifiers.trim) {\n  // ...\n}\n```\n\n## Usage with TypeScript\n\nLike `defineProps` and `defineEmits`, `defineModel` can also receive type arguments to specify the types of the model value and the modifiers:\n\n```ts\nconst modelValue = defineModel<string>()\n//    ^? Ref<string | undefined>\n\n// default model with options, required removes possible undefined values\nconst modelValue = defineModel<string>({ required: true })\n//    ^? Ref<string>\n\nconst [modelValue, modifiers] = defineModel<string, 'trim' | 'uppercase'>()\n//                 ^? Record<'trim' | 'uppercase', true | undefined>\n```\n\n## defineExpose()\n\nComponents using `<script setup>` are **closed by default** - i.e. the public instance of the component, which is retrieved via template refs or `$parent` chains, will **not** expose any of the bindings declared inside `<script setup>`.\n\nTo explicitly expose properties in a `<script setup>` component, use the `defineExpose` compiler macro:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\ndefineExpose({\n  a,\n  b\n})\n</script>\n```\n\n## defineOptions()\n\n- Only supported in 3.3+\n\nThis macro can be used to declare component options directly inside `<script setup>` without having to use a separate `<script>` block:\n\n```vue\n<script setup>\ndefineOptions({\n  inheritAttrs: false,\n  customOptions: {\n    /* ... */\n  }\n})\n</script>\n```\n\n## defineSlots()\n\n- Only supported in 3.3+\n\nThis macro can be used to provide type hints to IDEs for slot name and props type checking.\n\n`defineSlots()` only accepts a type parameter and no runtime arguments. The type parameter should be a type literal where the property key is the slot name, and the value type is the slot function. The first argument of the function is the props the slot expects to receive, and its type will be used for slot props in the template. The return type is currently ignored and can be `any`, but we may leverage it for slot content checking in the future.\n\n```vue\n<script setup lang=\"ts\">\nconst slots = defineSlots<{\n  default(props: { msg: string }): any\n}>()\n</script>\n```\n\n## `useSlots()` & `useAttrs()`\n\nUsage of `slots` and `attrs` inside `<script setup>` should be relatively rare, since you can access them directly as `$slots` and `$attrs` in the template. In the rare case where you do need them, use the `useSlots` and `useAttrs` helpers respectively:\n\n```vue\n<script setup>\nimport { useSlots, useAttrs } from 'vue'\n\nconst slots = useSlots()\nconst attrs = useAttrs()\n</script>\n```\n\n## Usage alongside normal `<script>`\n\n`<script setup>` can be used alongside normal `<script>`. A normal `<script>` may be needed in cases where we need to:\n- Declare options that cannot be expressed in `<script setup>`, for example `inheritAttrs` or custom options enabled via plugins (Can be replaced by [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) in 3.3+).\n- Declaring named exports.\n- Run side effects or create objects that should only execute once.\n\n```vue\n<script>\n// normal <script>, executed in module scope (only once)\nrunSideEffectOnce()\n\n// declare additional options\nexport default {\n  inheritAttrs: false,\n  customOptions: {}\n}\n</script>\n\n<script setup>\n// executed in setup() scope (for each instance)\n</script>\n```\n\n## Top-level `await`\n\nTop-level `await` can be used inside `<script setup>`. The resulting code will be compiled as `async setup()`:\n\n```vue\n<script setup>\nconst post = await fetch(`/api/post/1`).then((r) => r.json())\n</script>\n```\n\n## Import Statements\n\nImport statements in vue follow [ECMAScript module specification](https://nodejs.org/api/esm.html). In addition, you can use aliases defined in your build tool configuration:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nimport { componentA } from './Components'\nimport { componentB } from '@/Components'\nimport { componentC } from '~/Components'\n</script>\n```\n\n## Generics\n\nGeneric type parameters can be declared using the `generic` attribute on the `<script>` tag:\n\n```vue\n<script setup lang=\"ts\" generic=\"T\">\ndefineProps<{\n  items: T[]\n  selected: T\n}>()\n</script>\n```\n\n## Restrictions\n\nDue to the difference in module execution semantics, code inside `<script setup>` relies on the context of an SFC. When moved into external `.js` or `.ts` files, it may lead to confusion for both developers and tools. Therefore, **`<script setup>`** cannot be used with the `src` attribute.\n- `<script setup>` does not support In-DOM Root Component Template.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I basic syntax in vue-api?\n\nAssistant: To basic syntax in vue-api, here's what you do:\nTo opt-in to the syntax, add the `setup` attribute to the `<script>` block:\n\n```vue\n<script setup>\nconsole.log('hello script setup')\n</script>\n```\n\nThe code inside is compiled as the content of the component's `setup()` function. This means that unlike normal `<script>`, which only executes once when the component is first imported, code inside `<script setup>` will **execute every time an instance of the component is created**..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I top-level bindings are exposed to template in vue-api?\n\nAssistant: To top-level bindings are exposed to template in vue-api, here's what you do:\nWhen using `<script setup>`, any top-level bindings (including variables, function declarations, and imports) declared inside `<script setup>` are directly usable in the template:\n\n```vue\n<script setup>\n// variable\nconst msg = 'Hello!'\n\n// functions\nfunction log() {\n  console.log(msg)\n}\n</script>\n\n<template>\n  <button @click=\"log\">{{ msg }}</button>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I reactivity in vue-api?\n\nAssistant: To reactivity in vue-api, here's what you do:\nReactive state needs to be explicitly created using [Reactivity APIs](https://vuejs.org/api/reactivity-core). Similar to values returned from a `setup()` function, refs are automatically unwrapped when referenced in templates:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I using components in vue-api?\n\nAssistant: To using components in vue-api, here's what you do:\nValues in the scope of `<script setup>` can also be used directly as custom component tag names:\n\n```vue\n<script setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <MyComponent />\n</template>\n```\n\nThink of `MyComponent` as being referenced as a variable. If you have used JSX, the mental model is similar here. The kebab-case equivalent `<my-component>` also works in the template - however PascalCase component tags are strongly recommended for consistency. It also helps differentiating from native custom elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I dynamic components in vue-api?\n\nAssistant: To dynamic components in vue-api, here's what you do:\nSince components are referenced as variables instead of registered under string keys, we should use dynamic `:is` binding when using dynamic components inside `<script setup>`:\n\n```vue\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Foo\" />\n  <component :is=\"someCondition ? Foo : Bar\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I recursive components in vue-api?\n\nAssistant: To recursive components in vue-api, here's what you do:\nAn SFC can implicitly refer to itself via its filename. E.g. a file named `FooBar.vue` can refer to itself as `<FooBar/>` in its template.\n\nNote this has lower priority than imported components. If you have a named import that conflicts with the component's inferred name, you can alias the import:\n\n```js\nimport { FooBar as FooBarChild } from './components'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I namespaced components in vue-api?\n\nAssistant: To namespaced components in vue-api, here's what you do:\nYou can use component tags with dots like `<Foo.Bar>` to refer to components nested under object properties. This is useful when you import multiple components from a single file:\n\n```vue\n<script setup>\nimport * as Form from './form-components'\n</script>\n\n<template>\n  <Form.Input>\n    <Form.Label>label</Form.Label>\n  </Form.Input>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I using custom directives in vue-api?\n\nAssistant: To using custom directives in vue-api, here's what you do:\nGlobally registered custom directives just work as normal. Local custom directives don't need to be explicitly registered with `<script setup>`, but they must follow the naming scheme `vNameOfDirective`:\n\n```vue\n<script setup>\nconst vMyDirective = {\n  beforeMount: (el) => {\n    // do something with the element\n  }\n}\n}\n</script>\n<template>\n  <h1 v-my-directive>This is a Heading</h1>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I defineprops() & defineemits() in vue-api?\n\nAssistant: To defineprops() & defineemits() in vue-api, here's what you do:\nTo declare options like `props` and `emits` with full type inference support, we can use the `defineProps` and `defineEmits` APIs, which are automatically available inside `<script setup>`:\n\n```vue\n<script setup>\nconst props = defineProps({\n  foo: String\n})\n\nconst emit = defineEmits(['change', 'delete'])\n// setup code\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I type-only props/emit declarations in vue-api?\n\nAssistant: To type-only props/emit declarations in vue-api, here's what you do:\nProps and emits can also be declared using pure-type syntax by passing a literal type argument to `defineProps` or `defineEmits`:\n\n```ts\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number] // named tuple syntax\n  update: [value: string]\n}>()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I reactive props destructure in vue-api?\n\nAssistant: To reactive props destructure in vue-api, here's what you do:\nIn Vue 3.5 and above, variables destructured from the return value of `defineProps` are reactive. Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`:\n\n```ts\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I default props values when using type declaration in vue-api?\n\nAssistant: To default props values when using type declaration in vue-api, here's what you do:\nIn 3.5 and above, default values can be naturally declared when using Reactive Props Destructure. But in 3.4 and below, Reactive Props Destructure is not enabled by default. In order to declare props default values with type-based declaration, the `withDefaults` compiler macro is needed:\n\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I definemodel() in vue-api?\n\nAssistant: To definemodel() in vue-api, here's what you do:\n- Only available in 3.4+\n\nThis macro can be used to declare a two-way binding prop that can be consumed via `v-model` from the parent component. Example usage is also discussed in the [Component `v-model`](https://vuejs.org/guide/components/v-model) guide.\n\nUnder the hood, this macro declares a model prop and a corresponding value update event. If the first argument is a literal string, it will be used as the prop name; Otherwise the prop name will default to \"modelValue\". In both cases, you can also pass an additional object which can include the prop's options and the model ref's value transform options.\n\n```js\n// declares \"modelValue\" prop, consumed by parent via v-model\nconst model = defineModel()\n// OR: declares \"modelValue\" prop with options\nconst model = defineModel({ type: String })\n\n// emits \"update:modelValue\" when mutated\nmodel.value = 'hello'\n\n// declares \"count\" prop, consumed by parent via v-model:count\nconst count = defineModel('count')\n// OR: declares \"count\" prop with options\nconst count = defineModel('count', { type: Number, default: 0 })\n\nfunction inc() {\n  // emits \"update:count\" when mutated\n  count.value++\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I modifiers and transformers in vue-api?\n\nAssistant: To modifiers and transformers in vue-api, here's what you do:\nTo access modifiers used with the `v-model` directive, we can destructure the return value of `defineModel()` like this:\n\n```js\nconst [modelValue, modelModifiers] = defineModel()\n\n// corresponds to v-model.trim\nif (modelModifiers.trim) {\n  // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usage with typescript in vue-api?\n\nAssistant: To usage with typescript in vue-api, here's what you do:\nLike `defineProps` and `defineEmits`, `defineModel` can also receive type arguments to specify the types of the model value and the modifiers:\n\n```ts\nconst modelValue = defineModel<string>()\n//    ^? Ref<string | undefined>\n\n// default model with options, required removes possible undefined values\nconst modelValue = defineModel<string>({ required: true })\n//    ^? Ref<string>\n\nconst [modelValue, modifiers] = defineModel<string, 'trim' | 'uppercase'>()\n//                 ^? Record<'trim' | 'uppercase', true | undefined>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I defineexpose() in vue-api?\n\nAssistant: To defineexpose() in vue-api, here's what you do:\nComponents using `<script setup>` are **closed by default** - i.e. the public instance of the component, which is retrieved via template refs or `$parent` chains, will **not** expose any of the bindings declared inside `<script setup>`.\n\nTo explicitly expose properties in a `<script setup>` component, use the `defineExpose` compiler macro:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\ndefineExpose({\n  a,\n  b\n})\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I defineoptions() in vue-api?\n\nAssistant: To defineoptions() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nThis macro can be used to declare component options directly inside `<script setup>` without having to use a separate `<script>` block:\n\n```vue\n<script setup>\ndefineOptions({\n  inheritAttrs: false,\n  customOptions: {\n    /* ... */\n  }\n})\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I defineslots() in vue-api?\n\nAssistant: To defineslots() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nThis macro can be used to provide type hints to IDEs for slot name and props type checking.\n\n`defineSlots()` only accepts a type parameter and no runtime arguments. The type parameter should be a type literal where the property key is the slot name, and the value type is the slot function. The first argument of the function is the props the slot expects to receive, and its type will be used for slot props in the template. The return type is currently ignored and can be `any`, but we may leverage it for slot content checking in the future.\n\n```vue\n<script setup lang=\"ts\">\nconst slots = defineSlots<{\n  default(props: { msg: string }): any\n}>()\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I `useslots()` & `useattrs()` in vue-api?\n\nAssistant: To `useslots()` & `useattrs()` in vue-api, here's what you do:\nUsage of `slots` and `attrs` inside `<script setup>` should be relatively rare, since you can access them directly as `$slots` and `$attrs` in the template. In the rare case where you do need them, use the `useSlots` and `useAttrs` helpers respectively:\n\n```vue\n<script setup>\nimport { useSlots, useAttrs } from 'vue'\n\nconst slots = useSlots()\nconst attrs = useAttrs()\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I usage alongside normal `<script>` in vue-api?\n\nAssistant: To usage alongside normal `<script>` in vue-api, here's what you do:\n`<script setup>` can be used alongside normal `<script>`. A normal `<script>` may be needed in cases where we need to:\n- Declare options that cannot be expressed in `<script setup>`, for example `inheritAttrs` or custom options enabled via plugins (Can be replaced by [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) in 3.3+).\n- Declaring named exports.\n- Run side effects or create objects that should only execute once.\n\n```vue\n<script>\n// normal <script>, executed in module scope (only once)\nrunSideEffectOnce()\n\n// declare additional options\nexport default {\n  inheritAttrs: false,\n  customOptions: {}\n}\n</script>\n\n<script setup>\n// executed in setup() scope (for each instance)\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I top-level `await` in vue-api?\n\nAssistant: To top-level `await` in vue-api, here's what you do:\nTop-level `await` can be used inside `<script setup>`. The resulting code will be compiled as `async setup()`:\n\n```vue\n<script setup>\nconst post = await fetch(`/api/post/1`).then((r) => r.json())\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I import statements in vue-api?\n\nAssistant: To import statements in vue-api, here's what you do:\nImport statements in vue follow [ECMAScript module specification](https://nodejs.org/api/esm.html). In addition, you can use aliases defined in your build tool configuration:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nimport { componentA } from './Components'\nimport { componentB } from '@/Components'\nimport { componentC } from '~/Components'\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I generics in vue-api?\n\nAssistant: To generics in vue-api, here's what you do:\nGeneric type parameters can be declared using the `generic` attribute on the `<script>` tag:\n\n```vue\n<script setup lang=\"ts\" generic=\"T\">\ndefineProps<{\n  items: T[]\n  selected: T\n}>()\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I restrictions in vue-api?\n\nAssistant: To restrictions in vue-api, here's what you do:\nDue to the difference in module execution semantics, code inside `<script setup>` relies on the context of an SFC. When moved into external `.js` or `.ts` files, it may lead to confusion for both developers and tools. Therefore, **`<script setup>`** cannot be used with the `src` attribute.\n- `<script setup>` does not support In-DOM Root Component Template..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for <script setup> in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Syntax Example**:\n\n```yaml\n<script setup>\nconsole.log('hello script setup')\n</script>\n```\n\nThis snippet shows you how to basic syntax example, which is an important aspect of <script setup>.\n\n**Top-level Bindings Example**:\n\n```yaml\n<script setup>\n// variable\nconst msg = 'Hello!'\n\n// functions\nfunction log() {\n  console.log(msg)\n}\n</script>\n\n<template>\n  <button @click=\"log\">{{ msg }}</button>\n</template>\n```\n\nThis snippet shows you how to top-level bindings example, which is an important aspect of <script setup>.\n\n**Reactivity Example**:\n\n```yaml\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to reactivity example, which is an important aspect of <script setup>.\n\n**Using Components Example**:\n\n```yaml\n<script setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <MyComponent />\n</template>\n```\n\nThis snippet shows you how to using components example, which is an important aspect of <script setup>.\n\n**Dynamic Components Example**:\n\n```yaml\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Foo\" />\n  <component :is=\"someCondition ? Foo : Bar\" />\n</template>\n```\n\nThis snippet shows you how to dynamic components example, which is an important aspect of <script setup>.\n\n**Recursive Components Example**:\n\n```yaml\nimport { FooBar as FooBarChild } from './components'\n```\n\nThis snippet shows you how to recursive components example, which is an important aspect of <script setup>.\n\n", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using <script setup> in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse PascalCase for component tags for consistency and to differentiate from native custom elements.\n\nWhen using `defineProps` and `defineEmits`, ensure that the options passed do not reference local variables declared in setup scope to avoid compile errors.\n\nFor mutable reference types, wrap default values in functions when using `withDefaults` to avoid accidental modification and ensure each component instance gets its own copy.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/sfc-script-setup.html", "title": "<script setup>", "description": "`<script setup>` is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-03-01 03:08:10", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "title": "<script setup> | Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "scrapeId": "31c8aa53-ee44-45c0-8834-8c1c99838ae3", "sourceURL": "https://vuejs.org/api/sfc-script-setup.html", "url": "https://vuejs.org/api/sfc-script-setup.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Options: State is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Options: State in vue-api.\n\n# Options: State\n\nThis page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.Here's a quick rundown of what this is about:\n\n## data\n\nA function that returns the initial reactive state for the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    data?(\n      this: ComponentPublicInstance,\n      vm: ComponentPublicInstance\n    ): object\n}\n```\n\n- **Details**\n\nThe function is expected to return a plain JavaScript object, which will be made reactive by Vue. After the instance is created, the reactive data object can be accessed as `this.$data`. The component instance also proxies all the properties found on the data object, so `this.a` will be equivalent to `this.$data.a`.\n\nAll top-level data properties must be included in the returned data object. Adding new properties to `this.$data` is possible, but it is **not** recommended. If the desired value of a property is not yet available then an empty value such as `undefined` or `null` should be included as a placeholder to ensure that Vue knows that the property exists.\n\nProperties that start with `_` or `$` will **not** be proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `this.$data._property`.\n\nIt is **not** recommended to return objects with their own stateful behavior like browser API objects and prototype properties. The returned object should ideally be a plain object that only represents the state of the component.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    created() {\n      console.log(this.a) // 1\n      console.log(this.$data) // { a: 1 }\n    }\n}\n```\n\nNote that if you use an arrow function with the `data` property, `this` won't be the component's instance, but you can still access the instance as the function's first argument:\n\n```js\ndata: (vm) => ({ a: vm.myProp })\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth)\n\n## props\n\nDeclare the props of a component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    props?: ArrayPropsOptions | ObjectPropsOptions\n}\n\ntype ArrayPropsOptions = string[]\n\ntype ObjectPropsOptions = { [key: string]: Prop }\n\ntype Prop<T = any> = PropOptions<T> | PropType<T> | null\n\ninterface PropOptions<T> {\n    type?: PropType<T>\n    required?: boolean\n    default?: T | ((rawProps: object) => T)\n    validator?: (value: unknown, rawProps: object) => boolean\n}\n\ntype PropType<T> = { new (): T } | { new (): T }[]\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nIn Vue, all component props need to be explicitly declared. Component props can be declared in two forms:\n\n  - Simple form using an array of strings\n  - Full form using an object where each property key is the name of the prop, and the value is the prop's type (a constructor function) or advanced options.\n\nWith object-based syntax, each prop can further define the following options:\n\n  - **`type`**: Can be one of the following native constructors: `String`, `Number`, `Boolean`, `Array`, `Object`, `Date`, `Function`, `Symbol`, any custom constructor function or an array of those. In development mode, Vue will check if a prop's value matches the declared type, and will throw a warning if it doesn't. See [Prop Validation](https://vuejs.org/guide/components/props#prop-validation) for more details.\n\n    Also note that a prop with `Boolean` type affects its value casting behavior in both development and production. See [Boolean Casting](https://vuejs.org/guide/components/props#boolean-casting) for more details.\n\n  - **`default`**: Specifies a default value for the prop when it is not passed by the parent or has `undefined` value. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.\n\n  - **`required`**: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.\n\n  - **`validator`**: Custom validator function that takes the prop value and props object as arguments. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails).\n- **Example**\n\nSimple declaration:\n\n```js\nexport default {\n    props: ['size', 'myMessage']\n}\n```\n\n\nObject declaration with validations:\n\n```js\nexport default {\n    props: {\n      // type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: (value) => {\n          return value >= 0\n        }\n      }\n    }\n}\n```\n\n- **See also**\n  - [Guide - Props](https://vuejs.org/guide/components/props)\n  - [Guide - Typing Component Props](https://vuejs.org/guide/typescript/options-api#typing-component-props)\n\n## computed\n\nDeclare computed properties to be exposed on the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    computed?: {\n      [key: string]: ComputedGetter<any> | WritableComputedOptions<any>\n    }\n}\n\ntype ComputedGetter<T> = (\n    this: ComponentPublicInstance,\n    vm: ComponentPublicInstance\n) => T\n\ntype ComputedSetter<T> = (\n    this: ComponentPublicInstance,\n    value: T\n) => void\n\ntype WritableComputedOptions<T> = {\n    get: ComputedGetter<T>\n    set: ComputedSetter<T>\n}\n```\n\n- **Details**\n\nThe option accepts an object where the key is the name of the computed property, and the value is either a computed getter, or an object with `get` and `set` methods (for writable computed properties).\n\nAll getters and setters have their `this` context automatically bound to the component instance.\n\nNote that if you use an arrow function with a computed property, `this` won't point to the component's instance, but you can still access the instance as the function's first argument:\n\n```js\nexport default {\n    computed: {\n      aDouble: (vm) => vm.a * 2\n    }\n}\n```\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    computed: {\n      // readonly\n      aDouble() {\n        return this.a * 2\n      },\n      // writable\n      aPlus: {\n        get() {\n          return this.a + 1\n        },\n        set(v) {\n          this.a = v - 1\n        }\n      }\n    },\n    created() {\n      console.log(this.aDouble) // => 2\n      console.log(this.aPlus) // => 2\n\n      this.aPlus = 3\n      console.log(this.a) // => 2\n      console.log(this.aDouble) // => 4\n    }\n}\n```\n\n- **See also**\n  - [Guide - Computed Properties](https://vuejs.org/guide/essentials/computed)\n  - [Guide - Typing Computed Properties](https://vuejs.org/guide/typescript/options-api#typing-computed-properties)\n\n## methods\n\nDeclare methods to be mixed into the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    methods?: {\n      [key: string]: (this: ComponentPublicInstance, ...args: any[]) => any\n    }\n}\n```\n\n- **Details**\n\nDeclared methods can be directly accessed on the component instance, or used in template expressions. All methods have their `this` context automatically bound to the component instance, even when passed around.\n\nAvoid using arrow functions when declaring methods, as they will not have access to the component instance via `this`.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    methods: {\n      plus() {\n        this.a++\n      }\n    },\n    created() {\n      this.plus()\n      console.log(this.a) // => 2\n    }\n}\n```\n\n- **See also** [Event Handling](https://vuejs.org/guide/essentials/event-handling)\n\n## watch\n\nDeclare watch callbacks to be invoked on data change.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    watch?: {\n      [key: string]: WatchOptionItem | WatchOptionItem[]\n    }\n}\n\ntype WatchOptionItem = string | WatchCallback | ObjectWatchOptionItem\n\ntype WatchCallback<T> = (\n    value: T,\n    oldValue: T,\n    onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype ObjectWatchOptionItem = {\n    handler: WatchCallback | string\n    immediate?: boolean // default: false\n    deep?: boolean // default: false\n    flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n    onTrack?: (event: DebuggerEvent) => void\n    onTrigger?: (event: DebuggerEvent) => void\n}\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nThe `watch` option expects an object where keys are the reactive component instance properties to watch (e.g. properties declared via `data` or `computed`) — and values are the corresponding callbacks. The callback receives the new value and the old value of the watched source.\n\nIn addition to a root-level property, the key can also be a simple dot-delimited path, e.g. `a.b.c`. Note that this usage does **not** support complex expressions - only dot-delimited paths are supported. If you need to watch complex data sources, use the imperative [`$watch()`](https://vuejs.org/api/component-instance#watch) API instead.\n\nThe value can also be a string of a method name (declared via `methods`), or an object that contains additional options. When using the object syntax, the callback should be declared under the `handler` field. Additional options include:\n\n  - **`immediate`**: trigger the callback immediately on watcher creation. Old value will be `undefined` on the first call.\n  - **`deep`**: force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. See [Deep Watchers](https://vuejs.org/guide/essentials/watchers#deep-watchers).\n  - **`flush`**: adjust the callback's flush timing. See [Callback Flush Timing](https://vuejs.org/guide/essentials/watchers#callback-flush-timing) and [`watchEffect()`](https://vuejs.org/api/reactivity-core#watcheffect).\n  - **`onTrack / onTrigger`**: debug the watcher's dependencies. See [Watcher Debugging](https://vuejs.org/guide/extras/reactivity-in-depth#watcher-debugging).\n\nAvoid using arrow functions when declaring watch callbacks as they will not have access to the component instance via `this`.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return {\n        a: 1,\n        b: 2,\n        c: {\n          d: 4\n        },\n        e: 5,\n        f: 6\n      }\n    },\n    watch: {\n      // watching top-level property\n      a(val, oldVal) {\n        console.log(`new: ${val}, old: ${oldVal}`)\n      },\n      // string method name\n      b: 'someMethod',\n      // the callback will be called whenever any of the watched object properties change regardless of their nested depth\n      c: {\n        handler(val, oldVal) {\n          console.log('c changed')\n        },\n        deep: true\n      },\n      // watching a single nested property:\n      'c.d': function (val, oldVal) {\n        // do something\n      },\n      // the callback will be called immediately after the start of the observation\n      e: {\n        handler(val, oldVal) {\n          console.log('e changed')\n        },\n        immediate: true\n      },\n      // you can pass array of callbacks, they will be called one-by-one\n      f: [\n        'handle1',\n        function handle2(val, oldVal) {\n          console.log('handle2 triggered')\n        },\n        {\n          handler: function handle3(val, oldVal) {\n            console.log('handle3 triggered')\n          }\n          /* ... */\n        }\n      ]\n    },\n    methods: {\n      someMethod() {\n        console.log('b changed')\n      },\n      handle1() {\n        console.log('handle 1 triggered')\n      }\n    },\n    created() {\n      this.a = 3 // => new: 3, old: 1\n    }\n}\n```\n\n- **See also** [Watchers](https://vuejs.org/guide/essentials/watchers)\n\n## emits\n\nDeclare the custom events emitted by the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    emits?: ArrayEmitsOptions | ObjectEmitsOptions\n}\n\ntype ArrayEmitsOptions = string[]\n\ntype ObjectEmitsOptions = { [key: string]: EmitValidator | null }\n\ntype EmitValidator = (...args: unknown[]) => boolean\n```\n\n- **Details**\n\nEmitted events can be declared in two forms:\n\n  - Simple form using an array of strings\n  - Full form using an object where each property key is the name of the event, and the value is either `null` or a validator function.\n\nThe validation function will receive the additional arguments passed to the component's `$emit` call. For example, if `this.$emit('foo', 1)` is called, the corresponding validator for `foo` will receive the argument `1`. The validator function should return a boolean to indicate whether the event arguments are valid.\n\nNote that the `emits` option affects which event listeners are considered component event listeners, rather than native DOM event listeners. The listeners for declared events will be removed from the component's `$attrs` object, so they will not be passed through to the component's root element. See [Fallthrough Attributes](https://vuejs.org/guide/components/attrs) for more details.\n\n- **Example**\n\nArray syntax:\n\n```js\nexport default {\n    emits: ['check'],\n    created() {\n      this.$emit('check')\n    }\n}\n```\n\n\nObject syntax:\n\n```js\nexport default {\n    emits: {\n      // no validation\n      click: null,\n\n      // with validation\n      submit: (payload) => {\n        if (payload.email && payload.password) {\n          return true\n        } else {\n          console.warn(`Invalid submit event payload!`)\n          return false\n        }\n      }\n    }\n}\n```\n\n- **See also**\n  - [Guide - Fallthrough Attributes](https://vuejs.org/guide/components/attrs)\n  - [Guide - Typing Component Emits](https://vuejs.org/guide/typescript/options-api#typing-component-emits)\n\n## expose\n\nDeclare exposed public properties when the component instance is accessed by a parent via template refs.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    expose?: string[]\n}\n```\n\n- **Details**\n\nBy default, a component instance exposes all instance properties to the parent when accessed via `$parent`, `$root`, or template refs. This can be undesirable, since a component most likely has internal state or methods that should be kept private to avoid tight coupling.\n\nThe `expose` option expects a list of property name strings. When `expose` is used, only the properties explicitly listed will be exposed on the component's public instance.\n\n`expose` only affects user-defined properties - it does not filter out built-in component instance properties.\n\n- **Example**\n\n```js\nexport default {\n    // only `publicMethod` will be available on the public instance\n    expose: ['publicMethod'],\n    methods: {\n      publicMethod() {\n        // ...\n      },\n      privateMethod() {\n        // ...\n      }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "overview", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I data in vue-api?\n\nAssistant: To data in vue-api, here's what you do:\nA function that returns the initial reactive state for the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    data?(\n      this: ComponentPublicInstance,\n      vm: ComponentPublicInstance\n    ): object\n}\n```\n\n- **Details**\n\nThe function is expected to return a plain JavaScript object, which will be made reactive by Vue. After the instance is created, the reactive data object can be accessed as `this.$data`. The component instance also proxies all the properties found on the data object, so `this.a` will be equivalent to `this.$data.a`.\n\nAll top-level data properties must be included in the returned data object. Adding new properties to `this.$data` is possible, but it is **not** recommended. If the desired value of a property is not yet available then an empty value such as `undefined` or `null` should be included as a placeholder to ensure that Vue knows that the property exists.\n\nProperties that start with `_` or `$` will **not** be proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `this.$data._property`.\n\nIt is **not** recommended to return objects with their own stateful behavior like browser API objects and prototype properties. The returned object should ideally be a plain object that only represents the state of the component.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    created() {\n      console.log(this.a) // 1\n      console.log(this.$data) // { a: 1 }\n    }\n}\n```\n\nNote that if you use an arrow function with the `data` property, `this` won't be the component's instance, but you can still access the instance as the function's first argument:\n\n```js\ndata: (vm) => ({ a: vm.myProp })\n```\n\n- **See also** [Reactivity in Depth](https://vuejs.org/guide/extras/reactivity-in-depth).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I props in vue-api?\n\nAssistant: To props in vue-api, here's what you do:\nDeclare the props of a component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    props?: ArrayPropsOptions | ObjectPropsOptions\n}\n\ntype ArrayPropsOptions = string[]\n\ntype ObjectPropsOptions = { [key: string]: Prop }\n\ntype Prop<T = any> = PropOptions<T> | PropType<T> | null\n\ninterface PropOptions<T> {\n    type?: PropType<T>\n    required?: boolean\n    default?: T | ((rawProps: object) => T)\n    validator?: (value: unknown, rawProps: object) => boolean\n}\n\ntype PropType<T> = { new (): T } | { new (): T }[]\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nIn Vue, all component props need to be explicitly declared. Component props can be declared in two forms:\n\n  - Simple form using an array of strings\n  - Full form using an object where each property key is the name of the prop, and the value is the prop's type (a constructor function) or advanced options.\n\nWith object-based syntax, each prop can further define the following options:\n\n  - **`type`**: Can be one of the following native constructors: `String`, `Number`, `Boolean`, `Array`, `Object`, `Date`, `Function`, `Symbol`, any custom constructor function or an array of those. In development mode, Vue will check if a prop's value matches the declared type, and will throw a warning if it doesn't. See [Prop Validation](https://vuejs.org/guide/components/props#prop-validation) for more details.\n\n    Also note that a prop with `Boolean` type affects its value casting behavior in both development and production. See [Boolean Casting](https://vuejs.org/guide/components/props#boolean-casting) for more details.\n\n  - **`default`**: Specifies a default value for the prop when it is not passed by the parent or has `undefined` value. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.\n\n  - **`required`**: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.\n\n  - **`validator`**: Custom validator function that takes the prop value and props object as arguments. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails).\n- **Example**\n\nSimple declaration:\n\n```js\nexport default {\n    props: ['size', 'myMessage']\n}\n```\n\n\nObject declaration with validations:\n\n```js\nexport default {\n    props: {\n      // type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: (value) => {\n          return value >= 0\n        }\n      }\n    }\n}\n```\n\n- **See also**\n  - [Guide - Props](https://vuejs.org/guide/components/props)\n  - [Guide - Typing Component Props](https://vuejs.org/guide/typescript/options-api#typing-component-props).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I computed in vue-api?\n\nAssistant: To computed in vue-api, here's what you do:\nDeclare computed properties to be exposed on the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    computed?: {\n      [key: string]: ComputedGetter<any> | WritableComputedOptions<any>\n    }\n}\n\ntype ComputedGetter<T> = (\n    this: ComponentPublicInstance,\n    vm: ComponentPublicInstance\n) => T\n\ntype ComputedSetter<T> = (\n    this: ComponentPublicInstance,\n    value: T\n) => void\n\ntype WritableComputedOptions<T> = {\n    get: ComputedGetter<T>\n    set: ComputedSetter<T>\n}\n```\n\n- **Details**\n\nThe option accepts an object where the key is the name of the computed property, and the value is either a computed getter, or an object with `get` and `set` methods (for writable computed properties).\n\nAll getters and setters have their `this` context automatically bound to the component instance.\n\nNote that if you use an arrow function with a computed property, `this` won't point to the component's instance, but you can still access the instance as the function's first argument:\n\n```js\nexport default {\n    computed: {\n      aDouble: (vm) => vm.a * 2\n    }\n}\n```\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    computed: {\n      // readonly\n      aDouble() {\n        return this.a * 2\n      },\n      // writable\n      aPlus: {\n        get() {\n          return this.a + 1\n        },\n        set(v) {\n          this.a = v - 1\n        }\n      }\n    },\n    created() {\n      console.log(this.aDouble) // => 2\n      console.log(this.aPlus) // => 2\n\n      this.aPlus = 3\n      console.log(this.a) // => 2\n      console.log(this.aDouble) // => 4\n    }\n}\n```\n\n- **See also**\n  - [Guide - Computed Properties](https://vuejs.org/guide/essentials/computed)\n  - [Guide - Typing Computed Properties](https://vuejs.org/guide/typescript/options-api#typing-computed-properties).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I methods in vue-api?\n\nAssistant: To methods in vue-api, here's what you do:\nDeclare methods to be mixed into the component instance.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    methods?: {\n      [key: string]: (this: ComponentPublicInstance, ...args: any[]) => any\n    }\n}\n```\n\n- **Details**\n\nDeclared methods can be directly accessed on the component instance, or used in template expressions. All methods have their `this` context automatically bound to the component instance, even when passed around.\n\nAvoid using arrow functions when declaring methods, as they will not have access to the component instance via `this`.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    methods: {\n      plus() {\n        this.a++\n      }\n    },\n    created() {\n      this.plus()\n      console.log(this.a) // => 2\n    }\n}\n```\n\n- **See also** [Event Handling](https://vuejs.org/guide/essentials/event-handling).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I watch in vue-api?\n\nAssistant: To watch in vue-api, here's what you do:\nDeclare watch callbacks to be invoked on data change.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    watch?: {\n      [key: string]: WatchOptionItem | WatchOptionItem[]\n    }\n}\n\ntype WatchOptionItem = string | WatchCallback | ObjectWatchOptionItem\n\ntype WatchCallback<T> = (\n    value: T,\n    oldValue: T,\n    onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype ObjectWatchOptionItem = {\n    handler: WatchCallback | string\n    immediate?: boolean // default: false\n    deep?: boolean // default: false\n    flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n    onTrack?: (event: DebuggerEvent) => void\n    onTrigger?: (event: DebuggerEvent) => void\n}\n```\n\n> Types are simplified for readability.\n\n- **Details**\n\nThe `watch` option expects an object where keys are the reactive component instance properties to watch (e.g. properties declared via `data` or `computed`) — and values are the corresponding callbacks. The callback receives the new value and the old value of the watched source.\n\nIn addition to a root-level property, the key can also be a simple dot-delimited path, e.g. `a.b.c`. Note that this usage does **not** support complex expressions - only dot-delimited paths are supported. If you need to watch complex data sources, use the imperative [`$watch()`](https://vuejs.org/api/component-instance#watch) API instead.\n\nThe value can also be a string of a method name (declared via `methods`), or an object that contains additional options. When using the object syntax, the callback should be declared under the `handler` field. Additional options include:\n\n  - **`immediate`**: trigger the callback immediately on watcher creation. Old value will be `undefined` on the first call.\n  - **`deep`**: force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. See [Deep Watchers](https://vuejs.org/guide/essentials/watchers#deep-watchers).\n  - **`flush`**: adjust the callback's flush timing. See [Callback Flush Timing](https://vuejs.org/guide/essentials/watchers#callback-flush-timing) and [`watchEffect()`](https://vuejs.org/api/reactivity-core#watcheffect).\n  - **`onTrack / onTrigger`**: debug the watcher's dependencies. See [Watcher Debugging](https://vuejs.org/guide/extras/reactivity-in-depth#watcher-debugging).\n\nAvoid using arrow functions when declaring watch callbacks as they will not have access to the component instance via `this`.\n\n- **Example**\n\n```js\nexport default {\n    data() {\n      return {\n        a: 1,\n        b: 2,\n        c: {\n          d: 4\n        },\n        e: 5,\n        f: 6\n      }\n    },\n    watch: {\n      // watching top-level property\n      a(val, oldVal) {\n        console.log(`new: ${val}, old: ${oldVal}`)\n      },\n      // string method name\n      b: 'someMethod',\n      // the callback will be called whenever any of the watched object properties change regardless of their nested depth\n      c: {\n        handler(val, oldVal) {\n          console.log('c changed')\n        },\n        deep: true\n      },\n      // watching a single nested property:\n      'c.d': function (val, oldVal) {\n        // do something\n      },\n      // the callback will be called immediately after the start of the observation\n      e: {\n        handler(val, oldVal) {\n          console.log('e changed')\n        },\n        immediate: true\n      },\n      // you can pass array of callbacks, they will be called one-by-one\n      f: [\n        'handle1',\n        function handle2(val, oldVal) {\n          console.log('handle2 triggered')\n        },\n        {\n          handler: function handle3(val, oldVal) {\n            console.log('handle3 triggered')\n          }\n          /* ... */\n        }\n      ]\n    },\n    methods: {\n      someMethod() {\n        console.log('b changed')\n      },\n      handle1() {\n        console.log('handle 1 triggered')\n      }\n    },\n    created() {\n      this.a = 3 // => new: 3, old: 1\n    }\n}\n```\n\n- **See also** [Watchers](https://vuejs.org/guide/essentials/watchers).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I emits in vue-api?\n\nAssistant: To emits in vue-api, here's what you do:\nDeclare the custom events emitted by the component.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    emits?: ArrayEmitsOptions | ObjectEmitsOptions\n}\n\ntype ArrayEmitsOptions = string[]\n\ntype ObjectEmitsOptions = { [key: string]: EmitValidator | null }\n\ntype EmitValidator = (...args: unknown[]) => boolean\n```\n\n- **Details**\n\nEmitted events can be declared in two forms:\n\n  - Simple form using an array of strings\n  - Full form using an object where each property key is the name of the event, and the value is either `null` or a validator function.\n\nThe validation function will receive the additional arguments passed to the component's `$emit` call. For example, if `this.$emit('foo', 1)` is called, the corresponding validator for `foo` will receive the argument `1`. The validator function should return a boolean to indicate whether the event arguments are valid.\n\nNote that the `emits` option affects which event listeners are considered component event listeners, rather than native DOM event listeners. The listeners for declared events will be removed from the component's `$attrs` object, so they will not be passed through to the component's root element. See [Fallthrough Attributes](https://vuejs.org/guide/components/attrs) for more details.\n\n- **Example**\n\nArray syntax:\n\n```js\nexport default {\n    emits: ['check'],\n    created() {\n      this.$emit('check')\n    }\n}\n```\n\n\nObject syntax:\n\n```js\nexport default {\n    emits: {\n      // no validation\n      click: null,\n\n      // with validation\n      submit: (payload) => {\n        if (payload.email && payload.password) {\n          return true\n        } else {\n          console.warn(`Invalid submit event payload!`)\n          return false\n        }\n      }\n    }\n}\n```\n\n- **See also**\n  - [Guide - Fallthrough Attributes](https://vuejs.org/guide/components/attrs)\n  - [Guide - Typing Component Emits](https://vuejs.org/guide/typescript/options-api#typing-component-emits).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I expose in vue-api?\n\nAssistant: To expose in vue-api, here's what you do:\nDeclare exposed public properties when the component instance is accessed by a parent via template refs.\n\n- **Type**\n\n```ts\ninterface ComponentOptions {\n    expose?: string[]\n}\n```\n\n- **Details**\n\nBy default, a component instance exposes all instance properties to the parent when accessed via `$parent`, `$root`, or template refs. This can be undesirable, since a component most likely has internal state or methods that should be kept private to avoid tight coupling.\n\nThe `expose` option expects a list of property name strings. When `expose` is used, only the properties explicitly listed will be exposed on the component's public instance.\n\n`expose` only affects user-defined properties - it does not filter out built-in component instance properties.\n\n- **Example**\n\n```js\nexport default {\n    // only `publicMethod` will be available on the public instance\n    expose: ['publicMethod'],\n    methods: {\n      publicMethod() {\n        // ...\n      },\n      privateMethod() {\n        // ...\n      }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Options: State in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**data example**:\n\n```yaml\nexport default {\n    data() {\n      return { a: 1 }\n    },\n    created() {\n      console.log(this.a) // 1\n      console.log(this.$data) // { a: 1 }\n    }\n}\n```\n\nThis snippet shows you how to data example, which is an important aspect of options: state.\n\n**data arrow function example**:\n\n```yaml\ndata: (vm) => ({ a: vm.myProp })\n```\n\nThis snippet shows you how to data arrow function example, which is an important aspect of options: state.\n\n**props simple declaration example**:\n\n```yaml\nexport default {\n    props: ['size', 'myMessage']\n}\n```\n\nThis snippet shows you how to props simple declaration example, which is an important aspect of options: state.\n\n", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "code_examples", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: What are some tips for using Options: State in vue-api effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid using arrow functions when declaring methods and watch callbacks, as they will not have access to the component instance via `this`.\n\nAll top-level data properties must be included in the returned data object.\n\nAdding new properties to `this.$data` is possible, but it is not recommended.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/api/options-state.html", "title": "Options: State", "description": "This page covers the various options available for managing state in Vue components, including data, props, computed properties, methods, watchers, emits, and expose.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:35:21", "type": "best_practices", "page_metadata": {"ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "title": "Options: State | Vue.js", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "1c370cc1-ea41-4ab8-b3dd-ad8da90bd709", "sourceURL": "https://vuejs.org/api/options-state.html", "url": "https://vuejs.org/api/options-state.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you explain what Application API is in vue-api?\n\nAssistant: Sure, I'd be happy to explain Application API in vue-api.\n\n# Application API\n\nThis page covers the Application API for creating and managing Vue applications.Here's a quick rundown of what this is about:\n\n## createApp()\n\nCreates an application instance.\n\n- **Type**\n\ntypeScript\n\n```typescript\nfunction createApp(rootComponent: Component, rootProps?: object): App\n```\n\n- **Details**\n\nThe first argument is the root component. The second optional argument is the props to be passed to the root component.\n\n- **Example**\n\nWith inline root component:\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* root component options */\n})\n```\n\nWith imported component:\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n- **See also** [Guide - Creating a Vue Application](https://vuejs.org/guide/essentials/application)\n\n## createSSRApp()\n\nCreates an application instance in [SSR Hydration](https://vuejs.org/guide/scaling-up/ssr#client-hydration) mode. Usage is exactly the same as `createApp()`.\n\n## app.mount()\n\nMounts the application instance in a container element.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    mount(rootContainer: Element | string): ComponentPublicInstance\n}\n```\n\n- **Details**\n\nThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.\n\nIf the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the `innerHTML` of the container will be used as the template.\n\nIn SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are [mismatches](https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch), the existing DOM nodes will be morphed to match the expected output.\n\nFor each app instance, `mount()` can only be called once.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')\n```\n\nCan also mount to an actual DOM element:\n\njavascript\n\n```javascript\napp.mount(document.body.firstChild)\n```\n\n## app.unmount()\n\nUnmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    unmount(): void\n}\n```\n\n## app.onUnmount()\n\nRegisters a callback to be called when the app is unmounted.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    onUnmount(callback: () => any): void\n}\n```\n\n## app.component()\n\nRegisters a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    component(name: string): Component | undefined\n    component(name: string, component: Component): this\n}\n```\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n    /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')\n```\n\n- **See also** [Component Registration](https://vuejs.org/guide/components/registration)\n\n## app.directive()\n\nRegisters a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    directive(name: string): Directive | undefined\n    directive(name: string, directive: Directive): this\n}\n```\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n    /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n    /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')\n```\n\n- **See also** [Custom Directives](https://vuejs.org/guide/reusability/custom-directives)\n\n## app.use()\n\nInstalls a [plugin](https://vuejs.org/guide/reusability/plugins).\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    use(plugin: Plugin, ...options: any[]): this\n}\n```\n\n- **Details**\n\nExpects the plugin as the first argument, and optional plugin options as the second argument.\n\nThe plugin can either be an object with an `install()` method, or just a function that will be used as the `install()` method. The options (second argument of `app.use()`) will be passed along to the plugin's `install()` method.\n\nWhen `app.use()` is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n    /* ... */\n})\n\napp.use(MyPlugin)\n```\n\n- **See also** [Plugins](https://vuejs.org/guide/reusability/plugins)\n\n## app.mixin()\n\nApplies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.\n\nNot Recommended\n\nMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.\n\nFor logic reuse, prefer [Composables](https://vuejs.org/guide/reusability/composables) instead.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    mixin(mixin: ComponentOptions): this\n}\n```\n\n## app.provide()\n\nProvide a value that can be injected in all descendant components within the application.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}\n```\n\n- **Details**\n\nExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')\n```\n\nInside a component in the application:\n\njavascript\n\n```javascript\nimport { inject } from 'vue'\n\nexport default {\n    setup() {\n      console.log(inject('message')) // 'hello'\n    }\n}\n```\n\njavascript\n\n```javascript\nexport default {\n    inject: ['message'],\n    created() {\n      console.log(this.message) // 'hello'\n    }\n}\n```\n\n- **See also**  \n  - [Provide / Inject](https://vuejs.org/guide/components/provide-inject)  \n  - [App-level Provide](https://vuejs.org/guide/components/provide-inject#app-level-provide)  \n  - [app.runWithContext()](https://vuejs.org/api/application#app-runwithcontext)\n\n## app.runWithContext()\n\n- Only supported in 3.3+\n\nExecute a callback with the current app as injection context.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    runWithContext<T>(fn: () => T): T\n}\n```\n\n- **Details**\n\nExpects a callback function and runs the callback immediately. During the synchronous call of the callback, `inject()` calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n    return inject('id')\n})\n\nconsole.log(injected) // 1\n```\n\n## app.version\n\nProvides the version of Vue that the application was created with. This is useful inside [plugins](https://vuejs.org/guide/reusability/plugins), where you might need conditional logic based on different Vue versions.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    version: string\n}\n```\n\n- **Example**\n\nPerforming a version check inside a plugin:\n\njavascript\n\n```javascript\nexport default {\n    install(app) {\n      const version = Number(app.version.split('.')[0])\n      if (version < 3) {\n        console.warn('This plugin requires Vue 3')\n      }\n    }\n}\n```\n\n- **See also** [Global API - version](https://vuejs.org/api/general#version)\n\n## app.config\n\nEvery application instance exposes a `config` object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.\n\n## app.config.errorHandler\n\nAssign a global handler for uncaught errors propagating from within the application.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    errorHandler?: (\n      err: unknown,\n      instance: ComponentPublicInstance | null,\n      // `info` is a Vue-specific error info,\n      // e.g. which lifecycle hook the error was thrown in\n      info: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nIt can capture errors from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.errorHandler = (err, instance, info) => {\n    // handle error, e.g. report to a service\n}\n```\n\n## app.config.warnHandler\n\nAssign a custom handler for runtime warnings from Vue.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    warnHandler?: (\n      msg: string,\n      instance: ComponentPublicInstance | null,\n      trace: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.\n\nIt can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.\n\nTIP\n\nWarnings only work during development, so this config is ignored in production mode.\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.warnHandler = (msg, instance, trace) => {\n    // `trace` is the component hierarchy trace\n}\n```\n\n## app.config.performance\n\nSet this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n- **Type:** `boolean`\n\n- **See also** [Guide - Performance](https://vuejs.org/guide/best-practices/performance)\n\n## app.config.compilerOptions\n\nConfigure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the [`compilerOptions` option](https://vuejs.org/api/options-rendering#compileroptions).\n\nImportant\n\nThis config option is only respected when using the full build (i.e. the standalone `vue.js` that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to `@vue/compiler-dom` via build tool configurations instead.\n\n- For `vue-loader`: [pass via the `compilerOptions` loader option](https://vue-loader.vuejs.org/options.html#compileroptions). Also see [how to configure it in `vue-cli`](https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader).\n\n- For `vite`: [pass via `@vitejs/plugin-vue` options](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options).\n\n## app.config.compilerOptions.isCustomElement\n\nSpecifies a check method to recognize native custom elements.\n\n- **Type:** `(tag: string) => boolean`\n\n- **Details**\n\nShould return `true` if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.\n\nNative HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.\n\n- **Example**\n\njavascript\n\n```javascript\n// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n    return tag.startsWith('ion-')\n}\n```\n\n- **See also** [Vue and Web Components](https://vuejs.org/guide/extras/web-components)\n\n## app.config.compilerOptions.whitespace\n\nAdjusts template whitespace handling behavior.\n\n- **Type:** `'condense' | 'preserve'`\n\n- **Default:** `'condense'`\n\n- **Details**\n\nVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:\n\n1. Leading / ending whitespace characters inside an element are condensed into a single space.\n2. Whitespace characters between elements that contain newlines are removed.\n3. Consecutive whitespace characters in text nodes are condensed into a single space.\n\nSetting this option to `'preserve'` will disable (2) and (3).\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.compilerOptions.whitespace = 'preserve'\n```\n\n## app.config.compilerOptions.delimiters\n\nAdjusts the delimiters used for text interpolation within the template.\n\n- **Type:** `[string, string]`\n\n- **Default:** `['{{', '}}']`\n\n- **Details**\n\nThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.\n\n- **Example**\n\njavascript\n\n```javascript\n// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']\n```\n\n## app.config.compilerOptions.comments\n\nAdjusts treatment of HTML comments in templates.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, Vue will remove the comments in production. Setting this option to `true` will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.compilerOptions.comments = true\n```\n\n## app.config.globalProperties\n\nAn object that can be used to register global properties that can be accessed on any component instance inside the application.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    globalProperties: Record<string, any>\n}\n```\n\n- **Details**\n\nThis is a replacement of Vue 2's `Vue.prototype` which is no longer present in Vue 3. As with anything global, this should be used sparingly.\n\nIf a global property conflicts with a component’s own property, the component's own property will have higher priority.\n\n- **Usage**\n\njavascript\n\n```javascript\napp.config.globalProperties.msg = 'hello'\n```\n\nThis makes `msg` available inside any component template in the application, and also on `this` of any component instance:\n\njavascript\n\n```javascript\nexport default {\n    mounted() {\n      console.log(this.msg) // 'hello'\n    }\n}\n```\n\n- **See also** [Guide - Augmenting Global Properties](https://vuejs.org/guide/typescript/options-api#augmenting-global-properties)\n\n## app.config.optionMergeStrategies\n\nAn object for defining merging strategies for custom component options.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any\n```\n\n- **Details**\n\nSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).\n\nA merge strategy function can be registered for a custom option by assigning it on the `app.config.optionMergeStrategies` object using the option's name as the key.\n\nThe merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.\n\n- **Example**\n\njavascript\n\n```javascript\nconst app = createApp({\n    // option from self\n    msg: 'Vue',\n    // option from a mixin\n    mixins: [\n      {\n        msg: 'Hello '\n      }\n    ],\n    mounted() {\n      // merged options exposed on this.$options\n      console.log(this.$options.msg)\n    }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n    return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'\n```\n\n- **See also** [Component Instance - `$options`](https://vuejs.org/api/component-instance#options)\n\n## app.config.idPrefix\n\nConfigure a prefix for all IDs generated via [useId()](https://vuejs.org/api/composition-api-helpers#useid) inside this application.\n\n- **Type:** `string`\n\n- **Default:** `undefined`\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.idPrefix = 'myApp'\n```\n\njavascript\n\n```javascript\n// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'\n```\n\n## app.config.throwUnhandledErrorInProduction\n\nForce unhandled errors to be thrown in production mode.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:\n\n  - In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.\n\n  - In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.\n\nBy setting `app.config.throwUnhandledErrorInProduction` to `true`, unhandled errors will be thrown even in production mode.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I createapp() in vue-api?\n\nAssistant: To createapp() in vue-api, here's what you do:\nCreates an application instance.\n\n- **Type**\n\ntypeScript\n\n```typescript\nfunction createApp(rootComponent: Component, rootProps?: object): App\n```\n\n- **Details**\n\nThe first argument is the root component. The second optional argument is the props to be passed to the root component.\n\n- **Example**\n\nWith inline root component:\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* root component options */\n})\n```\n\nWith imported component:\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n- **See also** [Guide - Creating a Vue Application](https://vuejs.org/guide/essentials/application).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I createssrapp() in vue-api?\n\nAssistant: To createssrapp() in vue-api, here's what you do:\nCreates an application instance in [SSR Hydration](https://vuejs.org/guide/scaling-up/ssr#client-hydration) mode. Usage is exactly the same as `createApp()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.mount() in vue-api?\n\nAssistant: To app.mount() in vue-api, here's what you do:\nMounts the application instance in a container element.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    mount(rootContainer: Element | string): ComponentPublicInstance\n}\n```\n\n- **Details**\n\nThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.\n\nIf the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the `innerHTML` of the container will be used as the template.\n\nIn SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are [mismatches](https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch), the existing DOM nodes will be morphed to match the expected output.\n\nFor each app instance, `mount()` can only be called once.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')\n```\n\nCan also mount to an actual DOM element:\n\njavascript\n\n```javascript\napp.mount(document.body.firstChild)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.unmount() in vue-api?\n\nAssistant: To app.unmount() in vue-api, here's what you do:\nUnmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    unmount(): void\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.onunmount() in vue-api?\n\nAssistant: To app.onunmount() in vue-api, here's what you do:\nRegisters a callback to be called when the app is unmounted.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    onUnmount(callback: () => any): void\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.component() in vue-api?\n\nAssistant: To app.component() in vue-api, here's what you do:\nRegisters a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    component(name: string): Component | undefined\n    component(name: string, component: Component): this\n}\n```\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n    /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')\n```\n\n- **See also** [Component Registration](https://vuejs.org/guide/components/registration).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.directive() in vue-api?\n\nAssistant: To app.directive() in vue-api, here's what you do:\nRegisters a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    directive(name: string): Directive | undefined\n    directive(name: string, directive: Directive): this\n}\n```\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n    /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n    /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')\n```\n\n- **See also** [Custom Directives](https://vuejs.org/guide/reusability/custom-directives).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.use() in vue-api?\n\nAssistant: To app.use() in vue-api, here's what you do:\nInstalls a [plugin](https://vuejs.org/guide/reusability/plugins).\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    use(plugin: Plugin, ...options: any[]): this\n}\n```\n\n- **Details**\n\nExpects the plugin as the first argument, and optional plugin options as the second argument.\n\nThe plugin can either be an object with an `install()` method, or just a function that will be used as the `install()` method. The options (second argument of `app.use()`) will be passed along to the plugin's `install()` method.\n\nWhen `app.use()` is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n    /* ... */\n})\n\napp.use(MyPlugin)\n```\n\n- **See also** [Plugins](https://vuejs.org/guide/reusability/plugins).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.mixin() in vue-api?\n\nAssistant: To app.mixin() in vue-api, here's what you do:\nApplies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.\n\nNot Recommended\n\nMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.\n\nFor logic reuse, prefer [Composables](https://vuejs.org/guide/reusability/composables) instead.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    mixin(mixin: ComponentOptions): this\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.provide() in vue-api?\n\nAssistant: To app.provide() in vue-api, here's what you do:\nProvide a value that can be injected in all descendant components within the application.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}\n```\n\n- **Details**\n\nExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')\n```\n\nInside a component in the application:\n\njavascript\n\n```javascript\nimport { inject } from 'vue'\n\nexport default {\n    setup() {\n      console.log(inject('message')) // 'hello'\n    }\n}\n```\n\njavascript\n\n```javascript\nexport default {\n    inject: ['message'],\n    created() {\n      console.log(this.message) // 'hello'\n    }\n}\n```\n\n- **See also**  \n  - [Provide / Inject](https://vuejs.org/guide/components/provide-inject)  \n  - [App-level Provide](https://vuejs.org/guide/components/provide-inject#app-level-provide)  \n  - [app.runWithContext()](https://vuejs.org/api/application#app-runwithcontext).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.runwithcontext() in vue-api?\n\nAssistant: To app.runwithcontext() in vue-api, here's what you do:\n- Only supported in 3.3+\n\nExecute a callback with the current app as injection context.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    runWithContext<T>(fn: () => T): T\n}\n```\n\n- **Details**\n\nExpects a callback function and runs the callback immediately. During the synchronous call of the callback, `inject()` calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.\n\n- **Example**\n\njavascript\n\n```javascript\nimport { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n    return inject('id')\n})\n\nconsole.log(injected) // 1\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.version in vue-api?\n\nAssistant: To app.version in vue-api, here's what you do:\nProvides the version of Vue that the application was created with. This is useful inside [plugins](https://vuejs.org/guide/reusability/plugins), where you might need conditional logic based on different Vue versions.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface App {\n    version: string\n}\n```\n\n- **Example**\n\nPerforming a version check inside a plugin:\n\njavascript\n\n```javascript\nexport default {\n    install(app) {\n      const version = Number(app.version.split('.')[0])\n      if (version < 3) {\n        console.warn('This plugin requires Vue 3')\n      }\n    }\n}\n```\n\n- **See also** [Global API - version](https://vuejs.org/api/general#version).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config in vue-api?\n\nAssistant: To app.config in vue-api, here's what you do:\nEvery application instance exposes a `config` object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.errorhandler in vue-api?\n\nAssistant: To app.config.errorhandler in vue-api, here's what you do:\nAssign a global handler for uncaught errors propagating from within the application.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    errorHandler?: (\n      err: unknown,\n      instance: ComponentPublicInstance | null,\n      // `info` is a Vue-specific error info,\n      // e.g. which lifecycle hook the error was thrown in\n      info: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n\nIt can capture errors from the following sources:\n\n  - Component renders\n  - Event handlers\n  - Lifecycle hooks\n  - `setup()` function\n  - Watchers\n  - Custom directive hooks\n  - Transition hooks\n\nTIP\n\nIn production, the 3rd argument ( `info`) will be a shortened code instead of the full information string. You can find the code to string mapping in the [Production Error Code Reference](https://vuejs.org/error-reference/#runtime-errors).\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.errorHandler = (err, instance, info) => {\n    // handle error, e.g. report to a service\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.warnhandler in vue-api?\n\nAssistant: To app.config.warnhandler in vue-api, here's what you do:\nAssign a custom handler for runtime warnings from Vue.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    warnHandler?: (\n      msg: string,\n      instance: ComponentPublicInstance | null,\n      trace: string\n    ) => void\n}\n```\n\n- **Details**\n\nThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.\n\nIt can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.\n\nTIP\n\nWarnings only work during development, so this config is ignored in production mode.\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.warnHandler = (msg, instance, trace) => {\n    // `trace` is the component hierarchy trace\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.performance in vue-api?\n\nAssistant: To app.config.performance in vue-api, here's what you do:\nSet this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n- **Type:** `boolean`\n\n- **See also** [Guide - Performance](https://vuejs.org/guide/best-practices/performance).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions in vue-api?\n\nAssistant: To app.config.compileroptions in vue-api, here's what you do:\nConfigure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the [`compilerOptions` option](https://vuejs.org/api/options-rendering#compileroptions).\n\nImportant\n\nThis config option is only respected when using the full build (i.e. the standalone `vue.js` that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to `@vue/compiler-dom` via build tool configurations instead.\n\n- For `vue-loader`: [pass via the `compilerOptions` loader option](https://vue-loader.vuejs.org/options.html#compileroptions). Also see [how to configure it in `vue-cli`](https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader).\n\n- For `vite`: [pass via `@vitejs/plugin-vue` options](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.iscustomelement in vue-api?\n\nAssistant: To app.config.compileroptions.iscustomelement in vue-api, here's what you do:\nSpecifies a check method to recognize native custom elements.\n\n- **Type:** `(tag: string) => boolean`\n\n- **Details**\n\nShould return `true` if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.\n\nNative HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.\n\n- **Example**\n\njavascript\n\n```javascript\n// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n    return tag.startsWith('ion-')\n}\n```\n\n- **See also** [Vue and Web Components](https://vuejs.org/guide/extras/web-components).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.whitespace in vue-api?\n\nAssistant: To app.config.compileroptions.whitespace in vue-api, here's what you do:\nAdjusts template whitespace handling behavior.\n\n- **Type:** `'condense' | 'preserve'`\n\n- **Default:** `'condense'`\n\n- **Details**\n\nVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:\n\n1. Leading / ending whitespace characters inside an element are condensed into a single space.\n2. Whitespace characters between elements that contain newlines are removed.\n3. Consecutive whitespace characters in text nodes are condensed into a single space.\n\nSetting this option to `'preserve'` will disable (2) and (3).\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.compilerOptions.whitespace = 'preserve'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.delimiters in vue-api?\n\nAssistant: To app.config.compileroptions.delimiters in vue-api, here's what you do:\nAdjusts the delimiters used for text interpolation within the template.\n\n- **Type:** `[string, string]`\n\n- **Default:** `['{{', '}}']`\n\n- **Details**\n\nThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.\n\n- **Example**\n\njavascript\n\n```javascript\n// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.compileroptions.comments in vue-api?\n\nAssistant: To app.config.compileroptions.comments in vue-api, here's what you do:\nAdjusts treatment of HTML comments in templates.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, Vue will remove the comments in production. Setting this option to `true` will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.compilerOptions.comments = true\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.globalproperties in vue-api?\n\nAssistant: To app.config.globalproperties in vue-api, here's what you do:\nAn object that can be used to register global properties that can be accessed on any component instance inside the application.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    globalProperties: Record<string, any>\n}\n```\n\n- **Details**\n\nThis is a replacement of Vue 2's `Vue.prototype` which is no longer present in Vue 3. As with anything global, this should be used sparingly.\n\nIf a global property conflicts with a component’s own property, the component's own property will have higher priority.\n\n- **Usage**\n\njavascript\n\n```javascript\napp.config.globalProperties.msg = 'hello'\n```\n\nThis makes `msg` available inside any component template in the application, and also on `this` of any component instance:\n\njavascript\n\n```javascript\nexport default {\n    mounted() {\n      console.log(this.msg) // 'hello'\n    }\n}\n```\n\n- **See also** [Guide - Augmenting Global Properties](https://vuejs.org/guide/typescript/options-api#augmenting-global-properties).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.optionmergestrategies in vue-api?\n\nAssistant: To app.config.optionmergestrategies in vue-api, here's what you do:\nAn object for defining merging strategies for custom component options.\n\n- **Type**\n\ntypeScript\n\n```typescript\ninterface AppConfig {\n    optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any\n```\n\n- **Details**\n\nSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).\n\nA merge strategy function can be registered for a custom option by assigning it on the `app.config.optionMergeStrategies` object using the option's name as the key.\n\nThe merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.\n\n- **Example**\n\njavascript\n\n```javascript\nconst app = createApp({\n    // option from self\n    msg: 'Vue',\n    // option from a mixin\n    mixins: [\n      {\n        msg: 'Hello '\n      }\n    ],\n    mounted() {\n      // merged options exposed on this.$options\n      console.log(this.$options.msg)\n    }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n    return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'\n```\n\n- **See also** [Component Instance - `$options`](https://vuejs.org/api/component-instance#options).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.idprefix in vue-api?\n\nAssistant: To app.config.idprefix in vue-api, here's what you do:\nConfigure a prefix for all IDs generated via [useId()](https://vuejs.org/api/composition-api-helpers#useid) inside this application.\n\n- **Type:** `string`\n\n- **Default:** `undefined`\n\n- **Example**\n\njavascript\n\n```javascript\napp.config.idPrefix = 'myApp'\n```\n\njavascript\n\n```javascript\n// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: How do I app.config.throwunhandlederrorinproduction in vue-api?\n\nAssistant: To app.config.throwunhandlederrorinproduction in vue-api, here's what you do:\nForce unhandled errors to be thrown in production mode.\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Details**\n\nBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:\n\n  - In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.\n\n  - In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.\n\nBy setting `app.config.throwUnhandledErrorInProduction` to `true`, unhandled errors will be thrown even in production mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-api expert.\n\nUser: Can you give me some code examples for Application API in vue-api?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**createApp() Example with inline root component**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({\n    /* root component options */\n})\n```\n\nThis snippet shows you how to createapp() example with inline root component, which is an important aspect of application api.\n\n**createApp() Example with imported component**:\n\n```yaml\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nThis snippet shows you how to createapp() example with imported component, which is an important aspect of application api.\n\n", "metadata": {"source_url": "https://vuejs.org/api/application", "title": "Application API", "description": "This page covers the Application API for creating and managing Vue applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 04:38:11", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Application API | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:card": "summary", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "theme-color": "#3c8772", "scrapeId": "12a91dd4-6f5a-43a8-b95d-ba6cff371307", "sourceURL": "https://vuejs.org/api/application", "url": "https://vuejs.org/api/application", "statusCode": 200}}}
