{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Hono Web application framework is in hono?\n\nAssistant: Sure, I'd be happy to explain Hono Web application framework in hono.\n\n# Hono Web application framework\n\nFast, lightweight, built on Web Standards. Support for any JavaScript runtime.Here's a quick rundown of what this is about:\n\n## Ultrafast & Lightweight\n\nThe router RegExpRouter is really fast. The hono/tiny preset is under 14kB. Using only Web Standard APIs.\n\n## Multi-runtime\n\nWorks on Cloudflare, Fastly, Deno, Bun, AWS, or Node.js. The same code runs on all platforms.\n\n## Batteries Included\n\nHono has built-in middleware, custom middleware, third-party middleware, and helpers. Batteries included.\n\n## Delightful DX\n\nSuper clean APIs. First-class TypeScript support. Now, we've got \"Types\".\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev", "title": "Hono Web application framework", "description": "Fast, lightweight, built on Web Standards. Support for any JavaScript runtime.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:50:11", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "ogDescription": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:description": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "title": "Hono - Web framework built on Web Standards", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "014a611d-0f79-4264-83ad-3b3274cabea4", "sourceURL": "https://hono.dev", "url": "https://hono.dev/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I ultrafast & lightweight in hono?\n\nAssistant: To ultrafast & lightweight in hono, here's what you do:\nThe router RegExpRouter is really fast. The hono/tiny preset is under 14kB. Using only Web Standard APIs..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev", "title": "Hono Web application framework", "description": "Fast, lightweight, built on Web Standards. Support for any JavaScript runtime.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "ogDescription": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:description": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "title": "Hono - Web framework built on Web Standards", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "014a611d-0f79-4264-83ad-3b3274cabea4", "sourceURL": "https://hono.dev", "url": "https://hono.dev/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I multi-runtime in hono?\n\nAssistant: To multi-runtime in hono, here's what you do:\nWorks on Cloudflare, Fastly, Deno, Bun, AWS, or Node.js. The same code runs on all platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev", "title": "Hono Web application framework", "description": "Fast, lightweight, built on Web Standards. Support for any JavaScript runtime.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "ogDescription": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:description": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "title": "Hono - Web framework built on Web Standards", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "014a611d-0f79-4264-83ad-3b3274cabea4", "sourceURL": "https://hono.dev", "url": "https://hono.dev/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I batteries included in hono?\n\nAssistant: To batteries included in hono, here's what you do:\nHono has built-in middleware, custom middleware, third-party middleware, and helpers. Batteries included..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev", "title": "Hono Web application framework", "description": "Fast, lightweight, built on Web Standards. Support for any JavaScript runtime.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "ogDescription": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:description": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "title": "Hono - Web framework built on Web Standards", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "014a611d-0f79-4264-83ad-3b3274cabea4", "sourceURL": "https://hono.dev", "url": "https://hono.dev/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I delightful dx in hono?\n\nAssistant: To delightful dx in hono, here's what you do:\nSuper clean APIs. First-class TypeScript support. Now, we've got \"Types\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev", "title": "Hono Web application framework", "description": "Fast, lightweight, built on Web Standards. Support for any JavaScript runtime.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "ogDescription": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:description": "Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js. Fast, but not only fast.", "title": "Hono - Web framework built on Web Standards", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "014a611d-0f79-4264-83ad-3b3274cabea4", "sourceURL": "https://hono.dev", "url": "https://hono.dev/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Hono is in hono?\n\nAssistant: Sure, I'd be happy to explain Hono in hono.\n\n# Hono\n\nHono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.Here's a quick rundown of what this is about:\n\n## Quick Start\n\nJust run this:\n\nnpm create hono@latest\n\n```sh\nnpm create hono@latest\n```\n\n```sh\nyarn create hono\n```\n\n```sh\npnpm create hono@latest\n```\n\n```sh\nbun create hono@latest\n```\n\n```sh\ndeno init --npm hono@latest\n```\n\n## Features\n\n- **Ultrafast** 🚀 - The router `RegExpRouter` is really fast. Not using linear loops. Fast.\n- **Lightweight** 🪶 - The `hono/tiny` preset is under 14kB. Hono has zero dependencies and uses only the Web Standards.\n- **Multi-runtime** 🌍 - Works on Cloudflare Workers, Fastly Compute, Deno, Bun, AWS Lambda, or Node.js. The same code runs on all platforms.\n- **Batteries Included** 🔋 - Hono has built-in middleware, custom middleware, third-party middleware, and helpers. Batteries included.\n- **Delightful DX** 😃 - Super clean APIs. First-class TypeScript support. Now, we've got \"Types\".\n\n## Use-cases\n\nHono is a simple web application framework similar to Express, without a frontend. But it runs on CDN Edges and allows you to construct larger applications when combined with middleware. Here are some examples of use-cases.\n\n- Building Web APIs\n- Proxy of backend servers\n- Front of CDN\n- Edge application\n- Base server for a library\n- Full-stack application\n\n## Who is using Hono?\n\n| Project | Platform | What for? |\n| --- | --- | --- |\n| [cdnjs](https://cdnjs.com/) | Cloudflare Workers | A free and open-source CDN service. _Hono is used for the API server_. |\n| [Cloudflare D1](https://www.cloudflare.com/developer-platform/d1/) | Cloudflare Workers | Serverless SQL databases. _Hono is used for the internal API server_. |\n| [Cloudflare Workers KV](https://www.cloudflare.com/developer-platform/workers-kv/) | Cloudflare Workers | Serverless key-value database. _Hono is used for the internal API server_. |\n| [BaseAI](https://baseai.dev/) | Local AI Server | Serverless AI agent pipes with memory. An open-source agentic AI framework for web. _API server with Hono_. |\n| [Unkey](https://unkey.dev/) | Cloudflare Workers | An open-source API authentication and authorization. _Hono is used for the API server_. |\n| [OpenStatus](https://openstatus.dev/) | Bun | An open-source website & API monitoring platform. _Hono is used for the API server_. |\n| [Deno Benchmarks](https://deno.com/benchmarks) | Deno | A secure TypeScript runtime built on V8. _Hono is used for benchmarking_. |\n\nAnd the following.\n\n- [Drivly](https://driv.ly/) - Cloudflare Workers\n- [repeat.dev](https://repeat.dev/) - Cloudflare Workers\n\nDo you want to see more? See [Who is using Hono in production?](https://github.com/orgs/honojs/discussions/1510).\n\n## Hono in 1 minute\n\nA demonstration to create an application for Cloudflare Workers with Hono.\n\n![Demo](https://hono.dev/images/sc.gif)\n\n## Ultrafast\n\n**Hono is the fastest**, compared to other routers for Cloudflare Workers.\n\n```\nHono x 402,820 ops/sec ±4.78% (80 runs sampled)\nitty-router x 212,598 ops/sec ±3.11% (87 runs sampled)\nsunder x 297,036 ops/sec ±4.76% (77 runs sampled)\nworktop x 197,345 ops/sec ±2.40% (88 runs sampled)\nFastest is Hono\n✨  Done in 28.06s.\n```\n\nSee [more benchmarks](https://hono.dev/docs/concepts/benchmarks).\n\n## Lightweight\n\n**Hono is so small**. With the `hono/tiny` preset, its size is **under 14KB** when minified. There are many middleware and adapters, but they are bundled only when used. For context, the size of Express is 572KB.\n\n```\n$ npx wrangler dev --minify ./src/index.ts\n ⛅️ wrangler 2.20.0\n--------------------\n⬣ Listening at http://0.0.0.0:8787\n- http://127.0.0.1:8787\n- http://192.168.128.165:8787\nTotal Upload: 11.47 KiB / gzip: 4.34 KiB\n```\n\n## Multiple routers\n\n**Hono has multiple routers**.\n\n**RegExpRouter** is the fastest router in the JavaScript world. It matches the route using a single large Regex created before dispatch. With **SmartRouter**, it supports all route patterns.\n\n**LinearRouter** registers the routes very quickly, so it's suitable for an environment that initializes applications every time. **PatternRouter** simply adds and matches the pattern, making it small.\n\nSee [more information about routes](https://hono.dev/docs/concepts/routers).\n\n## Web Standards\n\nThanks to the use of the **Web Standards**, Hono works on a lot of platforms.\n\n- Cloudflare Workers\n- Cloudflare Pages\n- Fastly Compute\n- Deno\n- Bun\n- Vercel\n- AWS Lambda\n- Lambda@Edge\n- Others\n\nAnd by using [a Node.js adapter](https://github.com/honojs/node-server), Hono works on Node.js.\n\nSee [more information about Web Standards](https://hono.dev/docs/concepts/web-standard).\n\n## Middleware & Helpers\n\n**Hono has many middleware and helpers**. This makes \"Write Less, do more\" a reality.\n\nOut of the box, Hono provides middleware and helpers for:\n\n- [Basic Authentication](https://hono.dev/docs/middleware/builtin/basic-auth)\n- [Bearer Authentication](https://hono.dev/docs/middleware/builtin/bearer-auth)\n- [Body Limit](https://hono.dev/docs/middleware/builtin/body-limit)\n- [Cache](https://hono.dev/docs/middleware/builtin/cache)\n- [Compress](https://hono.dev/docs/middleware/builtin/compress)\n- [Context Storage](https://hono.dev/docs/middleware/builtin/context-storage)\n- [Cookie](https://hono.dev/docs/helpers/cookie)\n- [CORS](https://hono.dev/docs/middleware/builtin/cors)\n- [ETag](https://hono.dev/docs/middleware/builtin/etag)\n- [html](https://hono.dev/docs/helpers/html)\n- [JSX](https://hono.dev/docs/guides/jsx)\n- [JWT Authentication](https://hono.dev/docs/middleware/builtin/jwt)\n- [Logger](https://hono.dev/docs/middleware/builtin/logger)\n- [Language](https://hono.dev/docs/middleware/builtin/language)\n- [Pretty JSON](https://hono.dev/docs/middleware/builtin/pretty-json)\n- [Secure Headers](https://hono.dev/docs/middleware/builtin/secure-headers)\n- [SSG](https://hono.dev/docs/helpers/ssg)\n- [Streaming](https://hono.dev/docs/helpers/streaming)\n- [GraphQL Server](https://github.com/honojs/middleware/tree/main/packages/graphql-server)\n- [Firebase Authentication](https://github.com/honojs/middleware/tree/main/packages/firebase-auth)\n- [Sentry](https://github.com/honojs/middleware/tree/main/packages/sentry)\n- Others!\n\nFor example, adding ETag and request logging only takes a few lines of code with Hono:\n\n```ts\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\nimport { logger } from 'hono/logger'\n\nconst app = new Hono()\napp.use(etag(), logger())\n``` \n\nSee [more information about Middleware](https://hono.dev/docs/concepts/middleware).\n\n## Developer Experience\n\nHono provides a delightful \" **Developer Experience**\".\n\nEasy access to Request/Response thanks to the `Context` object. Moreover, Hono is written in TypeScript. Hono has \" **Types**\".\n\nFor example, the path parameters will be literal types.\n\n![SS](https://hono.dev/images/ss.png)\n\nAnd, the Validator and Hono Client `hc` enable the RPC mode. In RPC mode, you can use your favorite validator such as Zod and easily share server-side API specs with the client and build type-safe applications.\n\nSee [Hono Stacks](https://hono.dev/docs/concepts/stacks).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "overview", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I quick start in hono?\n\nAssistant: To quick start in hono, here's what you do:\nJust run this:\n\nnpm create hono@latest\n\n```sh\nnpm create hono@latest\n```\n\n```sh\nyarn create hono\n```\n\n```sh\npnpm create hono@latest\n```\n\n```sh\nbun create hono@latest\n```\n\n```sh\ndeno init --npm hono@latest\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I features in hono?\n\nAssistant: To features in hono, here's what you do:\n- **Ultrafast** 🚀 - The router `RegExpRouter` is really fast. Not using linear loops. Fast.\n- **Lightweight** 🪶 - The `hono/tiny` preset is under 14kB. Hono has zero dependencies and uses only the Web Standards.\n- **Multi-runtime** 🌍 - Works on Cloudflare Workers, Fastly Compute, Deno, Bun, AWS Lambda, or Node.js. The same code runs on all platforms.\n- **Batteries Included** 🔋 - Hono has built-in middleware, custom middleware, third-party middleware, and helpers. Batteries included.\n- **Delightful DX** 😃 - Super clean APIs. First-class TypeScript support. Now, we've got \"Types\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I use-cases in hono?\n\nAssistant: To use-cases in hono, here's what you do:\nHono is a simple web application framework similar to Express, without a frontend. But it runs on CDN Edges and allows you to construct larger applications when combined with middleware. Here are some examples of use-cases.\n\n- Building Web APIs\n- Proxy of backend servers\n- Front of CDN\n- Edge application\n- Base server for a library\n- Full-stack application.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I who is using hono? in hono?\n\nAssistant: To who is using hono? in hono, here's what you do:\n| Project | Platform | What for? |\n| --- | --- | --- |\n| [cdnjs](https://cdnjs.com/) | Cloudflare Workers | A free and open-source CDN service. _Hono is used for the API server_. |\n| [Cloudflare D1](https://www.cloudflare.com/developer-platform/d1/) | Cloudflare Workers | Serverless SQL databases. _Hono is used for the internal API server_. |\n| [Cloudflare Workers KV](https://www.cloudflare.com/developer-platform/workers-kv/) | Cloudflare Workers | Serverless key-value database. _Hono is used for the internal API server_. |\n| [BaseAI](https://baseai.dev/) | Local AI Server | Serverless AI agent pipes with memory. An open-source agentic AI framework for web. _API server with Hono_. |\n| [Unkey](https://unkey.dev/) | Cloudflare Workers | An open-source API authentication and authorization. _Hono is used for the API server_. |\n| [OpenStatus](https://openstatus.dev/) | Bun | An open-source website & API monitoring platform. _Hono is used for the API server_. |\n| [Deno Benchmarks](https://deno.com/benchmarks) | Deno | A secure TypeScript runtime built on V8. _Hono is used for benchmarking_. |\n\nAnd the following.\n\n- [Drivly](https://driv.ly/) - Cloudflare Workers\n- [repeat.dev](https://repeat.dev/) - Cloudflare Workers\n\nDo you want to see more? See [Who is using Hono in production?](https://github.com/orgs/honojs/discussions/1510)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I hono in 1 minute in hono?\n\nAssistant: To hono in 1 minute in hono, here's what you do:\nA demonstration to create an application for Cloudflare Workers with Hono.\n\n![Demo](https://hono.dev/images/sc.gif).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I ultrafast in hono?\n\nAssistant: To ultrafast in hono, here's what you do:\n**Hono is the fastest**, compared to other routers for Cloudflare Workers.\n\n```\nHono x 402,820 ops/sec ±4.78% (80 runs sampled)\nitty-router x 212,598 ops/sec ±3.11% (87 runs sampled)\nsunder x 297,036 ops/sec ±4.76% (77 runs sampled)\nworktop x 197,345 ops/sec ±2.40% (88 runs sampled)\nFastest is Hono\n✨  Done in 28.06s.\n```\n\nSee [more benchmarks](https://hono.dev/docs/concepts/benchmarks)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I lightweight in hono?\n\nAssistant: To lightweight in hono, here's what you do:\n**Hono is so small**. With the `hono/tiny` preset, its size is **under 14KB** when minified. There are many middleware and adapters, but they are bundled only when used. For context, the size of Express is 572KB.\n\n```\n$ npx wrangler dev --minify ./src/index.ts\n ⛅️ wrangler 2.20.0\n--------------------\n⬣ Listening at http://0.0.0.0:8787\n- http://127.0.0.1:8787\n- http://192.168.128.165:8787\nTotal Upload: 11.47 KiB / gzip: 4.34 KiB\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I multiple routers in hono?\n\nAssistant: To multiple routers in hono, here's what you do:\n**Hono has multiple routers**.\n\n**RegExpRouter** is the fastest router in the JavaScript world. It matches the route using a single large Regex created before dispatch. With **SmartRouter**, it supports all route patterns.\n\n**LinearRouter** registers the routes very quickly, so it's suitable for an environment that initializes applications every time. **PatternRouter** simply adds and matches the pattern, making it small.\n\nSee [more information about routes](https://hono.dev/docs/concepts/routers)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I web standards in hono?\n\nAssistant: To web standards in hono, here's what you do:\nThanks to the use of the **Web Standards**, Hono works on a lot of platforms.\n\n- Cloudflare Workers\n- Cloudflare Pages\n- Fastly Compute\n- Deno\n- Bun\n- Vercel\n- AWS Lambda\n- Lambda@Edge\n- Others\n\nAnd by using [a Node.js adapter](https://github.com/honojs/node-server), Hono works on Node.js.\n\nSee [more information about Web Standards](https://hono.dev/docs/concepts/web-standard)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I middleware & helpers in hono?\n\nAssistant: To middleware & helpers in hono, here's what you do:\n**Hono has many middleware and helpers**. This makes \"Write Less, do more\" a reality.\n\nOut of the box, Hono provides middleware and helpers for:\n\n- [Basic Authentication](https://hono.dev/docs/middleware/builtin/basic-auth)\n- [Bearer Authentication](https://hono.dev/docs/middleware/builtin/bearer-auth)\n- [Body Limit](https://hono.dev/docs/middleware/builtin/body-limit)\n- [Cache](https://hono.dev/docs/middleware/builtin/cache)\n- [Compress](https://hono.dev/docs/middleware/builtin/compress)\n- [Context Storage](https://hono.dev/docs/middleware/builtin/context-storage)\n- [Cookie](https://hono.dev/docs/helpers/cookie)\n- [CORS](https://hono.dev/docs/middleware/builtin/cors)\n- [ETag](https://hono.dev/docs/middleware/builtin/etag)\n- [html](https://hono.dev/docs/helpers/html)\n- [JSX](https://hono.dev/docs/guides/jsx)\n- [JWT Authentication](https://hono.dev/docs/middleware/builtin/jwt)\n- [Logger](https://hono.dev/docs/middleware/builtin/logger)\n- [Language](https://hono.dev/docs/middleware/builtin/language)\n- [Pretty JSON](https://hono.dev/docs/middleware/builtin/pretty-json)\n- [Secure Headers](https://hono.dev/docs/middleware/builtin/secure-headers)\n- [SSG](https://hono.dev/docs/helpers/ssg)\n- [Streaming](https://hono.dev/docs/helpers/streaming)\n- [GraphQL Server](https://github.com/honojs/middleware/tree/main/packages/graphql-server)\n- [Firebase Authentication](https://github.com/honojs/middleware/tree/main/packages/firebase-auth)\n- [Sentry](https://github.com/honojs/middleware/tree/main/packages/sentry)\n- Others!\n\nFor example, adding ETag and request logging only takes a few lines of code with Hono:\n\n```ts\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\nimport { logger } from 'hono/logger'\n\nconst app = new Hono()\napp.use(etag(), logger())\n``` \n\nSee [more information about Middleware](https://hono.dev/docs/concepts/middleware)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I developer experience in hono?\n\nAssistant: To developer experience in hono, here's what you do:\nHono provides a delightful \" **Developer Experience**\".\n\nEasy access to Request/Response thanks to the `Context` object. Moreover, Hono is written in TypeScript. Hono has \" **Types**\".\n\nFor example, the path parameters will be literal types.\n\n![SS](https://hono.dev/images/ss.png)\n\nAnd, the Validator and Hono Client `hc` enable the RPC mode. In RPC mode, you can use your favorite validator such as Zod and easily share server-side API specs with the client and build type-safe applications.\n\nSee [Hono Stacks](https://hono.dev/docs/concepts/stacks)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Hono in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Hono Application**:\n\n```yaml\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hono!'))\n\nexport default app\n```\n\nThis snippet shows you how to basic hono application, which is an important aspect of hono.\n\n**Creating Hono Application**:\n\n```yaml\nnpm create hono@latest\n```\n\nThis snippet shows you how to creating hono application, which is an important aspect of hono.\n\n**Creating Hono Application with Yarn**:\n\n```yaml\nyarn create hono\n```\n\nThis snippet shows you how to creating hono application with yarn, which is an important aspect of hono.\n\n**Creating Hono Application with Pnpm**:\n\n```yaml\npnpm create hono@latest\n```\n\nThis snippet shows you how to creating hono application with pnpm, which is an important aspect of hono.\n\n**Creating Hono Application with Bun**:\n\n```yaml\nbun create hono@latest\n```\n\nThis snippet shows you how to creating hono application with bun, which is an important aspect of hono.\n\n**Creating Hono Application with Deno**:\n\n```yaml\ndeno init --npm hono@latest\n```\n\nThis snippet shows you how to creating hono application with deno, which is an important aspect of hono.\n\n**Wrangler Dev Command**:\n\n```yaml\n$ npx wrangler dev --minify ./src/index.ts\n ⛅️ wrangler 2.20.0\n--------------------\n⬣ Listening at http://0.0.0.0:8787\n- http://127.0.0.1:8787\n- http://192.168.128.165:8787\nTotal Upload: 11.47 KiB / gzip: 4.34 KiB\n```\n\nThis snippet shows you how to wrangler dev command, which is an important aspect of hono.\n\n**Adding Middleware Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\nimport { logger } from 'hono/logger'\n\nconst app = new Hono()\napp.use(etag(), logger())\n```\n\nThis snippet shows you how to adding middleware example, which is an important aspect of hono.\n\n", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "code_examples", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Hono in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `hono/tiny` preset for lightweight applications.\n\nLeverage built-in middleware to reduce boilerplate code.\n\nUtilize TypeScript for better type safety and developer experience.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs", "title": "Hono", "description": "Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 02:50:50", "type": "best_practices", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Hono - Web framework built on Web Standards", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6c16c5c8-4869-4e7d-85c5-eef1b380343b", "sourceURL": "https://hono.dev/docs", "url": "https://hono.dev/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Hono Examples is in hono?\n\nAssistant: Sure, I'd be happy to explain Hono Examples in hono.\n\n# Hono Examples\n\nIn this section, you can see practical examples to create your application with Hono.Here's a quick rundown of what this is about:\n\n## Applications\n\n- [Web API](https://hono.dev/examples/web-api)\n\n- [Proxy](https://hono.dev/examples/proxy)\n\n- [File upload](https://hono.dev/examples/file-upload)\n\n- [Error handling in Validator](https://hono.dev/examples/validator-error-handling)\n\n- [Grouping routes for RPC](https://hono.dev/examples/grouping-routes-rpc)\n\n- [CBOR](https://hono.dev/examples/cbor)\n\n## 3rd-party Middleware\n\n- [Zod OpenAPI](https://hono.dev/examples/zod-openapi)\n\n- [Swagger UI](https://hono.dev/examples/swagger-ui)\n\n- [Hono OpenAPI](https://hono.dev/examples/hono-openapi)\n\n## Integrations\n\n- [Cloudflare Durable Objects](https://hono.dev/examples/cloudflare-durable-objects)\n\n- [Cloudflare Queue](https://hono.dev/examples/cloudflare-queue)\n\n- [Cloudflare Testing](https://hono.dev/examples/cloudflare-vitest)\n\n- [Remix](https://hono.dev/examples/with-remix)\n\n- [htmx](https://hono.dev/examples/htmx)\n\n- [Stripe Webhook](https://hono.dev/examples/stripe-webhook)\n\n- [Prisma on Cloudflare](https://hono.dev/examples/prisma)\n\n- [Pylon (GraphQL)](https://hono.dev/examples/pylon)\n\n## GitHub repository\n\nYou can also see the examples in the GitHub repository: [Hono Examples](https://github.com/honojs/examples)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples", "title": "Hono Examples", "description": "In this section, you can see practical examples to create your application with Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:51:11", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Examples - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "057236c1-edb2-4874-9f33-049cd385f5be", "sourceURL": "https://hono.dev/examples", "url": "https://hono.dev/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I applications in hono?\n\nAssistant: To applications in hono, here's what you do:\n- [Web API](https://hono.dev/examples/web-api)\n\n- [Proxy](https://hono.dev/examples/proxy)\n\n- [File upload](https://hono.dev/examples/file-upload)\n\n- [Error handling in Validator](https://hono.dev/examples/validator-error-handling)\n\n- [Grouping routes for RPC](https://hono.dev/examples/grouping-routes-rpc)\n\n- [CBOR](https://hono.dev/examples/cbor).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples", "title": "Hono Examples", "description": "In this section, you can see practical examples to create your application with Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:51:11", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Examples - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "057236c1-edb2-4874-9f33-049cd385f5be", "sourceURL": "https://hono.dev/examples", "url": "https://hono.dev/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3rd-party middleware in hono?\n\nAssistant: To 3rd-party middleware in hono, here's what you do:\n- [Zod OpenAPI](https://hono.dev/examples/zod-openapi)\n\n- [Swagger UI](https://hono.dev/examples/swagger-ui)\n\n- [Hono OpenAPI](https://hono.dev/examples/hono-openapi).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples", "title": "Hono Examples", "description": "In this section, you can see practical examples to create your application with Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:51:11", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Examples - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "057236c1-edb2-4874-9f33-049cd385f5be", "sourceURL": "https://hono.dev/examples", "url": "https://hono.dev/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I integrations in hono?\n\nAssistant: To integrations in hono, here's what you do:\n- [Cloudflare Durable Objects](https://hono.dev/examples/cloudflare-durable-objects)\n\n- [Cloudflare Queue](https://hono.dev/examples/cloudflare-queue)\n\n- [Cloudflare Testing](https://hono.dev/examples/cloudflare-vitest)\n\n- [Remix](https://hono.dev/examples/with-remix)\n\n- [htmx](https://hono.dev/examples/htmx)\n\n- [Stripe Webhook](https://hono.dev/examples/stripe-webhook)\n\n- [Prisma on Cloudflare](https://hono.dev/examples/prisma)\n\n- [Pylon (GraphQL)](https://hono.dev/examples/pylon).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples", "title": "Hono Examples", "description": "In this section, you can see practical examples to create your application with Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:51:11", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Examples - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "057236c1-edb2-4874-9f33-049cd385f5be", "sourceURL": "https://hono.dev/examples", "url": "https://hono.dev/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I github repository in hono?\n\nAssistant: To github repository in hono, here's what you do:\nYou can also see the examples in the GitHub repository: [Hono Examples](https://github.com/honojs/examples).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples", "title": "Hono Examples", "description": "In this section, you can see practical examples to create your application with Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:51:11", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Examples - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "057236c1-edb2-4874-9f33-049cd385f5be", "sourceURL": "https://hono.dev/examples", "url": "https://hono.dev/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what API is in hono?\n\nAssistant: Sure, I'd be happy to explain API in hono.\n\n# API\n\nHono's API is simple. Just composed by extended objects from Web Standards. So, you can understand it well quickly.Here's a quick rundown of what this is about:\n\n## Hono object\n\nThe Hono object is the core of the framework, providing essential methods and properties for building applications.\n\n## About routing\n\nRouting in Hono is straightforward, allowing developers to define routes easily and manage HTTP requests.\n\n## Context object\n\nThe Context object provides information about the current request and response, enabling developers to access request data and send responses.\n\n## About middleware\n\nMiddleware in Hono allows you to execute code before or after handling requests, providing a way to modify requests and responses.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api", "title": "API", "description": "Hono's API is simple. Just composed by extended objects from Web Standards. So, you can understand it well quickly.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:53:30", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:type": "website", "title": "API - Hono", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f3907e1-dffe-429b-9aff-8751d4d9ad84", "sourceURL": "https://hono.dev/docs/api", "url": "https://hono.dev/docs/api/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I hono object in hono?\n\nAssistant: To hono object in hono, here's what you do:\nThe Hono object is the core of the framework, providing essential methods and properties for building applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api", "title": "API", "description": "Hono's API is simple. Just composed by extended objects from Web Standards. So, you can understand it well quickly.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:53:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:type": "website", "title": "API - Hono", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f3907e1-dffe-429b-9aff-8751d4d9ad84", "sourceURL": "https://hono.dev/docs/api", "url": "https://hono.dev/docs/api/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I about routing in hono?\n\nAssistant: To about routing in hono, here's what you do:\nRouting in Hono is straightforward, allowing developers to define routes easily and manage HTTP requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api", "title": "API", "description": "Hono's API is simple. Just composed by extended objects from Web Standards. So, you can understand it well quickly.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:53:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:type": "website", "title": "API - Hono", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f3907e1-dffe-429b-9aff-8751d4d9ad84", "sourceURL": "https://hono.dev/docs/api", "url": "https://hono.dev/docs/api/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I context object in hono?\n\nAssistant: To context object in hono, here's what you do:\nThe Context object provides information about the current request and response, enabling developers to access request data and send responses..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api", "title": "API", "description": "Hono's API is simple. Just composed by extended objects from Web Standards. So, you can understand it well quickly.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:53:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:type": "website", "title": "API - Hono", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f3907e1-dffe-429b-9aff-8751d4d9ad84", "sourceURL": "https://hono.dev/docs/api", "url": "https://hono.dev/docs/api/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I about middleware in hono?\n\nAssistant: To about middleware in hono, here's what you do:\nMiddleware in Hono allows you to execute code before or after handling requests, providing a way to modify requests and responses..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api", "title": "API", "description": "Hono's API is simple. Just composed by extended objects from Web Standards. So, you can understand it well quickly.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 02:53:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:type": "website", "title": "API - Hono", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f3907e1-dffe-429b-9aff-8751d4d9ad84", "sourceURL": "https://hono.dev/docs/api", "url": "https://hono.dev/docs/api/", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Pylon is in hono?\n\nAssistant: Sure, I'd be happy to explain Pylon in hono.\n\n# Pylon\n\nBuilding a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.Here's a quick rundown of what this is about:\n\n## Setup new Pylon service\n\nPylon allows you to create a new service using the `npm create pylon` command. This command creates a new Pylon project with a basic project structure and configuration. During the setup process, you can choose your preferred runtime, such as Bun, Node.js, or Cloudflare Workers.\n\n**This guide uses the Bun runtime.**\n\n## Creating a new project\n\nTo create a new Pylon project, run the following command:\n\n```bash\nnpm create pylon my-pylon@latest\n```\n\nThis will create a new directory called `my-pylon` with a basic Pylon project structure.\n\n## Project structure\n\nPylon projects are structured as follows:\n\n```\nmy-pylon/\n├── .pylon/\n├── src/\n│   ├── index.ts\n├── package.json\n├── tsconfig.json\n```\n\n- `.pylon/`: Contains the production build of your project.\n- `src/`: Contains the source code of your project.\n- `src/index.ts`: The entry point of your Pylon service.\n- `package.json`: The npm package configuration file.\n- `tsconfig.json`: The TypeScript configuration file.\n\n## Basic example\n\nHere's an example of a basic Pylon service:\n\n```ts\nimport { app } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    sum: (a: number, b: number) => a + b,\n  },\n  Mutation: {\n    divide: (a: number, b: number) => a / b,\n  },\n}\n\nexport default app\n```\n\n## Secure the API\n\nPylon integrates with ZITADEL, a cloud-native identity and access management solution, to provide secure authentication and authorization for your APIs. You can easily secure your Pylon API by following the steps outlined in the [ZITADEL documentation](https://zitadel.com/docs/examples/secure-api/pylon).\n\n## Create a more complex API\n\nPylon allows you to create more complex APIs by leveraging its real-time schema generation capabilities. For more information about supported TypeScript types and how to define your API, refer to the [Pylon documentation](https://pylon.cronit.io/docs/core-concepts/type-safety-and-type-integration).\n\nThis example demonstrates how to define complex types and services in Pylon. By leveraging TypeScript classes and methods, you can create powerful APIs that interact with databases, external services, and other resources.\n\n```ts\nimport { app } from '@getcronit/pylon'\n\nclass Post {\n  id: string\n  title: string\n\n  constructor(id: string, title: string) {\n    this.id = id\n    this.title = title\n  }\n}\n\nclass User {\n  id: string\n  name: string\n\n  constructor(id: string, name: string) {\n    this.id = id\n    this.name = name\n  }\n\n  static async getById(id: string): Promise<User> {\n    // Fetch user data from the database\n    return new User(id, 'John Doe')\n  }\n\n  async posts(): Promise<Post[]> {\n    // Fetch posts for this user from the database\n    return [new Post('1', 'Hello, world!')]\n  }\n\n  async $createPost(title: string, content: string): Promise<Post> {\n    // Create a new post for this user in the database\n    return new Post('2', title)\n  }\n}\n\nexport const graphql = {\n  Query: {\n    user: User.getById,\n  },\n  Mutation: {\n    createPost: (userId: string, title: string, content: string) => {\n      const user = User.getById(userId)\n      return user.$createPost(title, content)\n    },\n  },\n}\n\nexport default app\n```\n\n## Call the API\n\nThe Pylon API can be called using any GraphQL client library. For development purposes, it is recommended to use the Pylon Playground, which is a web-based GraphQL IDE that allows you to interact with your API in real-time.\n\n1. Start the Pylon server by running `bun run dev` in your project directory.\n2. Open the Pylon Playground in your browser by navigating to `http://localhost:3000/graphql`.\n3. Write your GraphQL query or mutation in the left panel.\n\n![Pylon Playground](https://hono.dev/images/pylon-example.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "overview", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I setup new pylon service in hono?\n\nAssistant: To setup new pylon service in hono, here's what you do:\nPylon allows you to create a new service using the `npm create pylon` command. This command creates a new Pylon project with a basic project structure and configuration. During the setup process, you can choose your preferred runtime, such as Bun, Node.js, or Cloudflare Workers.\n\n**This guide uses the Bun runtime.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I creating a new project in hono?\n\nAssistant: To creating a new project in hono, here's what you do:\nTo create a new Pylon project, run the following command:\n\n```bash\nnpm create pylon my-pylon@latest\n```\n\nThis will create a new directory called `my-pylon` with a basic Pylon project structure..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I project structure in hono?\n\nAssistant: To project structure in hono, here's what you do:\nPylon projects are structured as follows:\n\n```\nmy-pylon/\n├── .pylon/\n├── src/\n│   ├── index.ts\n├── package.json\n├── tsconfig.json\n```\n\n- `.pylon/`: Contains the production build of your project.\n- `src/`: Contains the source code of your project.\n- `src/index.ts`: The entry point of your Pylon service.\n- `package.json`: The npm package configuration file.\n- `tsconfig.json`: The TypeScript configuration file..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I basic example in hono?\n\nAssistant: To basic example in hono, here's what you do:\nHere's an example of a basic Pylon service:\n\n```ts\nimport { app } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    sum: (a: number, b: number) => a + b,\n  },\n  Mutation: {\n    divide: (a: number, b: number) => a / b,\n  },\n}\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I secure the api in hono?\n\nAssistant: To secure the api in hono, here's what you do:\nPylon integrates with ZITADEL, a cloud-native identity and access management solution, to provide secure authentication and authorization for your APIs. You can easily secure your Pylon API by following the steps outlined in the [ZITADEL documentation](https://zitadel.com/docs/examples/secure-api/pylon)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I create a more complex api in hono?\n\nAssistant: To create a more complex api in hono, here's what you do:\nPylon allows you to create more complex APIs by leveraging its real-time schema generation capabilities. For more information about supported TypeScript types and how to define your API, refer to the [Pylon documentation](https://pylon.cronit.io/docs/core-concepts/type-safety-and-type-integration).\n\nThis example demonstrates how to define complex types and services in Pylon. By leveraging TypeScript classes and methods, you can create powerful APIs that interact with databases, external services, and other resources.\n\n```ts\nimport { app } from '@getcronit/pylon'\n\nclass Post {\n  id: string\n  title: string\n\n  constructor(id: string, title: string) {\n    this.id = id\n    this.title = title\n  }\n}\n\nclass User {\n  id: string\n  name: string\n\n  constructor(id: string, name: string) {\n    this.id = id\n    this.name = name\n  }\n\n  static async getById(id: string): Promise<User> {\n    // Fetch user data from the database\n    return new User(id, 'John Doe')\n  }\n\n  async posts(): Promise<Post[]> {\n    // Fetch posts for this user from the database\n    return [new Post('1', 'Hello, world!')]\n  }\n\n  async $createPost(title: string, content: string): Promise<Post> {\n    // Create a new post for this user in the database\n    return new Post('2', title)\n  }\n}\n\nexport const graphql = {\n  Query: {\n    user: User.getById,\n  },\n  Mutation: {\n    createPost: (userId: string, title: string, content: string) => {\n      const user = User.getById(userId)\n      return user.$createPost(title, content)\n    },\n  },\n}\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I call the api in hono?\n\nAssistant: To call the api in hono, here's what you do:\nThe Pylon API can be called using any GraphQL client library. For development purposes, it is recommended to use the Pylon Playground, which is a web-based GraphQL IDE that allows you to interact with your API in real-time.\n\n1. Start the Pylon server by running `bun run dev` in your project directory.\n2. Open the Pylon Playground in your browser by navigating to `http://localhost:3000/graphql`.\n3. Write your GraphQL query or mutation in the left panel.\n\n![Pylon Playground](https://hono.dev/images/pylon-example.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Pylon in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a new project**:\n\n```yaml\nnpm create pylon my-pylon@latest\n```\n\nThis snippet shows you how to creating a new project, which is an important aspect of pylon.\n\n**Basic example**:\n\n```yaml\nimport { app } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    sum: (a: number, b: number) => a + b,\n  },\n  Mutation: {\n    divide: (a: number, b: number) => a / b,\n  },\n}\n\nexport default app\n```\n\nThis snippet shows you how to basic example, which is an important aspect of pylon.\n\n**Complex API example**:\n\n```yaml\nimport { app } from '@getcronit/pylon'\n\nclass Post {\n  id: string\n  title: string\n\n  constructor(id: string, title: string) {\n    this.id = id\n    this.title = title\n  }\n}\n\nclass User {\n  id: string\n  name: string\n\n  constructor(id: string, name: string) {\n    this.id = id\n    this.name = name\n  }\n\n  static async getById(id: string): Promise<User> {\n    // Fetch user data from the database\n    return new User(id, 'John Doe')\n  }\n\n  async posts(): Promise<Post[]> {\n    // Fetch posts for this user from the database\n    return [new Post('1', 'Hello, world!')]\n  }\n\n  async $createPost(title: string, content: string): Promise<Post> {\n    // Create a new post for this user in the database\n    return new Post('2', title)\n  }\n}\n\nexport const graphql = {\n  Query: {\n    user: User.getById,\n  },\n  Mutation: {\n    createPost: (userId: string, title: string, content: string) => {\n      const user = User.getById(userId)\n      return user.$createPost(title, content)\n    },\n  },\n}\n\nexport default app\n```\n\nThis snippet shows you how to complex api example, which is an important aspect of pylon.\n\n**Get access to the Hono context**:\n\n```yaml\nimport { app, getContext } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    hello: () => {\n      const context = getContext()\n      return `Hello, ${context.req.headers.get('user-agent')}`\n    },\n  },\n}\n\nexport default app\n```\n\nThis snippet shows you how to get access to the hono context, which is an important aspect of pylon.\n\n**Adding a custom route**:\n\n```yaml\nimport { app } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    sum: (a: number, b: number) => a + b,\n  },\n  Mutation: {\n    divide: (a: number, b: number) => a / b,\n  },\n}\n\n// Add a custom route to the Pylon app\napp.get('/hello', (ctx, next) => {\n  return new Response('Hello, world!')\n})\n```\n\nThis snippet shows you how to adding a custom route, which is an important aspect of pylon.\n\n", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "code_examples", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Pylon in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the Bun runtime for setting up a new Pylon service.\n\nLeverage TypeScript type definitions for real-time schema generation.\n\nSecure your API using ZITADEL for authentication and authorization.\n\nUtilize the Pylon Playground for testing your GraphQL queries and mutations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/pylon", "title": "Pylon", "description": "Building a GraphQL API with Pylon is simple and straightforward. Pylon is a backend framework that is built on top of Hono and provides code-first GraphQL API development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:53:52", "type": "best_practices", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Pylon - Hono", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ae1fa87a-3e3c-4720-9b89-e38c4730d825", "sourceURL": "https://hono.dev/examples/pylon", "url": "https://hono.dev/examples/pylon", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Using Prisma on Cloudflare Workers is in hono?\n\nAssistant: Sure, I'd be happy to explain Using Prisma on Cloudflare Workers in hono.\n\n# Using Prisma on Cloudflare Workers\n\nThis page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.Here's a quick rundown of what this is about:\n\n## Using Prisma Postgres\n\nPrisma Postgres is a managed, serverless PostgreSQL database built on unikernels. It supports features like connection pooling, caching, real-time subscriptions, and query optimization recommendations. A generous free tier is available for initial development, testing, and hobby projects.\n\n### 1. Install Prisma and required dependencies\n\nInstall Prisma in your Hono project:\n\n```bash\nnpm i prisma --save-dev\n```\n\nInstall the Prisma client extension that's required for Prisma Postgres:\n\n```sh\nnpm i @prisma/extension-accelerate\n```\n\nInitialize Prisma with an instance of Prisma Postgres:\n\n```bash\nnpx prisma@latest init --db\n```\n\nIf you don't have a Prisma Data Platform account yet, or if you are not logged in, the command will prompt you to log in using one of the available authentication providers. A browser window will open so you can log in or create an account. Return to the CLI after you have completed this step.\n\nOnce logged in (or if you were already logged in), the CLI will prompt you to select a project name and a database region.\n\nOnce the command has terminated, it has created:\n\n- A project in your Platform Console containing a Prisma Postgres database instance.\n- A `prisma` folder containing `schema.prisma`, where you will define your database schema.\n- An `.env` file in the project root, which will contain the Prisma Postgres database url `DATABASE_URL=<your-prisma-postgres-database-url>`.\n\nCreate a `.dev.vars` file and store the `DATABASE_URL` in it:\n\n```bash\nDATABASE_URL=\"your_prisma_postgres_url\"\n```\n\nKeep the `.env` file so that Prisma CLI can access it later on to perform migrations, generate Prisma Client or to open Prisma Studio.\n\n### 2. Set up Prisma in your project\n\nNow, open your `schema.prisma` file and define the models for your database schema. For example, you might add an `User` model:\n\n```ts\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id  Int @id @default(autoincrement())\n  email String\n  name  String\n}\n```\n\nUse Prisma Migrate to apply changes to the database:\n\n```bash\nnpx prisma migrate dev\n```\n\nCreate a function like this, which you can use in your project later:\n\n```ts\nimport { PrismaClient } from '@prisma/client/edge'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nexport const getPrisma = (database_url: string) => {\n  const prisma = new PrismaClient({\n    datasourceUrl: database_url,\n  }).$extends(withAccelerate())\n  return prisma\n}\n```\n\nHere is an example of how you can use this function in your project:\n\n```ts\nimport { Hono } from 'hono'\nimport { sign, verify } from 'hono/jwt'\nimport { getPrisma } from '../usefulFun/prismaFun'\n\n// Create the main Hono app\nconst app = new Hono<{\n  Bindings: {\n    DATABASE_URL: string\n    JWT_SECRET: string\n  }\n  Variables: {\n    userId: string\n  }\n}>()\n\napp.post('/', async (c) => {\n  // Now you can use it wherever you want\n  const prisma = getPrisma(c.env.DATABASE_URL)\n})\n```\n\nIf you want to use your own database with Prisma ORM and benefit from connection pooling and edge caching, you can enable Prisma Accelerate. Learn more about setting up Prisma Accelerate for your project.\n\n## Using Prisma Driver Adapters\n\nPrisma can be used with the D1 Database via driverAdapters. The prerequisites are to install Prisma and integrate Wrangler to bind with your Hono project. This is an example project since all documentation for Hono, Prisma, and D1 Cloudflare is separated and doesn't have exact, precise step-by-step instructions.\n\n### Setup Prisma\n\nPrisma and D1 are using a binding in Wrangler to secure a connection with an adapter.\n\n```bash\nnpm install prisma --save-dev\nnpx prisma init\nnpm install @prisma/client\nnpm install @prisma/adapter-d1\n```\n\nAfter this, Prisma will generate schema for your database; define a simple model in `prisma/schema.prisma`. Don't forget to change the adapter.\n\n```ts\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"] // change from default\n}\n\ndatasource db {\n  provider = \"sqlite\" // d1 is sql base database\n  url      = env(\"DATABASE_URL\")\n}\n\n// Create a simple model database\nmodel User {\n  id    String @id  @default(uuid())\n  email String  @unique\n  name  String?\n}\n```\n\n### D1 Database\n\nIf you already have D1 database ready skip this. But if not, create one resources, which can be found in here.\n\n```bash\nnpx wrangler d1 create __DATABASE_NAME__ // change it with yours\n```\n\nMake sure your DB is binding in `wrangler.toml`.\n\n```toml\n[[d1_databases]]\nbinding = \"DB\" # i.e. available in your Worker on env.DB\ndatabase_name = \"__DATABASE_NAME__\"\ndatabase_id = \"DATABASE ID\"\n```\n\n### Prisma Migrate\n\nThis command makes to migrate Prisma and change to the D1 database, either local or remote.\n\n```bash\nnpx wrangler d1 migrations create __DATABASE_NAME__ create_user_table # will generate migration folder and sql file\n\n// for generate sql statement\n\nnpx prisma migrate diff \\\n  --from-empty \\\n  --to-schema-datamodel ./prisma/schema.prisma \\\n  --script \\\n  --output migrations/0001_create_user_table.sql\n```\n\nMigrate the database model to D1.\n\n```bash\nnpx wrangler d1 migrations apply __DATABASE_NAME__ --local\nnpx wrangler d1 migrations apply __DATABASE_NAME__ --remote\nnpx prisma generate\n```\n\n### Config Prisma Client\n\nIn order to query your database from the D1 database using Prisma, you need to add types with:\n\n```bash\nnpx wrangler types\n```\n\nwill generate a `worker-configuration.d.ts` file.\n\n#### Prisma Clients\n\nFor using Prisma globally make a file `lib/prismaClient.ts` with code like this.\n\n```ts\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaD1 } from '@prisma/adapter-d1'\n\nconst prismaClients = {\n  async fetch(db: D1Database) {\n    const adapter = new PrismaD1(db)\n    const prisma = new PrismaClient({ adapter })\n    return prisma\n  },\n}\n\nexport default prismaClients\n```\n\nBinding Hono with wrangler environment values:\n\n```ts\nimport { Hono } from 'hono'\nimport prismaClients from '../lib/prismaClient'\n\ntype Bindings = {\n  MY_KV: KVNamespace\n  DB: D1Database\n}\n\nconst app = new Hono<{ Bindings: Bindings }>() // binding env value\n```\n\nExample of use in Hono route:\n\n```ts\nimport { Hono } from 'hono'\nimport prismaClients from '../lib/prismaClient'\n\ntype Bindings = {\n  MY_KV: KVNamespace\n  DB: D1Database\n}\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/', async (c) => {\n  const prisma = await prismaClients.fetch(c.env.DB)\n  const users = await prisma.user.findMany()\n  console.log('users', users)\n  return c.json(users)\n})\n\nexport default app\n```\n\nThis will return all users in the `/` route, using Postman or Thunder Client to see the result.\n\n## Resources\n\nYou can use the following resources to enhance your application further:\n\n- Add caching to your queries.\n- Explore the Prisma Postgres documentation.\n\nYou can follow the end-to-end guide from Prisma to learn how to build a real-time application with Hono and Prisma Postgres, and deploy it to Cloudflare Workers.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/prisma", "title": "Using Prisma on Cloudflare Workers", "description": "This page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:55:34", "type": "overview", "page_metadata": {"title": "Using Prisma on Cloudflare Workers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "0af78acc-c424-4400-9f81-c48a16ede919", "sourceURL": "https://hono.dev/examples/prisma", "url": "https://hono.dev/examples/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I using prisma postgres in hono?\n\nAssistant: To using prisma postgres in hono, here's what you do:\nPrisma Postgres is a managed, serverless PostgreSQL database built on unikernels. It supports features like connection pooling, caching, real-time subscriptions, and query optimization recommendations. A generous free tier is available for initial development, testing, and hobby projects.\n\n### 1. Install Prisma and required dependencies\n\nInstall Prisma in your Hono project:\n\n```bash\nnpm i prisma --save-dev\n```\n\nInstall the Prisma client extension that's required for Prisma Postgres:\n\n```sh\nnpm i @prisma/extension-accelerate\n```\n\nInitialize Prisma with an instance of Prisma Postgres:\n\n```bash\nnpx prisma@latest init --db\n```\n\nIf you don't have a Prisma Data Platform account yet, or if you are not logged in, the command will prompt you to log in using one of the available authentication providers. A browser window will open so you can log in or create an account. Return to the CLI after you have completed this step.\n\nOnce logged in (or if you were already logged in), the CLI will prompt you to select a project name and a database region.\n\nOnce the command has terminated, it has created:\n\n- A project in your Platform Console containing a Prisma Postgres database instance.\n- A `prisma` folder containing `schema.prisma`, where you will define your database schema.\n- An `.env` file in the project root, which will contain the Prisma Postgres database url `DATABASE_URL=<your-prisma-postgres-database-url>`.\n\nCreate a `.dev.vars` file and store the `DATABASE_URL` in it:\n\n```bash\nDATABASE_URL=\"your_prisma_postgres_url\"\n```\n\nKeep the `.env` file so that Prisma CLI can access it later on to perform migrations, generate Prisma Client or to open Prisma Studio.\n\n### 2. Set up Prisma in your project\n\nNow, open your `schema.prisma` file and define the models for your database schema. For example, you might add an `User` model:\n\n```ts\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id  Int @id @default(autoincrement())\n  email String\n  name  String\n}\n```\n\nUse Prisma Migrate to apply changes to the database:\n\n```bash\nnpx prisma migrate dev\n```\n\nCreate a function like this, which you can use in your project later:\n\n```ts\nimport { PrismaClient } from '@prisma/client/edge'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nexport const getPrisma = (database_url: string) => {\n  const prisma = new PrismaClient({\n    datasourceUrl: database_url,\n  }).$extends(withAccelerate())\n  return prisma\n}\n```\n\nHere is an example of how you can use this function in your project:\n\n```ts\nimport { Hono } from 'hono'\nimport { sign, verify } from 'hono/jwt'\nimport { getPrisma } from '../usefulFun/prismaFun'\n\n// Create the main Hono app\nconst app = new Hono<{\n  Bindings: {\n    DATABASE_URL: string\n    JWT_SECRET: string\n  }\n  Variables: {\n    userId: string\n  }\n}>()\n\napp.post('/', async (c) => {\n  // Now you can use it wherever you want\n  const prisma = getPrisma(c.env.DATABASE_URL)\n})\n```\n\nIf you want to use your own database with Prisma ORM and benefit from connection pooling and edge caching, you can enable Prisma Accelerate. Learn more about setting up Prisma Accelerate for your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/prisma", "title": "Using Prisma on Cloudflare Workers", "description": "This page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:55:34", "type": "section_detail", "page_metadata": {"title": "Using Prisma on Cloudflare Workers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "0af78acc-c424-4400-9f81-c48a16ede919", "sourceURL": "https://hono.dev/examples/prisma", "url": "https://hono.dev/examples/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I using prisma driver adapters in hono?\n\nAssistant: To using prisma driver adapters in hono, here's what you do:\nPrisma can be used with the D1 Database via driverAdapters. The prerequisites are to install Prisma and integrate Wrangler to bind with your Hono project. This is an example project since all documentation for Hono, Prisma, and D1 Cloudflare is separated and doesn't have exact, precise step-by-step instructions.\n\n### Setup Prisma\n\nPrisma and D1 are using a binding in Wrangler to secure a connection with an adapter.\n\n```bash\nnpm install prisma --save-dev\nnpx prisma init\nnpm install @prisma/client\nnpm install @prisma/adapter-d1\n```\n\nAfter this, Prisma will generate schema for your database; define a simple model in `prisma/schema.prisma`. Don't forget to change the adapter.\n\n```ts\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"] // change from default\n}\n\ndatasource db {\n  provider = \"sqlite\" // d1 is sql base database\n  url      = env(\"DATABASE_URL\")\n}\n\n// Create a simple model database\nmodel User {\n  id    String @id  @default(uuid())\n  email String  @unique\n  name  String?\n}\n```\n\n### D1 Database\n\nIf you already have D1 database ready skip this. But if not, create one resources, which can be found in here.\n\n```bash\nnpx wrangler d1 create __DATABASE_NAME__ // change it with yours\n```\n\nMake sure your DB is binding in `wrangler.toml`.\n\n```toml\n[[d1_databases]]\nbinding = \"DB\" # i.e. available in your Worker on env.DB\ndatabase_name = \"__DATABASE_NAME__\"\ndatabase_id = \"DATABASE ID\"\n```\n\n### Prisma Migrate\n\nThis command makes to migrate Prisma and change to the D1 database, either local or remote.\n\n```bash\nnpx wrangler d1 migrations create __DATABASE_NAME__ create_user_table # will generate migration folder and sql file\n\n// for generate sql statement\n\nnpx prisma migrate diff \\\n  --from-empty \\\n  --to-schema-datamodel ./prisma/schema.prisma \\\n  --script \\\n  --output migrations/0001_create_user_table.sql\n```\n\nMigrate the database model to D1.\n\n```bash\nnpx wrangler d1 migrations apply __DATABASE_NAME__ --local\nnpx wrangler d1 migrations apply __DATABASE_NAME__ --remote\nnpx prisma generate\n```\n\n### Config Prisma Client\n\nIn order to query your database from the D1 database using Prisma, you need to add types with:\n\n```bash\nnpx wrangler types\n```\n\nwill generate a `worker-configuration.d.ts` file.\n\n#### Prisma Clients\n\nFor using Prisma globally make a file `lib/prismaClient.ts` with code like this.\n\n```ts\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaD1 } from '@prisma/adapter-d1'\n\nconst prismaClients = {\n  async fetch(db: D1Database) {\n    const adapter = new PrismaD1(db)\n    const prisma = new PrismaClient({ adapter })\n    return prisma\n  },\n}\n\nexport default prismaClients\n```\n\nBinding Hono with wrangler environment values:\n\n```ts\nimport { Hono } from 'hono'\nimport prismaClients from '../lib/prismaClient'\n\ntype Bindings = {\n  MY_KV: KVNamespace\n  DB: D1Database\n}\n\nconst app = new Hono<{ Bindings: Bindings }>() // binding env value\n```\n\nExample of use in Hono route:\n\n```ts\nimport { Hono } from 'hono'\nimport prismaClients from '../lib/prismaClient'\n\ntype Bindings = {\n  MY_KV: KVNamespace\n  DB: D1Database\n}\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/', async (c) => {\n  const prisma = await prismaClients.fetch(c.env.DB)\n  const users = await prisma.user.findMany()\n  console.log('users', users)\n  return c.json(users)\n})\n\nexport default app\n```\n\nThis will return all users in the `/` route, using Postman or Thunder Client to see the result..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/prisma", "title": "Using Prisma on Cloudflare Workers", "description": "This page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:55:34", "type": "section_detail", "page_metadata": {"title": "Using Prisma on Cloudflare Workers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "0af78acc-c424-4400-9f81-c48a16ede919", "sourceURL": "https://hono.dev/examples/prisma", "url": "https://hono.dev/examples/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I resources in hono?\n\nAssistant: To resources in hono, here's what you do:\nYou can use the following resources to enhance your application further:\n\n- Add caching to your queries.\n- Explore the Prisma Postgres documentation.\n\nYou can follow the end-to-end guide from Prisma to learn how to build a real-time application with Hono and Prisma Postgres, and deploy it to Cloudflare Workers..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/prisma", "title": "Using Prisma on Cloudflare Workers", "description": "This page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:55:34", "type": "section_detail", "page_metadata": {"title": "Using Prisma on Cloudflare Workers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "0af78acc-c424-4400-9f81-c48a16ede919", "sourceURL": "https://hono.dev/examples/prisma", "url": "https://hono.dev/examples/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Using Prisma on Cloudflare Workers in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Prisma and required dependencies**:\n\n```yaml\nnpm i prisma --save-dev\n```\n\nThis snippet shows you how to install prisma and required dependencies, which is an important aspect of using prisma on cloudflare workers.\n\n**Install Prisma client extension**:\n\n```yaml\nnpm i @prisma/extension-accelerate\n```\n\nThis snippet shows you how to install prisma client extension, which is an important aspect of using prisma on cloudflare workers.\n\n**Initialize Prisma with an instance of Prisma Postgres**:\n\n```yaml\nnpx prisma@latest init --db\n```\n\nThis snippet shows you how to initialize prisma with an instance of prisma postgres, which is an important aspect of using prisma on cloudflare workers.\n\n**Create a .dev.vars file**:\n\n```yaml\nDATABASE_URL=\"your_prisma_postgres_url\"\n```\n\nThis snippet shows you how to create a .dev.vars file, which is an important aspect of using prisma on cloudflare workers.\n\n**Define User model in schema.prisma**:\n\n```yaml\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id  Int @id @default(autoincrement())\n  email String\n  name  String\n}\n```\n\nThis snippet shows you how to define user model in schema.prisma, which is an important aspect of using prisma on cloudflare workers.\n\n", "metadata": {"source_url": "https://hono.dev/examples/prisma", "title": "Using Prisma on Cloudflare Workers", "description": "This page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:55:34", "type": "code_examples", "page_metadata": {"title": "Using Prisma on Cloudflare Workers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "0af78acc-c424-4400-9f81-c48a16ede919", "sourceURL": "https://hono.dev/examples/prisma", "url": "https://hono.dev/examples/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Using Prisma on Cloudflare Workers in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nKeep the .env file for Prisma CLI access later on to perform migrations, generate Prisma Client or to open Prisma Studio.\n\nIf you want to use your own database with Prisma ORM and benefit from connection pooling and edge caching, enable Prisma Accelerate.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/prisma", "title": "Using Prisma on Cloudflare Workers", "description": "This page covers how to use Prisma ORM with Hono and Cloudflare Workers, detailing two approaches: Prisma Postgres and Driver Adapters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:55:34", "type": "best_practices", "page_metadata": {"title": "Using Prisma on Cloudflare Workers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "0af78acc-c424-4400-9f81-c48a16ede919", "sourceURL": "https://hono.dev/examples/prisma", "url": "https://hono.dev/examples/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what CBOR is in hono?\n\nAssistant: Sure, I'd be happy to explain CBOR in hono.\n\n# CBOR\n\nCBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.Here's a quick rundown of what this is about:\n\n## Introduction\n\nCBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.\n\n## Example Usage\n\nHere's an example of using cbor2 package to respond with CBOR:\n\n```typescript\nimport { Hono } from 'hono'\nimport { createMiddleware } from 'hono/factory'\nimport { encode } from 'cbor2'\n\nconst app = new Hono()\n\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (content: any): Response | Promise<Response>\n  }\n}\n\nconst cborRenderer = createMiddleware(async (c, next) => {\n  c.header('Content-Type', 'application/cbor')\n  c.setRenderer((content) => {\n    return c.body(encode(content))\n  })\n  await next()\n})\n\napp.use(cborRenderer)\n\napp.get('/', (c) => {\n  return c.render({ message: 'hello CBOR!' })\n})\n\nexport default app\n``\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/cbor", "title": "CBOR", "description": "CBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:53", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "CBOR - Hono", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "8b364880-5c24-4258-8922-640f44052338", "sourceURL": "https://hono.dev/examples/cbor", "url": "https://hono.dev/examples/cbor", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I introduction in hono?\n\nAssistant: To introduction in hono, here's what you do:\nCBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cbor", "title": "CBOR", "description": "CBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:53", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "CBOR - Hono", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "8b364880-5c24-4258-8922-640f44052338", "sourceURL": "https://hono.dev/examples/cbor", "url": "https://hono.dev/examples/cbor", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I example usage in hono?\n\nAssistant: To example usage in hono, here's what you do:\nHere's an example of using cbor2 package to respond with CBOR:\n\n```typescript\nimport { Hono } from 'hono'\nimport { createMiddleware } from 'hono/factory'\nimport { encode } from 'cbor2'\n\nconst app = new Hono()\n\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (content: any): Response | Promise<Response>\n  }\n}\n\nconst cborRenderer = createMiddleware(async (c, next) => {\n  c.header('Content-Type', 'application/cbor')\n  c.setRenderer((content) => {\n    return c.body(encode(content))\n  })\n  await next()\n})\n\napp.use(cborRenderer)\n\napp.get('/', (c) => {\n  return c.render({ message: 'hello CBOR!' })\n})\n\nexport default app\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cbor", "title": "CBOR", "description": "CBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:53", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "CBOR - Hono", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "8b364880-5c24-4258-8922-640f44052338", "sourceURL": "https://hono.dev/examples/cbor", "url": "https://hono.dev/examples/cbor", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for CBOR in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Response Check with Curl**:\n\n```yaml\n$ curl -s http://localhost:3000/ | hexdump -C\n00000000  a1 67 6d 65 73 73 61 67  65 6b 68 65 6c 6c 6f 20  |.gmessagekhello |\n00000010  43 42 4f 52 21                                    |CBOR!|\n00000015\n```\n\nThis snippet shows you how to response check with curl, which is an important aspect of cbor.\n\n**CBOR Decoding Example**:\n\n```yaml\nA1                           # map(1)\n   67                        # text(7)\n      6D657373616765         # \"message\"\n   6B                        # text(11)\n      68656C6C6F2043424F5221 # \"hello CBOR!\"\n\njson\n\n```\n{ \"message\": \"hello CBOR!\" }\n```\n```\n\nThis snippet shows you how to cbor decoding example, which is an important aspect of cbor.\n\n", "metadata": {"source_url": "https://hono.dev/examples/cbor", "title": "CBOR", "description": "CBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:53", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "CBOR - Hono", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "8b364880-5c24-4258-8922-640f44052338", "sourceURL": "https://hono.dev/examples/cbor", "url": "https://hono.dev/examples/cbor", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using CBOR in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse CBOR for efficient data exchange in resource-constrained environments.\n\nVerify CBOR responses using tools like hexdump and CBOR playground.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/cbor", "title": "CBOR", "description": "CBOR is a binary format for serializing objects defined in RFC 8949. It is JSON-compatible and suitable for network communications that require efficient data exchange, as well as for use in resource-constrained environments such as IoT devices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:53", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "CBOR - Hono", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "scrapeId": "8b364880-5c24-4258-8922-640f44052338", "sourceURL": "https://hono.dev/examples/cbor", "url": "https://hono.dev/examples/cbor", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what htmx is in hono?\n\nAssistant: Sure, I'd be happy to explain htmx in hono.\n\n# htmx\n\nUsing Hono with htmx.Here's a quick rundown of what this is about:\n\n## typed-htmx\n\nBy using typed-htmx, you can write JSX with TypeScript definitions for htmx attributes. We can follow the same pattern found on the typed-htmx Example Project to use it with hono/jsx.\n\nInstall the package:\n\nsh\n\n```\nnpm i -D typed-htmx\n```\n\nOn src/global.d.ts (or app/global.d.ts if you're using HonoX), import the typed-htmx types:\n\nts\n\n```\nimport 'typed-htmx'\n```\n\nExtend Hono's JSX types with the typed-htmx definitions:\n\nts\n\n```typescript\n// A demo of how to augment foreign types with htmx attributes.\n// In this case, Hono sources its types from its own namespace, so we do the same\n// and directly extend its namespace.\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface HTMLAttributes extends HtmxAttributes {}\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/htmx", "title": "htmx", "description": "Using Hono with htmx.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:57:05", "type": "overview", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "htmx - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "790f8511-b8a0-4f2a-b9a1-1acf2227c99b", "sourceURL": "https://hono.dev/examples/htmx", "url": "https://hono.dev/examples/htmx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I typed-htmx in hono?\n\nAssistant: To typed-htmx in hono, here's what you do:\nBy using typed-htmx, you can write JSX with TypeScript definitions for htmx attributes. We can follow the same pattern found on the typed-htmx Example Project to use it with hono/jsx.\n\nInstall the package:\n\nsh\n\n```\nnpm i -D typed-htmx\n```\n\nOn src/global.d.ts (or app/global.d.ts if you're using HonoX), import the typed-htmx types:\n\nts\n\n```\nimport 'typed-htmx'\n```\n\nExtend Hono's JSX types with the typed-htmx definitions:\n\nts\n\n```typescript\n// A demo of how to augment foreign types with htmx attributes.\n// In this case, Hono sources its types from its own namespace, so we do the same\n// and directly extend its namespace.\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface HTMLAttributes extends HtmxAttributes {}\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/htmx", "title": "htmx", "description": "Using Hono with htmx.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:57:05", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "htmx - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "790f8511-b8a0-4f2a-b9a1-1acf2227c99b", "sourceURL": "https://hono.dev/examples/htmx", "url": "https://hono.dev/examples/htmx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for htmx in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install typed-htmx package**:\n\n```yaml\nnpm i -D typed-htmx\n```\n\nThis snippet shows you how to install typed-htmx package, which is an important aspect of htmx.\n\n**Import typed-htmx types**:\n\n```yaml\nimport 'typed-htmx'\n```\n\nThis snippet shows you how to import typed-htmx types, which is an important aspect of htmx.\n\n**Extend Hono's JSX types**:\n\n```yaml\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface HTMLAttributes extends HtmxAttributes {}\n  }\n}\n```\n\nThis snippet shows you how to extend hono's jsx types, which is an important aspect of htmx.\n\n", "metadata": {"source_url": "https://hono.dev/examples/htmx", "title": "htmx", "description": "Using Hono with htmx.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:57:05", "type": "code_examples", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "htmx - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "790f8511-b8a0-4f2a-b9a1-1acf2227c99b", "sourceURL": "https://hono.dev/examples/htmx", "url": "https://hono.dev/examples/htmx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Proxy is in hono?\n\nAssistant: Sure, I'd be happy to explain Proxy in hono.\n\n# Proxy\n\nThis page provides examples and tips for implementing proxy functionality using Hono.Here's a quick rundown of what this is about:\n\n## Proxy Example\n\nThis section provides a basic example of how to set up a proxy using Hono.\n\n## Handling Immutable Headers\n\nThis section explains how to handle the immutable headers error when modifying response headers.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/proxy", "title": "Proxy", "description": "This page provides examples and tips for implementing proxy functionality using Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:57:15", "type": "overview", "page_metadata": {"title": "Proxy - Hono", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "scrapeId": "8bbbb3ff-2cf6-40f6-a786-b82e67833c2d", "sourceURL": "https://hono.dev/examples/proxy", "url": "https://hono.dev/examples/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I proxy example in hono?\n\nAssistant: To proxy example in hono, here's what you do:\nThis section provides a basic example of how to set up a proxy using Hono..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/proxy", "title": "Proxy", "description": "This page provides examples and tips for implementing proxy functionality using Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:57:15", "type": "section_detail", "page_metadata": {"title": "Proxy - Hono", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "scrapeId": "8bbbb3ff-2cf6-40f6-a786-b82e67833c2d", "sourceURL": "https://hono.dev/examples/proxy", "url": "https://hono.dev/examples/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I handling immutable headers in hono?\n\nAssistant: To handling immutable headers in hono, here's what you do:\nThis section explains how to handle the immutable headers error when modifying response headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/proxy", "title": "Proxy", "description": "This page provides examples and tips for implementing proxy functionality using Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:57:15", "type": "section_detail", "page_metadata": {"title": "Proxy - Hono", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "scrapeId": "8bbbb3ff-2cf6-40f6-a786-b82e67833c2d", "sourceURL": "https://hono.dev/examples/proxy", "url": "https://hono.dev/examples/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Proxy in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Proxy Example**:\n\n```yaml\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/posts/:filename{.+.png$}', (c) => {\n  const referer = c.req.header('Referer')\n  if (referer && !/^https:\\/\\/example.com/.test(referer)) {\n    return c.text('Forbidden', 403)\n  }\n  return fetch(c.req.url)\n})\n\napp.get('*', (c) => {\n  return fetch(c.req.url)\n})\n\nexport default app\n```\n\nThis snippet shows you how to basic proxy example, which is an important aspect of proxy.\n\n**Cloning Response Example**:\n\n```yaml\napp.get('/', async (_c) => {\n  const response = await fetch('https://example.com')\n  // clone the response to return a response with modifiable headers\n  const newResponse = new Response(response.body, response)\n  return newResponse\n})\n```\n\nThis snippet shows you how to cloning response example, which is an important aspect of proxy.\n\n", "metadata": {"source_url": "https://hono.dev/examples/proxy", "title": "Proxy", "description": "This page provides examples and tips for implementing proxy functionality using Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:57:15", "type": "code_examples", "page_metadata": {"title": "Proxy - Hono", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "scrapeId": "8bbbb3ff-2cf6-40f6-a786-b82e67833c2d", "sourceURL": "https://hono.dev/examples/proxy", "url": "https://hono.dev/examples/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Proxy in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUpdate: We've introduced the new Proxy Helper for easier proxy functionality. Check out the Proxy Helper documentation for more details.\n\nIf you can see \"Can't modify immutable headers.\" error with a similar code, you need to clone the response object.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/proxy", "title": "Proxy", "description": "This page provides examples and tips for implementing proxy functionality using Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:57:15", "type": "best_practices", "page_metadata": {"title": "Proxy - Hono", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "generator": "VitePress v1.6.3", "scrapeId": "8bbbb3ff-2cf6-40f6-a786-b82e67833c2d", "sourceURL": "https://hono.dev/examples/proxy", "url": "https://hono.dev/examples/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Testing Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Testing Helper in hono.\n\n# Testing Helper\n\nThe Testing Helper provides functions to make testing of Hono applications easier.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { testClient } from 'hono/testing'\n```\n\n## `testClient()`\n\nThe `testClient()` takes an instance of Hono as its first argument and returns an object of the [Hono Client](https://hono.dev/docs/guides/rpc#client). By using this, you can define your request with the editor completion.\n\n```ts\nimport { testClient } from 'hono/testing'\n\nit('test', async () => {\n  const app = new Hono().get('/search', (c) =>\n    c.json({ hello: 'world' })\n  )\n  const res = await testClient(app).search.$get()\n\n  expect(await res.json()).toEqual({ hello: 'world' })\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/testing", "title": "Testing Helper", "description": "The Testing Helper provides functions to make testing of Hono applications easier.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:57:42", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Testing Helper - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "scrapeId": "39eb0455-622c-4d17-ba0b-59540a28d170", "sourceURL": "https://hono.dev/docs/helpers/testing", "url": "https://hono.dev/docs/helpers/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { testClient } from 'hono/testing'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/testing", "title": "Testing Helper", "description": "The Testing Helper provides functions to make testing of Hono applications easier.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:57:42", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Testing Helper - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "scrapeId": "39eb0455-622c-4d17-ba0b-59540a28d170", "sourceURL": "https://hono.dev/docs/helpers/testing", "url": "https://hono.dev/docs/helpers/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `testclient()` in hono?\n\nAssistant: To `testclient()` in hono, here's what you do:\nThe `testClient()` takes an instance of Hono as its first argument and returns an object of the [Hono Client](https://hono.dev/docs/guides/rpc#client). By using this, you can define your request with the editor completion.\n\n```ts\nimport { testClient } from 'hono/testing'\n\nit('test', async () => {\n  const app = new Hono().get('/search', (c) =>\n    c.json({ hello: 'world' })\n  )\n  const res = await testClient(app).search.$get()\n\n  expect(await res.json()).toEqual({ hello: 'world' })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/testing", "title": "Testing Helper", "description": "The Testing Helper provides functions to make testing of Hono applications easier.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:57:42", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Testing Helper - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "scrapeId": "39eb0455-622c-4d17-ba0b-59540a28d170", "sourceURL": "https://hono.dev/docs/helpers/testing", "url": "https://hono.dev/docs/helpers/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Testing Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { testClient } from 'hono/testing'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of testing helper.\n\n**testClient() Example**:\n\n```yaml\n```ts\nimport { testClient } from 'hono/testing'\n\nit('test', async () => {\n  const app = new Hono().get('/search', (c) =>\n    c.json({ hello: 'world' })\n  )\n  const res = await testClient(app).search.$get()\n\n  expect(await res.json()).toEqual({ hello: 'world' })\n})\n```\n```\n\nThis snippet shows you how to testclient() example, which is an important aspect of testing helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/testing", "title": "Testing Helper", "description": "The Testing Helper provides functions to make testing of Hono applications easier.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:57:42", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Testing Helper - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "scrapeId": "39eb0455-622c-4d17-ba0b-59540a28d170", "sourceURL": "https://hono.dev/docs/helpers/testing", "url": "https://hono.dev/docs/helpers/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Context is in hono?\n\nAssistant: Sure, I'd be happy to explain Context in hono.\n\n# Context\n\nTo handle Request and Response, you can use `Context` object.Here's a quick rundown of what this is about:\n\n## req\n\n`req` is the instance of HonoRequest. For more details, see [HonoRequest](https://hono.dev/docs/api/request).\n\n```ts\napp.get('/hello', (c) => {\n  const userAgent = c.req.header('User-Agent')\n  // ...\n})\n```\n\n## body()\n\nReturn the HTTP response.\n\nYou can set headers with `c.header()` and set HTTP status code with `c.status`. This can also be set in `c.text()`, `c.json()` and so on.\n\nINFO\n\n**Note**: When returning Text or HTML, it is recommended to use `c.text()` or `c.html()`.\n\n```ts\napp.get('/welcome', (c) => {\n  // Set headers\n  c.header('X-Message', 'Hello!')\n  c.header('Content-Type', 'text/plain')\n\n  // Set HTTP status code\n  c.status(201)\n\n  // Return the response body\n  return c.body('Thank you for coming')\n})\n```\n\nYou can also write the following.\n\n```ts\napp.get('/welcome', (c) => {\n  return c.body('Thank you for coming', 201, {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  })\n})\n```\n\nThe Response is the same as below.\n\n```ts\nnew Response('Thank you for coming', {\n  status: 201,\n  headers: {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  },\n})\n```\n\n## text()\n\nRender text as `Content-Type:text/plain`.\n\n```ts\napp.get('/say', (c) => {\n  return c.text('Hello!')\n})\n```\n\n## json()\n\nRender JSON as `Content-Type:application/json`.\n\n```ts\napp.get('/api', (c) => {\n  return c.json({ message: 'Hello!' })\n})\n```\n\n## html()\n\nRender HTML as `Content-Type:text/html`.\n\n```ts\napp.get('/', (c) => {\n  return c.html('<h1>Hello! Hono!</h1>')\n})\n```\n\n## notFound()\n\nReturn the `Not Found` Response.\n\n```ts\napp.get('/notfound', (c) => {\n  return c.notFound()\n})\n```\n\n## redirect()\n\nRedirect, default status code is `302`.\n\n```ts\napp.get('/redirect', (c) => {\n  return c.redirect('/')\n})\n\napp.get('/redirect-permanently', (c) => {\n  return c.redirect('/', 301)\n})\n```\n\n## res\n\n```ts\n// Response object\napp.use('/', async (c, next) => {\n  await next()\n  c.res.headers.append('X-Debug', 'Debug message')\n})\n```\n\n## set() / get()\n\nGet and set arbitrary key-value pairs, with a lifetime of the current request. This allows passing specific values between middleware or from middleware to route handlers.\n\n```ts\napp.use(async (c, next) => {\n  c.set('message', 'Hono is cool!!')\n  await next()\n})\n\napp.get('/', (c) => {\n  const message = c.get('message')\n  return c.text(`The message is \"${message}\"`)\n})\n```\n\nPass the `Variables` as Generics to the constructor of `Hono` to make it type-safe.\n\n```ts\ntype Variables = {\n  message: string\n}\n\nconst app = new Hono<{ Variables: Variables }>()\n```\n\nThe value of `c.set` / `c.get` are retained only within the same request. They cannot be shared or persisted across different requests.\n\n## var\n\nYou can also access the value of a variable with `c.var`.\n\n```ts\nconst result = c.var.client.oneMethod()\n```\n\nIf you want to create the middleware which provides a custom method, write like the following:\n\n```ts\ntype Env = {\n  Variables: {\n    echo: (str: string) => string\n  }\n}\n\nconst app = new Hono()\n\nconst echoMiddleware = createMiddleware<Env>(async (c, next) => {\n  c.set('echo', (str) => str)\n  await next()\n})\n\napp.get('/echo', echoMiddleware, (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```\n\nIf you want to use the middleware in multiple handlers, you can use `app.use()`. Then, you have to pass the `Env` as Generics to the constructor of `Hono` to make it type-safe.\n\n```ts\nconst app = new Hono<Env>()\n\napp.use(echoMiddleware)\n\napp.get('/echo', (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```\n\n## render() / setRenderer()\n\nYou can set a layout using `c.setRenderer()` within a custom middleware.\n\n```tsx\napp.use(async (c, next) => {\n  c.setRenderer((content) => {\n    return c.html(\n      <html>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\n\napp.get('/', (c) => {\n  return c.render('Hello!')\n})\n```\n\nThe output of which will be:\n\n```html\n<html>\n  <body>\n    <p>Hello!</p>\n  </body>\n</html>\n```\n\nAdditionally, this feature offers the flexibility to customize arguments. To ensure type safety, types can be defined as:\n\n```ts\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (\n      content: string | Promise<string>,\n      head: { title: string }\n    ): Response | Promise<Response>\n  }\n}\n```\n\nHere's an example of how you can use this:\n\n```ts\napp.use('/pages/*', async (c, next) => {\n  c.setRenderer((content, head) => {\n    return c.html(\n      <html>\n        <head>\n          <title>{head.title}</title>\n        </head>\n        <body>\n          <header>{head.title}</header>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\n\napp.get('/pages/my-favorite', (c) => {\n  return c.render(<p>Ramen and Sushi</p>, {\n    title: 'My favorite',\n  })\n})\n\napp.get('/pages/my-hobbies', (c) => {\n  return c.render(<p>Watching baseball</p>, {\n    title: 'My hobbies',\n  })\n})\n```\n\n## executionCtx\n\n```ts\n// ExecutionContext object\napp.get('/foo', async (c) => {\n  c.executionCtx.waitUntil(c.env.KV.put(key, data))\n  // ...\n})\n```\n\n## event\n\n```ts\n// Type definition to make type inference\ntype Bindings = {\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// FetchEvent object (only set when using Service Worker syntax)\napp.get('/foo', async (c) => {\n  c.event.waitUntil(c.env.MY_KV.put(key, data))\n  // ...\n})\n```\n\n## env\n\nIn Cloudflare Workers Environment variables, secrets, KV namespaces, D1 database, R2 bucket etc. that are bound to a worker are known as bindings. Regardless of type, bindings are always available as global variables and can be accessed via the context `c.env.BINDING_KEY`.\n\n```ts\n// Type definition to make type inference\ntype Bindings = {\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// Environment object for Cloudflare Workers\napp.get('/', async (c) => {\n  c.env.MY_KV.get('my-key')\n  // ...\n})\n```\n\n## error\n\nIf the Handler throws an error, the error object is placed in `c.error`. You can access it in your middleware.\n\n```ts\napp.use(async (c, next) => {\n  await next()\n  if (c.error) {\n    // do something...\n  }\n})\n```\n\n## ContextVariableMap\n\nFor instance, if you wish to add type definitions to variables when a specific middleware is used, you can extend `ContextVariableMap`. For example:\n\n```ts\ndeclare module 'hono' {\n  interface ContextVariableMap {\n    result: string\n  }\n}\n```\n\nYou can then utilize this in your middleware:\n\n```ts\nconst mw = createMiddleware(async (c, next) => {\n  c.set('result', 'some values') // result is a string\n  await next()\n})\n```\n\nIn a handler, the variable is inferred as the proper type:\n\n```ts\napp.get('/', (c) => {\n  const val = c.get('result') // val is a string\n  // ...\n  return c.json({ result: val })\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "overview", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I req in hono?\n\nAssistant: To req in hono, here's what you do:\n`req` is the instance of HonoRequest. For more details, see [HonoRequest](https://hono.dev/docs/api/request).\n\n```ts\napp.get('/hello', (c) => {\n  const userAgent = c.req.header('User-Agent')\n  // ...\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I body() in hono?\n\nAssistant: To body() in hono, here's what you do:\nReturn the HTTP response.\n\nYou can set headers with `c.header()` and set HTTP status code with `c.status`. This can also be set in `c.text()`, `c.json()` and so on.\n\nINFO\n\n**Note**: When returning Text or HTML, it is recommended to use `c.text()` or `c.html()`.\n\n```ts\napp.get('/welcome', (c) => {\n  // Set headers\n  c.header('X-Message', 'Hello!')\n  c.header('Content-Type', 'text/plain')\n\n  // Set HTTP status code\n  c.status(201)\n\n  // Return the response body\n  return c.body('Thank you for coming')\n})\n```\n\nYou can also write the following.\n\n```ts\napp.get('/welcome', (c) => {\n  return c.body('Thank you for coming', 201, {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  })\n})\n```\n\nThe Response is the same as below.\n\n```ts\nnew Response('Thank you for coming', {\n  status: 201,\n  headers: {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  },\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I text() in hono?\n\nAssistant: To text() in hono, here's what you do:\nRender text as `Content-Type:text/plain`.\n\n```ts\napp.get('/say', (c) => {\n  return c.text('Hello!')\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I json() in hono?\n\nAssistant: To json() in hono, here's what you do:\nRender JSON as `Content-Type:application/json`.\n\n```ts\napp.get('/api', (c) => {\n  return c.json({ message: 'Hello!' })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I html() in hono?\n\nAssistant: To html() in hono, here's what you do:\nRender HTML as `Content-Type:text/html`.\n\n```ts\napp.get('/', (c) => {\n  return c.html('<h1>Hello! Hono!</h1>')\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I notfound() in hono?\n\nAssistant: To notfound() in hono, here's what you do:\nReturn the `Not Found` Response.\n\n```ts\napp.get('/notfound', (c) => {\n  return c.notFound()\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I redirect() in hono?\n\nAssistant: To redirect() in hono, here's what you do:\nRedirect, default status code is `302`.\n\n```ts\napp.get('/redirect', (c) => {\n  return c.redirect('/')\n})\n\napp.get('/redirect-permanently', (c) => {\n  return c.redirect('/', 301)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I res in hono?\n\nAssistant: To res in hono, here's what you do:\n```ts\n// Response object\napp.use('/', async (c, next) => {\n  await next()\n  c.res.headers.append('X-Debug', 'Debug message')\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I set() / get() in hono?\n\nAssistant: To set() / get() in hono, here's what you do:\nGet and set arbitrary key-value pairs, with a lifetime of the current request. This allows passing specific values between middleware or from middleware to route handlers.\n\n```ts\napp.use(async (c, next) => {\n  c.set('message', 'Hono is cool!!')\n  await next()\n})\n\napp.get('/', (c) => {\n  const message = c.get('message')\n  return c.text(`The message is \"${message}\"`)\n})\n```\n\nPass the `Variables` as Generics to the constructor of `Hono` to make it type-safe.\n\n```ts\ntype Variables = {\n  message: string\n}\n\nconst app = new Hono<{ Variables: Variables }>()\n```\n\nThe value of `c.set` / `c.get` are retained only within the same request. They cannot be shared or persisted across different requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I var in hono?\n\nAssistant: To var in hono, here's what you do:\nYou can also access the value of a variable with `c.var`.\n\n```ts\nconst result = c.var.client.oneMethod()\n```\n\nIf you want to create the middleware which provides a custom method, write like the following:\n\n```ts\ntype Env = {\n  Variables: {\n    echo: (str: string) => string\n  }\n}\n\nconst app = new Hono()\n\nconst echoMiddleware = createMiddleware<Env>(async (c, next) => {\n  c.set('echo', (str) => str)\n  await next()\n})\n\napp.get('/echo', echoMiddleware, (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```\n\nIf you want to use the middleware in multiple handlers, you can use `app.use()`. Then, you have to pass the `Env` as Generics to the constructor of `Hono` to make it type-safe.\n\n```ts\nconst app = new Hono<Env>()\n\napp.use(echoMiddleware)\n\napp.get('/echo', (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I render() / setrenderer() in hono?\n\nAssistant: To render() / setrenderer() in hono, here's what you do:\nYou can set a layout using `c.setRenderer()` within a custom middleware.\n\n```tsx\napp.use(async (c, next) => {\n  c.setRenderer((content) => {\n    return c.html(\n      <html>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\n\napp.get('/', (c) => {\n  return c.render('Hello!')\n})\n```\n\nThe output of which will be:\n\n```html\n<html>\n  <body>\n    <p>Hello!</p>\n  </body>\n</html>\n```\n\nAdditionally, this feature offers the flexibility to customize arguments. To ensure type safety, types can be defined as:\n\n```ts\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (\n      content: string | Promise<string>,\n      head: { title: string }\n    ): Response | Promise<Response>\n  }\n}\n```\n\nHere's an example of how you can use this:\n\n```ts\napp.use('/pages/*', async (c, next) => {\n  c.setRenderer((content, head) => {\n    return c.html(\n      <html>\n        <head>\n          <title>{head.title}</title>\n        </head>\n        <body>\n          <header>{head.title}</header>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\n\napp.get('/pages/my-favorite', (c) => {\n  return c.render(<p>Ramen and Sushi</p>, {\n    title: 'My favorite',\n  })\n})\n\napp.get('/pages/my-hobbies', (c) => {\n  return c.render(<p>Watching baseball</p>, {\n    title: 'My hobbies',\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I executionctx in hono?\n\nAssistant: To executionctx in hono, here's what you do:\n```ts\n// ExecutionContext object\napp.get('/foo', async (c) => {\n  c.executionCtx.waitUntil(c.env.KV.put(key, data))\n  // ...\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I event in hono?\n\nAssistant: To event in hono, here's what you do:\n```ts\n// Type definition to make type inference\ntype Bindings = {\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// FetchEvent object (only set when using Service Worker syntax)\napp.get('/foo', async (c) => {\n  c.event.waitUntil(c.env.MY_KV.put(key, data))\n  // ...\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I env in hono?\n\nAssistant: To env in hono, here's what you do:\nIn Cloudflare Workers Environment variables, secrets, KV namespaces, D1 database, R2 bucket etc. that are bound to a worker are known as bindings. Regardless of type, bindings are always available as global variables and can be accessed via the context `c.env.BINDING_KEY`.\n\n```ts\n// Type definition to make type inference\ntype Bindings = {\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// Environment object for Cloudflare Workers\napp.get('/', async (c) => {\n  c.env.MY_KV.get('my-key')\n  // ...\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I error in hono?\n\nAssistant: To error in hono, here's what you do:\nIf the Handler throws an error, the error object is placed in `c.error`. You can access it in your middleware.\n\n```ts\napp.use(async (c, next) => {\n  await next()\n  if (c.error) {\n    // do something...\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I contextvariablemap in hono?\n\nAssistant: To contextvariablemap in hono, here's what you do:\nFor instance, if you wish to add type definitions to variables when a specific middleware is used, you can extend `ContextVariableMap`. For example:\n\n```ts\ndeclare module 'hono' {\n  interface ContextVariableMap {\n    result: string\n  }\n}\n```\n\nYou can then utilize this in your middleware:\n\n```ts\nconst mw = createMiddleware(async (c, next) => {\n  c.set('result', 'some values') // result is a string\n  await next()\n})\n```\n\nIn a handler, the variable is inferred as the proper type:\n\n```ts\napp.get('/', (c) => {\n  const val = c.get('result') // val is a string\n  // ...\n  return c.json({ result: val })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Context in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**req example**:\n\n```yaml\n```ts\napp.get('/hello', (c) => {\n  const userAgent = c.req.header('User-Agent')\n  // ...\n})\n```\n```\n\nThis snippet shows you how to req example, which is an important aspect of context.\n\n**body example**:\n\n```yaml\n```ts\napp.get('/welcome', (c) => {\n  // Set headers\n  c.header('X-Message', 'Hello!')\n  c.header('Content-Type', 'text/plain')\n\n  // Set HTTP status code\n  c.status(201)\n\n  // Return the response body\n  return c.body('Thank you for coming')\n})\n```\n```\n\nThis snippet shows you how to body example, which is an important aspect of context.\n\n**body alternative example**:\n\n```yaml\n```ts\napp.get('/welcome', (c) => {\n  return c.body('Thank you for coming', 201, {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  })\n})\n```\n```\n\nThis snippet shows you how to body alternative example, which is an important aspect of context.\n\n**text example**:\n\n```yaml\n```ts\napp.get('/say', (c) => {\n  return c.text('Hello!')\n})\n```\n```\n\nThis snippet shows you how to text example, which is an important aspect of context.\n\n**json example**:\n\n```yaml\n```ts\napp.get('/api', (c) => {\n  return c.json({ message: 'Hello!' })\n})\n```\n```\n\nThis snippet shows you how to json example, which is an important aspect of context.\n\n**html example**:\n\n```yaml\n```ts\napp.get('/', (c) => {\n  return c.html('<h1>Hello! Hono!</h1>')\n})\n```\n```\n\nThis snippet shows you how to html example, which is an important aspect of context.\n\n**notFound example**:\n\n```yaml\n```ts\napp.get('/notfound', (c) => {\n  return c.notFound()\n})\n```\n```\n\nThis snippet shows you how to notfound example, which is an important aspect of context.\n\n**redirect example**:\n\n```yaml\n```ts\napp.get('/redirect', (c) => {\n  return c.redirect('/')\n})\n```\n```\n\nThis snippet shows you how to redirect example, which is an important aspect of context.\n\n**redirect permanently example**:\n\n```yaml\n```ts\napp.get('/redirect-permanently', (c) => {\n  return c.redirect('/', 301)\n})\n```\n```\n\nThis snippet shows you how to redirect permanently example, which is an important aspect of context.\n\n**res example**:\n\n```yaml\n```ts\napp.use('/', async (c, next) => {\n  await next()\n  c.res.headers.append('X-Debug', 'Debug message')\n})\n```\n```\n\nThis snippet shows you how to res example, which is an important aspect of context.\n\n**set/get example**:\n\n```yaml\n```ts\napp.use(async (c, next) => {\n  c.set('message', 'Hono is cool!!')\n  await next()\n})\n```\n```\n\nThis snippet shows you how to set/get example, which is an important aspect of context.\n\n**var example**:\n\n```yaml\n```ts\nconst result = c.var.client.oneMethod()\n```\n```\n\nThis snippet shows you how to var example, which is an important aspect of context.\n\n**render example**:\n\n```yaml\n```tsx\napp.use(async (c, next) => {\n  c.setRenderer((content) => {\n    return c.html(\n      <html>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\n```\n```\n\nThis snippet shows you how to render example, which is an important aspect of context.\n\n**executionCtx example**:\n\n```yaml\n```ts\napp.get('/foo', async (c) => {\n  c.executionCtx.waitUntil(c.env.KV.put(key, data))\n  // ...\n})\n```\n```\n\nThis snippet shows you how to executionctx example, which is an important aspect of context.\n\n**event example**:\n\n```yaml\n```ts\napp.get('/foo', async (c) => {\n  c.event.waitUntil(c.env.MY_KV.put(key, data))\n  // ...\n})\n```\n```\n\nThis snippet shows you how to event example, which is an important aspect of context.\n\n**env example**:\n\n```yaml\n```ts\napp.get('/', async (c) => {\n  c.env.MY_KV.get('my-key')\n  // ...\n})\n```\n```\n\nThis snippet shows you how to env example, which is an important aspect of context.\n\n**error example**:\n\n```yaml\n```ts\napp.use(async (c, next) => {\n  await next()\n  if (c.error) {\n    // do something...\n  }\n})\n```\n```\n\nThis snippet shows you how to error example, which is an important aspect of context.\n\n", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "code_examples", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Context in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen returning Text or HTML, it is recommended to use `c.text()` or `c.html()` to ensure proper content type handling.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/api/context", "title": "Context", "description": "To handle Request and Response, you can use `Context` object.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:58:30", "type": "best_practices", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "Context - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "0c02a79b-b4f9-4527-9cd6-4c0ae9412a7c", "sourceURL": "https://hono.dev/docs/api/context", "url": "https://hono.dev/docs/api/context", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what WebSocket Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain WebSocket Helper in hono.\n\n# WebSocket Helper\n\nWebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.Here's a quick rundown of what this is about:\n\n## Import\n\nCloudflare WorkersDenoBun\n\n```ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/deno'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\nimport type { ServerWebSocket } from 'bun'\n\nconst { upgradeWebSocket, websocket } =\n  createBunWebSocket<ServerWebSocket>()\n\n// ...\n\nexport default {\n  fetch: app.fetch,\n  websocket,\n}\n``` \n\nIf you use Node.js, you can use [@hono/node-ws](https://github.com/honojs/middleware/tree/main/packages/node-ws).\n\n## `upgradeWebSocket()`\n\n`upgradeWebSocket()` returns a handler for handling WebSocket.\n\n```ts\nconst app = new Hono()\n\napp.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    return {\n      onMessage(event, ws) {\n        console.log(`Message from client: ${event.data}`)\n        ws.send('Hello from server!')\n      },\n      onClose: () => {\n        console.log('Connection closed')\n      },\n    }\n  })\n)\n```\n\nAvailable events:\n\n- `onOpen` - Currently, Cloudflare Workers does not support it.\n- `onMessage`\n- `onClose`\n- `onError`\n\nWARNING\n\nIf you use middleware that modifies headers (e.g., applying CORS) on a route that uses WebSocket Helper, you may encounter an error saying you can't modify immutable headers. This is because `upgradeWebSocket()` also changes headers internally.\n\nTherefore, please be cautious if you are using WebSocket Helper and middleware at the same time.\n\n## RPC-mode\n\nHandlers defined with WebSocket Helper support RPC mode.\n\n```ts\n// server.ts\nconst wsApp = app.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    //...\n  })\n)\n\nexport type WebSocketApp = typeof wsApp\n\n// client.ts\nconst client = hc<WebSocketApp>('http://localhost:8787')\nconst socket = client.ws.$ws() // A WebSocket object for a client\n```\n\n## Examples\n\nSee the examples using WebSocket Helper.\n\n## Server and Client\n\n```ts\n// server.ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n\nconst app = new Hono().get(\n  '/ws',\n  upgradeWebSocket(() => {\n    return {\n      onMessage: (event) => {\n        console.log(event.data)\n      },\n    }\n  })\n)\n\nexport default app\n```\n\n```ts\n// client.ts\nimport { hc } from 'hono/client'\nimport type app from './server'\n\nconst client = hc<typeof app>('http://localhost:8787')\nconst ws = client.ws.$ws(0)\n\nws.addEventListener('open', () => {\n  setInterval(() => {\n    ws.send(new Date().toString())\n  }, 1000)\n})\n```\n\n## Bun with JSX\n\n```tsx\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\n\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <meta charset='UTF-8' />\n      </head>\n      <body>\n        <div id='now-time'></div>\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `\n        const ws = new WebSocket('ws://localhost:3000/ws')\n        const $nowTime = document.getElementById('now-time')\n        ws.onmessage = (event) => {\n          $nowTime.textContent = event.data\n        }\n        `,\n          }}\n        ></script>\n      </body>\n    </html>\n  )\n})\n\nconst ws = app.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    let intervalId\n    return {\n      onOpen(_event, ws) {\n        intervalId = setInterval(() => {\n          ws.send(new Date().toString())\n        }, 200)\n      },\n      onClose() {\n        clearInterval(intervalId)\n      },\n    }\n  })\n)\n\nexport default {\n  fetch: app.fetch,\n  websocket,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "overview", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\nCloudflare WorkersDenoBun\n\n```ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/deno'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\nimport type { ServerWebSocket } from 'bun'\n\nconst { upgradeWebSocket, websocket } =\n  createBunWebSocket<ServerWebSocket>()\n\n// ...\n\nexport default {\n  fetch: app.fetch,\n  websocket,\n}\n``` \n\nIf you use Node.js, you can use [@hono/node-ws](https://github.com/honojs/middleware/tree/main/packages/node-ws)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `upgradewebsocket()` in hono?\n\nAssistant: To `upgradewebsocket()` in hono, here's what you do:\n`upgradeWebSocket()` returns a handler for handling WebSocket.\n\n```ts\nconst app = new Hono()\n\napp.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    return {\n      onMessage(event, ws) {\n        console.log(`Message from client: ${event.data}`)\n        ws.send('Hello from server!')\n      },\n      onClose: () => {\n        console.log('Connection closed')\n      },\n    }\n  })\n)\n```\n\nAvailable events:\n\n- `onOpen` - Currently, Cloudflare Workers does not support it.\n- `onMessage`\n- `onClose`\n- `onError`\n\nWARNING\n\nIf you use middleware that modifies headers (e.g., applying CORS) on a route that uses WebSocket Helper, you may encounter an error saying you can't modify immutable headers. This is because `upgradeWebSocket()` also changes headers internally.\n\nTherefore, please be cautious if you are using WebSocket Helper and middleware at the same time..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I rpc-mode in hono?\n\nAssistant: To rpc-mode in hono, here's what you do:\nHandlers defined with WebSocket Helper support RPC mode.\n\n```ts\n// server.ts\nconst wsApp = app.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    //...\n  })\n)\n\nexport type WebSocketApp = typeof wsApp\n\n// client.ts\nconst client = hc<WebSocketApp>('http://localhost:8787')\nconst socket = client.ws.$ws() // A WebSocket object for a client\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I examples in hono?\n\nAssistant: To examples in hono, here's what you do:\nSee the examples using WebSocket Helper..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I server and client in hono?\n\nAssistant: To server and client in hono, here's what you do:\n```ts\n// server.ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n\nconst app = new Hono().get(\n  '/ws',\n  upgradeWebSocket(() => {\n    return {\n      onMessage: (event) => {\n        console.log(event.data)\n      },\n    }\n  })\n)\n\nexport default app\n```\n\n```ts\n// client.ts\nimport { hc } from 'hono/client'\nimport type app from './server'\n\nconst client = hc<typeof app>('http://localhost:8787')\nconst ws = client.ws.$ws(0)\n\nws.addEventListener('open', () => {\n  setInterval(() => {\n    ws.send(new Date().toString())\n  }, 1000)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I bun with jsx in hono?\n\nAssistant: To bun with jsx in hono, here's what you do:\n```tsx\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\n\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <meta charset='UTF-8' />\n      </head>\n      <body>\n        <div id='now-time'></div>\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `\n        const ws = new WebSocket('ws://localhost:3000/ws')\n        const $nowTime = document.getElementById('now-time')\n        ws.onmessage = (event) => {\n          $nowTime.textContent = event.data\n        }\n        `,\n          }}\n        ></script>\n      </body>\n    </html>\n  )\n})\n\nconst ws = app.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    let intervalId\n    return {\n      onOpen(_event, ws) {\n        intervalId = setInterval(() => {\n          ws.send(new Date().toString())\n        }, 200)\n      },\n      onClose() {\n        clearInterval(intervalId)\n      },\n    }\n  })\n)\n\nexport default {\n  fetch: app.fetch,\n  websocket,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for WebSocket Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import for Cloudflare Workers**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n```\n\nThis snippet shows you how to import for cloudflare workers, which is an important aspect of websocket helper.\n\n**Import for Deno**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/deno'\n```\n\nThis snippet shows you how to import for deno, which is an important aspect of websocket helper.\n\n**Import for Bun**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\nimport type { ServerWebSocket } from 'bun'\n\nconst { upgradeWebSocket, websocket } =\n  createBunWebSocket<ServerWebSocket>()\n```\n\nThis snippet shows you how to import for bun, which is an important aspect of websocket helper.\n\n**Using upgradeWebSocket()**:\n\n```yaml\nconst app = new Hono()\n\napp.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    return {\n      onMessage(event, ws) {\n        console.log(`Message from client: ${event.data}`)\n        ws.send('Hello from server!')\n      },\n      onClose: () => {\n        console.log('Connection closed')\n      },\n    }\n  })\n)\n```\n\nThis snippet shows you how to using upgradewebsocket(), which is an important aspect of websocket helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "code_examples", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using WebSocket Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you use middleware that modifies headers (e.g., applying CORS) on a route that uses WebSocket Helper, you may encounter an error saying you can't modify immutable headers. This is because upgradeWebSocket() also changes headers internally. Therefore, please be cautious if you are using WebSocket Helper and middleware at the same time.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/websocket", "title": "WebSocket Helper", "description": "WebSocket Helper is a helper for server-side WebSockets in Hono applications. Currently Cloudflare Workers / Pages, Deno, and Bun adapters are available.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:59:05", "type": "best_practices", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "title": "WebSocket Helper - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "33280164-9984-4ca9-870a-5c904c8d590b", "sourceURL": "https://hono.dev/docs/helpers/websocket", "url": "https://hono.dev/docs/helpers/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Exception is in hono?\n\nAssistant: Sure, I'd be happy to explain Exception in hono.\n\n# Exception\n\nWhen a fatal error occurs, such as authentication failure, an HTTPException must be thrown.Here's a quick rundown of what this is about:\n\n## throw HTTPException\n\nThis example throws an HTTPException from the middleware.\n\n## Handling HTTPException\n\nYou can handle the thrown HTTPException with `app.onError`.\n\n## cause\n\nThe `cause` option is available to add a [`cause`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause) data.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api/exception", "title": "Exception", "description": "When a fatal error occurs, such as authentication failure, an HTTPException must be thrown.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 02:59:14", "type": "overview", "page_metadata": {"og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Exception - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "scrapeId": "9fe34d5f-6b0c-404e-83ea-a8b7167e16cc", "sourceURL": "https://hono.dev/docs/api/exception", "url": "https://hono.dev/docs/api/exception", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I throw httpexception in hono?\n\nAssistant: To throw httpexception in hono, here's what you do:\nThis example throws an HTTPException from the middleware..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/exception", "title": "Exception", "description": "When a fatal error occurs, such as authentication failure, an HTTPException must be thrown.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 02:59:14", "type": "section_detail", "page_metadata": {"og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Exception - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "scrapeId": "9fe34d5f-6b0c-404e-83ea-a8b7167e16cc", "sourceURL": "https://hono.dev/docs/api/exception", "url": "https://hono.dev/docs/api/exception", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I handling httpexception in hono?\n\nAssistant: To handling httpexception in hono, here's what you do:\nYou can handle the thrown HTTPException with `app.onError`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/exception", "title": "Exception", "description": "When a fatal error occurs, such as authentication failure, an HTTPException must be thrown.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 02:59:14", "type": "section_detail", "page_metadata": {"og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Exception - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "scrapeId": "9fe34d5f-6b0c-404e-83ea-a8b7167e16cc", "sourceURL": "https://hono.dev/docs/api/exception", "url": "https://hono.dev/docs/api/exception", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I cause in hono?\n\nAssistant: To cause in hono, here's what you do:\nThe `cause` option is available to add a [`cause`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause) data..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/exception", "title": "Exception", "description": "When a fatal error occurs, such as authentication failure, an HTTPException must be thrown.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 02:59:14", "type": "section_detail", "page_metadata": {"og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Exception - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "scrapeId": "9fe34d5f-6b0c-404e-83ea-a8b7167e16cc", "sourceURL": "https://hono.dev/docs/api/exception", "url": "https://hono.dev/docs/api/exception", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Exception in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Throwing HTTPException from Middleware**:\n\n```yaml\nimport { HTTPException } from 'hono/http-exception'\n\n// ...\n\napp.post('/auth', async (c, next) => {\n  // authentication\n  if (authorized === false) {\n    throw new HTTPException(401, { message: 'Custom error message' })\n  }\n  await next()\n})\n```\n\nThis snippet shows you how to throwing httpexception from middleware, which is an important aspect of exception.\n\n**Specifying Custom Response**:\n\n```yaml\nimport { HTTPException } from 'hono/http-exception'\n\nconst errorResponse = new Response('Unauthorized', {\n  status: 401,\n  headers: {\n    Authenticate: 'error=\"invalid_token\"',\n  },\n})\n\nthrow new HTTPException(401, { res: errorResponse })\n```\n\nThis snippet shows you how to specifying custom response, which is an important aspect of exception.\n\n**Handling HTTPException with app.onError**:\n\n```yaml\nimport { HTTPException } from 'hono/http-exception'\n\n// ...\n\napp.onError((err, c) => {\n  if (err instanceof HTTPException) {\n    // Get the custom response\n    return err.getResponse()\n  }\n  // ...\n})\n```\n\nThis snippet shows you how to handling httpexception with app.onerror, which is an important aspect of exception.\n\n**Using cause option**:\n\n```yaml\napp.post('/auth', async (c, next) => {\n  try {\n    authorize(c)\n  } catch (e) {\n    throw new HTTPException(401, { message, cause: e })\n  }\n  await next()\n})\n```\n\nThis snippet shows you how to using cause option, which is an important aspect of exception.\n\n", "metadata": {"source_url": "https://hono.dev/docs/api/exception", "title": "Exception", "description": "When a fatal error occurs, such as authentication failure, an HTTPException must be thrown.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 02:59:14", "type": "code_examples", "page_metadata": {"og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Exception - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "scrapeId": "9fe34d5f-6b0c-404e-83ea-a8b7167e16cc", "sourceURL": "https://hono.dev/docs/api/exception", "url": "https://hono.dev/docs/api/exception", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Adapter Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Adapter Helper in hono.\n\n# Adapter Helper\n\nThe Adapter Helper provides a seamless way to interact with various platforms through a unified interface.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { env, getRuntimeKey } from 'hono/adapter'\n```\n\n## env()\n\nThe `env()` function facilitates retrieving environment variables across different runtimes, extending beyond just Cloudflare Workers' Bindings. The value that can be retrieved with `env(c)` may be different for each runtimes.\n\n```ts\nimport { env } from 'hono/adapter'\n\napp.get('/env', (c) => {\n  // NAME is process.env.NAME on Node.js or Bun\n  // NAME is the value written in `wrangler.toml` on Cloudflare\n  const { NAME } = env<{ NAME: string }>(c)\n  return c.text(NAME)\n})\n```\n\nSupported Runtimes, Serverless Platforms and Cloud Services:\n\n- Cloudflare Workers\n  - `wrangler.toml`\n- Deno\n  - [`Deno.env`](https://docs.deno.com/runtime/manual/basics/env_variables)\n  - `.env` file\n- Bun\n  - [`Bun.env`](https://bun.sh/guides/runtime/set-env)\n  - `process.env`\n- Node.js\n  - `process.env`\n- Vercel\n  - [Environment Variables on Vercel](https://vercel.com/docs/projects/environment-variables)\n- AWS Lambda\n  - [Environment Variables on AWS Lambda](https://docs.aws.amazon.com/lambda/latest/dg/samples-blank.html#samples-blank-architecture)\n- Lambda@Edge\n\nEnvironment Variables on Lambda are [not supported](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html) by Lambda@Edge, you need to use [Lamdba@Edge event](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html) as an alternative.\n- Fastly Compute\n\nOn Fastly Compute, you can use the ConfigStore to manage user-defined data.\n- Netlify\n\nOn Netlify, you can use the [Netlify Contexts](https://docs.netlify.com/site-deploys/overview/#deploy-contexts) to manage user-defined data.\n\n## Specify the runtime\n\nYou can specify the runtime to get environment variables by passing the runtime key as the second argument.\n\n```ts\napp.get('/env', (c) => {\n  const { NAME } = env<{ NAME: string }>(c, 'workerd')\n  return c.text(NAME)\n})\n```\n\n## getRuntimeKey()\n\nThe `getRuntimeKey()` function returns the identifier of the current runtime.\n\n```ts\napp.get('/', (c) => {\n  if (getRuntimeKey() === 'workerd') {\n    return c.text('You are on Cloudflare')\n  } else if (getRuntimeKey() === 'bun') {\n    return c.text('You are on Bun')\n  }\n  ...\n})\n```\n\n## Available Runtimes Keys\n\nHere are the available runtimes keys, unavailable runtime key runtimes may be supported and labeled as `other`, with some being inspired by [WinterCG's Runtime Keys](https://runtime-keys.proposal.wintercg.org/):\n\n- `workerd` - Cloudflare Workers\n- `deno`\n- `bun`\n- `node`\n- `edge-light` - Vercel Edge Functions\n- `fastly` - Fastly Compute\n- `other` - Other unknown runtimes keys\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { env, getRuntimeKey } from 'hono/adapter'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I env() in hono?\n\nAssistant: To env() in hono, here's what you do:\nThe `env()` function facilitates retrieving environment variables across different runtimes, extending beyond just Cloudflare Workers' Bindings. The value that can be retrieved with `env(c)` may be different for each runtimes.\n\n```ts\nimport { env } from 'hono/adapter'\n\napp.get('/env', (c) => {\n  // NAME is process.env.NAME on Node.js or Bun\n  // NAME is the value written in `wrangler.toml` on Cloudflare\n  const { NAME } = env<{ NAME: string }>(c)\n  return c.text(NAME)\n})\n```\n\nSupported Runtimes, Serverless Platforms and Cloud Services:\n\n- Cloudflare Workers\n  - `wrangler.toml`\n- Deno\n  - [`Deno.env`](https://docs.deno.com/runtime/manual/basics/env_variables)\n  - `.env` file\n- Bun\n  - [`Bun.env`](https://bun.sh/guides/runtime/set-env)\n  - `process.env`\n- Node.js\n  - `process.env`\n- Vercel\n  - [Environment Variables on Vercel](https://vercel.com/docs/projects/environment-variables)\n- AWS Lambda\n  - [Environment Variables on AWS Lambda](https://docs.aws.amazon.com/lambda/latest/dg/samples-blank.html#samples-blank-architecture)\n- Lambda@Edge\n\nEnvironment Variables on Lambda are [not supported](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html) by Lambda@Edge, you need to use [Lamdba@Edge event](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html) as an alternative.\n- Fastly Compute\n\nOn Fastly Compute, you can use the ConfigStore to manage user-defined data.\n- Netlify\n\nOn Netlify, you can use the [Netlify Contexts](https://docs.netlify.com/site-deploys/overview/#deploy-contexts) to manage user-defined data..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I specify the runtime in hono?\n\nAssistant: To specify the runtime in hono, here's what you do:\nYou can specify the runtime to get environment variables by passing the runtime key as the second argument.\n\n```ts\napp.get('/env', (c) => {\n  const { NAME } = env<{ NAME: string }>(c, 'workerd')\n  return c.text(NAME)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I getruntimekey() in hono?\n\nAssistant: To getruntimekey() in hono, here's what you do:\nThe `getRuntimeKey()` function returns the identifier of the current runtime.\n\n```ts\napp.get('/', (c) => {\n  if (getRuntimeKey() === 'workerd') {\n    return c.text('You are on Cloudflare')\n  } else if (getRuntimeKey() === 'bun') {\n    return c.text('You are on Bun')\n  }\n  ...\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I available runtimes keys in hono?\n\nAssistant: To available runtimes keys in hono, here's what you do:\nHere are the available runtimes keys, unavailable runtime key runtimes may be supported and labeled as `other`, with some being inspired by [WinterCG's Runtime Keys](https://runtime-keys.proposal.wintercg.org/):\n\n- `workerd` - Cloudflare Workers\n- `deno`\n- `bun`\n- `node`\n- `edge-light` - Vercel Edge Functions\n- `fastly` - Fastly Compute\n- `other` - Other unknown runtimes keys.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Adapter Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { env, getRuntimeKey } from 'hono/adapter'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of adapter helper.\n\n**Using env() Example**:\n\n```yaml\n```ts\nimport { env } from 'hono/adapter'\n\napp.get('/env', (c) => {\n  const { NAME } = env<{ NAME: string }>(c)\n  return c.text(NAME)\n})\n```\n```\n\nThis snippet shows you how to using env() example, which is an important aspect of adapter helper.\n\n**Specify Runtime Example**:\n\n```yaml\n```ts\napp.get('/env', (c) => {\n  const { NAME } = env<{ NAME: string }>(c, 'workerd')\n  return c.text(NAME)\n})\n```\n```\n\nThis snippet shows you how to specify runtime example, which is an important aspect of adapter helper.\n\n**Using getRuntimeKey() Example**:\n\n```yaml\n```ts\napp.get('/', (c) => {\n  if (getRuntimeKey() === 'workerd') {\n    return c.text('You are on Cloudflare')\n  } else if (getRuntimeKey() === 'bun') {\n    return c.text('You are on Bun')\n  }\n  ...\n})\n```\n```\n\nThis snippet shows you how to using getruntimekey() example, which is an important aspect of adapter helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Adapter Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnvironment Variables on Lambda are not supported by Lambda@Edge, you need to use Lambda@Edge event as an alternative.\n\nOn Fastly Compute, you can use the ConfigStore to manage user-defined data.\n\nOn Netlify, you can use the Netlify Contexts to manage user-defined data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/adapter", "title": "Adapter Helper", "description": "The Adapter Helper provides a seamless way to interact with various platforms through a unified interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:59:40", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "title": "Adapter Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "scrapeId": "24cfb290-95fa-40c0-9190-5e83a74e0fb2", "sourceURL": "https://hono.dev/docs/helpers/adapter", "url": "https://hono.dev/docs/helpers/adapter", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what css Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain css Helper in hono.\n\n# css Helper\n\nThe css helper - `hono/css` - is Hono's built-in CSS in JS(X).Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { css, cx, keyframes, Style } from 'hono/css'\n```\n\n## `css` Experimental\n\nYou can write CSS in the `css` template literal. In this case, it uses `headerClass` as a value of the `class` attribute. Don't forget to add `<Style />` as it contains the CSS content.\n\n```ts\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        <Style />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```\n\nYou can style pseudo-classes like `:hover` by using the [nesting selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Nesting_selector), `&`:\n\n```ts\nconst buttonClass = css`\n  background-color: #fff;\n  &:hover {\n    background-color: red;\n  }\n`\n```\n\n## Extending\n\nYou can extend the CSS definition by embedding the class name.\n\n```tsx\nconst baseClass = css`\n  color: white;\n  background-color: blue;\n`\n\nconst header1Class = css`\n  ${baseClass}\n  font-size: 3rem;\n`\n\nconst header2Class = css`\n  ${baseClass}\n  font-size: 2rem;\n`\n```\n\nIn addition, the syntax of `${baseClass} {}` enables nesting classes.\n\n```tsx\nconst headerClass = css`\n  color: white;\n  background-color: blue;\n`\nconst containerClass = css`\n  ${headerClass} {\n    h1 {\n      font-size: 3rem;\n    }\n  }\n`\nreturn c.render(\n  <div class={containerClass}>\n    <header class={headerClass}>\n      <h1>Hello!</h1>\n    </header>\n  </div>\n)\n```\n\n## Global styles\n\nA pseudo-selector called `:-hono-global` allows you to define global styles.\n\n```tsx\nconst globalClass = css`\n  :-hono-global {\n    html {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n  }\n`\n\nreturn c.render(\n  <div class={globalClass}>\n    <h1>Hello!</h1>\n    <p>Today is a good day.</p>\n  </div>\n)\n```\n\nOr you can write CSS in the `<Style />` component with the `css` literal.\n\n```tsx\nexport const renderer = jsxRenderer(({ children, title }) => {\n  return (\n    <html>\n      <head>\n        <Style>{css`\n          html {\n            font-family: Arial, Helvetica, sans-serif;\n          }\n        `}</Style>\n        <title>{title}</title>\n      </head>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n})\n```\n\n## `keyframes` Experimental\n\nYou can use `keyframes` to write the contents of `@keyframes`. In this case, `fadeInAnimation` will be the name of the animation\n\n```tsx\nconst fadeInAnimation = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`\nconst headerClass = css`\n  animation-name: ${fadeInAnimation};\n  animation-duration: 2s;\n`\nconst Header = () => <a class={headerClass}>Hello!</a>\n```\n\n## `cx` Experimental\n\nThe `cx` composites the two class names.\n\n```tsx\nconst buttonClass = css`\n  border-radius: 10px;\n`\nconst primaryClass = css`\n  background: orange;\n`\nconst Button = () => (\n  <a class={cx(buttonClass, primaryClass)}>Click!</a>\n)\n```\n\nIt can also compose simple strings.\n\n```tsx\nconst Header = () => <a class={cx('h1', primaryClass)}>Hi</a>\n```\n\n## Usage in combination with Secure Headers middleware\n\nIf you want to use the css helpers in combination with the [Secure Headers](https://hono.dev/docs/middleware/builtin/secure-headers) middleware, you can add the [`nonce` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) to the `<Style nonce={c.get('secureHeadersNonce')} />` to avoid Content-Security-Policy caused by the css helpers.\n\n```tsx\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      // Set the pre-defined nonce value to `styleSrc`:\n      styleSrc: [NONCE],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        {/* Set the `nonce` attribute on the css helpers `style` and `script` elements */}\n        <Style nonce={c.get('secureHeadersNonce')} />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```\n\n## Tips\n\nIf you use VS Code, you can use [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components) for Syntax highlighting and IntelliSense for css tagged literals.\n\n![VS Code](https://hono.dev/images/css-ss.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "overview", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { css, cx, keyframes, Style } from 'hono/css'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `css` experimental in hono?\n\nAssistant: To `css` experimental in hono, here's what you do:\nYou can write CSS in the `css` template literal. In this case, it uses `headerClass` as a value of the `class` attribute. Don't forget to add `<Style />` as it contains the CSS content.\n\n```ts\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        <Style />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```\n\nYou can style pseudo-classes like `:hover` by using the [nesting selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Nesting_selector), `&`:\n\n```ts\nconst buttonClass = css`\n  background-color: #fff;\n  &:hover {\n    background-color: red;\n  }\n`\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I extending in hono?\n\nAssistant: To extending in hono, here's what you do:\nYou can extend the CSS definition by embedding the class name.\n\n```tsx\nconst baseClass = css`\n  color: white;\n  background-color: blue;\n`\n\nconst header1Class = css`\n  ${baseClass}\n  font-size: 3rem;\n`\n\nconst header2Class = css`\n  ${baseClass}\n  font-size: 2rem;\n`\n```\n\nIn addition, the syntax of `${baseClass} {}` enables nesting classes.\n\n```tsx\nconst headerClass = css`\n  color: white;\n  background-color: blue;\n`\nconst containerClass = css`\n  ${headerClass} {\n    h1 {\n      font-size: 3rem;\n    }\n  }\n`\nreturn c.render(\n  <div class={containerClass}>\n    <header class={headerClass}>\n      <h1>Hello!</h1>\n    </header>\n  </div>\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I global styles in hono?\n\nAssistant: To global styles in hono, here's what you do:\nA pseudo-selector called `:-hono-global` allows you to define global styles.\n\n```tsx\nconst globalClass = css`\n  :-hono-global {\n    html {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n  }\n`\n\nreturn c.render(\n  <div class={globalClass}>\n    <h1>Hello!</h1>\n    <p>Today is a good day.</p>\n  </div>\n)\n```\n\nOr you can write CSS in the `<Style />` component with the `css` literal.\n\n```tsx\nexport const renderer = jsxRenderer(({ children, title }) => {\n  return (\n    <html>\n      <head>\n        <Style>{css`\n          html {\n            font-family: Arial, Helvetica, sans-serif;\n          }\n        `}</Style>\n        <title>{title}</title>\n      </head>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `keyframes` experimental in hono?\n\nAssistant: To `keyframes` experimental in hono, here's what you do:\nYou can use `keyframes` to write the contents of `@keyframes`. In this case, `fadeInAnimation` will be the name of the animation\n\n```tsx\nconst fadeInAnimation = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`\nconst headerClass = css`\n  animation-name: ${fadeInAnimation};\n  animation-duration: 2s;\n`\nconst Header = () => <a class={headerClass}>Hello!</a>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `cx` experimental in hono?\n\nAssistant: To `cx` experimental in hono, here's what you do:\nThe `cx` composites the two class names.\n\n```tsx\nconst buttonClass = css`\n  border-radius: 10px;\n`\nconst primaryClass = css`\n  background: orange;\n`\nconst Button = () => (\n  <a class={cx(buttonClass, primaryClass)}>Click!</a>\n)\n```\n\nIt can also compose simple strings.\n\n```tsx\nconst Header = () => <a class={cx('h1', primaryClass)}>Hi</a>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in combination with secure headers middleware in hono?\n\nAssistant: To usage in combination with secure headers middleware in hono, here's what you do:\nIf you want to use the css helpers in combination with the [Secure Headers](https://hono.dev/docs/middleware/builtin/secure-headers) middleware, you can add the [`nonce` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) to the `<Style nonce={c.get('secureHeadersNonce')} />` to avoid Content-Security-Policy caused by the css helpers.\n\n```tsx\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      // Set the pre-defined nonce value to `styleSrc`:\n      styleSrc: [NONCE],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        {/* Set the `nonce` attribute on the css helpers `style` and `script` elements */}\n        <Style nonce={c.get('secureHeadersNonce')} />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I tips in hono?\n\nAssistant: To tips in hono, here's what you do:\nIf you use VS Code, you can use [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components) for Syntax highlighting and IntelliSense for css tagged literals.\n\n![VS Code](https://hono.dev/images/css-ss.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "section_detail", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for css Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { css, cx, keyframes, Style } from 'hono/css'\n```\n\nThis snippet shows you how to import, which is an important aspect of css helper.\n\n**Basic CSS Usage**:\n\n```yaml\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        <Style />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```\n\nThis snippet shows you how to basic css usage, which is an important aspect of css helper.\n\n**Pseudo-class Styling**:\n\n```yaml\nconst buttonClass = css`\n  background-color: #fff;\n  &:hover {\n    background-color: red;\n  }\n`\n```\n\nThis snippet shows you how to pseudo-class styling, which is an important aspect of css helper.\n\n**Extending CSS Classes**:\n\n```yaml\nconst baseClass = css`\n  color: white;\n  background-color: blue;\n`\n\nconst header1Class = css`\n  ${baseClass}\n  font-size: 3rem;\n`\n\nconst header2Class = css`\n  ${baseClass}\n  font-size: 2rem;\n`\n```\n\nThis snippet shows you how to extending css classes, which is an important aspect of css helper.\n\n**Nesting Classes**:\n\n```yaml\nconst headerClass = css`\n  color: white;\n  background-color: blue;\n`\nconst containerClass = css`\n  ${headerClass} {\n    h1 {\n      font-size: 3rem;\n    }\n  }\n`\n```\n\nThis snippet shows you how to nesting classes, which is an important aspect of css helper.\n\n**Global Styles**:\n\n```yaml\nconst globalClass = css`\n  :-hono-global {\n    html {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n  }\n`\n```\n\nThis snippet shows you how to global styles, which is an important aspect of css helper.\n\n**Keyframes Animation**:\n\n```yaml\nconst fadeInAnimation = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`\nconst headerClass = css`\n  animation-name: ${fadeInAnimation};\n  animation-duration: 2s;\n`\n```\n\nThis snippet shows you how to keyframes animation, which is an important aspect of css helper.\n\n**Composing Class Names**:\n\n```yaml\nconst buttonClass = css`\n  border-radius: 10px;\n`\nconst primaryClass = css`\n  background: orange;\n`\nconst Button = () => (\n  <a class={cx(buttonClass, primaryClass)}>Click!</a>\n)\n```\n\nThis snippet shows you how to composing class names, which is an important aspect of css helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "code_examples", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using css Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you use VS Code, you can use [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components) for Syntax highlighting and IntelliSense for css tagged literals.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/css", "title": "css Helper", "description": "The css helper - `hono/css` - is Hono's built-in CSS in JS(X).", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:08", "type": "best_practices", "page_metadata": {"language": "en-US", "title": "css Helper - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "b620fff6-2d5b-4009-9c34-3a7edce65dad", "sourceURL": "https://hono.dev/docs/helpers/css", "url": "https://hono.dev/docs/helpers/css", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what JWT Authentication Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain JWT Authentication Helper in hono.\n\n# JWT Authentication Helper\n\nThis helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.Here's a quick rundown of what this is about:\n\n## Import\n\nTo use this helper, you can import it as follows:\n\n```ts\nimport { decode, sign, verify } from 'hono/jwt'\n```\n\nINFO\n\n[JWT Middleware](https://hono.dev/docs/middleware/builtin/jwt) also import the `jwt` function from the `hono/jwt`.\n\n## `sign()`\n\nThis function generates a JWT token by encoding a payload and signing it using the specified algorithm and secret.\n\n```ts\nsign(\n  payload: unknown,\n  secret: string,\n  alg?: 'HS256';\n): Promise<string>;\n```\n\n### Example\n\n```ts\nimport { sign } from 'hono/jwt'\n\nconst payload = {\n  sub: 'user123',\n  role: 'admin',\n  exp: Math.floor(Date.now() / 1000) + 60 * 5, // Token expires in 5 minutes\n}\nconst secret = 'mySecretKey'\nconst token = await sign(payload, secret)\n```\n\n### Options\n\n#### required payload: `unknown`\n\nThe JWT payload to be signed. You can include other claims like in [Payload Validation](https://hono.dev/docs/helpers/jwt#payload-validation).\n\n#### required secret: `string`\n\nThe secret key used for JWT verification or signing.\n\n#### optional alg: [AlgorithmTypes](https://hono.dev/docs/helpers/jwt#supported-algorithmtypes)\n\nThe algorithm used for JWT signing or verification. The default is HS256.\n\n## `verify()`\n\nThis function checks if a JWT token is genuine and still valid. It ensures the token hasn't been altered and checks validity only if you added [Payload Validation](https://hono.dev/docs/helpers/jwt#payload-validation).\n\n```ts\nverify(\n  token: string,\n  secret: string,\n  alg?: 'HS256';\n): Promise<any>;\n```\n\n### Example\n\n```ts\nimport { verify } from 'hono/jwt'\n\nconst tokenToVerify = 'token'\nconst secretKey = 'mySecretKey'\n\nconst decodedPayload = await verify(tokenToVerify, secretKey)\nconsole.log(decodedPayload)\n```\n\n### Options\n\n#### required token: `string`\n\nThe JWT token to be verified.\n\n#### required secret: `string`\n\nThe secret key used for JWT verification or signing.\n\n#### optional alg: [AlgorithmTypes](https://hono.dev/docs/helpers/jwt#supported-algorithmtypes)\n\nThe algorithm used for JWT signing or verification. The default is HS256.\n\n## `decode()`\n\nThis function decodes a JWT token without performing signature verification. It extracts and returns the header and payload from the token.\n\n```ts\ndecode(token: string): { header: any; payload: any };\n```\n\n### Example\n\n```ts\nimport { decode } from 'hono/jwt'\n\n// Decode the JWT token\nconst tokenToDecode =\n  'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAidXNlcjEyMyIsICJyb2xlIjogImFkbWluIn0.JxUwx6Ua1B0D1B0FtCrj72ok5cm1Pkmr_hL82sd7ELA'\n\nconst { header, payload } = decode(tokenToDecode)\n\nconsole.log('Decoded Header:', header)\nconsole.log('Decoded Payload:', payload)\n```\n\n### Options\n\n#### required token: `string`\n\nThe JWT token to be decoded.\n\n> The `decode` function allows you to inspect the header and payload of a JWT token _**without**_ performing verification. This can be useful for debugging or extracting information from JWT tokens.\n\n## Payload Validation\n\nWhen verifying a JWT token, the following payload validations are performed:\n\n- `exp`: The token is checked to ensure it has not expired.\n- `nbf`: The token is checked to ensure it is not being used before a specified time.\n- `iat`: The token is checked to ensure it is not issued in the future.\n\nPlease ensure that your JWT payload includes these fields, as an object, if you intend to perform these checks during verification.\n\n## Custom Error Types\n\nThe module also defines custom error types to handle JWT-related errors.\n\n- `JwtAlgorithmNotImplemented`: Indicates that the requested JWT algorithm is not implemented.\n- `JwtTokenInvalid`: Indicates that the JWT token is invalid.\n- `JwtTokenNotBefore`: Indicates that the token is being used before its valid date.\n- `JwtTokenExpired`: Indicates that the token has expired.\n- `JwtTokenIssuedAt`: Indicates that the \"iat\" claim in the token is incorrect.\n- `JwtTokenSignatureMismatched`: Indicates a signature mismatch in the token.\n\n## Supported AlgorithmTypes\n\nThe module supports the following JWT cryptographic algorithms:\n\n- `HS256`: HMAC using SHA-256\n- `HS384`: HMAC using SHA-384\n- `HS512`: HMAC using SHA-512\n- `RS256`: RSASSA-PKCS1-v1_5 using SHA-256\n- `RS384`: RSASSA-PKCS1-v1_5 using SHA-384\n- `RS512`: RSASSA-PKCS1-v1_5 using SHA-512\n- `PS256`: RSASSA-PSS using SHA-256 and MGF1 with SHA-256\n- `PS384`: RSASSA-PSS using SHA-386 and MGF1 with SHA-386\n- `PS512`: RSASSA-PSS using SHA-512 and MGF1 with SHA-512\n- `ES256`: ECDSA using P-256 and SHA-256\n- `ES384`: ECDSA using P-384 and SHA-384\n- `ES512`: ECDSA using P-521 and SHA-512\n- `EdDSA`: EdDSA using Ed25519\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "overview", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\nTo use this helper, you can import it as follows:\n\n```ts\nimport { decode, sign, verify } from 'hono/jwt'\n```\n\nINFO\n\n[JWT Middleware](https://hono.dev/docs/middleware/builtin/jwt) also import the `jwt` function from the `hono/jwt`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `sign()` in hono?\n\nAssistant: To `sign()` in hono, here's what you do:\nThis function generates a JWT token by encoding a payload and signing it using the specified algorithm and secret.\n\n```ts\nsign(\n  payload: unknown,\n  secret: string,\n  alg?: 'HS256';\n): Promise<string>;\n```\n\n### Example\n\n```ts\nimport { sign } from 'hono/jwt'\n\nconst payload = {\n  sub: 'user123',\n  role: 'admin',\n  exp: Math.floor(Date.now() / 1000) + 60 * 5, // Token expires in 5 minutes\n}\nconst secret = 'mySecretKey'\nconst token = await sign(payload, secret)\n```\n\n### Options\n\n#### required payload: `unknown`\n\nThe JWT payload to be signed. You can include other claims like in [Payload Validation](https://hono.dev/docs/helpers/jwt#payload-validation).\n\n#### required secret: `string`\n\nThe secret key used for JWT verification or signing.\n\n#### optional alg: [AlgorithmTypes](https://hono.dev/docs/helpers/jwt#supported-algorithmtypes)\n\nThe algorithm used for JWT signing or verification. The default is HS256..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `verify()` in hono?\n\nAssistant: To `verify()` in hono, here's what you do:\nThis function checks if a JWT token is genuine and still valid. It ensures the token hasn't been altered and checks validity only if you added [Payload Validation](https://hono.dev/docs/helpers/jwt#payload-validation).\n\n```ts\nverify(\n  token: string,\n  secret: string,\n  alg?: 'HS256';\n): Promise<any>;\n```\n\n### Example\n\n```ts\nimport { verify } from 'hono/jwt'\n\nconst tokenToVerify = 'token'\nconst secretKey = 'mySecretKey'\n\nconst decodedPayload = await verify(tokenToVerify, secretKey)\nconsole.log(decodedPayload)\n```\n\n### Options\n\n#### required token: `string`\n\nThe JWT token to be verified.\n\n#### required secret: `string`\n\nThe secret key used for JWT verification or signing.\n\n#### optional alg: [AlgorithmTypes](https://hono.dev/docs/helpers/jwt#supported-algorithmtypes)\n\nThe algorithm used for JWT signing or verification. The default is HS256..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `decode()` in hono?\n\nAssistant: To `decode()` in hono, here's what you do:\nThis function decodes a JWT token without performing signature verification. It extracts and returns the header and payload from the token.\n\n```ts\ndecode(token: string): { header: any; payload: any };\n```\n\n### Example\n\n```ts\nimport { decode } from 'hono/jwt'\n\n// Decode the JWT token\nconst tokenToDecode =\n  'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAidXNlcjEyMyIsICJyb2xlIjogImFkbWluIn0.JxUwx6Ua1B0D1B0FtCrj72ok5cm1Pkmr_hL82sd7ELA'\n\nconst { header, payload } = decode(tokenToDecode)\n\nconsole.log('Decoded Header:', header)\nconsole.log('Decoded Payload:', payload)\n```\n\n### Options\n\n#### required token: `string`\n\nThe JWT token to be decoded.\n\n> The `decode` function allows you to inspect the header and payload of a JWT token _**without**_ performing verification. This can be useful for debugging or extracting information from JWT tokens..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I payload validation in hono?\n\nAssistant: To payload validation in hono, here's what you do:\nWhen verifying a JWT token, the following payload validations are performed:\n\n- `exp`: The token is checked to ensure it has not expired.\n- `nbf`: The token is checked to ensure it is not being used before a specified time.\n- `iat`: The token is checked to ensure it is not issued in the future.\n\nPlease ensure that your JWT payload includes these fields, as an object, if you intend to perform these checks during verification..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I custom error types in hono?\n\nAssistant: To custom error types in hono, here's what you do:\nThe module also defines custom error types to handle JWT-related errors.\n\n- `JwtAlgorithmNotImplemented`: Indicates that the requested JWT algorithm is not implemented.\n- `JwtTokenInvalid`: Indicates that the JWT token is invalid.\n- `JwtTokenNotBefore`: Indicates that the token is being used before its valid date.\n- `JwtTokenExpired`: Indicates that the token has expired.\n- `JwtTokenIssuedAt`: Indicates that the \"iat\" claim in the token is incorrect.\n- `JwtTokenSignatureMismatched`: Indicates a signature mismatch in the token..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I supported algorithmtypes in hono?\n\nAssistant: To supported algorithmtypes in hono, here's what you do:\nThe module supports the following JWT cryptographic algorithms:\n\n- `HS256`: HMAC using SHA-256\n- `HS384`: HMAC using SHA-384\n- `HS512`: HMAC using SHA-512\n- `RS256`: RSASSA-PKCS1-v1_5 using SHA-256\n- `RS384`: RSASSA-PKCS1-v1_5 using SHA-384\n- `RS512`: RSASSA-PKCS1-v1_5 using SHA-512\n- `PS256`: RSASSA-PSS using SHA-256 and MGF1 with SHA-256\n- `PS384`: RSASSA-PSS using SHA-386 and MGF1 with SHA-386\n- `PS512`: RSASSA-PSS using SHA-512 and MGF1 with SHA-512\n- `ES256`: ECDSA using P-256 and SHA-256\n- `ES384`: ECDSA using P-384 and SHA-384\n- `ES512`: ECDSA using P-521 and SHA-512\n- `EdDSA`: EdDSA using Ed25519.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for JWT Authentication Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import JWT Functions**:\n\n```yaml\nimport { decode, sign, verify } from 'hono/jwt'\n```\n\nThis snippet shows you how to import jwt functions, which is an important aspect of jwt authentication helper.\n\n**Sign Example**:\n\n```yaml\nimport { sign } from 'hono/jwt'\n\nconst payload = {\n  sub: 'user123',\n  role: 'admin',\n  exp: Math.floor(Date.now() / 1000) + 60 * 5, // Token expires in 5 minutes\n}\nconst secret = 'mySecretKey'\nconst token = await sign(payload, secret)\n```\n\nThis snippet shows you how to sign example, which is an important aspect of jwt authentication helper.\n\n**Verify Example**:\n\n```yaml\nimport { verify } from 'hono/jwt'\n\nconst tokenToVerify = 'token'\nconst secretKey = 'mySecretKey'\n\nconst decodedPayload = await verify(tokenToVerify, secretKey)\nconsole.log(decodedPayload)\n```\n\nThis snippet shows you how to verify example, which is an important aspect of jwt authentication helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "code_examples", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using JWT Authentication Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that your JWT payload includes 'exp', 'nbf', and 'iat' fields for proper validation during verification.\n\nUse strong secret keys for signing JWTs to enhance security.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/jwt", "title": "JWT Authentication Helper", "description": "This helper provides functions for encoding, decoding, signing, and verifying JSON Web Tokens (JWTs). JWTs are commonly used for authentication and authorization purposes in web applications. This helper offers robust JWT functionality with support for various cryptographic algorithms.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:00:34", "type": "best_practices", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "JWT Authentication Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "89fd6aa8-f919-4c87-a051-c254a542f2e9", "sourceURL": "https://hono.dev/docs/helpers/jwt", "url": "https://hono.dev/docs/helpers/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Benchmarks is in hono?\n\nAssistant: Sure, I'd be happy to explain Benchmarks in hono.\n\n# Benchmarks\n\nBenchmarks are only benchmarks, but they are important to us.Here's a quick rundown of what this is about:\n\n## Routers\n\nWe measured the speeds of a bunch of JavaScript routers. For example, `find-my-way` is a very fast router used inside Fastify.\n\n- @medley/router\n- find-my-way\n- koa-tree-router\n- trek-router\n- express (includes handling)\n- koa-router\n\nFirst, we registered the following routing to each of our routers. These are similar to those used in the real world.\n\n```ts\nexport const routes: Route[] = [\n  {\n    method: 'GET',\n    path: '/user'\n  },\n  {\n    method: 'GET',\n    path: '/user/comments'\n  },\n  {\n    method: 'GET',\n    path: '/user/avatar'\n  },\n  {\n    method: 'GET',\n    path: '/user/lookup/username/:username'\n  },\n  {\n    method: 'GET',\n    path: '/user/lookup/email/:address'\n  },\n  {\n    method: 'GET',\n    path: '/event/:id'\n  },\n  {\n    method: 'GET',\n    path: '/event/:id/comments'\n  },\n  {\n    method: 'POST',\n    path: '/event/:id/comment'\n  },\n  {\n    method: 'GET',\n    path: '/map/:location/events'\n  },\n  {\n    method: 'GET',\n    path: '/status'\n  },\n  {\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there'\n  },\n  {\n    method: 'GET',\n    path: '/static/*'\n  },\n]\n```\n\nThen we sent the Request to the endpoints like below.\n\n```ts\nconst routes: (Route & { name: string })[] = [\n  {\n    name: 'short static',\n    method: 'GET',\n    path: '/user',\n  },\n  {\n    name: 'static with same radix',\n    method: 'GET',\n    path: '/user/comments',\n  },\n  {\n    name: 'dynamic route',\n    method: 'GET',\n    path: '/user/lookup/username/hey',\n  },\n  {\n    name: 'mixed static dynamic',\n    method: 'GET',\n    path: '/event/abcd1234/comments',\n  },\n  {\n    name: 'post',\n    method: 'POST',\n    path: '/event/abcd1234/comment',\n  },\n  {\n    name: 'long static',\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there',\n  },\n  {\n    name: 'wildcard',\n    method: 'GET',\n    path: '/static/index.html',\n  },\n]\n```\n\nLet's see the results.\n\n## On Node.js\n\nThe following screenshots show the results on Node.js.\n\n![bench](https://hono.dev/images/bench01.png)\n\n![bench](https://hono.dev/images/bench02.png)\n\n![bench](https://hono.dev/images/bench03.png)\n\n![bench](https://hono.dev/images/bench04.png)\n\n![bench](https://hono.dev/images/bench05.png)\n\n![bench](https://hono.dev/images/bench06.png)\n\n![bench](https://hono.dev/images/bench07.png)\n\n![bench](https://hono.dev/images/bench08.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/benchmarks", "title": "Benchmarks", "description": "Benchmarks are only benchmarks, but they are important to us.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:00:59", "type": "overview", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Benchmarks - Hono", "scrapeId": "932ffb4c-dd22-4aed-9055-aeac1ca99cc4", "sourceURL": "https://hono.dev/docs/concepts/benchmarks", "url": "https://hono.dev/docs/concepts/benchmarks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I routers in hono?\n\nAssistant: To routers in hono, here's what you do:\nWe measured the speeds of a bunch of JavaScript routers. For example, `find-my-way` is a very fast router used inside Fastify.\n\n- @medley/router\n- find-my-way\n- koa-tree-router\n- trek-router\n- express (includes handling)\n- koa-router\n\nFirst, we registered the following routing to each of our routers. These are similar to those used in the real world.\n\n```ts\nexport const routes: Route[] = [\n  {\n    method: 'GET',\n    path: '/user'\n  },\n  {\n    method: 'GET',\n    path: '/user/comments'\n  },\n  {\n    method: 'GET',\n    path: '/user/avatar'\n  },\n  {\n    method: 'GET',\n    path: '/user/lookup/username/:username'\n  },\n  {\n    method: 'GET',\n    path: '/user/lookup/email/:address'\n  },\n  {\n    method: 'GET',\n    path: '/event/:id'\n  },\n  {\n    method: 'GET',\n    path: '/event/:id/comments'\n  },\n  {\n    method: 'POST',\n    path: '/event/:id/comment'\n  },\n  {\n    method: 'GET',\n    path: '/map/:location/events'\n  },\n  {\n    method: 'GET',\n    path: '/status'\n  },\n  {\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there'\n  },\n  {\n    method: 'GET',\n    path: '/static/*'\n  },\n]\n```\n\nThen we sent the Request to the endpoints like below.\n\n```ts\nconst routes: (Route & { name: string })[] = [\n  {\n    name: 'short static',\n    method: 'GET',\n    path: '/user',\n  },\n  {\n    name: 'static with same radix',\n    method: 'GET',\n    path: '/user/comments',\n  },\n  {\n    name: 'dynamic route',\n    method: 'GET',\n    path: '/user/lookup/username/hey',\n  },\n  {\n    name: 'mixed static dynamic',\n    method: 'GET',\n    path: '/event/abcd1234/comments',\n  },\n  {\n    name: 'post',\n    method: 'POST',\n    path: '/event/abcd1234/comment',\n  },\n  {\n    name: 'long static',\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there',\n  },\n  {\n    name: 'wildcard',\n    method: 'GET',\n    path: '/static/index.html',\n  },\n]\n```\n\nLet's see the results..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/benchmarks", "title": "Benchmarks", "description": "Benchmarks are only benchmarks, but they are important to us.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:00:59", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Benchmarks - Hono", "scrapeId": "932ffb4c-dd22-4aed-9055-aeac1ca99cc4", "sourceURL": "https://hono.dev/docs/concepts/benchmarks", "url": "https://hono.dev/docs/concepts/benchmarks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I on node.js in hono?\n\nAssistant: To on node.js in hono, here's what you do:\nThe following screenshots show the results on Node.js.\n\n![bench](https://hono.dev/images/bench01.png)\n\n![bench](https://hono.dev/images/bench02.png)\n\n![bench](https://hono.dev/images/bench03.png)\n\n![bench](https://hono.dev/images/bench04.png)\n\n![bench](https://hono.dev/images/bench05.png)\n\n![bench](https://hono.dev/images/bench06.png)\n\n![bench](https://hono.dev/images/bench07.png)\n\n![bench](https://hono.dev/images/bench08.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/benchmarks", "title": "Benchmarks", "description": "Benchmarks are only benchmarks, but they are important to us.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:00:59", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Benchmarks - Hono", "scrapeId": "932ffb4c-dd22-4aed-9055-aeac1ca99cc4", "sourceURL": "https://hono.dev/docs/concepts/benchmarks", "url": "https://hono.dev/docs/concepts/benchmarks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Benchmarks in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Router Registration**:\n\n```yaml\nexport const routes: Route[] = [\n  {\n    method: 'GET',\n    path: '/user'\n  },\n  {\n    method: 'GET',\n    path: '/user/comments'\n  },\n  {\n    method: 'GET',\n    path: '/user/avatar'\n  },\n  {\n    method: 'GET',\n    path: '/user/lookup/username/:username'\n  },\n  {\n    method: 'GET',\n    path: '/user/lookup/email/:address'\n  },\n  {\n    method: 'GET',\n    path: '/event/:id'\n  },\n  {\n    method: 'GET',\n    path: '/event/:id/comments'\n  },\n  {\n    method: 'POST',\n    path: '/event/:id/comment'\n  },\n  {\n    method: 'GET',\n    path: '/map/:location/events'\n  },\n  {\n    method: 'GET',\n    path: '/status'\n  },\n  {\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there'\n  },\n  {\n    method: 'GET',\n    path: '/static/*'\n  },\n]\n```\n\nThis snippet shows you how to router registration, which is an important aspect of benchmarks.\n\n**Request Sending**:\n\n```yaml\nconst routes: (Route & { name: string })[] = [\n  {\n    name: 'short static',\n    method: 'GET',\n    path: '/user',\n  },\n  {\n    name: 'static with same radix',\n    method: 'GET',\n    path: '/user/comments',\n  },\n  {\n    name: 'dynamic route',\n    method: 'GET',\n    path: '/user/lookup/username/hey',\n  },\n  {\n    name: 'mixed static dynamic',\n    method: 'GET',\n    path: '/event/abcd1234/comments',\n  },\n  {\n    name: 'post',\n    method: 'POST',\n    path: '/event/abcd1234/comment',\n  },\n  {\n    name: 'long static',\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there',\n  },\n  {\n    name: 'wildcard',\n    method: 'GET',\n    path: '/static/index.html',\n  },\n]\n```\n\nThis snippet shows you how to request sending, which is an important aspect of benchmarks.\n\n", "metadata": {"source_url": "https://hono.dev/docs/concepts/benchmarks", "title": "Benchmarks", "description": "Benchmarks are only benchmarks, but they are important to us.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:00:59", "type": "code_examples", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Benchmarks - Hono", "scrapeId": "932ffb4c-dd22-4aed-9055-aeac1ca99cc4", "sourceURL": "https://hono.dev/docs/concepts/benchmarks", "url": "https://hono.dev/docs/concepts/benchmarks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Benchmarks in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHono is the fastest compared to other routers for Cloudflare Workers.\n\nHono is the fastest compared to other frameworks for Deno.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/concepts/benchmarks", "title": "Benchmarks", "description": "Benchmarks are only benchmarks, but they are important to us.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:00:59", "type": "best_practices", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Benchmarks - Hono", "scrapeId": "932ffb4c-dd22-4aed-9055-aeac1ca99cc4", "sourceURL": "https://hono.dev/docs/concepts/benchmarks", "url": "https://hono.dev/docs/concepts/benchmarks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Routing is in hono?\n\nAssistant: Sure, I'd be happy to explain Routing in hono.\n\n# Routing\n\nRouting of Hono is flexible and intuitive. Let's take a look.Here's a quick rundown of what this is about:\n\n## Basic\n\napp.get('/', (c) => c.text('GET /'))\n\napp.post('/', (c) => c.text('POST /'))\n\napp.put('/', (c) => c.text('PUT /'))\n\napp.delete('/', (c) => c.text('DELETE /'))\n\n// Wildcard\n\napp.get('/wild/*/card', (c) => {\n  return c.text('GET /wild/*/card')\n})\n\n// Any HTTP methods\n\napp.all('/hello', (c) => c.text('Any Method /hello'))\n\n// Custom HTTP method\n\napp.on('PURGE', '/cache', (c) => c.text('PURGE Method /cache'))\n\n// Multiple Method\n\napp.on(['PUT', 'DELETE'], '/post', (c) =>\n  c.text('PUT or DELETE /post')\n)\n\n// Multiple Paths\n\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) =>\n  c.text('Hello')\n)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api/routing", "title": "Routing", "description": "Routing of Hono is flexible and intuitive. Let's take a look.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:11:35", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Routing - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "94f518a4-9820-4211-8c61-5e038b66d639", "sourceURL": "https://hono.dev/docs/api/routing", "url": "https://hono.dev/docs/api/routing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I basic in hono?\n\nAssistant: To basic in hono, here's what you do:\napp.get('/', (c) => c.text('GET /'))\n\napp.post('/', (c) => c.text('POST /'))\n\napp.put('/', (c) => c.text('PUT /'))\n\napp.delete('/', (c) => c.text('DELETE /'))\n\n// Wildcard\n\napp.get('/wild/*/card', (c) => {\n  return c.text('GET /wild/*/card')\n})\n\n// Any HTTP methods\n\napp.all('/hello', (c) => c.text('Any Method /hello'))\n\n// Custom HTTP method\n\napp.on('PURGE', '/cache', (c) => c.text('PURGE Method /cache'))\n\n// Multiple Method\n\napp.on(['PUT', 'DELETE'], '/post', (c) =>\n  c.text('PUT or DELETE /post')\n)\n\n// Multiple Paths\n\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) =>\n  c.text('Hello')\n).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/routing", "title": "Routing", "description": "Routing of Hono is flexible and intuitive. Let's take a look.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:11:35", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Routing - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "94f518a4-9820-4211-8c61-5e038b66d639", "sourceURL": "https://hono.dev/docs/api/routing", "url": "https://hono.dev/docs/api/routing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Routing in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Routing Example**:\n\n```yaml\napp.get('/', (c) => c.text('GET /'))\napp.post('/', (c) => c.text('POST /'))\napp.put('/', (c) => c.text('PUT /'))\napp.delete('/', (c) => c.text('DELETE /'))\n\n// Wildcard\napp.get('/wild/*/card', (c) => {\n  return c.text('GET /wild/*/card')\n})\n\n// Any HTTP methods\napp.all('/hello', (c) => c.text('Any Method /hello'))\n\n// Custom HTTP method\napp.on('PURGE', '/cache', (c) => c.text('PURGE Method /cache'))\n\n// Multiple Method\napp.on(['PUT', 'DELETE'], '/post', (c) =>\n  c.text('PUT or DELETE /post')\n)\n\n// Multiple Paths\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) =>\n  c.text('Hello')\n)\n```\n\nThis snippet shows you how to basic routing example, which is an important aspect of routing.\n\n**Path Parameter Example**:\n\n```yaml\napp.get('/user/:name', async (c) => {\n  const name = c.req.param('name')\n  // ...\n})\n\napp.get('/posts/:id/comment/:comment_id', async (c) => {\n  const { id, comment_id } = c.req.param()\n  // ...\n})\n```\n\nThis snippet shows you how to path parameter example, which is an important aspect of routing.\n\n**Optional Parameter Example**:\n\n```yaml\napp.get('/api/animal/:type?', (c) =>\n  c.text('Animal!'))\n```\n\nThis snippet shows you how to optional parameter example, which is an important aspect of routing.\n\n**Regexp Example**:\n\n```yaml\napp.get('/post/:date{[0-9]+}/:title{[a-z]+}', async (c) => {\n  const { date, title } = c.req.param()\n  // ...\n})\n```\n\nThis snippet shows you how to regexp example, which is an important aspect of routing.\n\n**Including Slashes Example**:\n\n```yaml\napp.get('/posts/:filename{.+\\.png}', async (c) => {\n  //...\n})\n```\n\nThis snippet shows you how to including slashes example, which is an important aspect of routing.\n\n**Chained Route Example**:\n\n```yaml\napp\n  .get('/endpoint', (c) => {\n    return c.text('GET /endpoint')\n  })\n  .post((c) => {\n    return c.text('POST /endpoint')\n  })\n  .delete((c) => {\n    return c.text('DELETE /endpoint')\n  })\n```\n\nThis snippet shows you how to chained route example, which is an important aspect of routing.\n\n**Grouping Example**:\n\n```yaml\nconst book = new Hono()\n\nbook.get('/', (c) =>\n  c.text('List Books')) // GET /book\n\nbook.get('/:id', (c) => {\n  const id = c.req.param('id')\n  return c.text('Get Book: ' + id)\n})\n\nbook.post('/', (c) =>\n  c.text('Create Book')) // POST /book\n\nconst app = new Hono()\n\napp.route('/book', book)\n```\n\nThis snippet shows you how to grouping example, which is an important aspect of routing.\n\n", "metadata": {"source_url": "https://hono.dev/docs/api/routing", "title": "Routing", "description": "Routing of Hono is flexible and intuitive. Let's take a look.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:11:35", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Routing - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "94f518a4-9820-4211-8c61-5e038b66d639", "sourceURL": "https://hono.dev/docs/api/routing", "url": "https://hono.dev/docs/api/routing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Routing in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHandlers or middleware will be executed in registration order.\n\nIf you have middleware that you want to execute, write the code above the handler.\n\nIf you want to have a fallback handler, write the code below the other handler.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/api/routing", "title": "Routing", "description": "Routing of Hono is flexible and intuitive. Let's take a look.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:11:35", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Routing - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "94f518a4-9820-4211-8c61-5e038b66d639", "sourceURL": "https://hono.dev/docs/api/routing", "url": "https://hono.dev/docs/api/routing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Examples is in hono?\n\nAssistant: Sure, I'd be happy to explain Examples in hono.\n\n# Examples\n\nSee the Examples section for various use cases and implementations.Here's a quick rundown of what this is about:\n\n## Examples\n\nSee the Examples section for various use cases and implementations.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/examples", "title": "Examples", "description": "See the Examples section for various use cases and implementations.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:12:16", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Examples - Hono", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "716b81f2-c1df-4912-aafe-fc929f5b5b05", "sourceURL": "https://hono.dev/docs/guides/examples", "url": "https://hono.dev/docs/guides/examples", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I examples in hono?\n\nAssistant: To examples in hono, here's what you do:\nSee the Examples section for various use cases and implementations..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/examples", "title": "Examples", "description": "See the Examples section for various use cases and implementations.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:12:16", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Examples - Hono", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "716b81f2-c1df-4912-aafe-fc929f5b5b05", "sourceURL": "https://hono.dev/docs/guides/examples", "url": "https://hono.dev/docs/guides/examples", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Motivation is in hono?\n\nAssistant: Sure, I'd be happy to explain Motivation in hono.\n\n# Motivation\n\nThis page discusses the philosophy and motivation behind the Hono framework.Here's a quick rundown of what this is about:\n\n## Philosophy\n\nIn this section, we talk about the concept, or philosophy, of Hono.\n\n## Motivation\n\nAt first, I just wanted to create a web application on Cloudflare Workers. But, there was no good framework that works on Cloudflare Workers. So, I started building Hono.\n\nI thought it would be a good opportunity to learn how to build a router using Trie trees. Then a friend showed up with ultra crazy fast router called \"RegExpRouter\". And I also have a friend who created the Basic authentication middleware.\n\nUsing only Web Standard APIs, we could make it work on Deno and Bun. When people asked \"is there Express for Bun?\", we could answer, \"no, but there is Hono\". (Although Express works on Bun now.)\n\nWe also have friends who make GraphQL servers, Firebase authentication, and Sentry middleware. And, we also have a Node.js adapter. An ecosystem has sprung up.\n\nIn other words, Hono is damn fast, makes a lot of things possible, and works anywhere. We might imagine that Hono could become the **Standard for Web Standards**.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/motivation", "title": "Motivation", "description": "This page discusses the philosophy and motivation behind the Hono framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:12:47", "type": "overview", "page_metadata": {"title": "Philosophy - Hono", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "twitter:domain": "hono.dev", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "bdda62cb-0a7c-42c3-befa-a57c0fbb4743", "sourceURL": "https://hono.dev/docs/concepts/motivation", "url": "https://hono.dev/docs/concepts/motivation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I philosophy in hono?\n\nAssistant: To philosophy in hono, here's what you do:\nIn this section, we talk about the concept, or philosophy, of Hono..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/motivation", "title": "Motivation", "description": "This page discusses the philosophy and motivation behind the Hono framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:12:47", "type": "section_detail", "page_metadata": {"title": "Philosophy - Hono", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "twitter:domain": "hono.dev", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "bdda62cb-0a7c-42c3-befa-a57c0fbb4743", "sourceURL": "https://hono.dev/docs/concepts/motivation", "url": "https://hono.dev/docs/concepts/motivation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I motivation in hono?\n\nAssistant: To motivation in hono, here's what you do:\nAt first, I just wanted to create a web application on Cloudflare Workers. But, there was no good framework that works on Cloudflare Workers. So, I started building Hono.\n\nI thought it would be a good opportunity to learn how to build a router using Trie trees. Then a friend showed up with ultra crazy fast router called \"RegExpRouter\". And I also have a friend who created the Basic authentication middleware.\n\nUsing only Web Standard APIs, we could make it work on Deno and Bun. When people asked \"is there Express for Bun?\", we could answer, \"no, but there is Hono\". (Although Express works on Bun now.)\n\nWe also have friends who make GraphQL servers, Firebase authentication, and Sentry middleware. And, we also have a Node.js adapter. An ecosystem has sprung up.\n\nIn other words, Hono is damn fast, makes a lot of things possible, and works anywhere. We might imagine that Hono could become the **Standard for Web Standards**..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/motivation", "title": "Motivation", "description": "This page discusses the philosophy and motivation behind the Hono framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:12:47", "type": "section_detail", "page_metadata": {"title": "Philosophy - Hono", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "twitter:domain": "hono.dev", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "bdda62cb-0a7c-42c3-befa-a57c0fbb4743", "sourceURL": "https://hono.dev/docs/concepts/motivation", "url": "https://hono.dev/docs/concepts/motivation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Dev Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Dev Helper in hono.\n\n# Dev Helper\n\nDev Helper provides useful methods you can use in development.Here's a quick rundown of what this is about:\n\n## getRouterName()\n\nYou can get the name of the currently used router with `getRouterName()`. \n\n```ts\nconst app = new Hono()\n\n// ...\n\nconsole.log(getRouterName(app))\n```\n\n## showRoutes()\n\n`showRoutes()` function displays the registered routes in your console.\n\nConsider an application like the following:\n\n```ts\nconst app = new Hono().basePath('/v1')\n\napp.get('/posts', (c) => {\n  // ...\n})\n\napp.get('/posts/:id', (c) => {\n  // ...\n})\n\napp.post('/posts', (c) => {\n  // ...\n})\n\nshowRoutes(app, {\n  verbose: true,\n})\n```\n\nWhen this application starts running, the routes will be shown in your console as follows:\n\n```txt\nGET   /v1/posts\nGET   /v1/posts/:id\nPOST  /v1/posts\n```\n\n## Options\n\n### optional verbose: `boolean`\nWhen set to `true`, it displays verbose information.\n\n### optional colorize: `boolean`\nWhen set to `false`, the output will not be colored.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/dev", "title": "Dev Helper", "description": "Dev Helper provides useful methods you can use in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:13:36", "type": "overview", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Dev Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "6e09e512-8623-46db-bdc2-5c0dadd64c9b", "sourceURL": "https://hono.dev/docs/helpers/dev", "url": "https://hono.dev/docs/helpers/dev", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I getroutername() in hono?\n\nAssistant: To getroutername() in hono, here's what you do:\nYou can get the name of the currently used router with `getRouterName()`. \n\n```ts\nconst app = new Hono()\n\n// ...\n\nconsole.log(getRouterName(app))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/dev", "title": "Dev Helper", "description": "Dev Helper provides useful methods you can use in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:13:36", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Dev Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "6e09e512-8623-46db-bdc2-5c0dadd64c9b", "sourceURL": "https://hono.dev/docs/helpers/dev", "url": "https://hono.dev/docs/helpers/dev", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I showroutes() in hono?\n\nAssistant: To showroutes() in hono, here's what you do:\n`showRoutes()` function displays the registered routes in your console.\n\nConsider an application like the following:\n\n```ts\nconst app = new Hono().basePath('/v1')\n\napp.get('/posts', (c) => {\n  // ...\n})\n\napp.get('/posts/:id', (c) => {\n  // ...\n})\n\napp.post('/posts', (c) => {\n  // ...\n})\n\nshowRoutes(app, {\n  verbose: true,\n})\n```\n\nWhen this application starts running, the routes will be shown in your console as follows:\n\n```txt\nGET   /v1/posts\nGET   /v1/posts/:id\nPOST  /v1/posts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/dev", "title": "Dev Helper", "description": "Dev Helper provides useful methods you can use in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:13:36", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Dev Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "6e09e512-8623-46db-bdc2-5c0dadd64c9b", "sourceURL": "https://hono.dev/docs/helpers/dev", "url": "https://hono.dev/docs/helpers/dev", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional verbose: `boolean`\nWhen set to `true`, it displays verbose information.\n\n### optional colorize: `boolean`\nWhen set to `false`, the output will not be colored..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/dev", "title": "Dev Helper", "description": "Dev Helper provides useful methods you can use in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:13:36", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Dev Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "6e09e512-8623-46db-bdc2-5c0dadd64c9b", "sourceURL": "https://hono.dev/docs/helpers/dev", "url": "https://hono.dev/docs/helpers/dev", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Dev Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Hono and Dev Methods**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { getRouterName, showRoutes } from 'hono/dev'\n```\n\nThis snippet shows you how to importing hono and dev methods, which is an important aspect of dev helper.\n\n**Using getRouterName()**:\n\n```yaml\nconst app = new Hono()\n\n// ...\n\nconsole.log(getRouterName(app))\n```\n\nThis snippet shows you how to using getroutername(), which is an important aspect of dev helper.\n\n**Using showRoutes()**:\n\n```yaml\nconst app = new Hono().basePath('/v1')\n\napp.get('/posts', (c) => {\n  // ...\n})\n\napp.get('/posts/:id', (c) => {\n  // ...\n})\n\napp.post('/posts', (c) => {\n  // ...\n})\n\nshowRoutes(app, {\n  verbose: true,\n})\n```\n\nThis snippet shows you how to using showroutes(), which is an important aspect of dev helper.\n\n**Console Output of showRoutes()**:\n\n```yaml\nGET   /v1/posts\nGET   /v1/posts/:id\nPOST  /v1/posts\n```\n\nThis snippet shows you how to console output of showroutes(), which is an important aspect of dev helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/dev", "title": "Dev Helper", "description": "Dev Helper provides useful methods you can use in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:13:36", "type": "code_examples", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Dev Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "6e09e512-8623-46db-bdc2-5c0dadd64c9b", "sourceURL": "https://hono.dev/docs/helpers/dev", "url": "https://hono.dev/docs/helpers/dev", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Dev Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `getRouterName()` to easily identify the router in use during development.\n\nUtilize `showRoutes()` to visualize all registered routes, which can aid in debugging and development.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/dev", "title": "Dev Helper", "description": "Dev Helper provides useful methods you can use in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:13:36", "type": "best_practices", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Dev Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "6e09e512-8623-46db-bdc2-5c0dadd64c9b", "sourceURL": "https://hono.dev/docs/helpers/dev", "url": "https://hono.dev/docs/helpers/dev", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Miscellaneous is in hono?\n\nAssistant: Sure, I'd be happy to explain Miscellaneous in hono.\n\n# Miscellaneous\n\nThis page covers various ways to contribute to the Hono project, sponsorship options, and other resources related to Hono.Here's a quick rundown of what this is about:\n\n## Contributing\n\nContributions Welcome! You can contribute in the following ways.\n\n- Create an Issue - Propose a new feature. Report a bug.\n- Pull Request - Fix a bug and typo. Refactor the code.\n- Create third-party middleware - Instruct below.\n- Share - Share your thoughts on the Blog, X(Twitter), and others.\n- Make your application - Please try to use Hono.\n\nFor more details, see Contribution Guide.\n\n## Sponsoring\n\nYou can sponsor Hono authors via the GitHub sponsor program.\n\n- Sponsor @yusukebe on GitHub Sponsors\n- Sponsor @usualoma on GitHub Sponsors\n\n## Other Resources\n\n- GitHub repository: https://github.com/honojs\n- npm registry: https://www.npmjs.com/package/hono\n- JSR: https://jsr.io/@hono/hono\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/others", "title": "Miscellaneous", "description": "This page covers various ways to contribute to the Hono project, sponsorship options, and other resources related to Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:14:44", "type": "overview", "page_metadata": {"og:type": "website", "title": "Miscellaneous - Hono", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "3923902d-ba58-44b6-8ad8-52b4646445c9", "sourceURL": "https://hono.dev/docs/guides/others", "url": "https://hono.dev/docs/guides/others", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I contributing in hono?\n\nAssistant: To contributing in hono, here's what you do:\nContributions Welcome! You can contribute in the following ways.\n\n- Create an Issue - Propose a new feature. Report a bug.\n- Pull Request - Fix a bug and typo. Refactor the code.\n- Create third-party middleware - Instruct below.\n- Share - Share your thoughts on the Blog, X(Twitter), and others.\n- Make your application - Please try to use Hono.\n\nFor more details, see Contribution Guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/others", "title": "Miscellaneous", "description": "This page covers various ways to contribute to the Hono project, sponsorship options, and other resources related to Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:14:44", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Miscellaneous - Hono", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "3923902d-ba58-44b6-8ad8-52b4646445c9", "sourceURL": "https://hono.dev/docs/guides/others", "url": "https://hono.dev/docs/guides/others", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I sponsoring in hono?\n\nAssistant: To sponsoring in hono, here's what you do:\nYou can sponsor Hono authors via the GitHub sponsor program.\n\n- Sponsor @yusukebe on GitHub Sponsors\n- Sponsor @usualoma on GitHub Sponsors.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/others", "title": "Miscellaneous", "description": "This page covers various ways to contribute to the Hono project, sponsorship options, and other resources related to Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:14:44", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Miscellaneous - Hono", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "3923902d-ba58-44b6-8ad8-52b4646445c9", "sourceURL": "https://hono.dev/docs/guides/others", "url": "https://hono.dev/docs/guides/others", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I other resources in hono?\n\nAssistant: To other resources in hono, here's what you do:\n- GitHub repository: https://github.com/honojs\n- npm registry: https://www.npmjs.com/package/hono\n- JSR: https://jsr.io/@hono/hono.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/others", "title": "Miscellaneous", "description": "This page covers various ways to contribute to the Hono project, sponsorship options, and other resources related to Hono.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:14:44", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Miscellaneous - Hono", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "language": "en-US", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "3923902d-ba58-44b6-8ad8-52b4646445c9", "sourceURL": "https://hono.dev/docs/guides/others", "url": "https://hono.dev/docs/guides/others", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Proxy Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Proxy Helper in hono.\n\n# Proxy Helper\n\nProxy Helper provides useful functions when using Hono application as a (reverse) proxy.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { proxy } from 'hono/proxy'\n```\n\n## `proxy()`\n\n`proxy()` is a `fetch()` API wrapper for proxy. The parameters and return value are the same as for `fetch()` (except for the proxy-specific options).\n\nThe `Accept-Encoding` header is replaced with an encoding that the current runtime can handle. Unnecessary response headers are deleted, and a `Response` object is returned that you can return as a response from the handler.\n\n## Examples\n\nSimple usage:\n\n```ts\napp.get('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`)\n})\n```\n\nComplicated usage:\n\n```ts\napp.get('/proxy/:path', async (c) => {\n  const res = await proxy(\n    `http://${originServer}/${c.req.param('path')}`,\n    {\n      headers: {\n        ...c.req.header(), // optional, specify only when forwarding all the request data (including credentials) is necessary.\n        'X-Forwarded-For': '127.0.0.1',\n        'X-Forwarded-Host': c.req.header('host'),\n        Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n      },\n    }\n  )\n  res.headers.delete('Set-Cookie')\n  return res\n})\n```\n\nOr you can pass the `c.req` as a parameter.\n\n```ts\napp.all('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`, {\n    ...c.req, // optional, specify only when forwarding all the request data (including credentials) is necessary.\n    headers: {\n      ...c.req.header(),\n      'X-Forwarded-For': '127.0.0.1',\n      'X-Forwarded-Host': c.req.header('host'),\n      Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n    },\n  })\n})\n```\n\n## `ProxyFetch`\n\nThe type of `proxy()` is defined as `ProxyFetch` and is as follows\n\n```ts\ninterface ProxyRequestInit extends Omit<RequestInit, 'headers'> {\n  raw?: Request\n  headers?:\n    | HeadersInit\n    | [string, string][]\n    | Record<RequestHeader, string | undefined>\n    | Record<string, string | undefined>\n}\n\ninterface ProxyFetch {\n  (\n    input: string | URL | Request,\n    init?: ProxyRequestInit\n  ): Promise<Response>\n}\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/proxy", "title": "Proxy Helper", "description": "Proxy Helper provides useful functions when using Hono application as a (reverse) proxy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:15:03", "type": "overview", "page_metadata": {"title": "Proxy Helper - Hono", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "3037be56-9b4e-4466-8d0e-956169eb5c52", "sourceURL": "https://hono.dev/docs/helpers/proxy", "url": "https://hono.dev/docs/helpers/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { proxy } from 'hono/proxy'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/proxy", "title": "Proxy Helper", "description": "Proxy Helper provides useful functions when using Hono application as a (reverse) proxy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:15:03", "type": "section_detail", "page_metadata": {"title": "Proxy Helper - Hono", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "3037be56-9b4e-4466-8d0e-956169eb5c52", "sourceURL": "https://hono.dev/docs/helpers/proxy", "url": "https://hono.dev/docs/helpers/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `proxy()` in hono?\n\nAssistant: To `proxy()` in hono, here's what you do:\n`proxy()` is a `fetch()` API wrapper for proxy. The parameters and return value are the same as for `fetch()` (except for the proxy-specific options).\n\nThe `Accept-Encoding` header is replaced with an encoding that the current runtime can handle. Unnecessary response headers are deleted, and a `Response` object is returned that you can return as a response from the handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/proxy", "title": "Proxy Helper", "description": "Proxy Helper provides useful functions when using Hono application as a (reverse) proxy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:15:03", "type": "section_detail", "page_metadata": {"title": "Proxy Helper - Hono", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "3037be56-9b4e-4466-8d0e-956169eb5c52", "sourceURL": "https://hono.dev/docs/helpers/proxy", "url": "https://hono.dev/docs/helpers/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I examples in hono?\n\nAssistant: To examples in hono, here's what you do:\nSimple usage:\n\n```ts\napp.get('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`)\n})\n```\n\nComplicated usage:\n\n```ts\napp.get('/proxy/:path', async (c) => {\n  const res = await proxy(\n    `http://${originServer}/${c.req.param('path')}`,\n    {\n      headers: {\n        ...c.req.header(), // optional, specify only when forwarding all the request data (including credentials) is necessary.\n        'X-Forwarded-For': '127.0.0.1',\n        'X-Forwarded-Host': c.req.header('host'),\n        Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n      },\n    }\n  )\n  res.headers.delete('Set-Cookie')\n  return res\n})\n```\n\nOr you can pass the `c.req` as a parameter.\n\n```ts\napp.all('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`, {\n    ...c.req, // optional, specify only when forwarding all the request data (including credentials) is necessary.\n    headers: {\n      ...c.req.header(),\n      'X-Forwarded-For': '127.0.0.1',\n      'X-Forwarded-Host': c.req.header('host'),\n      Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n    },\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/proxy", "title": "Proxy Helper", "description": "Proxy Helper provides useful functions when using Hono application as a (reverse) proxy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:15:03", "type": "section_detail", "page_metadata": {"title": "Proxy Helper - Hono", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "3037be56-9b4e-4466-8d0e-956169eb5c52", "sourceURL": "https://hono.dev/docs/helpers/proxy", "url": "https://hono.dev/docs/helpers/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `proxyfetch` in hono?\n\nAssistant: To `proxyfetch` in hono, here's what you do:\nThe type of `proxy()` is defined as `ProxyFetch` and is as follows\n\n```ts\ninterface ProxyRequestInit extends Omit<RequestInit, 'headers'> {\n  raw?: Request\n  headers?:\n    | HeadersInit\n    | [string, string][]\n    | Record<RequestHeader, string | undefined>\n    | Record<string, string | undefined>\n}\n\ninterface ProxyFetch {\n  (\n    input: string | URL | Request,\n    init?: ProxyRequestInit\n  ): Promise<Response>\n}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/proxy", "title": "Proxy Helper", "description": "Proxy Helper provides useful functions when using Hono application as a (reverse) proxy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:15:03", "type": "section_detail", "page_metadata": {"title": "Proxy Helper - Hono", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "3037be56-9b4e-4466-8d0e-956169eb5c52", "sourceURL": "https://hono.dev/docs/helpers/proxy", "url": "https://hono.dev/docs/helpers/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Proxy Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { proxy } from 'hono/proxy'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of proxy helper.\n\n**Simple Proxy Usage**:\n\n```yaml\n```ts\napp.get('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`)\n})\n```\n```\n\nThis snippet shows you how to simple proxy usage, which is an important aspect of proxy helper.\n\n**Complicated Proxy Usage**:\n\n```yaml\n```ts\napp.get('/proxy/:path', async (c) => {\n  const res = await proxy(\n    `http://${originServer}/${c.req.param('path')}`,\n    {\n      headers: {\n        ...c.req.header(), // optional, specify only when forwarding all the request data (including credentials) is necessary.\n        'X-Forwarded-For': '127.0.0.1',\n        'X-Forwarded-Host': c.req.header('host'),\n        Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n      },\n    }\n  )\n  res.headers.delete('Set-Cookie')\n  return res\n})\n```\n```\n\nThis snippet shows you how to complicated proxy usage, which is an important aspect of proxy helper.\n\n**Proxy with Request Parameter**:\n\n```yaml\n```ts\napp.all('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`, {\n    ...c.req, // optional, specify only when forwarding all the request data (including credentials) is necessary.\n    headers: {\n      ...c.req.header(),\n      'X-Forwarded-For': '127.0.0.1',\n      'X-Forwarded-Host': c.req.header('host'),\n      Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n    },\n  })\n})\n```\n```\n\nThis snippet shows you how to proxy with request parameter, which is an important aspect of proxy helper.\n\n**ProxyFetch Interface**:\n\n```yaml\n```ts\ninterface ProxyRequestInit extends Omit<RequestInit, 'headers'> {\n  raw?: Request\n  headers?:\n    | HeadersInit\n    | [string, string][]\n    | Record<RequestHeader, string | undefined>\n    | Record<string, string | undefined>\n}\n\ninterface ProxyFetch {\n  (\n    input: string | URL | Request,\n    init?: ProxyRequestInit\n  ): Promise<Response>\n}\n```\n```\n\nThis snippet shows you how to proxyfetch interface, which is an important aspect of proxy helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/proxy", "title": "Proxy Helper", "description": "Proxy Helper provides useful functions when using Hono application as a (reverse) proxy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:15:03", "type": "code_examples", "page_metadata": {"title": "Proxy Helper - Hono", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "scrapeId": "3037be56-9b4e-4466-8d0e-956169eb5c52", "sourceURL": "https://hono.dev/docs/helpers/proxy", "url": "https://hono.dev/docs/helpers/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what SSG Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain SSG Helper in hono.\n\n# SSG Helper\n\nSSG Helper generates a static site from your Hono application. It will retrieve the contents of registered routes and save them as static files.Here's a quick rundown of what this is about:\n\n## Usage\n\n### Manual\nIf you have a simple Hono application like the following:\n\n```tsx\n// index.tsx\nconst app = new Hono()\n\napp.get('/', (c) => c.html('Hello, World!'))\napp.use('/about', async (c, next) => {\n  c.setRenderer((content, head) => {\n    return c.html(\n      <html>\n        <head>\n          <title>{head.title ?? ''}</title>\n        </head>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\napp.get('/about', (c) => {\n  return c.render('Hello!', { title: 'Hono SSG Page' })\n})\n\nexport default app\n```\n\nFor Node.js, create a build script like this:\n\n```ts\n// build.ts\nimport app from './index'\nimport { toSSG } from 'hono/ssg'\nimport fs from 'fs/promises'\n\ntoSSG(app, fs)\n```\n\nBy executing the script, the files will be output as follows:\n\n```bash\nls ./static\nabout.html  index.html\n```\n\n## Vite Plugin\n\nUsing the `@hono/vite-ssg` Vite Plugin, you can easily handle the process.\n\nFor more details, see here:\n\n[https://github.com/honojs/vite-plugins/tree/main/packages/ssg](https://github.com/honojs/vite-plugins/tree/main/packages/ssg)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/ssg", "title": "SSG Helper", "description": "SSG Helper generates a static site from your Hono application. It will retrieve the contents of registered routes and save them as static files.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:15:22", "type": "overview", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "SSG Helper - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "scrapeId": "2f1e0980-e865-42ed-ae27-4f35502cbdaf", "sourceURL": "https://hono.dev/docs/helpers/ssg", "url": "https://hono.dev/docs/helpers/ssg", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n### Manual\nIf you have a simple Hono application like the following:\n\n```tsx\n// index.tsx\nconst app = new Hono()\n\napp.get('/', (c) => c.html('Hello, World!'))\napp.use('/about', async (c, next) => {\n  c.setRenderer((content, head) => {\n    return c.html(\n      <html>\n        <head>\n          <title>{head.title ?? ''}</title>\n        </head>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\napp.get('/about', (c) => {\n  return c.render('Hello!', { title: 'Hono SSG Page' })\n})\n\nexport default app\n```\n\nFor Node.js, create a build script like this:\n\n```ts\n// build.ts\nimport app from './index'\nimport { toSSG } from 'hono/ssg'\nimport fs from 'fs/promises'\n\ntoSSG(app, fs)\n```\n\nBy executing the script, the files will be output as follows:\n\n```bash\nls ./static\nabout.html  index.html\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/ssg", "title": "SSG Helper", "description": "SSG Helper generates a static site from your Hono application. It will retrieve the contents of registered routes and save them as static files.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:15:22", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "SSG Helper - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "scrapeId": "2f1e0980-e865-42ed-ae27-4f35502cbdaf", "sourceURL": "https://hono.dev/docs/helpers/ssg", "url": "https://hono.dev/docs/helpers/ssg", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I vite plugin in hono?\n\nAssistant: To vite plugin in hono, here's what you do:\nUsing the `@hono/vite-ssg` Vite Plugin, you can easily handle the process.\n\nFor more details, see here:\n\n[https://github.com/honojs/vite-plugins/tree/main/packages/ssg](https://github.com/honojs/vite-plugins/tree/main/packages/ssg).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/ssg", "title": "SSG Helper", "description": "SSG Helper generates a static site from your Hono application. It will retrieve the contents of registered routes and save them as static files.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:15:22", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "SSG Helper - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "scrapeId": "2f1e0980-e865-42ed-ae27-4f35502cbdaf", "sourceURL": "https://hono.dev/docs/helpers/ssg", "url": "https://hono.dev/docs/helpers/ssg", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for SSG Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Simple Hono Application**:\n\n```yaml\n// index.tsx\nconst app = new Hono()\n\napp.get('/', (c) => c.html('Hello, World!'))\napp.use('/about', async (c, next) => {\n  c.setRenderer((content, head) => {\n    return c.html(\n      <html>\n        <head>\n          <title>{head.title ?? ''}</title>\n        </head>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\napp.get('/about', (c) => {\n  return c.render('Hello!', { title: 'Hono SSG Page' })\n})\n\nexport default app\n```\n\nThis snippet shows you how to simple hono application, which is an important aspect of ssg helper.\n\n**Build Script for Node.js**:\n\n```yaml\n// build.ts\nimport app from './index'\nimport { toSSG } from 'hono/ssg'\nimport fs from 'fs/promises'\n\ntoSSG(app, fs)\n```\n\nThis snippet shows you how to build script for node.js, which is an important aspect of ssg helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/ssg", "title": "SSG Helper", "description": "SSG Helper generates a static site from your Hono application. It will retrieve the contents of registered routes and save them as static files.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:15:22", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "SSG Helper - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "scrapeId": "2f1e0980-e865-42ed-ae27-4f35502cbdaf", "sourceURL": "https://hono.dev/docs/helpers/ssg", "url": "https://hono.dev/docs/helpers/ssg", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using SSG Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `beforeRequestHook` to filter requests based on method, e.g., only outputting GET requests.\n\nUtilize the `afterResponseHook` to filter responses based on status code, e.g., only outputting when StatusCode is 200 or 500.\n\nCustomize file extensions using the `extensionMap` option to match specific Content-Types.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/ssg", "title": "SSG Helper", "description": "SSG Helper generates a static site from your Hono application. It will retrieve the contents of registered routes and save them as static files.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:15:22", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "SSG Helper - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "scrapeId": "2f1e0980-e865-42ed-ae27-4f35502cbdaf", "sourceURL": "https://hono.dev/docs/helpers/ssg", "url": "https://hono.dev/docs/helpers/ssg", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Middleware in hono.\n\n# Middleware\n\nMiddleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.Here's a quick rundown of what this is about:\n\n## Definition of Middleware\n\n- Handler - should return `Response` object. Only one handler will be called.\n- Middleware - should return nothing, will be proceeded to next middleware with `await next()`\n\nThe user can register middleware using `app.use` or using `app.HTTP_METHOD` as well as the handlers. For this feature, it's easy to specify the path and the method.\n\n## Execution order\n\nThe order in which Middleware is executed is determined by the order in which it is registered. The process before the `next` of the first registered Middleware is executed first, and the process after the `next` is executed last.\n\n## Built-in Middleware\n\nHono has built-in middleware.\n\n## Custom Middleware\n\nYou can write your own middleware directly inside `app.use()`. However, embedding middleware directly within `app.use()` can limit its reusability. Therefore, we can separate our middleware into different files.\n\n## Modify the Response After Next\n\nAdditionally, middleware can be designed to modify responses if necessary.\n\n## Context access inside Middleware arguments\n\nTo access the context inside middleware arguments, directly use the context parameter provided by `app.use`.\n\n## Extending the Context in Middleware\n\nTo extend the context inside middleware, use `c.set`. You can make this type-safe by passing a `{ Variables: { yourVariable: YourVariableType } }` generic argument to the `createMiddleware` function.\n\n## Third-party Middleware\n\nBuilt-in middleware does not depend on external modules, but third-party middleware can depend on third-party libraries.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I definition of middleware in hono?\n\nAssistant: To definition of middleware in hono, here's what you do:\n- Handler - should return `Response` object. Only one handler will be called.\n- Middleware - should return nothing, will be proceeded to next middleware with `await next()`\n\nThe user can register middleware using `app.use` or using `app.HTTP_METHOD` as well as the handlers. For this feature, it's easy to specify the path and the method..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I execution order in hono?\n\nAssistant: To execution order in hono, here's what you do:\nThe order in which Middleware is executed is determined by the order in which it is registered. The process before the `next` of the first registered Middleware is executed first, and the process after the `next` is executed last..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I built-in middleware in hono?\n\nAssistant: To built-in middleware in hono, here's what you do:\nHono has built-in middleware..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I custom middleware in hono?\n\nAssistant: To custom middleware in hono, here's what you do:\nYou can write your own middleware directly inside `app.use()`. However, embedding middleware directly within `app.use()` can limit its reusability. Therefore, we can separate our middleware into different files..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I modify the response after next in hono?\n\nAssistant: To modify the response after next in hono, here's what you do:\nAdditionally, middleware can be designed to modify responses if necessary..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I context access inside middleware arguments in hono?\n\nAssistant: To context access inside middleware arguments in hono, here's what you do:\nTo access the context inside middleware arguments, directly use the context parameter provided by `app.use`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I extending the context in middleware in hono?\n\nAssistant: To extending the context in middleware in hono, here's what you do:\nTo extend the context inside middleware, use `c.set`. You can make this type-safe by passing a `{ Variables: { yourVariable: YourVariableType } }` generic argument to the `createMiddleware` function..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I third-party middleware in hono?\n\nAssistant: To third-party middleware in hono, here's what you do:\nBuilt-in middleware does not depend on external modules, but third-party middleware can depend on third-party libraries..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Middleware Registration Example**:\n\n```yaml\n// match any method, all routes\napp.use(logger())\n\n// specify path\napp.use('/posts/*', cors())\n\n// specify method and path\napp.post('/posts/*', basicAuth())\n```\n\nThis snippet shows you how to middleware registration example, which is an important aspect of middleware.\n\n**Handler Example**:\n\n```yaml\napp.post('/posts', (c) => c.text('Created!', 201))\n```\n\nThis snippet shows you how to handler example, which is an important aspect of middleware.\n\n**Execution Order Example**:\n\n```yaml\napp.use(async (_, next) => {\n  console.log('middleware 1 start')\n  await next()\n  console.log('middleware 1 end')\n})\napp.use(async (_, next) => {\n  console.log('middleware 2 start')\n  await next()\n  console.log('middleware 2 end')\n})\napp.use(async (_, next) => {\n  console.log('middleware 3 start')\n  await next()\n  console.log('middleware 3 end')\n})\n\napp.get('/', (c) => {\n  console.log('handler')\n  return c.text('Hello!')\n})\n```\n\nThis snippet shows you how to execution order example, which is an important aspect of middleware.\n\n**Built-in Middleware Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { poweredBy } from 'hono/powered-by'\nimport { logger } from 'hono/logger'\nimport { basicAuth } from 'hono/basic-auth'\n\nconst app = new Hono()\n\napp.use(poweredBy())\napp.use(logger())\n\napp.use(\n  '/auth/*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n```\n\nThis snippet shows you how to built-in middleware example, which is an important aspect of middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn Deno, it is possible to use a different version of middleware than the Hono version, but this can lead to bugs.\n\nTo ensure we don't lose type definitions for context and next, when separating middleware, we can use `createMiddleware()` from Hono's factory.\n\nType generics can be used with `createMiddleware`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/middleware", "title": "Middleware", "description": "Middleware works after/before Handler. We can get `Request` before dispatching or manipulate `Response` after dispatching.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:15:50", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "1334d599-aa93-48ce-88f6-9a81b0561c03", "sourceURL": "https://hono.dev/docs/guides/middleware", "url": "https://hono.dev/docs/guides/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Streaming Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Streaming Helper in hono.\n\n# Streaming Helper\n\nThe Streaming Helper provides methods for streaming responses.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { stream, streamText, streamSSE } from 'hono/streaming'\n```\n\n## `stream()`\n\nIt returns a simple streaming response as `Response` object.\n\n```ts\napp.get('/stream', (c) => {\n  return stream(c, async (stream) => {\n    // Write a process to be executed when aborted.\n    stream.onAbort(() => {\n      console.log('Aborted!')\n    })\n    // Write a Uint8Array.\n    await stream.write(new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f]))\n    // Pipe a readable stream.\n    await stream.pipe(anotherReadableStream)\n  })\n})\n```\n\n## `streamText()`\n\nIt returns a streaming response with `Content-Type:text/plain`, `Transfer-Encoding:chunked`, and `X-Content-Type-Options:nosniff` headers.\n\n```ts\napp.get('/streamText', (c) => {\n  return streamText(c, async (stream) => {\n    // Write a text with a new line ('\\n').\n    await stream.writeln('Hello')\n    // Wait 1 second.\n    await stream.sleep(1000)\n    // Write a text without a new line.\n    await stream.write(`Hono!`)\n  })\n})\n```\n\nWARNING\n\nIf you are developing an application for Cloudflare Workers, a streaming may not work well on Wrangler. If so, add `Identity` for `Content-Encoding` header.\n\n```ts\napp.get('/streamText', (c) => {\n  c.header('Content-Encoding', 'Identity')\n  return streamText(c, async (stream) => {\n    // ...\n  })\n})\n```\n\n## `streamSSE()`\n\nIt allows you to stream Server-Sent Events (SSE) seamlessly.\n\n```ts\nconst app = new Hono()\nlet id = 0\n\napp.get('/sse', async (c) => {\n  return streamSSE(c, async (stream) => {\n    while (true) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```\n\n## Error Handling\n\nThe third argument of the streaming helper is an error handler. This argument is optional, if you don't specify it, the error will be output as a console error.\n\n```ts\napp.get('/stream', (c) => {\n  return stream(\n    c,\n    async (stream) => {\n      // Write a process to be executed when aborted.\n      stream.onAbort(() => {\n        console.log('Aborted!')\n      })\n      // Write a Uint8Array.\n      await stream.write(\n        new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f])\n      )\n      // Pipe a readable stream.\n      await stream.pipe(anotherReadableStream)\n    },\n    (err, stream) => {\n      stream.writeln('An error occurred!')\n      console.error(err)\n    }\n  )\n})\n```\n\nThe stream will be automatically closed after the callbacks are executed.\n\nWARNING\n\nIf the callback function of the streaming helper throws an error, the `onError` event of Hono will not be triggered.\n\n`onError` is a hook to handle errors before the response is sent and overwrite the response. However, when the callback function is executed, the stream has already started, so it cannot be overwritten.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "overview", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { stream, streamText, streamSSE } from 'hono/streaming'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `stream()` in hono?\n\nAssistant: To `stream()` in hono, here's what you do:\nIt returns a simple streaming response as `Response` object.\n\n```ts\napp.get('/stream', (c) => {\n  return stream(c, async (stream) => {\n    // Write a process to be executed when aborted.\n    stream.onAbort(() => {\n      console.log('Aborted!')\n    })\n    // Write a Uint8Array.\n    await stream.write(new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f]))\n    // Pipe a readable stream.\n    await stream.pipe(anotherReadableStream)\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `streamtext()` in hono?\n\nAssistant: To `streamtext()` in hono, here's what you do:\nIt returns a streaming response with `Content-Type:text/plain`, `Transfer-Encoding:chunked`, and `X-Content-Type-Options:nosniff` headers.\n\n```ts\napp.get('/streamText', (c) => {\n  return streamText(c, async (stream) => {\n    // Write a text with a new line ('\\n').\n    await stream.writeln('Hello')\n    // Wait 1 second.\n    await stream.sleep(1000)\n    // Write a text without a new line.\n    await stream.write(`Hono!`)\n  })\n})\n```\n\nWARNING\n\nIf you are developing an application for Cloudflare Workers, a streaming may not work well on Wrangler. If so, add `Identity` for `Content-Encoding` header.\n\n```ts\napp.get('/streamText', (c) => {\n  c.header('Content-Encoding', 'Identity')\n  return streamText(c, async (stream) => {\n    // ...\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `streamsse()` in hono?\n\nAssistant: To `streamsse()` in hono, here's what you do:\nIt allows you to stream Server-Sent Events (SSE) seamlessly.\n\n```ts\nconst app = new Hono()\nlet id = 0\n\napp.get('/sse', async (c) => {\n  return streamSSE(c, async (stream) => {\n    while (true) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I error handling in hono?\n\nAssistant: To error handling in hono, here's what you do:\nThe third argument of the streaming helper is an error handler. This argument is optional, if you don't specify it, the error will be output as a console error.\n\n```ts\napp.get('/stream', (c) => {\n  return stream(\n    c,\n    async (stream) => {\n      // Write a process to be executed when aborted.\n      stream.onAbort(() => {\n        console.log('Aborted!')\n      })\n      // Write a Uint8Array.\n      await stream.write(\n        new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f])\n      )\n      // Pipe a readable stream.\n      await stream.pipe(anotherReadableStream)\n    },\n    (err, stream) => {\n      stream.writeln('An error occurred!')\n      console.error(err)\n    }\n  )\n})\n```\n\nThe stream will be automatically closed after the callbacks are executed.\n\nWARNING\n\nIf the callback function of the streaming helper throws an error, the `onError` event of Hono will not be triggered.\n\n`onError` is a hook to handle errors before the response is sent and overwrite the response. However, when the callback function is executed, the stream has already started, so it cannot be overwritten..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Streaming Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { stream, streamText, streamSSE } from 'hono/streaming'\n```\n```\n\nThis snippet shows you how to import, which is an important aspect of streaming helper.\n\n**`stream()` Example**:\n\n```yaml\n```ts\napp.get('/stream', (c) => {\n  return stream(c, async (stream) => {\n    // Write a process to be executed when aborted.\n    stream.onAbort(() => {\n      console.log('Aborted!')\n    })\n    // Write a Uint8Array.\n    await stream.write(new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f]))\n    // Pipe a readable stream.\n    await stream.pipe(anotherReadableStream)\n  })\n})\n```\n```\n\nThis snippet shows you how to `stream()` example, which is an important aspect of streaming helper.\n\n**`streamText()` Example**:\n\n```yaml\n```ts\napp.get('/streamText', (c) => {\n  return streamText(c, async (stream) => {\n    // Write a text with a new line ('\\n').\n    await stream.writeln('Hello')\n    // Wait 1 second.\n    await stream.sleep(1000)\n    // Write a text without a new line.\n    await stream.write(`Hono!`)\n  })\n})\n```\n```\n\nThis snippet shows you how to `streamtext()` example, which is an important aspect of streaming helper.\n\n**Cloudflare Workers Warning**:\n\n```yaml\n```ts\napp.get('/streamText', (c) => {\n  c.header('Content-Encoding', 'Identity')\n  return streamText(c, async (stream) => {\n    // ...\n  })\n})\n```\n```\n\nThis snippet shows you how to cloudflare workers warning, which is an important aspect of streaming helper.\n\n**`streamSSE()` Example**:\n\n```yaml\n```ts\nconst app = new Hono()\nlet id = 0\n\napp.get('/sse', async (c) => {\n  return streamSSE(c, async (stream) => {\n    while (true) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```\n```\n\nThis snippet shows you how to `streamsse()` example, which is an important aspect of streaming helper.\n\n**Error Handling Example**:\n\n```yaml\n```ts\napp.get('/stream', (c) => {\n  return stream(\n    c,\n    async (stream) => {\n      // Write a process to be executed when aborted.\n      stream.onAbort(() => {\n        console.log('Aborted!')\n      })\n      // Write a Uint8Array.\n      await stream.write(\n        new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f])\n      )\n      // Pipe a readable stream.\n      await stream.pipe(anotherReadableStream)\n    },\n    (err, stream) => {\n      stream.writeln('An error occurred!')\n      console.error(err)\n    }\n  )\n})\n```\n```\n\nThis snippet shows you how to error handling example, which is an important aspect of streaming helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "code_examples", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Streaming Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you are developing an application for Cloudflare Workers, a streaming may not work well on Wrangler. If so, add `Identity` for `Content-Encoding` header.\n\nIf the callback function of the streaming helper throws an error, the `onError` event of Hono will not be triggered.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/streaming", "title": "Streaming Helper", "description": "The Streaming Helper provides methods for streaming responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:39", "type": "best_practices", "page_metadata": {"og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Streaming Helper - Hono", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "5d4946cd-dbad-472c-8202-c3cee37015ac", "sourceURL": "https://hono.dev/docs/helpers/streaming", "url": "https://hono.dev/docs/helpers/streaming", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Hono Stacks is in hono?\n\nAssistant: Sure, I'd be happy to explain Hono Stacks in hono.\n\n# Hono Stacks\n\nHono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.Here's a quick rundown of what this is about:\n\n## RPC\n\nHono's RPC feature allows you to share API specs with little change to your code. The client generated by `hc` will read the spec and access the endpoint Type-Safety.\n\nThe following libraries make it possible.\n\n- Hono - API Server\n- [Zod](https://zod.dev/) - Validator\n- [Zod Validator Middleware](https://github.com/honojs/middleware/tree/main/packages/zod-validator)\n- `hc` - HTTP Client\n\nWe can call the set of these components the **Hono Stack**. Now let's create an API server and a client with it.\n\n## Writing API\n\nFirst, write an endpoint that receives a GET request and returns JSON.\n\n```ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: `Hello!`,\n  })\n})\n```\n\n## Validation with Zod\n\nValidate with Zod to receive the value of the query parameter.\n\n![SC](https://hono.dev/images/sc01.gif)\n\n```ts\nimport { zValidator } from '@hono/zod-validator'\nimport { z } from 'zod'\n\napp.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n```\n\n## Sharing the Types\n\nTo emit an endpoint specification, export its type.\n\n```ts\nconst route = app.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n\nexport type AppType = typeof route\n```\n\n## Client\n\nNext. The client-side implementation. Create a client object by passing the AppType type to `hc` as generics. Then, magically, completion works and the endpoint path and request type are suggested.\n\n![SC](https://hono.dev/images/sc03.gif)\n\n```ts\nimport { AppType } from './server'\nimport { hc } from 'hono/client'\n\nconst client = hc<AppType>('/api')\nconst res = await client.hello.$get({\n  query: {\n    name: 'Hono',\n  },\n})\n```\n\nThe `Response` is compatible with the fetch API, but the data that can be retrieved with `json()` has a type.\n\n![SC](https://hono.dev/images/sc04.gif)\n\n```ts\nconst data = await res.json()\nconsole.log(`${data.message}`)\n```\n\nSharing API specifications means that you can be aware of server-side changes.\n\n![SS](https://hono.dev/images/ss03.png)\n\n## With React\n\nYou can create applications on Cloudflare Pages using React.\n\nThe API server.\n\n```ts\n// functions/api/[[route]].ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/cloudflare-pages'\nimport { z } from 'zod'\nimport { zValidator } from '@hono/zod-validator'\n\nconst app = new Hono()\n\nconst schema = z.object({\n  id: z.string(),\n  title: z.string(),\n})\n\ntype Todo = z.infer<typeof schema>\n\nconst todos: Todo[] = []\n\nconst route = app\n  .post('/todo', zValidator('form', schema), (c) => {\n    const todo = c.req.valid('form')\n    todos.push(todo)\n    return c.json({\n      message: 'created!',\n    })\n  })\n  .get((c) => {\n    return c.json({\n      todos,\n    })\n  })\n\nexport type AppType = typeof route\n\nexport const onRequest = handle(app, '/api')\n``` \n\nThe client with React and React Query.\n\n```tsx\n// src/App.tsx\nimport { useQuery, useMutation, QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { AppType } from '../functions/api/[[route]]'\nimport { hc, InferResponseType, InferRequestType } from 'hono/client'\n\nconst queryClient = new QueryClient()\nconst client = hc<AppType>('/api')\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Todos />\n    </QueryClientProvider>\n  )\n}\n\nconst Todos = () => {\n  const query = useQuery({\n    queryKey: ['todos'],\n    queryFn: async () => {\n      const res = await client.todo.$get()\n      return await res.json()\n    },\n  })\n\n  const $post = client.todo.$post\n\n  const mutation = useMutation<\n    InferResponseType<typeof $post>,\n    Error,\n    InferRequestType<typeof $post>['form']\n  >(\n    async (todo) => {\n      const res = await $post({\n        form: todo,\n      })\n      return await res.json()\n    },\n    {\n      onSuccess: async () => {\n        queryClient.invalidateQueries({ queryKey: ['todos'] })\n      },\n      onError: (error) => {\n        console.log(error)\n      },\n    }\n  )\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          mutation.mutate({\n            id: Date.now().toString(),\n            title: 'Write code',\n          })\n        }}\n      >\n        Add Todo\n      </button>\n\n      <ul>\n        {query.data?.todos.map((todo) => (\n          <li key={todo.id}>{todo.title}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "overview", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I rpc in hono?\n\nAssistant: To rpc in hono, here's what you do:\nHono's RPC feature allows you to share API specs with little change to your code. The client generated by `hc` will read the spec and access the endpoint Type-Safety.\n\nThe following libraries make it possible.\n\n- Hono - API Server\n- [Zod](https://zod.dev/) - Validator\n- [Zod Validator Middleware](https://github.com/honojs/middleware/tree/main/packages/zod-validator)\n- `hc` - HTTP Client\n\nWe can call the set of these components the **Hono Stack**. Now let's create an API server and a client with it..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I writing api in hono?\n\nAssistant: To writing api in hono, here's what you do:\nFirst, write an endpoint that receives a GET request and returns JSON.\n\n```ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: `Hello!`,\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I validation with zod in hono?\n\nAssistant: To validation with zod in hono, here's what you do:\nValidate with Zod to receive the value of the query parameter.\n\n![SC](https://hono.dev/images/sc01.gif)\n\n```ts\nimport { zValidator } from '@hono/zod-validator'\nimport { z } from 'zod'\n\napp.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I sharing the types in hono?\n\nAssistant: To sharing the types in hono, here's what you do:\nTo emit an endpoint specification, export its type.\n\n```ts\nconst route = app.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n\nexport type AppType = typeof route\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I client in hono?\n\nAssistant: To client in hono, here's what you do:\nNext. The client-side implementation. Create a client object by passing the AppType type to `hc` as generics. Then, magically, completion works and the endpoint path and request type are suggested.\n\n![SC](https://hono.dev/images/sc03.gif)\n\n```ts\nimport { AppType } from './server'\nimport { hc } from 'hono/client'\n\nconst client = hc<AppType>('/api')\nconst res = await client.hello.$get({\n  query: {\n    name: 'Hono',\n  },\n})\n```\n\nThe `Response` is compatible with the fetch API, but the data that can be retrieved with `json()` has a type.\n\n![SC](https://hono.dev/images/sc04.gif)\n\n```ts\nconst data = await res.json()\nconsole.log(`${data.message}`)\n```\n\nSharing API specifications means that you can be aware of server-side changes.\n\n![SS](https://hono.dev/images/ss03.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I with react in hono?\n\nAssistant: To with react in hono, here's what you do:\nYou can create applications on Cloudflare Pages using React.\n\nThe API server.\n\n```ts\n// functions/api/[[route]].ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/cloudflare-pages'\nimport { z } from 'zod'\nimport { zValidator } from '@hono/zod-validator'\n\nconst app = new Hono()\n\nconst schema = z.object({\n  id: z.string(),\n  title: z.string(),\n})\n\ntype Todo = z.infer<typeof schema>\n\nconst todos: Todo[] = []\n\nconst route = app\n  .post('/todo', zValidator('form', schema), (c) => {\n    const todo = c.req.valid('form')\n    todos.push(todo)\n    return c.json({\n      message: 'created!',\n    })\n  })\n  .get((c) => {\n    return c.json({\n      todos,\n    })\n  })\n\nexport type AppType = typeof route\n\nexport const onRequest = handle(app, '/api')\n``` \n\nThe client with React and React Query.\n\n```tsx\n// src/App.tsx\nimport { useQuery, useMutation, QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { AppType } from '../functions/api/[[route]]'\nimport { hc, InferResponseType, InferRequestType } from 'hono/client'\n\nconst queryClient = new QueryClient()\nconst client = hc<AppType>('/api')\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Todos />\n    </QueryClientProvider>\n  )\n}\n\nconst Todos = () => {\n  const query = useQuery({\n    queryKey: ['todos'],\n    queryFn: async () => {\n      const res = await client.todo.$get()\n      return await res.json()\n    },\n  })\n\n  const $post = client.todo.$post\n\n  const mutation = useMutation<\n    InferResponseType<typeof $post>,\n    Error,\n    InferRequestType<typeof $post>['form']\n  >(\n    async (todo) => {\n      const res = await $post({\n        form: todo,\n      })\n      return await res.json()\n    },\n    {\n      onSuccess: async () => {\n        queryClient.invalidateQueries({ queryKey: ['todos'] })\n      },\n      onError: (error) => {\n        console.log(error)\n      },\n    }\n  )\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          mutation.mutate({\n            id: Date.now().toString(),\n            title: 'Write code',\n          })\n        }}\n      >\n        Add Todo\n      </button>\n\n      <ul>\n        {query.data?.todos.map((todo) => (\n          <li key={todo.id}>{todo.title}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Hono Stacks in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Writing API Example**:\n\n```yaml\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: `Hello!`,\n  })\n})\n```\n\nThis snippet shows you how to writing api example, which is an important aspect of hono stacks.\n\n**Validation with Zod Example**:\n\n```yaml\nimport { zValidator } from '@hono/zod-validator'\nimport { z } from 'zod'\n\napp.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n```\n\nThis snippet shows you how to validation with zod example, which is an important aspect of hono stacks.\n\n", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "code_examples", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Hono Stacks in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSharing API specifications means that you can be aware of server-side changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/concepts/stacks", "title": "Hono Stacks", "description": "Hono makes easy things easy and hard things easy. It is suitable for not just only returning JSON. But it's also great for building the full-stack application including REST API servers and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:01", "type": "best_practices", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "title": "Hono Stacks - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7e93fbe1-957b-4bec-bcaf-c1d7b249a262", "sourceURL": "https://hono.dev/docs/concepts/stacks", "url": "https://hono.dev/docs/concepts/stacks", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what App - Hono is in hono?\n\nAssistant: Sure, I'd be happy to explain App - Hono in hono.\n\n# App - Hono\n\nHono is the primary object. It will be imported first and used until the end.Here's a quick rundown of what this is about:\n\n## Methods\n\nAn instance of `Hono` has the following methods.\n\n- app. **HTTP_METHOD**([path,]handler|middleware...)\n- app. **all**([path,]handler|middleware...)\n- app. **on**(method|method[], path|path[], handler|middleware...)\n- app. **use**([path]middleware)\n- app. **route**(path, [app])\n- app. **basePath**(path)\n- app. **notFound**(handler)\n- app. **onError**(err, handler)\n- app. **mount**(path, anotherApp)\n- app. **fire**()\n- app. **fetch**(request, env, event)\n- app. **request**(path, options)\n\nThe first part of them is used for routing, please refer to the [routing section](https://hono.dev/docs/api/routing).\n\n## Not Found\n\n`app.notFound` allows you to customize a Not Found Response.\n\n## Error Handling\n\n`app.onError` handles an error and returns a customized Response.\n\n## fire()\n\n`app.fire()` automatically adds a global `fetch` event listener.\n\nThis can be useful for environments that adhere to the [Service Worker API](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API), such as [non-ES module Cloudflare Workers](https://developers.cloudflare.com/workers/reference/migrate-to-module-workers/).\n\n`app.fire()` executes the following for you:\n\n## fetch()\n\n`app.fetch` will be entry point of your application.\n\nFor Cloudflare Workers, you can use the following:\n\nor just do:\n\n## request()\n\n`request` is a useful method for testing.\n\nYou can pass a URL or pathname to send a GET request. `app` will return a `Response` object.\n\nYou can also pass a `Request` object:\n\n## mount()\n\nThe `mount()` allows you to mount applications built with other frameworks into your Hono application.\n\n## strict mode\n\nStrict mode defaults to `true` and distinguishes the following routes.\n\n`app.get('/hello')` will not match `GET /hello/`.\n\nBy setting strict mode to `false`, both paths will be treated equally.\n\n## router option\n\nThe `router` option specifices which router to use. The default router is `SmartRouter`. If you want to use `RegExpRouter`, pass it to a new `Hono` instance.\n\n## Generics\n\nYou can pass Generics to specify the types of Cloudflare Workers Bindings and variables used in `c.set`/ `c.get`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I methods in hono?\n\nAssistant: To methods in hono, here's what you do:\nAn instance of `Hono` has the following methods.\n\n- app. **HTTP_METHOD**([path,]handler|middleware...)\n- app. **all**([path,]handler|middleware...)\n- app. **on**(method|method[], path|path[], handler|middleware...)\n- app. **use**([path]middleware)\n- app. **route**(path, [app])\n- app. **basePath**(path)\n- app. **notFound**(handler)\n- app. **onError**(err, handler)\n- app. **mount**(path, anotherApp)\n- app. **fire**()\n- app. **fetch**(request, env, event)\n- app. **request**(path, options)\n\nThe first part of them is used for routing, please refer to the [routing section](https://hono.dev/docs/api/routing)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I not found in hono?\n\nAssistant: To not found in hono, here's what you do:\n`app.notFound` allows you to customize a Not Found Response..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I error handling in hono?\n\nAssistant: To error handling in hono, here's what you do:\n`app.onError` handles an error and returns a customized Response..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I fire() in hono?\n\nAssistant: To fire() in hono, here's what you do:\n`app.fire()` automatically adds a global `fetch` event listener.\n\nThis can be useful for environments that adhere to the [Service Worker API](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API), such as [non-ES module Cloudflare Workers](https://developers.cloudflare.com/workers/reference/migrate-to-module-workers/).\n\n`app.fire()` executes the following for you:.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I fetch() in hono?\n\nAssistant: To fetch() in hono, here's what you do:\n`app.fetch` will be entry point of your application.\n\nFor Cloudflare Workers, you can use the following:\n\nor just do:.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I request() in hono?\n\nAssistant: To request() in hono, here's what you do:\n`request` is a useful method for testing.\n\nYou can pass a URL or pathname to send a GET request. `app` will return a `Response` object.\n\nYou can also pass a `Request` object:.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I mount() in hono?\n\nAssistant: To mount() in hono, here's what you do:\nThe `mount()` allows you to mount applications built with other frameworks into your Hono application..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I strict mode in hono?\n\nAssistant: To strict mode in hono, here's what you do:\nStrict mode defaults to `true` and distinguishes the following routes.\n\n`app.get('/hello')` will not match `GET /hello/`.\n\nBy setting strict mode to `false`, both paths will be treated equally..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I router option in hono?\n\nAssistant: To router option in hono, here's what you do:\nThe `router` option specifices which router to use. The default router is `SmartRouter`. If you want to use `RegExpRouter`, pass it to a new `Hono` instance..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I generics in hono?\n\nAssistant: To generics in hono, here's what you do:\nYou can pass Generics to specify the types of Cloudflare Workers Bindings and variables used in `c.set`/ `c.get`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for App - Hono in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Hono App**:\n\n```yaml\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n//...\n\nexport default app // for Cloudflare Workers or Bun\n```\n\nThis snippet shows you how to basic hono app, which is an important aspect of app - hono.\n\n**Custom Not Found Response**:\n\n```yaml\napp.notFound((c) => {\n  return c.text('Custom 404 Message', 404)\n})\n```\n\nThis snippet shows you how to custom not found response, which is an important aspect of app - hono.\n\n**Custom Error Handling**:\n\n```yaml\napp.onError((err, c) => {\n  console.error(`${err}`)\n  return c.text('Custom Error Message', 500)\n})\n```\n\nThis snippet shows you how to custom error handling, which is an important aspect of app - hono.\n\n**Global Fetch Event Listener**:\n\n```yaml\naddEventListener('fetch', (event: FetchEventLike): void => {\n  event.respondWith(this.dispatch(...))\n})\n```\n\nThis snippet shows you how to global fetch event listener, which is an important aspect of app - hono.\n\n**Cloudflare Workers Fetch Entry Point**:\n\n```yaml\nexport default {\n  fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    return app.fetch(request, env, ctx)\n  },\n}\n```\n\nThis snippet shows you how to cloudflare workers fetch entry point, which is an important aspect of app - hono.\n\n", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using App - Hono in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStrict mode defaults to true and distinguishes between routes with and without trailing slashes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/api/hono", "title": "App - Hono", "description": "Hono is the primary object. It will be imported first and used until the end.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:22:19", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "title": "App - Hono - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "0767e45e-b9fc-4d90-a954-e851c897c498", "sourceURL": "https://hono.dev/docs/api/hono", "url": "https://hono.dev/docs/api/hono", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Factory Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Factory Helper in hono.\n\n# Factory Helper\n\nThe Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { createFactory, createMiddleware } from 'hono/factory'\n```\n\n## createFactory()\n\n`createFactory()` will create an instance of the Factory class.\n\n```ts\nimport { createFactory } from 'hono/factory'\n\nconst factory = createFactory()\n```\n\nYou can pass your Env types as Generics:\n\n```ts\ntype Env = {\n  Variables: {\n    foo: string\n  }\n}\n\nconst factory = createFactory<Env>()\n```\n\n## Options\n\n### optional defaultAppOptions: `HonoOptions`\n\nThe default options to pass to the Hono application created by `createApp()`.\n\n```ts\nconst factory = createFactory({\n  defaultAppOptions: { strict: false },\n})\n\nconst app = factory.createApp() // `strict: false` is applied\n```\n\n## createMiddleware()\n\n`createMiddleware()` is shortcut of `factory.createMiddleware()`. This function will create your custom middleware.\n\n```ts\nconst messageMiddleware = createMiddleware(async (c, next) => {\n  await next()\n  c.res.headers.set('X-Message', 'Good morning!')\n})\n```\n\nTip: If you want to get an argument like `message`, you can create it as a function like the following.\n\n```ts\nconst messageMiddleware = (message: string) => {\n  return createMiddleware(async (c, next) => {\n    await next()\n    c.res.headers.set('X-Message', message)\n  })\n}\n\napp.use(messageMiddleware('Good evening!'))\n```\n\n## factory.createHandlers()\n\n`createHandlers()` helps to define handlers in a different place than `app.get('/')`.\n\n```ts\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```\n\n## factory.createApp()\n\n`createApp()` helps to create an instance of Hono with the proper types. If you use this method with `createFactory()`, you can avoid redundancy in the definition of the `Env` type.\n\nIf your application is like this, you have to set the `Env` in two places:\n\n```ts\nimport { createMiddleware } from 'hono/factory'\n\ntype Env = {\n  Variables: {\n    myVar: string\n  }\n}\n\n// 1. Set the `Env` to `new Hono()`\nconst app = new Hono<Env>()\n\n// 2. Set the `Env` to `createMiddleware()`\nconst mw = createMiddleware<Env>(async (c, next) => {\n  await next()\n})\n\napp.use(mw)\n```\n\nBy using `createFactory()` and `createApp()`, you can set the `Env` only in one place.\n\n```ts\nimport { createFactory } from 'hono/factory'\n\n// ...\n\n// Set the `Env` to `createFactory()`\nconst factory = createFactory<Env>()\n\nconst app = factory.createApp()\n\n// factory also has `createMiddleware()`\nconst mw = factory.createMiddleware(async (c, next) => {\n  await next()\n})\n```\n\n## Example with Database\n\n`createFactory()` can receive the `initApp` option to initialize an `app` created by `createApp()`. The following is an example that uses the option.\n\n```ts\n// factory-with-db.ts\ntype Env = {\n  Bindings: {\n    MY_DB: D1Database\n  }\n  Variables: {\n    db: DrizzleD1Database\n  }\n}\n\nexport default createFactory<Env>({\n  initApp: (app) => {\n    app.use(async (c, next) => {\n      const db = drizzle(c.env.MY_DB)\n      c.set('db', db)\n      await next()\n    })\n  },\n})\n```\n\n```ts\n// crud.ts\nimport factoryWithDB from './factory-with-db'\n\nconst app = factoryWithDB.createApp()\n\napp.post('/posts', (c) => {\n  c.var.db.insert()\n  // ...\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { createFactory, createMiddleware } from 'hono/factory'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I createfactory() in hono?\n\nAssistant: To createfactory() in hono, here's what you do:\n`createFactory()` will create an instance of the Factory class.\n\n```ts\nimport { createFactory } from 'hono/factory'\n\nconst factory = createFactory()\n```\n\nYou can pass your Env types as Generics:\n\n```ts\ntype Env = {\n  Variables: {\n    foo: string\n  }\n}\n\nconst factory = createFactory<Env>()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional defaultAppOptions: `HonoOptions`\n\nThe default options to pass to the Hono application created by `createApp()`.\n\n```ts\nconst factory = createFactory({\n  defaultAppOptions: { strict: false },\n})\n\nconst app = factory.createApp() // `strict: false` is applied\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I createmiddleware() in hono?\n\nAssistant: To createmiddleware() in hono, here's what you do:\n`createMiddleware()` is shortcut of `factory.createMiddleware()`. This function will create your custom middleware.\n\n```ts\nconst messageMiddleware = createMiddleware(async (c, next) => {\n  await next()\n  c.res.headers.set('X-Message', 'Good morning!')\n})\n```\n\nTip: If you want to get an argument like `message`, you can create it as a function like the following.\n\n```ts\nconst messageMiddleware = (message: string) => {\n  return createMiddleware(async (c, next) => {\n    await next()\n    c.res.headers.set('X-Message', message)\n  })\n}\n\napp.use(messageMiddleware('Good evening!'))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I factory.createhandlers() in hono?\n\nAssistant: To factory.createhandlers() in hono, here's what you do:\n`createHandlers()` helps to define handlers in a different place than `app.get('/')`.\n\n```ts\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I factory.createapp() in hono?\n\nAssistant: To factory.createapp() in hono, here's what you do:\n`createApp()` helps to create an instance of Hono with the proper types. If you use this method with `createFactory()`, you can avoid redundancy in the definition of the `Env` type.\n\nIf your application is like this, you have to set the `Env` in two places:\n\n```ts\nimport { createMiddleware } from 'hono/factory'\n\ntype Env = {\n  Variables: {\n    myVar: string\n  }\n}\n\n// 1. Set the `Env` to `new Hono()`\nconst app = new Hono<Env>()\n\n// 2. Set the `Env` to `createMiddleware()`\nconst mw = createMiddleware<Env>(async (c, next) => {\n  await next()\n})\n\napp.use(mw)\n```\n\nBy using `createFactory()` and `createApp()`, you can set the `Env` only in one place.\n\n```ts\nimport { createFactory } from 'hono/factory'\n\n// ...\n\n// Set the `Env` to `createFactory()`\nconst factory = createFactory<Env>()\n\nconst app = factory.createApp()\n\n// factory also has `createMiddleware()`\nconst mw = factory.createMiddleware(async (c, next) => {\n  await next()\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I example with database in hono?\n\nAssistant: To example with database in hono, here's what you do:\n`createFactory()` can receive the `initApp` option to initialize an `app` created by `createApp()`. The following is an example that uses the option.\n\n```ts\n// factory-with-db.ts\ntype Env = {\n  Bindings: {\n    MY_DB: D1Database\n  }\n  Variables: {\n    db: DrizzleD1Database\n  }\n}\n\nexport default createFactory<Env>({\n  initApp: (app) => {\n    app.use(async (c, next) => {\n      const db = drizzle(c.env.MY_DB)\n      c.set('db', db)\n      await next()\n    })\n  },\n})\n```\n\n```ts\n// crud.ts\nimport factoryWithDB from './factory-with-db'\n\nconst app = factoryWithDB.createApp()\n\napp.post('/posts', (c) => {\n  c.var.db.insert()\n  // ...\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Factory Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { createFactory, createMiddleware } from 'hono/factory'\n```\n```\n\nThis snippet shows you how to import, which is an important aspect of factory helper.\n\n**createFactory()**:\n\n```yaml\n```ts\nimport { createFactory } from 'hono/factory'\n\nconst factory = createFactory()\n```\n```\n\nThis snippet shows you how to createfactory(), which is an important aspect of factory helper.\n\n**Env Types with createFactory()**:\n\n```yaml\n```ts\ntype Env = {\n  Variables: {\n    foo: string\n  }\n}\n\nconst factory = createFactory<Env>()\n```\n```\n\nThis snippet shows you how to env types with createfactory(), which is an important aspect of factory helper.\n\n**Default App Options**:\n\n```yaml\n```ts\nconst factory = createFactory({\n  defaultAppOptions: { strict: false },\n})\n\nconst app = factory.createApp() // `strict: false` is applied\n```\n```\n\nThis snippet shows you how to default app options, which is an important aspect of factory helper.\n\n**createMiddleware() Example**:\n\n```yaml\n```ts\nconst messageMiddleware = createMiddleware(async (c, next) => {\n  await next()\n  c.res.headers.set('X-Message', 'Good morning!')\n})\n```\n```\n\nThis snippet shows you how to createmiddleware() example, which is an important aspect of factory helper.\n\n**Message Middleware with Argument**:\n\n```yaml\n```ts\nconst messageMiddleware = (message: string) => {\n  return createMiddleware(async (c, next) => {\n    await next()\n    c.res.headers.set('X-Message', message)\n  })\n}\n\napp.use(messageMiddleware('Good evening!'))\n```\n```\n\nThis snippet shows you how to message middleware with argument, which is an important aspect of factory helper.\n\n**createHandlers() Example**:\n\n```yaml\n```ts\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```\n```\n\nThis snippet shows you how to createhandlers() example, which is an important aspect of factory helper.\n\n**Setting Env in Hono and Middleware**:\n\n```yaml\n```ts\nimport { createMiddleware } from 'hono/factory'\n\ntype Env = {\n  Variables: {\n    myVar: string\n  }\n}\n\nconst app = new Hono<Env>()\n\nconst mw = createMiddleware<Env>(async (c, next) => {\n  await next()\n})\n\napp.use(mw)\n```\n```\n\nThis snippet shows you how to setting env in hono and middleware, which is an important aspect of factory helper.\n\n**Using createFactory() with Env**:\n\n```yaml\n```ts\nimport { createFactory } from 'hono/factory'\n\nconst factory = createFactory<Env>()\n\nconst app = factory.createApp()\n\nconst mw = factory.createMiddleware(async (c, next) => {\n  await next()\n})\n```\n```\n\nThis snippet shows you how to using createfactory() with env, which is an important aspect of factory helper.\n\n**Factory with Database Example**:\n\n```yaml\n```ts\n// factory-with-db.ts\ntype Env = {\n  Bindings: {\n    MY_DB: D1Database\n  }\n  Variables: {\n    db: DrizzleD1Database\n  }\n}\n\nexport default createFactory<Env>({\n  initApp: (app) => {\n    app.use(async (c, next) => {\n      const db = drizzle(c.env.MY_DB)\n      c.set('db', db)\n      await next()\n    })\n  },\n})\n```\n```\n\nThis snippet shows you how to factory with database example, which is an important aspect of factory helper.\n\n**CRUD Example with Database**:\n\n```yaml\n```ts\n// crud.ts\nimport factoryWithDB from './factory-with-db'\n\nconst app = factoryWithDB.createApp()\n\napp.post('/posts', (c) => {\n  c.var.db.insert()\n  // ...\n})\n```\n```\n\nThis snippet shows you how to crud example with database, which is an important aspect of factory helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Factory Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you want to get an argument like `message`, you can create it as a function like the following.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/factory", "title": "Factory Helper", "description": "The Factory Helper provides useful functions for creating Hono's components such as Middleware. Sometimes it's difficult to set the proper TypeScript types, but this helper facilitates that.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:22:41", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "title": "Factory Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "58e6190c-c81e-4046-8091-dc01f2245370", "sourceURL": "https://hono.dev/docs/helpers/factory", "url": "https://hono.dev/docs/helpers/factory", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Hono OpenAPI is in hono?\n\nAssistant: Sure, I'd be happy to explain Hono OpenAPI in hono.\n\n# Hono OpenAPI\n\nhono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.Here's a quick rundown of what this is about:\n\n## 🛠️ Installation\n\nInstall the package along with your preferred validation library and its dependencies:\n\nbash\n\n```\n# For Zod\npnpm add hono-openapi @hono/zod-validator zod zod-openapi\n\n# For Valibot\npnpm add hono-openapi @hono/valibot-validator valibot @valibot/to-json-schema\n\n# For ArkType\npnpm add hono-openapi @hono/arktype-validator arktype\n\n# For TypeBox\npnpm add hono-openapi @hono/typebox-validator @sinclair/typebox\n```\n\n* * *\n\n## 🚀 Getting Started\n\n### 1. Define Your Schemas\n\nDefine your request and response schemas using your preferred validation library. Here's an example using Valibot:\n\nts\n\n```\nimport * as v from 'valibot'\n\nconst querySchema = v.object({\n  name: v.optional(v.string()),\n})\n\nconst responseSchema = v.string()\n```\n\n* * *\n\n### 2. Create Routes\n\nUse `describeRoute` for route documentation and validation:\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { describeRoute } from 'hono-openapi'\n// You can import these for your preferred validation library\nimport {\n  resolver,\n  validator as vValidator,\n} from 'hono-openapi/valibot'\n\nconst app = new Hono()\n\napp.get(\n  '/',\n  describeRoute({\n    description: 'Say hello to the user',\n    responses: {\n      200: {\n        description: 'Successful response',\n        content: {\n          'text/plain': { schema: resolver(responseSchema) },\n        },\n      },\n    },\n  }),\n  vValidator('query', querySchema),\n  (c) => {\n    const query = c.req.valid('query')\n    return c.text(`Hello ${query?.name ?? 'Hono'}!`)\n  }\n)\n```\n\n* * *\n\n### 3. Generate OpenAPI Spec\n\nAdd an endpoint for your OpenAPI document:\n\nts\n\n```\nimport { openAPISpecs } from 'hono-openapi'\n\napp.get(\n  '/openapi',\n  openAPISpecs(app, {\n    documentation: {\n      info: {\n        title: 'Hono API',\n        version: '1.0.0',\n        description: 'Greeting API',\n      },\n      servers: [\n        { url: 'http://localhost:3000', description: 'Local Server' },\n      ],\n    },\n  })\n)\n```\n\n* * *\n\n### 🌐 Serve API Docs\n\nUse tools like Swagger UI or Scalar to visualize your OpenAPI specs. Here's an example using Scalar:\n\nts\n\n```\nimport { apiReference } from '@scalar/hono-api-reference'\n\napp.get(\n  '/docs',\n  apiReference({\n    theme: 'saturn',\n    spec: { url: '/openapi' },\n  })\n)\n```\n\n* * *\n\n## 🔍 Advanced Features\n\n### Add Security Definitions\n\nts\n\n```\napp.get(\n  '/openapi',\n  openAPISpecs(app, {\n    documentation: {\n      components: {\n        securitySchemes: {\n          bearerAuth: {\n            type: 'http',\n            scheme: 'bearer',\n            bearerFormat: 'JWT',\n          },\n        },\n      },\n      security: [{ bearerAuth: [] }],\n    },\n  })\n)\n```\n\n### Conditionally Hide Routes\n\nts\n\n```\napp.get(\n  '/',\n  describeRoute({\n    // ...\n    hide: process.env.NODE_ENV === 'production',\n  }),\n  (c) => c.text('Hidden Route')\n)\n```\n\n### Validate Responses\n\nts\n\n```\napp.get(\n  '/',\n  describeRoute({\n    // ...\n    validateResponse: true,\n  }),\n  (c) => c.text('Validated Response')\n)\n```\n\n* * *\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/hono-openapi", "title": "Hono OpenAPI", "description": "hono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:23:07", "type": "overview", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Hono OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "scrapeId": "1d47fd4f-684f-45ff-8783-904220abfda3", "sourceURL": "https://hono.dev/examples/hono-openapi", "url": "https://hono.dev/examples/hono-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 🛠️ installation in hono?\n\nAssistant: To 🛠️ installation in hono, here's what you do:\nInstall the package along with your preferred validation library and its dependencies:\n\nbash\n\n```\n# For Zod\npnpm add hono-openapi @hono/zod-validator zod zod-openapi\n\n# For Valibot\npnpm add hono-openapi @hono/valibot-validator valibot @valibot/to-json-schema\n\n# For ArkType\npnpm add hono-openapi @hono/arktype-validator arktype\n\n# For TypeBox\npnpm add hono-openapi @hono/typebox-validator @sinclair/typebox\n```\n\n* * *.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/hono-openapi", "title": "Hono OpenAPI", "description": "hono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:23:07", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Hono OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "scrapeId": "1d47fd4f-684f-45ff-8783-904220abfda3", "sourceURL": "https://hono.dev/examples/hono-openapi", "url": "https://hono.dev/examples/hono-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 🚀 getting started in hono?\n\nAssistant: To 🚀 getting started in hono, here's what you do:\n### 1. Define Your Schemas\n\nDefine your request and response schemas using your preferred validation library. Here's an example using Valibot:\n\nts\n\n```\nimport * as v from 'valibot'\n\nconst querySchema = v.object({\n  name: v.optional(v.string()),\n})\n\nconst responseSchema = v.string()\n```\n\n* * *\n\n### 2. Create Routes\n\nUse `describeRoute` for route documentation and validation:\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { describeRoute } from 'hono-openapi'\n// You can import these for your preferred validation library\nimport {\n  resolver,\n  validator as vValidator,\n} from 'hono-openapi/valibot'\n\nconst app = new Hono()\n\napp.get(\n  '/',\n  describeRoute({\n    description: 'Say hello to the user',\n    responses: {\n      200: {\n        description: 'Successful response',\n        content: {\n          'text/plain': { schema: resolver(responseSchema) },\n        },\n      },\n    },\n  }),\n  vValidator('query', querySchema),\n  (c) => {\n    const query = c.req.valid('query')\n    return c.text(`Hello ${query?.name ?? 'Hono'}!`)\n  }\n)\n```\n\n* * *\n\n### 3. Generate OpenAPI Spec\n\nAdd an endpoint for your OpenAPI document:\n\nts\n\n```\nimport { openAPISpecs } from 'hono-openapi'\n\napp.get(\n  '/openapi',\n  openAPISpecs(app, {\n    documentation: {\n      info: {\n        title: 'Hono API',\n        version: '1.0.0',\n        description: 'Greeting API',\n      },\n      servers: [\n        { url: 'http://localhost:3000', description: 'Local Server' },\n      ],\n    },\n  })\n)\n```\n\n* * *\n\n### 🌐 Serve API Docs\n\nUse tools like Swagger UI or Scalar to visualize your OpenAPI specs. Here's an example using Scalar:\n\nts\n\n```\nimport { apiReference } from '@scalar/hono-api-reference'\n\napp.get(\n  '/docs',\n  apiReference({\n    theme: 'saturn',\n    spec: { url: '/openapi' },\n  })\n)\n```\n\n* * *.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/hono-openapi", "title": "Hono OpenAPI", "description": "hono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:23:07", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Hono OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "scrapeId": "1d47fd4f-684f-45ff-8783-904220abfda3", "sourceURL": "https://hono.dev/examples/hono-openapi", "url": "https://hono.dev/examples/hono-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 🔍 advanced features in hono?\n\nAssistant: To 🔍 advanced features in hono, here's what you do:\n### Add Security Definitions\n\nts\n\n```\napp.get(\n  '/openapi',\n  openAPISpecs(app, {\n    documentation: {\n      components: {\n        securitySchemes: {\n          bearerAuth: {\n            type: 'http',\n            scheme: 'bearer',\n            bearerFormat: 'JWT',\n          },\n        },\n      },\n      security: [{ bearerAuth: [] }],\n    },\n  })\n)\n```\n\n### Conditionally Hide Routes\n\nts\n\n```\napp.get(\n  '/',\n  describeRoute({\n    // ...\n    hide: process.env.NODE_ENV === 'production',\n  }),\n  (c) => c.text('Hidden Route')\n)\n```\n\n### Validate Responses\n\nts\n\n```\napp.get(\n  '/',\n  describeRoute({\n    // ...\n    validateResponse: true,\n  }),\n  (c) => c.text('Validated Response')\n)\n```\n\n* * *.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/hono-openapi", "title": "Hono OpenAPI", "description": "hono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:23:07", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Hono OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "scrapeId": "1d47fd4f-684f-45ff-8783-904220abfda3", "sourceURL": "https://hono.dev/examples/hono-openapi", "url": "https://hono.dev/examples/hono-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Hono OpenAPI in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation for Zod**:\n\n```yaml\npnpm add hono-openapi @hono/zod-validator zod zod-openapi\n```\n\nThis snippet shows you how to installation for zod, which is an important aspect of hono openapi.\n\n**Installation for Valibot**:\n\n```yaml\npnpm add hono-openapi @hono/valibot-validator valibot @valibot/to-json-schema\n```\n\nThis snippet shows you how to installation for valibot, which is an important aspect of hono openapi.\n\n**Installation for ArkType**:\n\n```yaml\npnpm add hono-openapi @hono/arktype-validator arktype\n```\n\nThis snippet shows you how to installation for arktype, which is an important aspect of hono openapi.\n\n**Installation for TypeBox**:\n\n```yaml\npnpm add hono-openapi @hono/typebox-validator @sinclair/typebox\n```\n\nThis snippet shows you how to installation for typebox, which is an important aspect of hono openapi.\n\n**Define Your Schemas using Valibot**:\n\n```yaml\nimport * as v from 'valibot'\n\nconst querySchema = v.object({\n  name: v.optional(v.string()),\n})\n\nconst responseSchema = v.string()\n```\n\nThis snippet shows you how to define your schemas using valibot, which is an important aspect of hono openapi.\n\n**Create Routes with describeRoute**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { describeRoute } from 'hono-openapi'\nimport {\n  resolver,\n  validator as vValidator,\n} from 'hono-openapi/valibot'\n\nconst app = new Hono()\n\napp.get(\n  '/',\n  describeRoute({\n    description: 'Say hello to the user',\n    responses: {\n      200: {\n        description: 'Successful response',\n        content: {\n          'text/plain': { schema: resolver(responseSchema) },\n        },\n      },\n    },\n  }),\n  vValidator('query', querySchema),\n  (c) => {\n    const query = c.req.valid('query')\n    return c.text(`Hello ${query?.name ?? 'Hono'}!`)\n  }\n)\n```\n\nThis snippet shows you how to create routes with describeroute, which is an important aspect of hono openapi.\n\n", "metadata": {"source_url": "https://hono.dev/examples/hono-openapi", "title": "Hono OpenAPI", "description": "hono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:23:07", "type": "code_examples", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Hono OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "scrapeId": "1d47fd4f-684f-45ff-8783-904220abfda3", "sourceURL": "https://hono.dev/examples/hono-openapi", "url": "https://hono.dev/examples/hono-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Hono OpenAPI in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse tools like Swagger UI or Scalar to visualize your OpenAPI specs.\n\nDefine your request and response schemas using your preferred validation library.\n\nAdd an endpoint for your OpenAPI document to generate the OpenAPI spec.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/hono-openapi", "title": "Hono OpenAPI", "description": "hono-openapi is a middleware which enables automatic OpenAPI documentation generation for your Hono API by integrating with validation libraries like Zod, Valibot, ArkType, and TypeBox.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:23:07", "type": "best_practices", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Hono OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "scrapeId": "1d47fd4f-684f-45ff-8783-904220abfda3", "sourceURL": "https://hono.dev/examples/hono-openapi", "url": "https://hono.dev/examples/hono-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Testing is in hono?\n\nAssistant: Sure, I'd be happy to explain Testing in hono.\n\n# Testing\n\nTesting is important. In actuality, it is easy to test Hono's applications. The way to create a test environment differs from each runtime, but the basic steps are the same. In this section, let's test with Cloudflare Workers and Jest.Here's a quick rundown of what this is about:\n\n## Request and Response\n\nAll you do is create a Request and pass it to the Hono application to validate the Response. And, you can use `app.request` the useful method.\n\nTIP\n\nFor a typed test client see the [testing helper](https://hono.dev/docs/helpers/testing).\n\nFor example, consider an application that provides the following REST API.\n\n```ts\napp.get('/posts', (c) => {\n  return c.text('Many posts')\n})\n\napp.post('/posts', (c) => {\n  return c.json(\n    {\n      message: 'Created',\n    },\n    201,\n    {\n      'X-Custom': 'Thank you',\n    }\n  )\n})\n```\n\nMake a request to `GET /posts` and test the response.\n\n```ts\ndescribe('Example', () => {\n  test('GET /posts', async () => {\n    const res = await app.request('/posts')\n    expect(res.status).toBe(200)\n    expect(await res.text()).toBe('Many posts')\n  })\n})\n```\n\nTo make a request to `POST /posts`, do the following.\n\n```ts\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nTo make a request to `POST /posts` with `JSON` data, do the following.\n\n```ts\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: JSON.stringify({ message: 'hello hono' }),\n    headers: new Headers({ 'Content-Type': 'application/json' }),\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nTo make a request to `POST /posts` with `multipart/form-data` data, do the following.\n\n```ts\ntest('POST /posts', async () => {\n  const formData = new FormData()\n  formData.append('message', 'hello')\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: formData,\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nYou can also pass an instance of the Request class.\n\n```ts\ntest('POST /posts', async () => {\n  const req = new Request('http://localhost/posts', {\n    method: 'POST',\n  })\n  const res = await app.request(req)\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nIn this way, you can test it as like an End-to-End.\n\n## Env\n\nTo set `c.env` for testing, you can pass it as the 3rd parameter to `app.request`. This is useful for mocking values like [Cloudflare Workers Bindings](https://hono.dev/getting-started/cloudflare-workers#bindings):\n\n```ts\nconst MOCK_ENV = {\n  API_HOST: 'example.com',\n  DB: {\n    prepare: () => {\n      /* mocked D1 */\n    },\n  },\n}\n\ntest('GET /posts', async () => {\n  const res = await app.request('/posts', {}, MOCK_ENV)\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/testing", "title": "Testing", "description": "Testing is important. In actuality, it is easy to test Hono's applications. The way to create a test environment differs from each runtime, but the basic steps are the same. In this section, let's test with Cloudflare Workers and Jest.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:23:58", "type": "overview", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "title": "Testing - Hono", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "5327d969-75e8-41e4-8003-bc6b3dbc1a09", "sourceURL": "https://hono.dev/docs/guides/testing", "url": "https://hono.dev/docs/guides/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I request and response in hono?\n\nAssistant: To request and response in hono, here's what you do:\nAll you do is create a Request and pass it to the Hono application to validate the Response. And, you can use `app.request` the useful method.\n\nTIP\n\nFor a typed test client see the [testing helper](https://hono.dev/docs/helpers/testing).\n\nFor example, consider an application that provides the following REST API.\n\n```ts\napp.get('/posts', (c) => {\n  return c.text('Many posts')\n})\n\napp.post('/posts', (c) => {\n  return c.json(\n    {\n      message: 'Created',\n    },\n    201,\n    {\n      'X-Custom': 'Thank you',\n    }\n  )\n})\n```\n\nMake a request to `GET /posts` and test the response.\n\n```ts\ndescribe('Example', () => {\n  test('GET /posts', async () => {\n    const res = await app.request('/posts')\n    expect(res.status).toBe(200)\n    expect(await res.text()).toBe('Many posts')\n  })\n})\n```\n\nTo make a request to `POST /posts`, do the following.\n\n```ts\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nTo make a request to `POST /posts` with `JSON` data, do the following.\n\n```ts\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: JSON.stringify({ message: 'hello hono' }),\n    headers: new Headers({ 'Content-Type': 'application/json' }),\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nTo make a request to `POST /posts` with `multipart/form-data` data, do the following.\n\n```ts\ntest('POST /posts', async () => {\n  const formData = new FormData()\n  formData.append('message', 'hello')\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: formData,\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nYou can also pass an instance of the Request class.\n\n```ts\ntest('POST /posts', async () => {\n  const req = new Request('http://localhost/posts', {\n    method: 'POST',\n  })\n  const res = await app.request(req)\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\nIn this way, you can test it as like an End-to-End..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/testing", "title": "Testing", "description": "Testing is important. In actuality, it is easy to test Hono's applications. The way to create a test environment differs from each runtime, but the basic steps are the same. In this section, let's test with Cloudflare Workers and Jest.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:23:58", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "title": "Testing - Hono", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "5327d969-75e8-41e4-8003-bc6b3dbc1a09", "sourceURL": "https://hono.dev/docs/guides/testing", "url": "https://hono.dev/docs/guides/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I env in hono?\n\nAssistant: To env in hono, here's what you do:\nTo set `c.env` for testing, you can pass it as the 3rd parameter to `app.request`. This is useful for mocking values like [Cloudflare Workers Bindings](https://hono.dev/getting-started/cloudflare-workers#bindings):\n\n```ts\nconst MOCK_ENV = {\n  API_HOST: 'example.com',\n  DB: {\n    prepare: () => {\n      /* mocked D1 */\n    },\n  },\n}\n\ntest('GET /posts', async () => {\n  const res = await app.request('/posts', {}, MOCK_ENV)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/testing", "title": "Testing", "description": "Testing is important. In actuality, it is easy to test Hono's applications. The way to create a test environment differs from each runtime, but the basic steps are the same. In this section, let's test with Cloudflare Workers and Jest.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:23:58", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "title": "Testing - Hono", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "5327d969-75e8-41e4-8003-bc6b3dbc1a09", "sourceURL": "https://hono.dev/docs/guides/testing", "url": "https://hono.dev/docs/guides/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Testing in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**GET /posts**:\n\n```yaml\n```ts\ndescribe('Example', () => {\n  test('GET /posts', async () => {\n    const res = await app.request('/posts')\n    expect(res.status).toBe(200)\n    expect(await res.text()).toBe('Many posts')\n  })\n})\n```\n```\n\nThis snippet shows you how to get /posts, which is an important aspect of testing.\n\n**POST /posts**:\n\n```yaml\n```ts\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n```\n\nThis snippet shows you how to post /posts, which is an important aspect of testing.\n\n**POST /posts with JSON data**:\n\n```yaml\n```ts\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: JSON.stringify({ message: 'hello hono' }),\n    headers: new Headers({ 'Content-Type': 'application/json' }),\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n```\n\nThis snippet shows you how to post /posts with json data, which is an important aspect of testing.\n\n**POST /posts with multipart/form-data**:\n\n```yaml\n```ts\ntest('POST /posts', async () => {\n  const formData = new FormData()\n  formData.append('message', 'hello')\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: formData,\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n```\n\nThis snippet shows you how to post /posts with multipart/form-data, which is an important aspect of testing.\n\n**POST /posts with Request instance**:\n\n```yaml\n```ts\ntest('POST /posts', async () => {\n  const req = new Request('http://localhost/posts', {\n    method: 'POST',\n  })\n  const res = await app.request(req)\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n```\n\nThis snippet shows you how to post /posts with request instance, which is an important aspect of testing.\n\n**Setting c.env for testing**:\n\n```yaml\n```ts\nconst MOCK_ENV = {\n  API_HOST: 'example.com',\n  DB: {\n    prepare: () => {\n      /* mocked D1 */\n    },\n  },\n}\n\ntest('GET /posts', async () => {\n  const res = await app.request('/posts', {}, MOCK_ENV)\n})\n```\n```\n\nThis snippet shows you how to setting c.env for testing, which is an important aspect of testing.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/testing", "title": "Testing", "description": "Testing is important. In actuality, it is easy to test Hono's applications. The way to create a test environment differs from each runtime, but the basic steps are the same. In this section, let's test with Cloudflare Workers and Jest.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:23:58", "type": "code_examples", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "title": "Testing - Hono", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "5327d969-75e8-41e4-8003-bc6b3dbc1a09", "sourceURL": "https://hono.dev/docs/guides/testing", "url": "https://hono.dev/docs/guides/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Testing in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor a typed test client see the testing helper.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/testing", "title": "Testing", "description": "Testing is important. In actuality, it is easy to test Hono's applications. The way to create a test environment differs from each runtime, but the basic steps are the same. In this section, let's test with Cloudflare Workers and Jest.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:23:58", "type": "best_practices", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "title": "Testing - Hono", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "5327d969-75e8-41e4-8003-bc6b3dbc1a09", "sourceURL": "https://hono.dev/docs/guides/testing", "url": "https://hono.dev/docs/guides/testing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what RPC is in hono?\n\nAssistant: Sure, I'd be happy to explain RPC in hono.\n\n# RPC\n\nThe RPC feature allows sharing of the API specifications between the server and the client.Here's a quick rundown of what this is about:\n\n## Server\n\nAll you need to do on the server side is to write a validator and create a variable `route`. The following example uses [Zod Validator](https://github.com/honojs/middleware/tree/main/packages/zod-validator).\n\n```ts\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      title: z.string(),\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json(\n      {\n        ok: true,\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```\n\nThen, export the type to share the API spec with the Client.\n\n```ts\nexport type AppType = typeof route\n```\n\n## Client\n\nOn the Client side, import `hc` and `AppType` first.\n\n```ts\nimport { AppType } from '.'\nimport { hc } from 'hono/client'\n```\n\n`hc` is a function to create a client. Pass `AppType` as Generics and specify the server URL as an argument.\n\n```ts\nconst client = hc<AppType>('http://localhost:8787/')\n```\n\nCall `client.{path}.{method}` and pass the data you wish to send to the server as an argument.\n\n```ts\nconst res = await client.posts.$post({\n  form: {\n    title: 'Hello',\n    body: 'Hono is a cool project',\n  },\n})\n```\n\nThe `res` is compatible with the \"fetch\" Response. You can retrieve data from the server with `res.json()`.\n\n```ts\nif (res.ok) {\n  const data = await res.json()\n  console.log(data.message)\n}\n```\n\n## Status code\n\nIf you explicitly specify the status code, such as `200` or `404`, in `c.json()`. It will be added as a type for passing to the client.\n\n```ts\n// server.ts\nconst app = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.json({ error: 'not found' }, 404) // Specify 404\n    }\n\n    return c.json({ post }, 200) // Specify 200\n  }\n)\n\nexport type AppType = typeof app\n```\n\nYou can get the data by the status code.\n\n```ts\n// client.ts\nconst client = hc<AppType>('http://localhost:8787/')\n\nconst res = await client.posts.$get({\n  query: {\n    id: '123',\n  },\n})\n\nif (res.status === 404) {\n  const data: { error: string } = await res.json()\n  console.log(data.error)\n}\n\nif (res.ok) {\n  const data: { post: Post } = await res.json()\n  console.log(data.post)\n}\n\n// { post: Post } | { error: string }\ntype ResponseType = InferResponseType<typeof client.posts.$get>\n\n// { post: Post }\ntype ResponseType200 = InferResponseType<\n  typeof client.posts.$get,\n  200\n>\n```\n\n## Not Found\n\nIf you want to use a client, you should not use `c.notFound()` for the Not Found response. The data that the client gets from the server cannot be inferred correctly.\n\n```ts\n// server.ts\nexport const routes = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.notFound() // ❌️\n    }\n\n    return c.json({ post })\n  }\n)\n\n// client.ts\nimport { hc } from 'hono/client'\n\nconst client = hc<typeof routes>('/')\n\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123',\n  },\n})\n\nconst data = await res.json() // 🙁 data is unknown\n```\n\nPlease use `c.json()` and specify the status code for the Not Found Response.\n\n```ts\nexport const routes = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.json({ error: 'not found' }, 404) // Specify 404\n    }\n\n    return c.json({ post }, 200) // Specify 200\n  }\n)\n```\n\n## Path parameters\n\nYou can also handle routes that include path parameters.\n\n```ts\nconst route = app.get(\n  '/posts/:id',\n  zValidator(\n    'query',\n    z.object({\n      page: z.string().optional(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json({\n      title: 'Night',\n      body: 'Time to sleep',\n    })\n  }\n)\n```\n\nSpecify the string you want to include in the path with `param`.\n\n```ts\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123',\n  },\n  query: {},\n})\n```\n\n## Headers\n\nYou can append the headers to the request.\n\n```ts\nconst res = await client.search.$get(\n  {\n    //...\n  },\n  {\n    headers: {\n      'X-Custom-Header': 'Here is Hono Client',\n      'X-User-Agent': 'hc',\n    },\n  }\n)\n```\n\nTo add a common header to all requests, specify it as an argument to the `hc` function.\n\n```ts\nconst client = hc<AppType>('/api', {\n  headers: {\n    Authorization: 'Bearer TOKEN',\n  },\n})\n```\n\n## `init` option\n\nYou can pass the fetch's `RequestInit` object to the request as the `init` option. Below is an example of aborting a Request.\n\n```ts\nimport { hc } from 'hono/client'\n\nconst client = hc<AppType>('http://localhost:8787/')\n\nconst abortController = new AbortController()\nconst res = await client.api.posts.$post(\n  {\n    json: {\n      // Request body\n    },\n  },\n  {\n    // RequestInit object\n    init: {\n      signal: abortController.signal,\n    },\n  }\n)\n\n// ...\n\nabortController.abort()\n```\n\nINFO\n\nA `RequestInit` object defined by `init` takes the highest priority. It could be used to overwrite things set by other options like `body | method | headers`.\n\n## $url()\n\nYou can get a `URL` object for accessing the endpoint by using `$url()`.\n\nWARNING\n\nYou have to pass in an absolute URL for this to work. Passing in a relative URL `/` will result in the following error.\n\n`Uncaught TypeError: Failed to construct 'URL': Invalid URL`\n\n```ts\n// ❌ Will throw error\nconst client = hc<AppType>('/')\nclient.api.post.$url()\n\n// ✅ Will work as expected\nconst client = hc<AppType>('http://localhost:8787/')\nclient.api.post.$url()\n```\n\n```ts\nconst route = app\n  .get('/api/posts', (c) => c.json({ posts }))\n  .get('/api/posts/:id', (c) => c.json({ post }))\n\nconst client = hc<typeof route>('http://localhost:8787/')\n\nlet url = client.api.posts.$url()\nconsole.log(url.pathname) // `/api/posts`\n\nurl = client.api.posts[':id'].$url({\n  param: {\n    id: '123',\n  },\n})\nconsole.log(url.pathname) // `/api/posts/123`\n```\n\n## Custom `fetch` method\n\nYou can set the custom `fetch` method.\n\nIn the following example script for Cloudflare Worker, the Service Bindings' `fetch` method is used instead of the default `fetch`.\n\n```toml\n# wrangler.toml\nservices = [\\\n  { binding = \"AUTH\", service = \"auth-service\" },\\\n]\n```\n\n```ts\n// src/client.ts\nconst client = hc<CreateProfileType>('/', {\n  fetch: c.env.AUTH.fetch.bind(c.env.AUTH),\n})\n```\n\n## Infer\n\nUse `InferRequestType` and `InferResponseType` to know the type of object to be requested and the type of object to be returned.\n\n```ts\nimport type { InferRequestType, InferResponseType } from 'hono/client'\n\n// InferRequestType\nconst $post = client.todo.$post\n type ReqType = InferRequestType<typeof $post>['form']\n\n// InferResponseType\ntype ResType = InferResponseType<typeof $post>\n```\n\n## Using SWR\n\nYou can also use a React Hook library such as [SWR](https://swr.vercel.app/).\n\n```tsx\nimport useSWR from 'swr'\nimport { hc } from 'hono/client'\nimport type { InferRequestType } from 'hono/client'\nimport { AppType } from '../functions/api/[[route]]'\n\nconst App = () => {\n  const client = hc<AppType>('/api')\n  const $get = client.hello.$get\n\n  const fetcher =\n    (arg: InferRequestType<typeof $get>) => async () => {\n      const res = await $get(arg)\n      return await res.json()\n    }\n\n  const { data, error, isLoading } = useSWR(\n    'api-hello',\n    fetcher({\n      query: {\n        name: 'SWR',\n      },\n    })\n  )\n\n  if (error) return <div>failed to load</div>\n  if (isLoading) return <div>loading...</div>\n\n  return <h1>{data?.message}</h1>\n}\n\nexport default App\n```\n\n## Using RPC with larger applications\n\nIn the case of a larger application, such as the example mentioned in [Building a larger application](https://hono.dev/docs/guides/best-practices#building-a-larger-application), you need to be careful about the type of inference. A simple way to do this is to chain the handlers so that the types are always inferred.\n\n```ts\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\n```ts\n// books.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list books'))\n  .post('/', (c) => c.json('create a book', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nYou can then import the sub-routers as you usually would, and make sure you chain their handlers as well, since this is the top level of the app in this case, this is the type we'll want to export.\n\n```ts\n// index.ts\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\nconst routes = app.route('/authors', authors).route('/books', books)\n\nexport default app\nexport type AppType = typeof routes\n```\n\nYou can now create a new client using the registered AppType and use it as you would normally.\n\n## Known issues\n\n### IDE performance\n\nWhen using RPC, the more routes you have, the slower your IDE will become. One of the main reasons for this is that massive amounts of type instantiations are executed to infer the type of your app.\n\nFor example, suppose your app has a route like this:\n\n```ts\n// app.ts\nexport const app = new Hono().get('foo/:id', (c) =>\n  c.json({ ok: true }, 200)\n)\n```\n\nHono will infer the type as follows:\n\n```ts\nexport const app = Hono<BlankEnv, BlankSchema, '/'>().get<\n  'foo/:id',\n  'foo/:id',\n  JSONRespondReturn<{ ok: boolean }, 200>,\n  BlankInput,\n  BlankEnv\n>('foo/:id', (c) => c.json({ ok: true }, 200))\n```\n\nThis is a type instantiation for a single route. While the user doesn't need to write these type arguments manually, which is a good thing, it's known that type instantiation takes much time. `tsserver` used in your IDE does this time consuming task every time you use the app. If you have a lot of routes, this can slow down your IDE significantly.\n\nHowever, we have some tips to mitigate this issue.\n\n#### Hono version mismatch\n\nIf your backend is separate from the frontend and lives in a different directory, you need to ensure that the Hono versions match. If you use one Hono version on the backend and another on the frontend, you'll run into issues such as \" _Type instantiation is excessively deep and possibly infinite_\".\n\n![hono-version-mismatch](https://github.com/user-attachments/assets/e4393c80-29dd-408d-93ab-d55c11ccca05)\n\n#### TypeScript project references\n\nLike in the case of [Hono version mismatch](https://hono.dev/docs/guides/rpc#hono-version-mismatch), you'll run into issues if your backend and frontend are separate. If you want to access code from the backend ( `AppType`, for example) on the frontend, you need to use [project references](https://www.typescriptlang.org/docs/handbook/project-references.html). TypeScript's project references allow one TypeScript codebase to access and use code from another TypeScript codebase. _(source: [Hono RPC And TypeScript Project References](https://catalins.tech/hono-rpc-in-monorepos/))_.\n\n#### Compile your code before using it (recommended)\n\n`tsc` can do heavy tasks like type instantiation at compile time! Then, `tsserver` doesn't need to instantiate all the type arguments every time you use it. It will make your IDE a lot faster!\n\nCompiling your client including the server app gives you the best performance. Put the following code in your project:\n\n```ts\nimport { app } from './app'\nimport { hc } from 'hono/client'\n\n// this is a trick to calculate the type when compiling\nconst client = hc<typeof app>('')\nexport type Client = typeof client\n\nexport const hcWithType = (...args: Parameters<typeof hc>): Client =>\n  hc<typeof app>(...args)\n```\n\nAfter compiling, you can use `hcWithType` instead of `hc` to get the client with the type already calculated.\n\n```ts\nconst client = hcWithType('http://localhost:8787/')\nconst res = await client.posts.$post({\n  form: {\n    title: 'Hello',\n    body: 'Hono is a cool project',\n  },\n})\n```\n\nIf your project is a monorepo, this solution does fit well. Using a tool like [`turborepo`](https://turbo.build/repo/docs), you can easily separate the server project and the client project and get better integration managing dependencies between them. Here is [a working example](https://github.com/m-shaka/hono-rpc-perf-tips-example).\n\nYou can also coordinate your build process manually with tools like `concurrently` or `npm-run-all`.\n\n#### Specify type arguments manually\n\nThis is a bit cumbersome, but you can specify type arguments manually to avoid type instantiation.\n\n```ts\nconst app = new Hono().get<'foo/:id'>('foo/:id', (c) =>\n  c.json({ ok: true }, 200)\n)\n```\n\nSpecifying just single type argument make a difference in performance, while it may take you a lot of time and effort if you have a lot of routes.\n\n#### Split your app and client into multiple files\n\nAs described in [Using RPC with larger applications](https://hono.dev/docs/guides/rpc#using-rpc-with-larger-applications), you can split your app into multiple apps. You can also create a client for each app:\n\n```ts\n// authors-cli.ts\nimport { app as authorsApp } from './authors'\nimport { hc } from 'hono/client'\n\nconst authorsClient = hc<typeof authorsApp>('/authors')\n\n// books-cli.ts\nimport { app as booksApp } from './books'\nimport { hc } from 'hono/client'\n\nconst booksClient = hc<typeof booksApp>('/books')\n```\n\nThis way, `tsserver` doesn't need to instantiate types for all routes at once.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "overview", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I server in hono?\n\nAssistant: To server in hono, here's what you do:\nAll you need to do on the server side is to write a validator and create a variable `route`. The following example uses [Zod Validator](https://github.com/honojs/middleware/tree/main/packages/zod-validator).\n\n```ts\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      title: z.string(),\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json(\n      {\n        ok: true,\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```\n\nThen, export the type to share the API spec with the Client.\n\n```ts\nexport type AppType = typeof route\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I client in hono?\n\nAssistant: To client in hono, here's what you do:\nOn the Client side, import `hc` and `AppType` first.\n\n```ts\nimport { AppType } from '.'\nimport { hc } from 'hono/client'\n```\n\n`hc` is a function to create a client. Pass `AppType` as Generics and specify the server URL as an argument.\n\n```ts\nconst client = hc<AppType>('http://localhost:8787/')\n```\n\nCall `client.{path}.{method}` and pass the data you wish to send to the server as an argument.\n\n```ts\nconst res = await client.posts.$post({\n  form: {\n    title: 'Hello',\n    body: 'Hono is a cool project',\n  },\n})\n```\n\nThe `res` is compatible with the \"fetch\" Response. You can retrieve data from the server with `res.json()`.\n\n```ts\nif (res.ok) {\n  const data = await res.json()\n  console.log(data.message)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I status code in hono?\n\nAssistant: To status code in hono, here's what you do:\nIf you explicitly specify the status code, such as `200` or `404`, in `c.json()`. It will be added as a type for passing to the client.\n\n```ts\n// server.ts\nconst app = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.json({ error: 'not found' }, 404) // Specify 404\n    }\n\n    return c.json({ post }, 200) // Specify 200\n  }\n)\n\nexport type AppType = typeof app\n```\n\nYou can get the data by the status code.\n\n```ts\n// client.ts\nconst client = hc<AppType>('http://localhost:8787/')\n\nconst res = await client.posts.$get({\n  query: {\n    id: '123',\n  },\n})\n\nif (res.status === 404) {\n  const data: { error: string } = await res.json()\n  console.log(data.error)\n}\n\nif (res.ok) {\n  const data: { post: Post } = await res.json()\n  console.log(data.post)\n}\n\n// { post: Post } | { error: string }\ntype ResponseType = InferResponseType<typeof client.posts.$get>\n\n// { post: Post }\ntype ResponseType200 = InferResponseType<\n  typeof client.posts.$get,\n  200\n>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I not found in hono?\n\nAssistant: To not found in hono, here's what you do:\nIf you want to use a client, you should not use `c.notFound()` for the Not Found response. The data that the client gets from the server cannot be inferred correctly.\n\n```ts\n// server.ts\nexport const routes = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.notFound() // ❌️\n    }\n\n    return c.json({ post })\n  }\n)\n\n// client.ts\nimport { hc } from 'hono/client'\n\nconst client = hc<typeof routes>('/')\n\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123',\n  },\n})\n\nconst data = await res.json() // 🙁 data is unknown\n```\n\nPlease use `c.json()` and specify the status code for the Not Found Response.\n\n```ts\nexport const routes = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.json({ error: 'not found' }, 404) // Specify 404\n    }\n\n    return c.json({ post }, 200) // Specify 200\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I path parameters in hono?\n\nAssistant: To path parameters in hono, here's what you do:\nYou can also handle routes that include path parameters.\n\n```ts\nconst route = app.get(\n  '/posts/:id',\n  zValidator(\n    'query',\n    z.object({\n      page: z.string().optional(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json({\n      title: 'Night',\n      body: 'Time to sleep',\n    })\n  }\n)\n```\n\nSpecify the string you want to include in the path with `param`.\n\n```ts\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123',\n  },\n  query: {},\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I headers in hono?\n\nAssistant: To headers in hono, here's what you do:\nYou can append the headers to the request.\n\n```ts\nconst res = await client.search.$get(\n  {\n    //...\n  },\n  {\n    headers: {\n      'X-Custom-Header': 'Here is Hono Client',\n      'X-User-Agent': 'hc',\n    },\n  }\n)\n```\n\nTo add a common header to all requests, specify it as an argument to the `hc` function.\n\n```ts\nconst client = hc<AppType>('/api', {\n  headers: {\n    Authorization: 'Bearer TOKEN',\n  },\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `init` option in hono?\n\nAssistant: To `init` option in hono, here's what you do:\nYou can pass the fetch's `RequestInit` object to the request as the `init` option. Below is an example of aborting a Request.\n\n```ts\nimport { hc } from 'hono/client'\n\nconst client = hc<AppType>('http://localhost:8787/')\n\nconst abortController = new AbortController()\nconst res = await client.api.posts.$post(\n  {\n    json: {\n      // Request body\n    },\n  },\n  {\n    // RequestInit object\n    init: {\n      signal: abortController.signal,\n    },\n  }\n)\n\n// ...\n\nabortController.abort()\n```\n\nINFO\n\nA `RequestInit` object defined by `init` takes the highest priority. It could be used to overwrite things set by other options like `body | method | headers`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I $url() in hono?\n\nAssistant: To $url() in hono, here's what you do:\nYou can get a `URL` object for accessing the endpoint by using `$url()`.\n\nWARNING\n\nYou have to pass in an absolute URL for this to work. Passing in a relative URL `/` will result in the following error.\n\n`Uncaught TypeError: Failed to construct 'URL': Invalid URL`\n\n```ts\n// ❌ Will throw error\nconst client = hc<AppType>('/')\nclient.api.post.$url()\n\n// ✅ Will work as expected\nconst client = hc<AppType>('http://localhost:8787/')\nclient.api.post.$url()\n```\n\n```ts\nconst route = app\n  .get('/api/posts', (c) => c.json({ posts }))\n  .get('/api/posts/:id', (c) => c.json({ post }))\n\nconst client = hc<typeof route>('http://localhost:8787/')\n\nlet url = client.api.posts.$url()\nconsole.log(url.pathname) // `/api/posts`\n\nurl = client.api.posts[':id'].$url({\n  param: {\n    id: '123',\n  },\n})\nconsole.log(url.pathname) // `/api/posts/123`\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I custom `fetch` method in hono?\n\nAssistant: To custom `fetch` method in hono, here's what you do:\nYou can set the custom `fetch` method.\n\nIn the following example script for Cloudflare Worker, the Service Bindings' `fetch` method is used instead of the default `fetch`.\n\n```toml\n# wrangler.toml\nservices = [\\\n  { binding = \"AUTH\", service = \"auth-service\" },\\\n]\n```\n\n```ts\n// src/client.ts\nconst client = hc<CreateProfileType>('/', {\n  fetch: c.env.AUTH.fetch.bind(c.env.AUTH),\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I infer in hono?\n\nAssistant: To infer in hono, here's what you do:\nUse `InferRequestType` and `InferResponseType` to know the type of object to be requested and the type of object to be returned.\n\n```ts\nimport type { InferRequestType, InferResponseType } from 'hono/client'\n\n// InferRequestType\nconst $post = client.todo.$post\n type ReqType = InferRequestType<typeof $post>['form']\n\n// InferResponseType\ntype ResType = InferResponseType<typeof $post>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I using swr in hono?\n\nAssistant: To using swr in hono, here's what you do:\nYou can also use a React Hook library such as [SWR](https://swr.vercel.app/).\n\n```tsx\nimport useSWR from 'swr'\nimport { hc } from 'hono/client'\nimport type { InferRequestType } from 'hono/client'\nimport { AppType } from '../functions/api/[[route]]'\n\nconst App = () => {\n  const client = hc<AppType>('/api')\n  const $get = client.hello.$get\n\n  const fetcher =\n    (arg: InferRequestType<typeof $get>) => async () => {\n      const res = await $get(arg)\n      return await res.json()\n    }\n\n  const { data, error, isLoading } = useSWR(\n    'api-hello',\n    fetcher({\n      query: {\n        name: 'SWR',\n      },\n    })\n  )\n\n  if (error) return <div>failed to load</div>\n  if (isLoading) return <div>loading...</div>\n\n  return <h1>{data?.message}</h1>\n}\n\nexport default App\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I using rpc with larger applications in hono?\n\nAssistant: To using rpc with larger applications in hono, here's what you do:\nIn the case of a larger application, such as the example mentioned in [Building a larger application](https://hono.dev/docs/guides/best-practices#building-a-larger-application), you need to be careful about the type of inference. A simple way to do this is to chain the handlers so that the types are always inferred.\n\n```ts\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\n```ts\n// books.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list books'))\n  .post('/', (c) => c.json('create a book', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nYou can then import the sub-routers as you usually would, and make sure you chain their handlers as well, since this is the top level of the app in this case, this is the type we'll want to export.\n\n```ts\n// index.ts\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\nconst routes = app.route('/authors', authors).route('/books', books)\n\nexport default app\nexport type AppType = typeof routes\n```\n\nYou can now create a new client using the registered AppType and use it as you would normally..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I known issues in hono?\n\nAssistant: To known issues in hono, here's what you do:\n### IDE performance\n\nWhen using RPC, the more routes you have, the slower your IDE will become. One of the main reasons for this is that massive amounts of type instantiations are executed to infer the type of your app.\n\nFor example, suppose your app has a route like this:\n\n```ts\n// app.ts\nexport const app = new Hono().get('foo/:id', (c) =>\n  c.json({ ok: true }, 200)\n)\n```\n\nHono will infer the type as follows:\n\n```ts\nexport const app = Hono<BlankEnv, BlankSchema, '/'>().get<\n  'foo/:id',\n  'foo/:id',\n  JSONRespondReturn<{ ok: boolean }, 200>,\n  BlankInput,\n  BlankEnv\n>('foo/:id', (c) => c.json({ ok: true }, 200))\n```\n\nThis is a type instantiation for a single route. While the user doesn't need to write these type arguments manually, which is a good thing, it's known that type instantiation takes much time. `tsserver` used in your IDE does this time consuming task every time you use the app. If you have a lot of routes, this can slow down your IDE significantly.\n\nHowever, we have some tips to mitigate this issue.\n\n#### Hono version mismatch\n\nIf your backend is separate from the frontend and lives in a different directory, you need to ensure that the Hono versions match. If you use one Hono version on the backend and another on the frontend, you'll run into issues such as \" _Type instantiation is excessively deep and possibly infinite_\".\n\n![hono-version-mismatch](https://github.com/user-attachments/assets/e4393c80-29dd-408d-93ab-d55c11ccca05)\n\n#### TypeScript project references\n\nLike in the case of [Hono version mismatch](https://hono.dev/docs/guides/rpc#hono-version-mismatch), you'll run into issues if your backend and frontend are separate. If you want to access code from the backend ( `AppType`, for example) on the frontend, you need to use [project references](https://www.typescriptlang.org/docs/handbook/project-references.html). TypeScript's project references allow one TypeScript codebase to access and use code from another TypeScript codebase. _(source: [Hono RPC And TypeScript Project References](https://catalins.tech/hono-rpc-in-monorepos/))_.\n\n#### Compile your code before using it (recommended)\n\n`tsc` can do heavy tasks like type instantiation at compile time! Then, `tsserver` doesn't need to instantiate all the type arguments every time you use it. It will make your IDE a lot faster!\n\nCompiling your client including the server app gives you the best performance. Put the following code in your project:\n\n```ts\nimport { app } from './app'\nimport { hc } from 'hono/client'\n\n// this is a trick to calculate the type when compiling\nconst client = hc<typeof app>('')\nexport type Client = typeof client\n\nexport const hcWithType = (...args: Parameters<typeof hc>): Client =>\n  hc<typeof app>(...args)\n```\n\nAfter compiling, you can use `hcWithType` instead of `hc` to get the client with the type already calculated.\n\n```ts\nconst client = hcWithType('http://localhost:8787/')\nconst res = await client.posts.$post({\n  form: {\n    title: 'Hello',\n    body: 'Hono is a cool project',\n  },\n})\n```\n\nIf your project is a monorepo, this solution does fit well. Using a tool like [`turborepo`](https://turbo.build/repo/docs), you can easily separate the server project and the client project and get better integration managing dependencies between them. Here is [a working example](https://github.com/m-shaka/hono-rpc-perf-tips-example).\n\nYou can also coordinate your build process manually with tools like `concurrently` or `npm-run-all`.\n\n#### Specify type arguments manually\n\nThis is a bit cumbersome, but you can specify type arguments manually to avoid type instantiation.\n\n```ts\nconst app = new Hono().get<'foo/:id'>('foo/:id', (c) =>\n  c.json({ ok: true }, 200)\n)\n```\n\nSpecifying just single type argument make a difference in performance, while it may take you a lot of time and effort if you have a lot of routes.\n\n#### Split your app and client into multiple files\n\nAs described in [Using RPC with larger applications](https://hono.dev/docs/guides/rpc#using-rpc-with-larger-applications), you can split your app into multiple apps. You can also create a client for each app:\n\n```ts\n// authors-cli.ts\nimport { app as authorsApp } from './authors'\nimport { hc } from 'hono/client'\n\nconst authorsClient = hc<typeof authorsApp>('/authors')\n\n// books-cli.ts\nimport { app as booksApp } from './books'\nimport { hc } from 'hono/client'\n\nconst booksClient = hc<typeof booksApp>('/books')\n```\n\nThis way, `tsserver` doesn't need to instantiate types for all routes at once..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for RPC in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Example**:\n\n```yaml\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      title: z.string(),\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json(\n      {\n        ok: true,\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```\n\nThis snippet shows you how to server example, which is an important aspect of rpc.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "code_examples", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using RPC in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor the RPC types to work properly in a monorepo, in both the Client's and Server's tsconfig.json files, set \"strict\": true in compilerOptions.\n\nIf you want to use a client, you should not use c.notFound() for the Not Found response. The data that the client gets from the server cannot be inferred correctly.\n\nA RequestInit object defined by init takes the highest priority. It could be used to overwrite things set by other options like body | method | headers.\n\nWhen using RPC, the more routes you have, the slower your IDE will become. One of the main reasons for this is that massive amounts of type instantiations are executed to infer the type of your app.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/rpc", "title": "RPC", "description": "The RPC feature allows sharing of the API specifications between the server and the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:25:55", "type": "best_practices", "page_metadata": {"language": "en-US", "favicon": "https://hono.dev/favicon.ico", "title": "RPC - Hono", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2ad02967-a92a-4137-adf9-bebe30fe9807", "sourceURL": "https://hono.dev/docs/guides/rpc", "url": "https://hono.dev/docs/guides/rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cookie Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Cookie Helper in hono.\n\n# Cookie Helper\n\nThe Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport {\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie,\n  deleteCookie,\n} from 'hono/cookie'\n```\n\n## Usage\n\n**NOTE**: Setting and retrieving signed cookies returns a Promise due to the async nature of the WebCrypto API, which is used to create HMAC SHA-256 signatures.\n\n```ts\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const allCookies = getCookie(c)\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  deleteCookie(c, 'delicious_cookie')\n  //\n})\n\napp.get('/signed-cookie', async (c) => {\n  const secret = 'secret ingredient'\n  // `getSignedCookie` will return `false` for a specified cookie if the signature was tampered with or is invalid\n  const allSignedCookies = await getSignedCookie(c, secret)\n  const fortuneCookie = await getSignedCookie(\n    c,\n    secret,\n    'fortune_cookie'\n  )\n  // ...\n  const anotherSecret = 'secret chocolate chips'\n  await setSignedCookie(c, 'great_cookie', 'blueberry', anotherSecret)\n  deleteCookie(c, 'great_cookie')\n  //\n})\n```\n\n## Options\n\n### `setCookie` & `setSignedCookie`\n\n- domain: `string`\n- expires: `Date`\n- httpOnly: `boolean`\n- maxAge: `number`\n- path: `string`\n- secure: `boolean`\n- sameSite: `'Strict'` | `'Lax'` | `'None'`\n- priority: `'Low' | 'Medium' | 'High'`\n- prefix: `secure` | `'host'`\n- partitioned: `boolean`\n\nExample:\n\n```ts\n// Regular cookies\nsetCookie(c, 'great_cookie', 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n  httpOnly: true,\n  maxAge: 1000,\n  expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n  sameSite: 'Strict',\n})\n\n// Signed cookies\nawait setSignedCookie(\n  c,\n  'fortune_cookie',\n  'lots-of-money',\n  'secret ingredient',\n  {\n    path: '/',\n    secure: true,\n    domain: 'example.com',\n    httpOnly: true,\n    maxAge: 1000,\n    expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n    sameSite: 'Strict',\n  }\n)\n```\n\n## `deleteCookie`\n\n- path: `string`\n- secure: `boolean`\n- domain: `string`\n\nExample:\n\n```ts\ndeleteCookie(c, 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n})\n```\n\n`deleteCookie` returns the deleted value:\n\n```ts\nconst deletedCookie = deleteCookie(c, 'delicious_cookie')\n```\n\n## `__Secure-` and `__Host-` prefix\n\nThe Cookie helper supports `__Secure-` and `__Host-` prefix for cookies names.\n\nIf you want to verify if the cookie name has a prefix, specify the prefix option.\n\n```ts\nconst securePrefixCookie = getCookie(c, 'yummy_cookie', 'secure')\nconst hostPrefixCookie = getCookie(c, 'yummy_cookie', 'host')\n\nconst securePrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'secure'\n)\nconst hostPrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'host'\n)\n```\n\nAlso, if you wish to specify a prefix when setting the cookie, specify a value for the prefix option.\n\n```ts\nsetCookie(c, 'delicious_cookie', 'macha', {\n  prefix: 'secure', // or `host`\n})\n\nawait setSignedCookie(\n  c,\n  'delicious_cookie',\n  'macha',\n  'secret choco chips',\n  {\n    prefix: 'secure', // or `host`\n  }\n)\n```\n\n## Following the best practices\n\nA New Cookie RFC (a.k.a cookie-bis) and CHIPS include some best practices for Cookie settings that developers should follow.\n\n- [RFC6265bis-13](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-13)\n  - `Max-Age`/ `Expires` limitation\n  - `__Host-`/ `__Secure-` prefix limitation\n- [CHIPS-01](https://www.ietf.org/archive/id/draft-cutler-httpbis-partitioned-cookies-01.html)\n  - `Partitioned` limitation\n\nHono is following the best practices. The cookie helper will throw an `Error` when parsing cookies under the following conditions:\n\n- The cookie name starts with `__Secure-`, but `secure` option is not set.\n- The cookie name starts with `__Host-`, but `secure` option is not set.\n- The cookie name starts with `__Host-`, but `path` is not `/`.\n- The cookie name starts with `__Host-`, but `domain` is set.\n- The `maxAge` option value is greater than 400 days.\n- The `expires` option value is 400 days later than the current time.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "overview", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport {\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie,\n  deleteCookie,\n} from 'hono/cookie'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "section_detail", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n**NOTE**: Setting and retrieving signed cookies returns a Promise due to the async nature of the WebCrypto API, which is used to create HMAC SHA-256 signatures.\n\n```ts\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const allCookies = getCookie(c)\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  deleteCookie(c, 'delicious_cookie')\n  //\n})\n\napp.get('/signed-cookie', async (c) => {\n  const secret = 'secret ingredient'\n  // `getSignedCookie` will return `false` for a specified cookie if the signature was tampered with or is invalid\n  const allSignedCookies = await getSignedCookie(c, secret)\n  const fortuneCookie = await getSignedCookie(\n    c,\n    secret,\n    'fortune_cookie'\n  )\n  // ...\n  const anotherSecret = 'secret chocolate chips'\n  await setSignedCookie(c, 'great_cookie', 'blueberry', anotherSecret)\n  deleteCookie(c, 'great_cookie')\n  //\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "section_detail", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### `setCookie` & `setSignedCookie`\n\n- domain: `string`\n- expires: `Date`\n- httpOnly: `boolean`\n- maxAge: `number`\n- path: `string`\n- secure: `boolean`\n- sameSite: `'Strict'` | `'Lax'` | `'None'`\n- priority: `'Low' | 'Medium' | 'High'`\n- prefix: `secure` | `'host'`\n- partitioned: `boolean`\n\nExample:\n\n```ts\n// Regular cookies\nsetCookie(c, 'great_cookie', 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n  httpOnly: true,\n  maxAge: 1000,\n  expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n  sameSite: 'Strict',\n})\n\n// Signed cookies\nawait setSignedCookie(\n  c,\n  'fortune_cookie',\n  'lots-of-money',\n  'secret ingredient',\n  {\n    path: '/',\n    secure: true,\n    domain: 'example.com',\n    httpOnly: true,\n    maxAge: 1000,\n    expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n    sameSite: 'Strict',\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "section_detail", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `deletecookie` in hono?\n\nAssistant: To `deletecookie` in hono, here's what you do:\n- path: `string`\n- secure: `boolean`\n- domain: `string`\n\nExample:\n\n```ts\ndeleteCookie(c, 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n})\n```\n\n`deleteCookie` returns the deleted value:\n\n```ts\nconst deletedCookie = deleteCookie(c, 'delicious_cookie')\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "section_detail", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `__secure-` and `__host-` prefix in hono?\n\nAssistant: To `__secure-` and `__host-` prefix in hono, here's what you do:\nThe Cookie helper supports `__Secure-` and `__Host-` prefix for cookies names.\n\nIf you want to verify if the cookie name has a prefix, specify the prefix option.\n\n```ts\nconst securePrefixCookie = getCookie(c, 'yummy_cookie', 'secure')\nconst hostPrefixCookie = getCookie(c, 'yummy_cookie', 'host')\n\nconst securePrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'secure'\n)\nconst hostPrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'host'\n)\n```\n\nAlso, if you wish to specify a prefix when setting the cookie, specify a value for the prefix option.\n\n```ts\nsetCookie(c, 'delicious_cookie', 'macha', {\n  prefix: 'secure', // or `host`\n})\n\nawait setSignedCookie(\n  c,\n  'delicious_cookie',\n  'macha',\n  'secret choco chips',\n  {\n    prefix: 'secure', // or `host`\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "section_detail", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I following the best practices in hono?\n\nAssistant: To following the best practices in hono, here's what you do:\nA New Cookie RFC (a.k.a cookie-bis) and CHIPS include some best practices for Cookie settings that developers should follow.\n\n- [RFC6265bis-13](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-13)\n  - `Max-Age`/ `Expires` limitation\n  - `__Host-`/ `__Secure-` prefix limitation\n- [CHIPS-01](https://www.ietf.org/archive/id/draft-cutler-httpbis-partitioned-cookies-01.html)\n  - `Partitioned` limitation\n\nHono is following the best practices. The cookie helper will throw an `Error` when parsing cookies under the following conditions:\n\n- The cookie name starts with `__Secure-`, but `secure` option is not set.\n- The cookie name starts with `__Host-`, but `secure` option is not set.\n- The cookie name starts with `__Host-`, but `path` is not `/`.\n- The cookie name starts with `__Host-`, but `domain` is set.\n- The `maxAge` option value is greater than 400 days.\n- The `expires` option value is 400 days later than the current time..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "section_detail", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cookie Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport {\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie,\n  deleteCookie,\n} from 'hono/cookie'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of cookie helper.\n\n**Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const allCookies = getCookie(c)\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  deleteCookie(c, 'delicious_cookie')\n  //\n})\n\napp.get('/signed-cookie', async (c) => {\n  const secret = 'secret ingredient'\n  const allSignedCookies = await getSignedCookie(c, secret)\n  const fortuneCookie = await getSignedCookie(\n    c,\n    secret,\n    'fortune_cookie'\n  )\n  // ...\n  const anotherSecret = 'secret chocolate chips'\n  await setSignedCookie(c, 'great_cookie', 'blueberry', anotherSecret)\n  deleteCookie(c, 'great_cookie')\n  //\n})\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of cookie helper.\n\n**Set Cookie Example**:\n\n```yaml\n```ts\n// Regular cookies\nsetCookie(c, 'great_cookie', 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n  httpOnly: true,\n  maxAge: 1000,\n  expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n  sameSite: 'Strict',\n})\n\n// Signed cookies\nawait setSignedCookie(\n  c,\n  'fortune_cookie',\n  'lots-of-money',\n  'secret ingredient',\n  {\n    path: '/',\n    secure: true,\n    domain: 'example.com',\n    httpOnly: true,\n    maxAge: 1000,\n    expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n    sameSite: 'Strict',\n  }\n)\n```\n```\n\nThis snippet shows you how to set cookie example, which is an important aspect of cookie helper.\n\n**Delete Cookie Example**:\n\n```yaml\n```ts\ndeleteCookie(c, 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n})\n```\n```\n\nThis snippet shows you how to delete cookie example, which is an important aspect of cookie helper.\n\n**Delete Cookie Return Example**:\n\n```yaml\n```ts\nconst deletedCookie = deleteCookie(c, 'delicious_cookie')\n```\n```\n\nThis snippet shows you how to delete cookie return example, which is an important aspect of cookie helper.\n\n**Secure and Host Prefix Example**:\n\n```yaml\n```ts\nconst securePrefixCookie = getCookie(c, 'yummy_cookie', 'secure')\nconst hostPrefixCookie = getCookie(c, 'yummy_cookie', 'host')\n\nconst securePrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'secure'\n)\nconst hostPrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'host'\n)\n```\n```\n\nThis snippet shows you how to secure and host prefix example, which is an important aspect of cookie helper.\n\n**Set Cookie with Prefix Example**:\n\n```yaml\n```ts\nsetCookie(c, 'delicious_cookie', 'macha', {\n  prefix: 'secure', // or `host`\n})\n\nawait setSignedCookie(\n  c,\n  'delicious_cookie',\n  'macha',\n  'secret choco chips',\n  {\n    prefix: 'secure', // or `host`\n  }\n)\n```\n```\n\nThis snippet shows you how to set cookie with prefix example, which is an important aspect of cookie helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "code_examples", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cookie Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nA New Cookie RFC (a.k.a cookie-bis) and CHIPS include some best practices for Cookie settings that developers should follow.\n\nHono is following the best practices. The cookie helper will throw an `Error` when parsing cookies under the following conditions:\n\nThe cookie name starts with `__Secure-`, but `secure` option is not set.\n\nThe cookie name starts with `__Host-`, but `secure` option is not set.\n\nThe cookie name starts with `__Host-`, but `path` is not `/`.\n\nThe cookie name starts with `__Host-`, but `domain` is set.\n\nThe `maxAge` option value is greater than 400 days.\n\nThe `expires` option value is 400 days later than the current time.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/cookie", "title": "Cookie Helper", "description": "The Cookie Helper provides an easy interface to manage cookies, enabling developers to set, parse, and delete cookies seamlessly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:37:36", "type": "best_practices", "page_metadata": {"og:type": "website", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cookie Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "0df440e6-5895-4dfc-9d00-9bc0ae9e1df8", "sourceURL": "https://hono.dev/docs/helpers/cookie", "url": "https://hono.dev/docs/helpers/cookie", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Middleware in hono.\n\n# Middleware\n\nMiddleware is executed before and after the Handler and handles the Request and Response.Here's a quick rundown of what this is about:\n\n## Overview\n\nWe call the primitive that returns Response as \"Handler\". \"Middleware\" is executed before and after the Handler and handles the Request and Response. It's like an onion structure.\n\n## Example\n\nFor example, we can write the middleware to add the \"X-Response-Time\" header.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/middleware", "title": "Middleware", "description": "Middleware is executed before and after the Handler and handles the Request and Response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:37:56", "type": "overview", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "e9052965-eaa2-45f3-a557-cbad0ca10c4d", "sourceURL": "https://hono.dev/docs/concepts/middleware", "url": "https://hono.dev/docs/concepts/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I overview in hono?\n\nAssistant: To overview in hono, here's what you do:\nWe call the primitive that returns Response as \"Handler\". \"Middleware\" is executed before and after the Handler and handles the Request and Response. It's like an onion structure..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/middleware", "title": "Middleware", "description": "Middleware is executed before and after the Handler and handles the Request and Response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:37:56", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "e9052965-eaa2-45f3-a557-cbad0ca10c4d", "sourceURL": "https://hono.dev/docs/concepts/middleware", "url": "https://hono.dev/docs/concepts/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I example in hono?\n\nAssistant: To example in hono, here's what you do:\nFor example, we can write the middleware to add the \"X-Response-Time\" header..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/middleware", "title": "Middleware", "description": "Middleware is executed before and after the Handler and handles the Request and Response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:37:56", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "e9052965-eaa2-45f3-a557-cbad0ca10c4d", "sourceURL": "https://hono.dev/docs/concepts/middleware", "url": "https://hono.dev/docs/concepts/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Middleware Example**:\n\n```yaml\napp.use(async (c, next) => {\n  const start = Date.now()\n  await next()\n  const end = Date.now()\n\n  c.res.headers.set('X-Response-Time', `${end - start}`)\n})\n```\n\nThis snippet shows you how to middleware example, which is an important aspect of middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/concepts/middleware", "title": "Middleware", "description": "Middleware is executed before and after the Handler and handles the Request and Response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:37:56", "type": "code_examples", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "e9052965-eaa2-45f3-a557-cbad0ca10c4d", "sourceURL": "https://hono.dev/docs/concepts/middleware", "url": "https://hono.dev/docs/concepts/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWith this simple method, we can write our own custom middleware and we can use the built-in or third party middleware.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/concepts/middleware", "title": "Middleware", "description": "Middleware is executed before and after the Handler and handles the Request and Response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:37:56", "type": "best_practices", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "title": "Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "e9052965-eaa2-45f3-a557-cbad0ca10c4d", "sourceURL": "https://hono.dev/docs/concepts/middleware", "url": "https://hono.dev/docs/concepts/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Example Documentation Page is in hono?\n\nAssistant: Sure, I'd be happy to explain Example Documentation Page in hono.\n\n# Example Documentation Page\n\nThis page provides an overview of the example documentation.Here's a quick rundown of what this is about:\n\n## Introduction\n\nThis section introduces the main concepts of the documentation.\n\n## Installation\n\nFollow these steps to install the software.\n\n## Usage\n\nThis section explains how to use the software effectively.\n\n## Troubleshooting\n\nCommon issues and their solutions are discussed here.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I introduction in hono?\n\nAssistant: To introduction in hono, here's what you do:\nThis section introduces the main concepts of the documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I installation in hono?\n\nAssistant: To installation in hono, here's what you do:\nFollow these steps to install the software..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nThis section explains how to use the software effectively..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I troubleshooting in hono?\n\nAssistant: To troubleshooting in hono, here's what you do:\nCommon issues and their solutions are discussed here..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Example Documentation Page in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Installation Command**:\n\n```yaml\nsudo apt-get install example-software\n```\n\nThis snippet shows you how to basic installation command, which is an important aspect of example documentation page.\n\n**Configuration Example**:\n\n```yaml\nconfig.set('key', 'value');\n```\n\nThis snippet shows you how to configuration example, which is an important aspect of example documentation page.\n\n", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Example Documentation Page in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways read the installation instructions carefully.\n\nKeep your software updated to the latest version.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/api/request", "title": "Example Documentation Page", "description": "This page provides an overview of the example documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:35", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "title": "HonoRequest - Hono", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "4f303809-fe94-4b85-b01e-a56eb152ffaa", "sourceURL": "https://hono.dev/docs/api/request", "url": "https://hono.dev/docs/api/request", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Frequently Asked Questions is in hono?\n\nAssistant: Sure, I'd be happy to explain Frequently Asked Questions in hono.\n\n# Frequently Asked Questions\n\nThis guide is a collection of frequently asked questions (FAQ) about Hono and how to resolve them.Here's a quick rundown of what this is about:\n\n## Is there an official Renovate config for Hono?\n\nThe Hono teams does not currently maintain Renovate Configuration. Therefore, please use third-party renovate-config as follows.\n\nIn your `renovate.json` :\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/faq", "title": "Frequently Asked Questions", "description": "This guide is a collection of frequently asked questions (FAQ) about Hono and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:40", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "title": "Frequently Asked Questions - Hono", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "4ac2f9ea-751a-4c72-9ac9-2bb50ae76681", "sourceURL": "https://hono.dev/docs/guides/faq", "url": "https://hono.dev/docs/guides/faq", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I is there an official renovate config for hono? in hono?\n\nAssistant: To is there an official renovate config for hono? in hono, here's what you do:\nThe Hono teams does not currently maintain Renovate Configuration. Therefore, please use third-party renovate-config as follows.\n\nIn your `renovate.json` :.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/faq", "title": "Frequently Asked Questions", "description": "This guide is a collection of frequently asked questions (FAQ) about Hono and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:40", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "title": "Frequently Asked Questions - Hono", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "4ac2f9ea-751a-4c72-9ac9-2bb50ae76681", "sourceURL": "https://hono.dev/docs/guides/faq", "url": "https://hono.dev/docs/guides/faq", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Frequently Asked Questions in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Renovate Configuration Example**:\n\n```yaml\n// renovate.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"github>shinGangan/renovate-config-hono\"\n  ]\n}\n```\n\nThis snippet shows you how to renovate configuration example, which is an important aspect of frequently asked questions.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/faq", "title": "Frequently Asked Questions", "description": "This guide is a collection of frequently asked questions (FAQ) about Hono and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:40", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "title": "Frequently Asked Questions - Hono", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "4ac2f9ea-751a-4c72-9ac9-2bb50ae76681", "sourceURL": "https://hono.dev/docs/guides/faq", "url": "https://hono.dev/docs/guides/faq", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Frequently Asked Questions in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSee renovate-config-hono repository for more details.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/faq", "title": "Frequently Asked Questions", "description": "This guide is a collection of frequently asked questions (FAQ) about Hono and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:40", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "title": "Frequently Asked Questions - Hono", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "4ac2f9ea-751a-4c72-9ac9-2bb50ae76681", "sourceURL": "https://hono.dev/docs/guides/faq", "url": "https://hono.dev/docs/guides/faq", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what ConnInfo Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain ConnInfo Helper in hono.\n\n# ConnInfo Helper\n\nThe ConnInfo Helper helps you to get the connection information. For example, you can get the client's remote address easily.Here's a quick rundown of what this is about:\n\n## Import\n\nCloudflare WorkersDenoBunVercelLambda@EdgeNode.js\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/cloudflare-workers'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/deno'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/vercel'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/lambda-edge'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from '@hono/node-server/conninfo'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.get('/', (c) => {\n  const info = getConnInfo(c) // info is `ConnInfo`\n  return c.text(`Your remote address is ${info.remote.address}`)\n})\n```\n\n## Type Definitions\n\nThe type definitions of the values that you can get from `getConnInfo()` are the following:\n\n```ts\ntype AddressType = 'IPv6' | 'IPv4' | undefined\n\ntype NetAddrInfo = {\n  /**\n   * Transport protocol type\n   */\n  transport?: 'tcp' | 'udp'\n  /**\n   * Transport port number\n   */\n  port?: number\n\n  address?: string\n  addressType?: AddressType\n} & (\n  | {\n      /**\n       * Host name such as IP Addr\n       */\n      address: string\n\n      /**\n       * Host name type\n       */\n      addressType: AddressType\n    }\n  | {}\n)\n\n/**\n * HTTP Connection information\n */\ninterface ConnInfo {\n  /**\n   * Remote information\n   */\n  remote: NetAddrInfo\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/conninfo", "title": "ConnInfo Helper", "description": "The ConnInfo Helper helps you to get the connection information. For example, you can get the client's remote address easily.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:39:52", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ConnInfo Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a3dc2ef1-ead4-4bf0-860d-8e9a7500ccf4", "sourceURL": "https://hono.dev/docs/helpers/conninfo", "url": "https://hono.dev/docs/helpers/conninfo", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\nCloudflare WorkersDenoBunVercelLambda@EdgeNode.js\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/cloudflare-workers'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/deno'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/vercel'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/lambda-edge'\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from '@hono/node-server/conninfo'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/conninfo", "title": "ConnInfo Helper", "description": "The ConnInfo Helper helps you to get the connection information. For example, you can get the client's remote address easily.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:39:52", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ConnInfo Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a3dc2ef1-ead4-4bf0-860d-8e9a7500ccf4", "sourceURL": "https://hono.dev/docs/helpers/conninfo", "url": "https://hono.dev/docs/helpers/conninfo", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.get('/', (c) => {\n  const info = getConnInfo(c) // info is `ConnInfo`\n  return c.text(`Your remote address is ${info.remote.address}`)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/conninfo", "title": "ConnInfo Helper", "description": "The ConnInfo Helper helps you to get the connection information. For example, you can get the client's remote address easily.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:39:52", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ConnInfo Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a3dc2ef1-ead4-4bf0-860d-8e9a7500ccf4", "sourceURL": "https://hono.dev/docs/helpers/conninfo", "url": "https://hono.dev/docs/helpers/conninfo", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I type definitions in hono?\n\nAssistant: To type definitions in hono, here's what you do:\nThe type definitions of the values that you can get from `getConnInfo()` are the following:\n\n```ts\ntype AddressType = 'IPv6' | 'IPv4' | undefined\n\ntype NetAddrInfo = {\n  /**\n   * Transport protocol type\n   */\n  transport?: 'tcp' | 'udp'\n  /**\n   * Transport port number\n   */\n  port?: number\n\n  address?: string\n  addressType?: AddressType\n} & (\n  | {\n      /**\n       * Host name such as IP Addr\n       */\n      address: string\n\n      /**\n       * Host name type\n       */\n      addressType: AddressType\n    }\n  | {}\n)\n\n/**\n * HTTP Connection information\n */\ninterface ConnInfo {\n  /**\n   * Remote information\n   */\n  remote: NetAddrInfo\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/conninfo", "title": "ConnInfo Helper", "description": "The ConnInfo Helper helps you to get the connection information. For example, you can get the client's remote address easily.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:39:52", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ConnInfo Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a3dc2ef1-ead4-4bf0-860d-8e9a7500ccf4", "sourceURL": "https://hono.dev/docs/helpers/conninfo", "url": "https://hono.dev/docs/helpers/conninfo", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for ConnInfo Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example for Cloudflare Workers**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/cloudflare-workers'\n```\n\nThis snippet shows you how to import example for cloudflare workers, which is an important aspect of conninfo helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/conninfo", "title": "ConnInfo Helper", "description": "The ConnInfo Helper helps you to get the connection information. For example, you can get the client's remote address easily.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:39:52", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ConnInfo Helper - Hono", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a3dc2ef1-ead4-4bf0-860d-8e9a7500ccf4", "sourceURL": "https://hono.dev/docs/helpers/conninfo", "url": "https://hono.dev/docs/helpers/conninfo", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cloudflare Testing is in hono?\n\nAssistant: Sure, I'd be happy to explain Cloudflare Testing in hono.\n\n# Cloudflare Testing\n\nYou can implement the Cloudflare testing easily with `@cloudflare/vitest-pool-workers` for which some configuration has to be made priorly more on that can be found over in Cloudflare Docs about testing.Here's a quick rundown of what this is about:\n\n## Cloudflare Testing\n\nCloudflare Testing with vitest pool workers provide a `cloudflare:test` module at runtime which exposes the env passed in as the second argument during testing more on it in the Cloudflare Test APIs section.\n\n## Configuration Example\n\nBelow is an example of the configuration one can make:\n\n### vitest.config.ts\n```ts\nimport { defineWorkersProject } from '@cloudflare/vitest-pool-workers/config'\n\nexport default defineWorkersProject(() => {\n  return {\n    test: {\n      globals: true,\n      poolOptions: {\n        workers: { wrangler: { configPath: './wrangler.toml' } },\n      },\n    },\n  }\n})\n```\n\n### wrangler.toml\n```toml\ncompatibility_date = \"2024-09-09\"\ncompatibility_flags = [ \"nodejs_compat\" ]\n\n[vars]\nMY_VAR = \"my variable\"\n```\n\nImagine the application like the following:\n\n### src/index.ts\n```ts\nimport { Hono } from 'hono'\n\ntype Bindings = {\n  MY_VAR: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/hello', (c) => {\n  return c.json({ hello: 'world', var: c.env.MY_VAR })\n})\n\nexport default app\n```\n\nYou can test the application with Cloudflare Bindings by passing in the `env` exposed from the module `cloudflare:test` to `app.request()`: \n\n### src/index.test.ts\n```ts\nimport { env } from 'cloudflare:test'\nimport app from './index'\n\ndescribe('Example', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('/hello', {}, env)\n\n    expect(res.status).toBe(200)\n    expect(await res.json()).toEqual({\n      hello: 'world',\n      var: 'my variable',\n    })\n  })\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-vitest", "title": "Cloudflare Testing", "description": "You can implement the Cloudflare testing easily with `@cloudflare/vitest-pool-workers` for which some configuration has to be made priorly more on that can be found over in Cloudflare Docs about testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:24", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Cloudflare Testing - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "og:type": "website", "scrapeId": "81beea5b-a490-48d3-aa36-a6d4af717a37", "sourceURL": "https://hono.dev/examples/cloudflare-vitest", "url": "https://hono.dev/examples/cloudflare-vitest", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I cloudflare testing in hono?\n\nAssistant: To cloudflare testing in hono, here's what you do:\nCloudflare Testing with vitest pool workers provide a `cloudflare:test` module at runtime which exposes the env passed in as the second argument during testing more on it in the Cloudflare Test APIs section..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-vitest", "title": "Cloudflare Testing", "description": "You can implement the Cloudflare testing easily with `@cloudflare/vitest-pool-workers` for which some configuration has to be made priorly more on that can be found over in Cloudflare Docs about testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:24", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Cloudflare Testing - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "og:type": "website", "scrapeId": "81beea5b-a490-48d3-aa36-a6d4af717a37", "sourceURL": "https://hono.dev/examples/cloudflare-vitest", "url": "https://hono.dev/examples/cloudflare-vitest", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I configuration example in hono?\n\nAssistant: To configuration example in hono, here's what you do:\nBelow is an example of the configuration one can make:\n\n### vitest.config.ts\n```ts\nimport { defineWorkersProject } from '@cloudflare/vitest-pool-workers/config'\n\nexport default defineWorkersProject(() => {\n  return {\n    test: {\n      globals: true,\n      poolOptions: {\n        workers: { wrangler: { configPath: './wrangler.toml' } },\n      },\n    },\n  }\n})\n```\n\n### wrangler.toml\n```toml\ncompatibility_date = \"2024-09-09\"\ncompatibility_flags = [ \"nodejs_compat\" ]\n\n[vars]\nMY_VAR = \"my variable\"\n```\n\nImagine the application like the following:\n\n### src/index.ts\n```ts\nimport { Hono } from 'hono'\n\ntype Bindings = {\n  MY_VAR: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/hello', (c) => {\n  return c.json({ hello: 'world', var: c.env.MY_VAR })\n})\n\nexport default app\n```\n\nYou can test the application with Cloudflare Bindings by passing in the `env` exposed from the module `cloudflare:test` to `app.request()`: \n\n### src/index.test.ts\n```ts\nimport { env } from 'cloudflare:test'\nimport app from './index'\n\ndescribe('Example', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('/hello', {}, env)\n\n    expect(res.status).toBe(200)\n    expect(await res.json()).toEqual({\n      hello: 'world',\n      var: 'my variable',\n    })\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-vitest", "title": "Cloudflare Testing", "description": "You can implement the Cloudflare testing easily with `@cloudflare/vitest-pool-workers` for which some configuration has to be made priorly more on that can be found over in Cloudflare Docs about testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:24", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Cloudflare Testing - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "og:type": "website", "scrapeId": "81beea5b-a490-48d3-aa36-a6d4af717a37", "sourceURL": "https://hono.dev/examples/cloudflare-vitest", "url": "https://hono.dev/examples/cloudflare-vitest", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cloudflare Testing in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**vitest.config.ts**:\n\n```yaml\nimport { defineWorkersProject } from '@cloudflare/vitest-pool-workers/config'\n\nexport default defineWorkersProject(() => {\n  return {\n    test: {\n      globals: true,\n      poolOptions: {\n        workers: { wrangler: { configPath: './wrangler.toml' } },\n      },\n    },\n  }\n})\n```\n\nThis snippet shows you how to vitest.config.ts, which is an important aspect of cloudflare testing.\n\n**wrangler.toml**:\n\n```yaml\ncompatibility_date = \"2024-09-09\"\ncompatibility_flags = [ \"nodejs_compat\" ]\n\n[vars]\nMY_VAR = \"my variable\"\n```\n\nThis snippet shows you how to wrangler.toml, which is an important aspect of cloudflare testing.\n\n**src/index.ts**:\n\n```yaml\nimport { Hono } from 'hono'\n\ntype Bindings = {\n  MY_VAR: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/hello', (c) => {\n  return c.json({ hello: 'world', var: c.env.MY_VAR })\n})\n\nexport default app\n```\n\nThis snippet shows you how to src/index.ts, which is an important aspect of cloudflare testing.\n\n**src/index.test.ts**:\n\n```yaml\nimport { env } from 'cloudflare:test'\nimport app from './index'\n\ndescribe('Example', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('/hello', {}, env)\n\n    expect(res.status).toBe(200)\n    expect(await res.json()).toEqual({\n      hello: 'world',\n      var: 'my variable',\n    })\n  })\n})\n```\n\nThis snippet shows you how to src/index.test.ts, which is an important aspect of cloudflare testing.\n\n", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-vitest", "title": "Cloudflare Testing", "description": "You can implement the Cloudflare testing easily with `@cloudflare/vitest-pool-workers` for which some configuration has to be made priorly more on that can be found over in Cloudflare Docs about testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:24", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Cloudflare Testing - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "og:type": "website", "scrapeId": "81beea5b-a490-48d3-aa36-a6d4af717a37", "sourceURL": "https://hono.dev/examples/cloudflare-vitest", "url": "https://hono.dev/examples/cloudflare-vitest", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cloudflare Testing in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRefer to the Cloudflare Docs about testing for more detailed information.\n\nUse the `cloudflare:test` module to access environment variables during testing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-vitest", "title": "Cloudflare Testing", "description": "You can implement the Cloudflare testing easily with `@cloudflare/vitest-pool-workers` for which some configuration has to be made priorly more on that can be found over in Cloudflare Docs about testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:24", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Cloudflare Testing - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "og:type": "website", "scrapeId": "81beea5b-a490-48d3-aa36-a6d4af717a37", "sourceURL": "https://hono.dev/examples/cloudflare-vitest", "url": "https://hono.dev/examples/cloudflare-vitest", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Routers is in hono?\n\nAssistant: Sure, I'd be happy to explain Routers in hono.\n\n# Routers\n\nThe routers are the most important features for Hono. Hono has five routers.Here's a quick rundown of what this is about:\n\n## RegExpRouter\n\n**RegExpRouter** is the fastest router in the JavaScript world.\n\nAlthough this is called \"RegExp\" it is not an Express-like implementation using [path-to-regexp](https://github.com/pillarjs/path-to-regexp). They are using linear loops. Therefore, regular expression matching will be performed for all routes and the performance will be degraded as you have more routes.\n\n![Router Linear](https://hono.dev/images/router-linear.jpg)\n\nHono's RegExpRouter turns the route pattern into \"one large regular expression\". Then it can get the result with one-time matching.\n\n![Router RegExp](https://hono.dev/images/router-regexp.jpg)\n\nThis works faster than methods that use tree-based algorithms such as radix-tree in most cases.\n\n## TrieRouter\n\n**TrieRouter** is the router using the Trie-tree algorithm. It does not use linear loops as same as RegExpRouter.\n\n![Router Tree](https://hono.dev/images/router-tree.jpg)\n\nThis router is not as fast as the RegExpRouter, but it is much faster than the Express router. TrieRouter supports all patterns though RegExpRouter does not.\n\n## SmartRouter\n\nRegExpRouter doesn't support all routing patterns. Therefore, it's usually used in combination with another router that does support all patterns.\n\n**SmartRouter** will select the best router by inferring from the registered routers. Hono uses SmartRouter and the two routers by default:\n\n```ts\n// Inside the core of Hono.\nreadonly defaultRouter: Router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\nWhen the application starts, SmartRouter detects the fastest router based on routing and continues to use it.\n\n## LinearRouter\n\nRegExpRouter is fast, but the route registration phase can be slightly slow. So, it's not suitable for an environment that initializes with every request.\n\n**LinearRouter** is optimized for \"one shot\" situations. Route registration is significantly faster than with RegExpRouter because it adds the route without compiling strings, using a linear approach.\n\nThe following is one of the benchmark results, which includes the route registration phase.\n\n```\n• GET /user/lookup/username/hey\n----------------------------------------------------- -----------------------------\nLinearRouter     1.82 µs/iter      (1.7 µs … 2.04 µs)   1.84 µs   2.04 µs   2.04 µs\nMedleyRouter     4.44 µs/iter     (4.34 µs … 4.54 µs)   4.48 µs   4.54 µs   4.54 µs\nFindMyWay       60.36 µs/iter      (45.5 µs … 1.9 ms)  59.88 µs  78.13 µs  82.92 µs\nKoaTreeRouter    3.81 µs/iter     (3.73 µs … 3.87 µs)   3.84 µs   3.87 µs   3.87 µs\nTrekRouter       5.84 µs/iter     (5.75 µs … 6.04 µs)   5.86 µs   6.04 µs   6.04 µs\n\nsummary for GET /user/lookup/username/hey\n  LinearRouter\n   2.1x faster than KoaTreeRouter\n   2.45x faster than MedleyRouter\n   3.21x faster than TrekRouter\n   33.24x faster than FindMyWay\n```\n\nFor situations like Fastly Compute, it's better to use LinearRouter with the `hono/quick` preset.\n\n## PatternRouter\n\n**PatternRouter** is the smallest router among Hono's routers.\n\nWhile Hono is already compact, if you need to make it even smaller for an environment with limited resources, you can use PatternRouter.\n\nAn application using only PatternRouter is under 15KB in size.\n\n```\n$ npx wrangler deploy --minify ./src/index.ts\n ⛅️ wrangler 3.20.0\n-------------------\nTotal Upload: 14.68 KiB / gzip: 5.38 KiB\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I regexprouter in hono?\n\nAssistant: To regexprouter in hono, here's what you do:\n**RegExpRouter** is the fastest router in the JavaScript world.\n\nAlthough this is called \"RegExp\" it is not an Express-like implementation using [path-to-regexp](https://github.com/pillarjs/path-to-regexp). They are using linear loops. Therefore, regular expression matching will be performed for all routes and the performance will be degraded as you have more routes.\n\n![Router Linear](https://hono.dev/images/router-linear.jpg)\n\nHono's RegExpRouter turns the route pattern into \"one large regular expression\". Then it can get the result with one-time matching.\n\n![Router RegExp](https://hono.dev/images/router-regexp.jpg)\n\nThis works faster than methods that use tree-based algorithms such as radix-tree in most cases..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I trierouter in hono?\n\nAssistant: To trierouter in hono, here's what you do:\n**TrieRouter** is the router using the Trie-tree algorithm. It does not use linear loops as same as RegExpRouter.\n\n![Router Tree](https://hono.dev/images/router-tree.jpg)\n\nThis router is not as fast as the RegExpRouter, but it is much faster than the Express router. TrieRouter supports all patterns though RegExpRouter does not..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I smartrouter in hono?\n\nAssistant: To smartrouter in hono, here's what you do:\nRegExpRouter doesn't support all routing patterns. Therefore, it's usually used in combination with another router that does support all patterns.\n\n**SmartRouter** will select the best router by inferring from the registered routers. Hono uses SmartRouter and the two routers by default:\n\n```ts\n// Inside the core of Hono.\nreadonly defaultRouter: Router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\nWhen the application starts, SmartRouter detects the fastest router based on routing and continues to use it..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I linearrouter in hono?\n\nAssistant: To linearrouter in hono, here's what you do:\nRegExpRouter is fast, but the route registration phase can be slightly slow. So, it's not suitable for an environment that initializes with every request.\n\n**LinearRouter** is optimized for \"one shot\" situations. Route registration is significantly faster than with RegExpRouter because it adds the route without compiling strings, using a linear approach.\n\nThe following is one of the benchmark results, which includes the route registration phase.\n\n```\n• GET /user/lookup/username/hey\n----------------------------------------------------- -----------------------------\nLinearRouter     1.82 µs/iter      (1.7 µs … 2.04 µs)   1.84 µs   2.04 µs   2.04 µs\nMedleyRouter     4.44 µs/iter     (4.34 µs … 4.54 µs)   4.48 µs   4.54 µs   4.54 µs\nFindMyWay       60.36 µs/iter      (45.5 µs … 1.9 ms)  59.88 µs  78.13 µs  82.92 µs\nKoaTreeRouter    3.81 µs/iter     (3.73 µs … 3.87 µs)   3.84 µs   3.87 µs   3.87 µs\nTrekRouter       5.84 µs/iter     (5.75 µs … 6.04 µs)   5.86 µs   6.04 µs   6.04 µs\n\nsummary for GET /user/lookup/username/hey\n  LinearRouter\n   2.1x faster than KoaTreeRouter\n   2.45x faster than MedleyRouter\n   3.21x faster than TrekRouter\n   33.24x faster than FindMyWay\n```\n\nFor situations like Fastly Compute, it's better to use LinearRouter with the `hono/quick` preset..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I patternrouter in hono?\n\nAssistant: To patternrouter in hono, here's what you do:\n**PatternRouter** is the smallest router among Hono's routers.\n\nWhile Hono is already compact, if you need to make it even smaller for an environment with limited resources, you can use PatternRouter.\n\nAn application using only PatternRouter is under 15KB in size.\n\n```\n$ npx wrangler deploy --minify ./src/index.ts\n ⛅️ wrangler 3.20.0\n-------------------\nTotal Upload: 14.68 KiB / gzip: 5.38 KiB\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Routers in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**SmartRouter Example**:\n\n```yaml\n// Inside the core of Hono.\nreadonly defaultRouter: Router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\nThis snippet shows you how to smartrouter example, which is an important aspect of routers.\n\n**LinearRouter Benchmark Results**:\n\n```yaml\n• GET /user/lookup/username/hey\n----------------------------------------------------- -----------------------------\nLinearRouter     1.82 µs/iter      (1.7 µs … 2.04 µs)   1.84 µs   2.04 µs   2.04 µs\nMedleyRouter     4.44 µs/iter     (4.34 µs … 4.54 µs)   4.48 µs   4.54 µs   4.54 µs\nFindMyWay       60.36 µs/iter      (45.5 µs … 1.9 ms)  59.88 µs  78.13 µs  82.92 µs\nKoaTreeRouter    3.81 µs/iter     (3.73 µs … 3.87 µs)   3.84 µs   3.87 µs   3.87 µs\nTrekRouter       5.84 µs/iter     (5.75 µs … 6.04 µs)   5.86 µs   6.04 µs   6.04 µs\n\nsummary for GET /user/lookup/username/hey\n  LinearRouter\n   2.1x faster than KoaTreeRouter\n   2.45x faster than MedleyRouter\n   3.21x faster than TrekRouter\n   33.24x faster than FindMyWay\n```\n\nThis snippet shows you how to linearrouter benchmark results, which is an important aspect of routers.\n\n", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Routers in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor situations like Fastly Compute, it's better to use LinearRouter with the `hono/quick` preset.\n\nIf you need to make Hono even smaller for an environment with limited resources, use PatternRouter.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/concepts/routers", "title": "Routers", "description": "The routers are the most important features for Hono. Hono has five routers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:40:49", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Routers - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "scrapeId": "6825832e-ea9a-47e4-83ce-f2b8efc87ff9", "sourceURL": "https://hono.dev/docs/concepts/routers", "url": "https://hono.dev/docs/concepts/routers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what JSX is in hono?\n\nAssistant: Sure, I'd be happy to explain JSX in hono.\n\n# JSX\n\nYou can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.Here's a quick rundown of what this is about:\n\n## Settings\n\nTo use JSX, modify the `tsconfig.json`:\n\n`tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\nAlternatively, use the pragma directives:\n\n```ts\n/** @jsx jsx */\n/** @jsxImportSource hono/jsx */\n```\n\nFor Deno, you have to modify the `deno.json` instead of the `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"precompile\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\n## Usage\n\n`index.tsx`:\n\n```tsx\nimport { Hono } from 'hono'\nimport type { FC } from 'hono/jsx'\n\nconst app = new Hono()\n\nconst Layout: FC = (props) => {\n  return (\n    <html>\n      <body>{props.children}</body>\n    </html>\n  )\n}\n\nconst Top: FC<{ messages: string[] }> = (props: {\n  messages: string[]\n}) => {\n  return (\n    <Layout>\n      <h1>Hello Hono!</h1>\n      <ul>\n        {props.messages.map((message) => {\n          return <li>{message}!!</li>\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\napp.get('/', (c) => {\n  const messages = ['Good Morning', 'Good Evening', 'Good Night']\n  return c.html(<Top messages={messages} />)\n})\n\nexport default app\n```\n\n## Fragment\n\nUse Fragment to group multiple elements without adding extra nodes:\n\n```tsx\nimport { Fragment } from 'hono/jsx'\n\nconst List = () => (\n  <Fragment>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </Fragment>\n)\n```\n\nOr you can write it with `<></>` if it set up properly.\n\n```tsx\nconst List = () => (\n  <>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </>\n)\n```\n\n## `PropsWithChildren`\n\nYou can use `PropsWithChildren` to correctly infer a child element in a function component.\n\n```tsx\nimport { PropsWithChildren } from 'hono/jsx'\n\ntype Post = {\n  id: number\n  title: string\n}\n\nfunction Component({ title, children }: PropsWithChildren<Post>) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  )\n}\n```\n\n## Inserting Raw HTML\n\nTo directly insert HTML, use `dangerouslySetInnerHTML`:\n\n```tsx\napp.get('/foo', (c) => {\n  const inner = { __html: 'JSX &middot; SSR' }\n  const Div = <div dangerouslySetInnerHTML={inner} />\n})\n```\n\n## Memoization\n\nOptimize your components by memoizing computed strings using `memo`:\n\n```tsx\nimport { memo } from 'hono/jsx'\n\nconst Header = memo(() => <header>Welcome to Hono</header>)\nconst Footer = memo(() => <footer>Powered by Hono</footer>)\nconst Layout = (\n  <div>\n    <Header />\n    <p>Hono is cool!</p>\n    <Footer />\n  </div>\n)\n```\n\n## Context\n\nBy using `useContext`, you can share data globally across any level of the Component tree without passing values through props.\n\n```tsx\nimport type { FC } from 'hono/jsx'\nimport { createContext, useContext } from 'hono/jsx'\n\nconst themes = {\n  light: {\n    color: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    color: '#ffffff',\n    background: '#222222',\n  },\n}\n\nconst ThemeContext = createContext(themes.light)\n\nconst Button: FC = () => {\n  const theme = useContext(ThemeContext)\n  return <button style={theme}>Push!</button>\n}\n\nconst Toolbar: FC = () => {\n  return (\n    <div>\n      <Button />\n    </div>\n  )\n}\n\n// ...\n\napp.get('/', (c) => {\n  return c.html(\n    <div>\n      <ThemeContext.Provider value={themes.dark}>\n        <Toolbar />\n      </ThemeContext.Provider>\n    </div>\n  )\n})\n```\n\n## Async Component\n\n`hono/jsx` supports an Async Component, so you can use `async`/ `await` in your component. If you render it with `c.html()`, it will await automatically.\n\n```tsx\nconst AsyncComponent = async () => {\n  await new Promise((r) => setTimeout(r, 1000)) // sleep 1s\n  return <div>Done!</div>\n}\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        <AsyncComponent />\n      </body>\n    </html>\n  )\n})\n```\n\n## Suspense Experimental\n\nThe React-like `Suspense` feature is available. If you wrap the async component with `Suspense`, the content in the fallback will be rendered first, and once the Promise is resolved, the awaited content will be displayed. You can use it with `renderToReadableStream()`.\n\n```tsx\nimport { renderToReadableStream, Suspense } from 'hono/jsx/streaming'\n\n//...\n\napp.get('/', (c) => {\n  const stream = renderToReadableStream(\n    <html>\n      <body>\n        <Suspense fallback={<div>loading...</div>}>\n          <Component />\n        </Suspense>\n      </body>\n    </html>\n  )\n  return c.body(stream, {\n    headers: {\n      'Content-Type': 'text/html; charset=UTF-8',\n      'Transfer-Encoding': 'chunked',\n    },\n  })\n})\n```\n\n## ErrorBoundary Experimental\n\nYou can catch errors in child components using `ErrorBoundary`.\n\nIn the example below, it will show the content specified in `fallback` if an error occurs.\n\n```tsx\nfunction SyncComponent() {\n  throw new Error('Error')\n  return <div>Hello</div>\n}\n\napp.get('/sync', async (c) => {\n  return c.html(\n    <html>\n      <body>\n        <ErrorBoundary fallback={<div>Out of Service</div>}>\n          <SyncComponent />\n        </ErrorBoundary>\n      </body>\n    </html>\n  )\n})\n\n`ErrorBoundary` can also be used with async components and `Suspense`.\n\n```tsx\nasync function AsyncComponent() {\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n  throw new Error('Error')\n  return <div>Hello</div>\n}\n\napp.get('/with-suspense', async (c) => {\n  return c.html(\n    <html>\n      <body>\n        <ErrorBoundary fallback={<div>Out of Service</div>}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <AsyncComponent />\n          </Suspense>\n        </ErrorBoundary>\n      </body>\n    </html>\n  )\n})\n```\n\n## Integration with html Middleware\n\nCombine the JSX and html middlewares for powerful templating. For in-depth details, consult the [html middleware documentation](https://hono.dev/docs/helpers/html).\n\n```tsx\nimport { Hono } from 'hono'\nimport { html } from 'hono/html'\n\nconst app = new Hono()\n\ninterface SiteData {\n  title: string\n  children?: any\n}\n\nconst Layout = (props: SiteData) =>\n  html`<!doctype html>\n    <html>\n      <head>\n        <title>${props.title}</title>\n      </head>\n      <body>\n        ${props.children}\n      </body>\n    </html>`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/:name', (c) => {\n  const { name } = c.req.param()\n  const props = {\n    name: name,\n    siteData: {\n      title: 'JSX with html sample',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n\nexport default app\n```\n\n## With JSX Renderer Middleware\n\nThe [JSX Renderer Middleware](https://hono.dev/docs/middleware/builtin/jsx-renderer) allows you to create HTML pages more easily with the JSX.\n\n## Override type definitions\n\nYou can override the type definition to add your custom elements and attributes.\n\n```ts\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'my-custom-element': HTMLAttributes & {\n        'x-event'?: 'click' | 'scroll'\n      }\n    }\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I settings in hono?\n\nAssistant: To settings in hono, here's what you do:\nTo use JSX, modify the `tsconfig.json`:\n\n`tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\nAlternatively, use the pragma directives:\n\n```ts\n/** @jsx jsx */\n/** @jsxImportSource hono/jsx */\n```\n\nFor Deno, you have to modify the `deno.json` instead of the `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"precompile\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n`index.tsx`:\n\n```tsx\nimport { Hono } from 'hono'\nimport type { FC } from 'hono/jsx'\n\nconst app = new Hono()\n\nconst Layout: FC = (props) => {\n  return (\n    <html>\n      <body>{props.children}</body>\n    </html>\n  )\n}\n\nconst Top: FC<{ messages: string[] }> = (props: {\n  messages: string[]\n}) => {\n  return (\n    <Layout>\n      <h1>Hello Hono!</h1>\n      <ul>\n        {props.messages.map((message) => {\n          return <li>{message}!!</li>\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\napp.get('/', (c) => {\n  const messages = ['Good Morning', 'Good Evening', 'Good Night']\n  return c.html(<Top messages={messages} />)\n})\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I fragment in hono?\n\nAssistant: To fragment in hono, here's what you do:\nUse Fragment to group multiple elements without adding extra nodes:\n\n```tsx\nimport { Fragment } from 'hono/jsx'\n\nconst List = () => (\n  <Fragment>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </Fragment>\n)\n```\n\nOr you can write it with `<></>` if it set up properly.\n\n```tsx\nconst List = () => (\n  <>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </>\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `propswithchildren` in hono?\n\nAssistant: To `propswithchildren` in hono, here's what you do:\nYou can use `PropsWithChildren` to correctly infer a child element in a function component.\n\n```tsx\nimport { PropsWithChildren } from 'hono/jsx'\n\ntype Post = {\n  id: number\n  title: string\n}\n\nfunction Component({ title, children }: PropsWithChildren<Post>) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  )\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I inserting raw html in hono?\n\nAssistant: To inserting raw html in hono, here's what you do:\nTo directly insert HTML, use `dangerouslySetInnerHTML`:\n\n```tsx\napp.get('/foo', (c) => {\n  const inner = { __html: 'JSX &middot; SSR' }\n  const Div = <div dangerouslySetInnerHTML={inner} />\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I memoization in hono?\n\nAssistant: To memoization in hono, here's what you do:\nOptimize your components by memoizing computed strings using `memo`:\n\n```tsx\nimport { memo } from 'hono/jsx'\n\nconst Header = memo(() => <header>Welcome to Hono</header>)\nconst Footer = memo(() => <footer>Powered by Hono</footer>)\nconst Layout = (\n  <div>\n    <Header />\n    <p>Hono is cool!</p>\n    <Footer />\n  </div>\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I context in hono?\n\nAssistant: To context in hono, here's what you do:\nBy using `useContext`, you can share data globally across any level of the Component tree without passing values through props.\n\n```tsx\nimport type { FC } from 'hono/jsx'\nimport { createContext, useContext } from 'hono/jsx'\n\nconst themes = {\n  light: {\n    color: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    color: '#ffffff',\n    background: '#222222',\n  },\n}\n\nconst ThemeContext = createContext(themes.light)\n\nconst Button: FC = () => {\n  const theme = useContext(ThemeContext)\n  return <button style={theme}>Push!</button>\n}\n\nconst Toolbar: FC = () => {\n  return (\n    <div>\n      <Button />\n    </div>\n  )\n}\n\n// ...\n\napp.get('/', (c) => {\n  return c.html(\n    <div>\n      <ThemeContext.Provider value={themes.dark}>\n        <Toolbar />\n      </ThemeContext.Provider>\n    </div>\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I async component in hono?\n\nAssistant: To async component in hono, here's what you do:\n`hono/jsx` supports an Async Component, so you can use `async`/ `await` in your component. If you render it with `c.html()`, it will await automatically.\n\n```tsx\nconst AsyncComponent = async () => {\n  await new Promise((r) => setTimeout(r, 1000)) // sleep 1s\n  return <div>Done!</div>\n}\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        <AsyncComponent />\n      </body>\n    </html>\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I suspense experimental in hono?\n\nAssistant: To suspense experimental in hono, here's what you do:\nThe React-like `Suspense` feature is available. If you wrap the async component with `Suspense`, the content in the fallback will be rendered first, and once the Promise is resolved, the awaited content will be displayed. You can use it with `renderToReadableStream()`.\n\n```tsx\nimport { renderToReadableStream, Suspense } from 'hono/jsx/streaming'\n\n//...\n\napp.get('/', (c) => {\n  const stream = renderToReadableStream(\n    <html>\n      <body>\n        <Suspense fallback={<div>loading...</div>}>\n          <Component />\n        </Suspense>\n      </body>\n    </html>\n  )\n  return c.body(stream, {\n    headers: {\n      'Content-Type': 'text/html; charset=UTF-8',\n      'Transfer-Encoding': 'chunked',\n    },\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I errorboundary experimental in hono?\n\nAssistant: To errorboundary experimental in hono, here's what you do:\nYou can catch errors in child components using `ErrorBoundary`.\n\nIn the example below, it will show the content specified in `fallback` if an error occurs.\n\n```tsx\nfunction SyncComponent() {\n  throw new Error('Error')\n  return <div>Hello</div>\n}\n\napp.get('/sync', async (c) => {\n  return c.html(\n    <html>\n      <body>\n        <ErrorBoundary fallback={<div>Out of Service</div>}>\n          <SyncComponent />\n        </ErrorBoundary>\n      </body>\n    </html>\n  )\n})\n\n`ErrorBoundary` can also be used with async components and `Suspense`.\n\n```tsx\nasync function AsyncComponent() {\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n  throw new Error('Error')\n  return <div>Hello</div>\n}\n\napp.get('/with-suspense', async (c) => {\n  return c.html(\n    <html>\n      <body>\n        <ErrorBoundary fallback={<div>Out of Service</div>}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <AsyncComponent />\n          </Suspense>\n        </ErrorBoundary>\n      </body>\n    </html>\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I integration with html middleware in hono?\n\nAssistant: To integration with html middleware in hono, here's what you do:\nCombine the JSX and html middlewares for powerful templating. For in-depth details, consult the [html middleware documentation](https://hono.dev/docs/helpers/html).\n\n```tsx\nimport { Hono } from 'hono'\nimport { html } from 'hono/html'\n\nconst app = new Hono()\n\ninterface SiteData {\n  title: string\n  children?: any\n}\n\nconst Layout = (props: SiteData) =>\n  html`<!doctype html>\n    <html>\n      <head>\n        <title>${props.title}</title>\n      </head>\n      <body>\n        ${props.children}\n      </body>\n    </html>`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/:name', (c) => {\n  const { name } = c.req.param()\n  const props = {\n    name: name,\n    siteData: {\n      title: 'JSX with html sample',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I with jsx renderer middleware in hono?\n\nAssistant: To with jsx renderer middleware in hono, here's what you do:\nThe [JSX Renderer Middleware](https://hono.dev/docs/middleware/builtin/jsx-renderer) allows you to create HTML pages more easily with the JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I override type definitions in hono?\n\nAssistant: To override type definitions in hono, here's what you do:\nYou can override the type definition to add your custom elements and attributes.\n\n```ts\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'my-custom-element': HTMLAttributes & {\n        'x-event'?: 'click' | 'scroll'\n      }\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for JSX in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Settings - tsconfig.json**:\n\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\nThis snippet shows you how to settings - tsconfig.json, which is an important aspect of jsx.\n\n**Settings - Deno**:\n\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"precompile\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\nThis snippet shows you how to settings - deno, which is an important aspect of jsx.\n\n**Usage - index.tsx**:\n\n```yaml\nimport { Hono } from 'hono'\nimport type { FC } from 'hono/jsx'\n\nconst app = new Hono()\n\nconst Layout: FC = (props) => {\n  return (\n    <html>\n      <body>{props.children}</body>\n    </html>\n  )\n}\n\nconst Top: FC<{ messages: string[] }> = (props: {\n  messages: string[]\n}) => {\n  return (\n    <Layout>\n      <h1>Hello Hono!</h1>\n      <ul>\n        {props.messages.map((message) => {\n          return <li>{message}!!</li>\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\napp.get('/', (c) => {\n  const messages = ['Good Morning', 'Good Evening', 'Good Night']\n  return c.html(<Top messages={messages} />)\n})\n\nexport default app\n```\n\nThis snippet shows you how to usage - index.tsx, which is an important aspect of jsx.\n\n**Fragment Example**:\n\n```yaml\nimport { Fragment } from 'hono/jsx'\n\nconst List = () => (\n  <Fragment>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </Fragment>\n)\n```\n\nThis snippet shows you how to fragment example, which is an important aspect of jsx.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using JSX in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `PropsWithChildren` to correctly infer child elements in function components.\n\nUtilize `memo` for optimizing components by memoizing computed strings.\n\nCombine JSX and html middlewares for powerful templating.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx", "title": "JSX", "description": "You can write HTML with JSX syntax with `hono/jsx`. Although `hono/jsx` works on the client, you will probably use it most often when rendering content on the server side. Here are some things related to JSX that are common to both server and client.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:41:36", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "title": "JSX - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "ce4eccf7-b3f0-4a4c-93a8-671c1625e53a", "sourceURL": "https://hono.dev/docs/guides/jsx", "url": "https://hono.dev/docs/guides/jsx", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Presets is in hono?\n\nAssistant: Sure, I'd be happy to explain Presets in hono.\n\n# Presets\n\nHono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.Here's a quick rundown of what this is about:\n\n## hono\n\nUsage:\n\n```ts\nimport { Hono } from 'hono'\n```\n\nRouters:\n\n```ts\nthis.router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\n## hono/quick\n\nUsage:\n\n```ts\nimport { Hono } from 'hono/quick'\n```\n\nRouter:\n\n```ts\nthis.router = new SmartRouter({\n  routers: [new LinearRouter(), new TrieRouter()],\n})\n```\n\n## hono/tiny\n\nUsage:\n\n```ts\nimport { Hono } from 'hono/tiny'\n```\n\nRouter:\n\n```ts\nthis.router = new PatternRouter()\n```\n\n## Which preset should I use?\n\n| Preset | Suitable platforms |\n| --- | --- |\n| `hono` | This is highly recommended for most use cases. Although the registration phase may be slower than `hono/quick`, it exhibits high performance once booted. It's ideal for long-life servers built with **Deno**, **Bun**, or **Node.js**. For environments such as **Cloudflare Workers**, **Deno Deploy**, where v8 isolates are utilized, this preset is suitable as well. Because the isolations persist for a certain amount of time after booting. |\n| `hono/quick` | This preset is designed for environments where the application is initialized for every request. **Fastly Compute** operates in this manner, thus this preset is recommended for such use. |\n| `hono/tiny` | This is the smallest router package and it's suitable for environments where resources are limited. |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "overview", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I hono in hono?\n\nAssistant: To hono in hono, here's what you do:\nUsage:\n\n```ts\nimport { Hono } from 'hono'\n```\n\nRouters:\n\n```ts\nthis.router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I hono/quick in hono?\n\nAssistant: To hono/quick in hono, here's what you do:\nUsage:\n\n```ts\nimport { Hono } from 'hono/quick'\n```\n\nRouter:\n\n```ts\nthis.router = new SmartRouter({\n  routers: [new LinearRouter(), new TrieRouter()],\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I hono/tiny in hono?\n\nAssistant: To hono/tiny in hono, here's what you do:\nUsage:\n\n```ts\nimport { Hono } from 'hono/tiny'\n```\n\nRouter:\n\n```ts\nthis.router = new PatternRouter()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I which preset should i use? in hono?\n\nAssistant: To which preset should i use? in hono, here's what you do:\n| Preset | Suitable platforms |\n| --- | --- |\n| `hono` | This is highly recommended for most use cases. Although the registration phase may be slower than `hono/quick`, it exhibits high performance once booted. It's ideal for long-life servers built with **Deno**, **Bun**, or **Node.js**. For environments such as **Cloudflare Workers**, **Deno Deploy**, where v8 isolates are utilized, this preset is suitable as well. Because the isolations persist for a certain amount of time after booting. |\n| `hono/quick` | This preset is designed for environments where the application is initialized for every request. **Fastly Compute** operates in this manner, thus this preset is recommended for such use. |\n| `hono/tiny` | This is the smallest router package and it's suitable for environments where resources are limited. |.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Presets in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**hono**:\n\n```yaml\nimport { Hono } from 'hono'\n\nthis.router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\nThis snippet shows you how to hono, which is an important aspect of presets.\n\n**hono/quick**:\n\n```yaml\nimport { Hono } from 'hono/quick'\n\nthis.router = new SmartRouter({\n  routers: [new LinearRouter(), new TrieRouter()],\n})\n```\n\nThis snippet shows you how to hono/quick, which is an important aspect of presets.\n\n**hono/tiny**:\n\n```yaml\nimport { Hono } from 'hono/tiny'\n\nthis.router = new PatternRouter()\n```\n\nThis snippet shows you how to hono/tiny, which is an important aspect of presets.\n\n", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "code_examples", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Presets in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n`hono` is highly recommended for most use cases, especially for long-life servers built with Deno, Bun, or Node.js.\n\n`hono/quick` is suitable for environments where the application is initialized for every request, such as Fastly Compute.\n\n`hono/tiny` is the smallest router package and is suitable for environments with limited resources.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/api/presets", "title": "Presets", "description": "Hono has several routers, each designed for a specific purpose. You can specify the router you want to use in the constructor of Hono. Presets are provided for common use cases, so you don't have to specify the router each time.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:07", "type": "best_practices", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "generator": "VitePress v1.6.3", "title": "Presets - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "edafce69-c043-4f74-8943-ae0d7821a432", "sourceURL": "https://hono.dev/docs/api/presets", "url": "https://hono.dev/docs/api/presets", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Helpers is in hono?\n\nAssistant: Sure, I'd be happy to explain Helpers in hono.\n\n# Helpers\n\nHelpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.Here's a quick rundown of what this is about:\n\n## Helpers\n\nHelpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.\n\nFor instance, here's how to use the Cookie helper:\n\n```ts\nimport { getCookie, setCookie } from 'hono/cookie'\n\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  //\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/helpers", "title": "Helpers", "description": "Helpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:42:18", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Helpers - Hono", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "scrapeId": "80910d1a-aaa4-4cab-89fb-9b44a1c77e3f", "sourceURL": "https://hono.dev/docs/guides/helpers", "url": "https://hono.dev/docs/guides/helpers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I helpers in hono?\n\nAssistant: To helpers in hono, here's what you do:\nHelpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.\n\nFor instance, here's how to use the Cookie helper:\n\n```ts\nimport { getCookie, setCookie } from 'hono/cookie'\n\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  //\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/helpers", "title": "Helpers", "description": "Helpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Helpers - Hono", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "scrapeId": "80910d1a-aaa4-4cab-89fb-9b44a1c77e3f", "sourceURL": "https://hono.dev/docs/guides/helpers", "url": "https://hono.dev/docs/guides/helpers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Helpers in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using the Cookie Helper**:\n\n```yaml\nimport { getCookie, setCookie } from 'hono/cookie'\n\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  //\n})\n```\n\nThis snippet shows you how to using the cookie helper, which is an important aspect of helpers.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/helpers", "title": "Helpers", "description": "Helpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:42:18", "type": "code_examples", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Helpers - Hono", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "scrapeId": "80910d1a-aaa4-4cab-89fb-9b44a1c77e3f", "sourceURL": "https://hono.dev/docs/guides/helpers", "url": "https://hono.dev/docs/guides/helpers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Helpers in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHelpers provide useful functions that can simplify application development.\n\nUse the Cookie helper to manage cookies easily.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/helpers", "title": "Helpers", "description": "Helpers are available to assist in developing your application. Unlike middleware, they don't act as handlers, but rather provide useful functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:42:18", "type": "best_practices", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Helpers - Hono", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "scrapeId": "80910d1a-aaa4-4cab-89fb-9b44a1c77e3f", "sourceURL": "https://hono.dev/docs/guides/helpers", "url": "https://hono.dev/docs/guides/helpers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Accepts Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain Accepts Helper in hono.\n\n# Accepts Helper\n\nAccepts Helper helps to handle Accept headers in the Requests.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { accepts } from 'hono/accepts'\n```\n\n## accepts()\n\nThe `accepts()` function looks at the Accept header, such as Accept-Encoding and Accept-Language, and returns the proper value.\n\n```ts\nimport { accepts } from 'hono/accepts'\n\napp.get('/', (c) => {\n  const accept = accepts(c, {\n    header: 'Accept-Language',\n    supports: ['en', 'ja', 'zh'],\n    default: 'en',\n  })\n  return c.json({ lang: accept })\n})\n```\n\n## AcceptHeader type\n\nThe definition of the `AcceptHeader` type is as follows.\n\n```ts\nexport type AcceptHeader =\n  | 'Accept'\n  | 'Accept-Charset'\n  | 'Accept-Encoding'\n  | 'Accept-Language'\n  | 'Accept-Patch'\n  | 'Accept-Post'\n  | 'Accept-Ranges'\n```\n\n## Options\n\n### required header: `AcceptHeader`\nThe target accept header.\n\n### required supports: `string[]`\nThe header values which your application supports.\n\n### required default: `string`\nThe default values.\n\n### optional match: `(accepts: Accept[], config: acceptsConfig) => string`\nThe custom match function.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/accepts", "title": "Accepts Helper", "description": "Accepts Helper helps to handle Accept headers in the Requests.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:42:30", "type": "overview", "page_metadata": {"language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Accepts Helper - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ead437b9-6f91-4103-aabb-006f5ab05e09", "sourceURL": "https://hono.dev/docs/helpers/accepts", "url": "https://hono.dev/docs/helpers/accepts", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { accepts } from 'hono/accepts'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/accepts", "title": "Accepts Helper", "description": "Accepts Helper helps to handle Accept headers in the Requests.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:42:30", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Accepts Helper - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ead437b9-6f91-4103-aabb-006f5ab05e09", "sourceURL": "https://hono.dev/docs/helpers/accepts", "url": "https://hono.dev/docs/helpers/accepts", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I accepts() in hono?\n\nAssistant: To accepts() in hono, here's what you do:\nThe `accepts()` function looks at the Accept header, such as Accept-Encoding and Accept-Language, and returns the proper value.\n\n```ts\nimport { accepts } from 'hono/accepts'\n\napp.get('/', (c) => {\n  const accept = accepts(c, {\n    header: 'Accept-Language',\n    supports: ['en', 'ja', 'zh'],\n    default: 'en',\n  })\n  return c.json({ lang: accept })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/accepts", "title": "Accepts Helper", "description": "Accepts Helper helps to handle Accept headers in the Requests.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:42:30", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Accepts Helper - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ead437b9-6f91-4103-aabb-006f5ab05e09", "sourceURL": "https://hono.dev/docs/helpers/accepts", "url": "https://hono.dev/docs/helpers/accepts", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I acceptheader type in hono?\n\nAssistant: To acceptheader type in hono, here's what you do:\nThe definition of the `AcceptHeader` type is as follows.\n\n```ts\nexport type AcceptHeader =\n  | 'Accept'\n  | 'Accept-Charset'\n  | 'Accept-Encoding'\n  | 'Accept-Language'\n  | 'Accept-Patch'\n  | 'Accept-Post'\n  | 'Accept-Ranges'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/accepts", "title": "Accepts Helper", "description": "Accepts Helper helps to handle Accept headers in the Requests.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:42:30", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Accepts Helper - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ead437b9-6f91-4103-aabb-006f5ab05e09", "sourceURL": "https://hono.dev/docs/helpers/accepts", "url": "https://hono.dev/docs/helpers/accepts", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required header: `AcceptHeader`\nThe target accept header.\n\n### required supports: `string[]`\nThe header values which your application supports.\n\n### required default: `string`\nThe default values.\n\n### optional match: `(accepts: Accept[], config: acceptsConfig) => string`\nThe custom match function..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/accepts", "title": "Accepts Helper", "description": "Accepts Helper helps to handle Accept headers in the Requests.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:42:30", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Accepts Helper - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ead437b9-6f91-4103-aabb-006f5ab05e09", "sourceURL": "https://hono.dev/docs/helpers/accepts", "url": "https://hono.dev/docs/helpers/accepts", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Accepts Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { accepts } from 'hono/accepts'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of accepts helper.\n\n**Accepts Function Example**:\n\n```yaml\n```ts\nimport { accepts } from 'hono/accepts'\n\napp.get('/', (c) => {\n  const accept = accepts(c, {\n    header: 'Accept-Language',\n    supports: ['en', 'ja', 'zh'],\n    default: 'en',\n  })\n  return c.json({ lang: accept })\n})\n```\n```\n\nThis snippet shows you how to accepts function example, which is an important aspect of accepts helper.\n\n**AcceptHeader Type Definition**:\n\n```yaml\n```ts\nexport type AcceptHeader =\n  | 'Accept'\n  | 'Accept-Charset'\n  | 'Accept-Encoding'\n  | 'Accept-Language'\n  | 'Accept-Patch'\n  | 'Accept-Post'\n  | 'Accept-Ranges'\n```\n```\n\nThis snippet shows you how to acceptheader type definition, which is an important aspect of accepts helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/accepts", "title": "Accepts Helper", "description": "Accepts Helper helps to handle Accept headers in the Requests.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:42:30", "type": "code_examples", "page_metadata": {"language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "title": "Accepts Helper - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "ead437b9-6f91-4103-aabb-006f5ab05e09", "sourceURL": "https://hono.dev/docs/helpers/accepts", "url": "https://hono.dev/docs/helpers/accepts", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what html Helper is in hono?\n\nAssistant: Sure, I'd be happy to explain html Helper in hono.\n\n# html Helper\n\nThe html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { html, raw } from 'hono/html'\n```\n\n## `html`\n\n```ts\nconst app = new Hono()\n\napp.get('/:username', (c) => {\n  const { username } = c.req.param()\n  return c.html(\n    html`<!doctype html>\n      <h1>Hello! ${username}!</h1>`\n  )\n})\n```\n\n## Insert snippets into JSX\n\n```tsx\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <title>Test Site</title>\n        {html`\n          <script>\n            // No need to use dangerouslySetInnerHTML.\n            // If you write it here, it will not be escaped.\n          </script>\n        `}\n      </head>\n      <body>Hello!</body>\n    </html>\n  )\n})\n```\n\n## Act as functional component\n\nSince `html` returns an HtmlEscapedString, it can act as a fully functional component without using JSX.\n\n## Use `html` to speed up the process instead of `memo`\n\n```typescript\nconst Footer = () => html`\n  <footer>\n    <address>My Address...</address>\n  </footer>\n`\n```\n\n## Receives props and embeds values\n\n```typescript\ninterface SiteData {\n  title: string\n  description: string\n  image: string\n  children?: any\n}\nconst Layout = (props: SiteData) => html`\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${props.title}</title>\n  <meta name=\"description\" content=\"${props.description}\">\n  <head prefix=\"og: http://ogp.me/ns#\">\n  <meta property=\"og:type\" content=\"article\">\n  <!-- More elements slow down JSX, but not template literals. -->\n  <meta property=\"og:title\" content=\"${props.title}\">\n  <meta property=\"og:image\" content=\"${props.image}\">\n</head>\n<body>\n  ${props.children}\n</body>\n</html>\n`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/', (c) => {\n  const props = {\n    name: 'World',\n    siteData: {\n      title: 'Hello <> World',\n      description: 'This is a description',\n      image: 'https://example.com/image.png',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n```\n\n## `raw()`\n\n```ts\napp.get('/', (c) => {\n  const name = 'John &quot;Johnny&quot; Smith'\n  return c.html(html`<p>I'm ${raw(name)}.</p>`)\n})\n```\n\n## Tips\n\nThanks to these libraries, Visual Studio Code and vim also interprets template literals as HTML, allowing syntax highlighting and formatting to be applied.\n\n- [https://marketplace.visualstudio.com/items?itemName=bierner.lit-html](https://marketplace.visualstudio.com/items?itemName=bierner.lit-html)\n- [https://github.com/MaxMEllon/vim-jsx-pretty](https://github.com/MaxMEllon/vim-jsx-pretty)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { html, raw } from 'hono/html'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `html` in hono?\n\nAssistant: To `html` in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.get('/:username', (c) => {\n  const { username } = c.req.param()\n  return c.html(\n    html`<!doctype html>\n      <h1>Hello! ${username}!</h1>`\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I insert snippets into jsx in hono?\n\nAssistant: To insert snippets into jsx in hono, here's what you do:\n```tsx\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <title>Test Site</title>\n        {html`\n          <script>\n            // No need to use dangerouslySetInnerHTML.\n            // If you write it here, it will not be escaped.\n          </script>\n        `}\n      </head>\n      <body>Hello!</body>\n    </html>\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I act as functional component in hono?\n\nAssistant: To act as functional component in hono, here's what you do:\nSince `html` returns an HtmlEscapedString, it can act as a fully functional component without using JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I use `html` to speed up the process instead of `memo` in hono?\n\nAssistant: To use `html` to speed up the process instead of `memo` in hono, here's what you do:\n```typescript\nconst Footer = () => html`\n  <footer>\n    <address>My Address...</address>\n  </footer>\n`\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I receives props and embeds values in hono?\n\nAssistant: To receives props and embeds values in hono, here's what you do:\n```typescript\ninterface SiteData {\n  title: string\n  description: string\n  image: string\n  children?: any\n}\nconst Layout = (props: SiteData) => html`\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${props.title}</title>\n  <meta name=\"description\" content=\"${props.description}\">\n  <head prefix=\"og: http://ogp.me/ns#\">\n  <meta property=\"og:type\" content=\"article\">\n  <!-- More elements slow down JSX, but not template literals. -->\n  <meta property=\"og:title\" content=\"${props.title}\">\n  <meta property=\"og:image\" content=\"${props.image}\">\n</head>\n<body>\n  ${props.children}\n</body>\n</html>\n`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/', (c) => {\n  const props = {\n    name: 'World',\n    siteData: {\n      title: 'Hello <> World',\n      description: 'This is a description',\n      image: 'https://example.com/image.png',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `raw()` in hono?\n\nAssistant: To `raw()` in hono, here's what you do:\n```ts\napp.get('/', (c) => {\n  const name = 'John &quot;Johnny&quot; Smith'\n  return c.html(html`<p>I'm ${raw(name)}.</p>`)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I tips in hono?\n\nAssistant: To tips in hono, here's what you do:\nThanks to these libraries, Visual Studio Code and vim also interprets template literals as HTML, allowing syntax highlighting and formatting to be applied.\n\n- [https://marketplace.visualstudio.com/items?itemName=bierner.lit-html](https://marketplace.visualstudio.com/items?itemName=bierner.lit-html)\n- [https://github.com/MaxMEllon/vim-jsx-pretty](https://github.com/MaxMEllon/vim-jsx-pretty).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for html Helper in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { html, raw } from 'hono/html\n```\n\nThis snippet shows you how to import, which is an important aspect of html helper.\n\n**`html` Example**:\n\n```yaml\nconst app = new Hono()\n\napp.get('/:username', (c) => {\n  const { username } = c.req.param()\n  return c.html(\n    html`<!doctype html>\n      <h1>Hello! ${username}!</h1>`\n  )\n})\n```\n\nThis snippet shows you how to `html` example, which is an important aspect of html helper.\n\n**Insert snippets into JSX**:\n\n```yaml\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <title>Test Site</title>\n        {html`\n          <script>\n            // No need to use dangerouslySetInnerHTML.\n            // If you write it here, it will not be escaped.\n          </script>\n        `}\n      </head>\n      <body>Hello!</body>\n    </html>\n  )\n})\n```\n\nThis snippet shows you how to insert snippets into jsx, which is an important aspect of html helper.\n\n**Use `html` to speed up the process instead of `memo`**:\n\n```yaml\nconst Footer = () => html`\n  <footer>\n    <address>My Address...</address>\n  </footer>\n`\n```\n\nThis snippet shows you how to use `html` to speed up the process instead of `memo`, which is an important aspect of html helper.\n\n**Receives props and embeds values**:\n\n```yaml\ninterface SiteData {\n  title: string\n  description: string\n  image: string\n  children?: any\n}\nconst Layout = (props: SiteData) => html`\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${props.title}</title>\n  <meta name=\"description\" content=\"${props.description}\">\n  <head prefix=\"og: http://ogp.me/ns#\">\n  <meta property=\"og:type\" content=\"article\">\n  <meta property=\"og:title\" content=\"${props.title}\">\n  <meta property=\"og:image\" content=\"${props.image}\">\n</head>\n<body>\n  ${props.children}\n</body>\n</html>\n`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/', (c) => {\n  const props = {\n    name: 'World',\n    siteData: {\n      title: 'Hello <> World',\n      description: 'This is a description',\n      image: 'https://example.com/image.png',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n```\n\nThis snippet shows you how to receives props and embeds values, which is an important aspect of html helper.\n\n**`raw()` Example**:\n\n```yaml\napp.get('/', (c) => {\n  const name = 'John &quot;Johnny&quot; Smith'\n  return c.html(html`<p>I'm ${raw(name)}.</p>`)\n})\n```\n\nThis snippet shows you how to `raw()` example, which is an important aspect of html helper.\n\n", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using html Helper in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThanks to these libraries, Visual Studio Code and vim also interprets template literals as HTML, allowing syntax highlighting and formatting to be applied.\n\n- https://marketplace.visualstudio.com/items?itemName=bierner.lit-html\n\n- https://github.com/MaxMEllon/vim-jsx-pretty\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/helpers/html", "title": "html Helper", "description": "The html Helper lets you write HTML in JavaScript template literal with a tag named `html`. Using `raw()`, the content will be rendered as is. You have to escape these strings by yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:43:04", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "html Helper - Hono", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "scrapeId": "84721bca-4d59-4065-b6f0-c3d45fd35da2", "sourceURL": "https://hono.dev/docs/helpers/html", "url": "https://hono.dev/docs/helpers/html", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Zod OpenAPI is in hono?\n\nAssistant: Sure, I'd be happy to explain Zod OpenAPI in hono.\n\n# Zod OpenAPI\n\nZod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.Here's a quick rundown of what this is about:\n\n## Introduction\n\nZod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.\n\n## Defining Schemas\n\nFirst, define your schemas with Zod. The `z` object should be imported from `@hono/zod-openapi`.\n\n## Creating a Route\n\nNext, create a route using the `createRoute` function from `@hono/zod-openapi`.\n\n## Setting Up the App\n\nFinally, set up the app using the `OpenAPIHono` class.\n\n## See also\n\n- Zod OpenAPI Hono\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "overview", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I introduction in hono?\n\nAssistant: To introduction in hono, here's what you do:\nZod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I defining schemas in hono?\n\nAssistant: To defining schemas in hono, here's what you do:\nFirst, define your schemas with Zod. The `z` object should be imported from `@hono/zod-openapi`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I creating a route in hono?\n\nAssistant: To creating a route in hono, here's what you do:\nNext, create a route using the `createRoute` function from `@hono/zod-openapi`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I setting up the app in hono?\n\nAssistant: To setting up the app in hono, here's what you do:\nFinally, set up the app using the `OpenAPIHono` class..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I see also in hono?\n\nAssistant: To see also in hono, here's what you do:\n- Zod OpenAPI Hono.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Zod OpenAPI in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Defining Schemas with Zod**:\n\n```yaml\nimport { z } from '@hono/zod-openapi'\n\nconst ParamsSchema = z.object({\n  id: z\n    .string()\n    .min(3)\n    .openapi({\n      param: {\n        name: 'id',\n        in: 'path',\n      },\n      example: '1212121',\n    }),\n})\n\nconst UserSchema = z\n  .object({\n    id: z.string().openapi({\n      example: '123',\n    }),\n    name: z.string().openapi({\n      example: 'John Doe',\n    }),\n    age: z.number().openapi({\n      example: 42,\n    }),\n  })\n  .openapi('User')\n```\n\nThis snippet shows you how to defining schemas with zod, which is an important aspect of zod openapi.\n\n", "metadata": {"source_url": "https://hono.dev/examples/zod-openapi", "title": "Zod OpenAPI", "description": "Zod OpenAPI Hono is an extended Hono class that supports OpenAPI. With it, you can validate values and types using Zod and generate OpenAPI Swagger documentation. On this website, only basic usage is shown.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:44:15", "type": "code_examples", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "title": "Zod OpenAPI - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "3c343caa-b7a2-41ac-9317-655b684f1f2c", "sourceURL": "https://hono.dev/examples/zod-openapi", "url": "https://hono.dev/examples/zod-openapi", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Stripe Webhook is in hono?\n\nAssistant: Sure, I'd be happy to explain Stripe Webhook in hono.\n\n# Stripe Webhook\n\nThis introduces how to create an API with Hono to receive Stripe Webhook events.Here's a quick rundown of what this is about:\n\n## Preparation\n\nPlease install the official Stripe SDK at first:\n\nbash\n\n```\nnpm install stripe\n```\n\nAnd put the following values on the `.dev.vars` file to insert the Stripe API keys:\n\n```\nSTRIPE_API_KEY=sk_test_xxx\nSTRIPE_WEBHOOK_SECRET=whsec_xxx\n```\n\nYou can learn about the Stripe API keys by the following documents:\n\n- Secret Key: [https://docs.stripe.com/keys](https://docs.stripe.com/keys)\n- Webhook secret: [https://docs.stripe.com/webhooks](https://docs.stripe.com/webhooks)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/stripe-webhook", "title": "Stripe Webhook", "description": "This introduces how to create an API with Hono to receive Stripe Webhook events.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:38", "type": "overview", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Stripe Webhook - Hono", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dac8fada-fb9e-4d52-8017-ff7c8cb4acf3", "sourceURL": "https://hono.dev/examples/stripe-webhook", "url": "https://hono.dev/examples/stripe-webhook", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I preparation in hono?\n\nAssistant: To preparation in hono, here's what you do:\nPlease install the official Stripe SDK at first:\n\nbash\n\n```\nnpm install stripe\n```\n\nAnd put the following values on the `.dev.vars` file to insert the Stripe API keys:\n\n```\nSTRIPE_API_KEY=sk_test_xxx\nSTRIPE_WEBHOOK_SECRET=whsec_xxx\n```\n\nYou can learn about the Stripe API keys by the following documents:\n\n- Secret Key: [https://docs.stripe.com/keys](https://docs.stripe.com/keys)\n- Webhook secret: [https://docs.stripe.com/webhooks](https://docs.stripe.com/webhooks).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/stripe-webhook", "title": "Stripe Webhook", "description": "This introduces how to create an API with Hono to receive Stripe Webhook events.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:38", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Stripe Webhook - Hono", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dac8fada-fb9e-4d52-8017-ff7c8cb4acf3", "sourceURL": "https://hono.dev/examples/stripe-webhook", "url": "https://hono.dev/examples/stripe-webhook", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Stripe Webhook in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Implementing the Webhook API**:\n\n```yaml\nimport Stripe from 'stripe'\nimport { Hono } from 'hono'\nimport { env } from 'hono/adapter'\n\nconst app = new Hono()\n\napp.post('/webhook', async (context) => {\n  const { STRIPE_SECRET_API_KEY, STRIPE_WEBHOOK_SECRET } =\n    env(context)\n  const stripe = new Stripe(STRIPE_SECRET_API_KEY)\n  const signature = context.req.header('stripe-signature')\n  try {\n    if (!signature) {\n      return context.text('', 400)\n    }\n    const body = await context.req.text()\n    const event = await stripe.webhooks.constructEventAsync(\n      body,\n      signature,\n      STRIPE_WEBHOOK_SECRET\n    )\n    switch (event.type) {\n      case 'payment_intent.created': {\n        console.log(event.data.object)\n        break\n      }\n      default:\n        break\n    }\n    return context.text('', 200)\n  } catch (err) {\n    const errorMessage = `⚠️  Webhook signature verification failed. ${\n      err instanceof Error ? err.message : 'Internal server error'\n    }`\n    console.log(errorMessage)\n    return context.text(errorMessage, 400)\n  }\n})\n\nexport default app\n```\n\nThis snippet shows you how to implementing the webhook api, which is an important aspect of stripe webhook.\n\n", "metadata": {"source_url": "https://hono.dev/examples/stripe-webhook", "title": "Stripe Webhook", "description": "This introduces how to create an API with Hono to receive Stripe Webhook events.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:38", "type": "code_examples", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Stripe Webhook - Hono", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dac8fada-fb9e-4d52-8017-ff7c8cb4acf3", "sourceURL": "https://hono.dev/examples/stripe-webhook", "url": "https://hono.dev/examples/stripe-webhook", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Stripe Webhook in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe API that processes webhook events is publicly accessible, so a mechanism is needed to protect it from attacks such as malicious third parties spoofing Stripe's webhook event objects and sending requests.\n\nTo perform signature verification with Stripe, the raw request body is needed. Ensure that the original body is not modified when using a framework.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/stripe-webhook", "title": "Stripe Webhook", "description": "This introduces how to create an API with Hono to receive Stripe Webhook events.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:38", "type": "best_practices", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "language": "en-US", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Stripe Webhook - Hono", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dac8fada-fb9e-4d52-8017-ff7c8cb4acf3", "sourceURL": "https://hono.dev/examples/stripe-webhook", "url": "https://hono.dev/examples/stripe-webhook", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cloudflare Queues is in hono?\n\nAssistant: Sure, I'd be happy to explain Cloudflare Queues in hono.\n\n# Cloudflare Queues\n\nUsing Hono with Cloudflare Queues.Here's a quick rundown of what this is about:\n\n## Cloudflare Queues\n\nUsing Hono with [Cloudflare Queues](https://developers.cloudflare.com/queues/).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-queue", "title": "Cloudflare Queues", "description": "Using Hono with Cloudflare Queues.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:48", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "title": "Cloudflare Queues - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6737b6fa-f285-43c3-a313-ee4e915062d2", "sourceURL": "https://hono.dev/examples/cloudflare-queue", "url": "https://hono.dev/examples/cloudflare-queue", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I cloudflare queues in hono?\n\nAssistant: To cloudflare queues in hono, here's what you do:\nUsing Hono with [Cloudflare Queues](https://developers.cloudflare.com/queues/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-queue", "title": "Cloudflare Queues", "description": "Using Hono with Cloudflare Queues.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:48", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "title": "Cloudflare Queues - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6737b6fa-f285-43c3-a313-ee4e915062d2", "sourceURL": "https://hono.dev/examples/cloudflare-queue", "url": "https://hono.dev/examples/cloudflare-queue", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cloudflare Queues in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**index.ts**:\n\n```yaml\nimport { Hono } from 'hono'\n\ntype Environment = {\n  readonly ERROR_QUEUE: Queue<Error>\n  readonly ERROR_BUCKET: R2Bucket\n}\n\nconst app = new Hono<{\n  Bindings: Environment\n}>()\n\napp.get('/', (c) => {\n  if (Math.random() < 0.5) {\n    return c.text('Success!')\n  }\n  throw new Error('Failed!')\n})\n\napp.onError(async (err, c) => {\n  await c.env.ERROR_QUEUE.send(err)\n  return c.text(err.message, { status: 500 })\n})\n\nexport default {\n  fetch: app.fetch,\n  async queue(batch: MessageBatch<Error>, env: Environment) {\n    let file = ''\n    for (const message of batch.messages) {\n      const error = message.body\n      file += error.stack || error.message || String(error)\n      file += '\\r\\n'\n    }\n    await env.ERROR_BUCKET.put(`errors/${Date.now()}.log`, file)\n  },\n}\n```\n\nThis snippet shows you how to index.ts, which is an important aspect of cloudflare queues.\n\n", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-queue", "title": "Cloudflare Queues", "description": "Using Hono with Cloudflare Queues.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:48", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "title": "Cloudflare Queues - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6737b6fa-f285-43c3-a313-ee4e915062d2", "sourceURL": "https://hono.dev/examples/cloudflare-queue", "url": "https://hono.dev/examples/cloudflare-queue", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cloudflare Queues in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle errors properly by sending them to the error queue.\n\nUse R2 for storing error logs efficiently.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-queue", "title": "Cloudflare Queues", "description": "Using Hono with Cloudflare Queues.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:48", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "title": "Cloudflare Queues - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6737b6fa-f285-43c3-a313-ee4e915062d2", "sourceURL": "https://hono.dev/examples/cloudflare-queue", "url": "https://hono.dev/examples/cloudflare-queue", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Web API is in hono?\n\nAssistant: Sure, I'd be happy to explain Web API in hono.\n\n# Web API\n\nThis is an example of making Web API on Cloudflare Workers and other runtimes.Here's a quick rundown of what this is about:\n\n## Web API\n\nThis is an example of making Web API on Cloudflare Workers and other runtimes.\n\n## Code Example\n\n```typescript\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\nimport { basicAuth } from 'hono/basic-auth'\nimport { prettyJSON } from 'hono/pretty-json'\nimport { getPosts, getPost, createPost, Post } from './model'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Pretty Blog API'))\napp.use(prettyJSON())\napp.notFound((c) => c.json({ message: 'Not Found', ok: false }, 404))\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst api = new Hono<{ Bindings: Bindings }>()\napi.use('/posts/*', cors())\n\napi.get('/posts', (c) => {\n  const { limit, offset } = c.req.query()\n  const posts = getPosts({ limit, offset })\n  return c.json({ posts })\n})\n\napi.get('/posts/:id', (c) => {\n  const id = c.req.param('id')\n  const post = getPost({ id })\n  return c.json({ post })\n})\n\napi.post(\n  '/posts',\n  async (c, next) => {\n    const auth = basicAuth({\n      username: c.env.USERNAME,\n      password: c.env.PASSWORD,\n    })\n    return auth(c, next)\n  },\n  async (c) => {\n    const post = await c.req.json<Post>()\n    const ok = createPost({ post })\n    return c.json({ ok })\n  }\n)\n\napp.route('/api', api)\n\nexport default app\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/web-api", "title": "Web API", "description": "This is an example of making Web API on Cloudflare Workers and other runtimes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:21", "type": "overview", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "Web API - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "508ec963-be1c-4f92-a4c4-e9dacf704a24", "sourceURL": "https://hono.dev/examples/web-api", "url": "https://hono.dev/examples/web-api", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I web api in hono?\n\nAssistant: To web api in hono, here's what you do:\nThis is an example of making Web API on Cloudflare Workers and other runtimes..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/web-api", "title": "Web API", "description": "This is an example of making Web API on Cloudflare Workers and other runtimes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:21", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "Web API - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "508ec963-be1c-4f92-a4c4-e9dacf704a24", "sourceURL": "https://hono.dev/examples/web-api", "url": "https://hono.dev/examples/web-api", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I code example in hono?\n\nAssistant: To code example in hono, here's what you do:\n```typescript\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\nimport { basicAuth } from 'hono/basic-auth'\nimport { prettyJSON } from 'hono/pretty-json'\nimport { getPosts, getPost, createPost, Post } from './model'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Pretty Blog API'))\napp.use(prettyJSON())\napp.notFound((c) => c.json({ message: 'Not Found', ok: false }, 404))\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst api = new Hono<{ Bindings: Bindings }>()\napi.use('/posts/*', cors())\n\napi.get('/posts', (c) => {\n  const { limit, offset } = c.req.query()\n  const posts = getPosts({ limit, offset })\n  return c.json({ posts })\n})\n\napi.get('/posts/:id', (c) => {\n  const id = c.req.param('id')\n  const post = getPost({ id })\n  return c.json({ post })\n})\n\napi.post(\n  '/posts',\n  async (c, next) => {\n    const auth = basicAuth({\n      username: c.env.USERNAME,\n      password: c.env.PASSWORD,\n    })\n    return auth(c, next)\n  },\n  async (c) => {\n    const post = await c.req.json<Post>()\n    const ok = createPost({ post })\n    return c.json({ ok })\n  }\n)\n\napp.route('/api', api)\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/web-api", "title": "Web API", "description": "This is an example of making Web API on Cloudflare Workers and other runtimes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:21", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "Web API - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "508ec963-be1c-4f92-a4c4-e9dacf704a24", "sourceURL": "https://hono.dev/examples/web-api", "url": "https://hono.dev/examples/web-api", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Web API in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Web API Example**:\n\n```yaml\n```typescript\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\nimport { basicAuth } from 'hono/basic-auth'\nimport { prettyJSON } from 'hono/pretty-json'\nimport { getPosts, getPost, createPost, Post } from './model'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Pretty Blog API'))\napp.use(prettyJSON())\napp.notFound((c) => c.json({ message: 'Not Found', ok: false }, 404))\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst api = new Hono<{ Bindings: Bindings }>()\napi.use('/posts/*', cors())\n\napi.get('/posts', (c) => {\n  const { limit, offset } = c.req.query()\n  const posts = getPosts({ limit, offset })\n  return c.json({ posts })\n})\n\napi.get('/posts/:id', (c) => {\n  const id = c.req.param('id')\n  const post = getPost({ id })\n  return c.json({ post })\n})\n\napi.post(\n  '/posts',\n  async (c, next) => {\n    const auth = basicAuth({\n      username: c.env.USERNAME,\n      password: c.env.PASSWORD,\n    })\n    return auth(c, next)\n  },\n  async (c) => {\n    const post = await c.req.json<Post>()\n    const ok = createPost({ post })\n    return c.json({ ok })\n  }\n)\n\napp.route('/api', api)\n\nexport default app\n```\n```\n\nThis snippet shows you how to web api example, which is an important aspect of web api.\n\n", "metadata": {"source_url": "https://hono.dev/examples/web-api", "title": "Web API", "description": "This is an example of making Web API on Cloudflare Workers and other runtimes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:21", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "Web API - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "508ec963-be1c-4f92-a4c4-e9dacf704a24", "sourceURL": "https://hono.dev/examples/web-api", "url": "https://hono.dev/examples/web-api", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Web API in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle authentication properly when creating posts.\n\nUse CORS middleware for handling cross-origin requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/web-api", "title": "Web API", "description": "This is an example of making Web API on Cloudflare Workers and other runtimes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:21", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "title": "Web API - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "508ec963-be1c-4f92-a4c4-e9dacf704a24", "sourceURL": "https://hono.dev/examples/web-api", "url": "https://hono.dev/examples/web-api", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what File Upload is in hono?\n\nAssistant: Sure, I'd be happy to explain File Upload in hono.\n\n# File Upload\n\nYou can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`.Here's a quick rundown of what this is about:\n\n## File Upload\n\nYou can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`.\n\n## See also\n\n- [API - HonoRequest - parseBody](https://hono.dev/docs/api/request#parsebody)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/file-upload", "title": "File Upload", "description": "You can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:45:25", "type": "overview", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "File Upload - Hono", "twitter:card": "summary_large_image", "scrapeId": "e9ec558a-d252-49dd-9d53-d8e67738f811", "sourceURL": "https://hono.dev/examples/file-upload", "url": "https://hono.dev/examples/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I file upload in hono?\n\nAssistant: To file upload in hono, here's what you do:\nYou can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/file-upload", "title": "File Upload", "description": "You can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:45:25", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "File Upload - Hono", "twitter:card": "summary_large_image", "scrapeId": "e9ec558a-d252-49dd-9d53-d8e67738f811", "sourceURL": "https://hono.dev/examples/file-upload", "url": "https://hono.dev/examples/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I see also in hono?\n\nAssistant: To see also in hono, here's what you do:\n- [API - HonoRequest - parseBody](https://hono.dev/docs/api/request#parsebody).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/file-upload", "title": "File Upload", "description": "You can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:45:25", "type": "section_detail", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "File Upload - Hono", "twitter:card": "summary_large_image", "scrapeId": "e9ec558a-d252-49dd-9d53-d8e67738f811", "sourceURL": "https://hono.dev/examples/file-upload", "url": "https://hono.dev/examples/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for File Upload in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**File Upload Example**:\n\n```yaml\nconst app = new Hono()\n\napp.post('/upload', async (c) => {\n  const body = await c.req.parseBody()\n  console.log(body['file']) // File | string\n})\n```\n\nThis snippet shows you how to file upload example, which is an important aspect of file upload.\n\n", "metadata": {"source_url": "https://hono.dev/examples/file-upload", "title": "File Upload", "description": "You can upload a file with `multipart/form-data` content type. The uploaded file will be available in `c.req.parseBody()`.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:45:25", "type": "code_examples", "page_metadata": {"language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "File Upload - Hono", "twitter:card": "summary_large_image", "scrapeId": "e9ec558a-d252-49dd-9d53-d8e67738f811", "sourceURL": "https://hono.dev/examples/file-upload", "url": "https://hono.dev/examples/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Swagger UI is in hono?\n\nAssistant: Sure, I'd be happy to explain Swagger UI in hono.\n\n# Swagger UI\n\nSwagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications.Here's a quick rundown of what this is about:\n\n## Swagger UI Middleware\n\nSwagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications.\n\n## Code Example\n\n```typescript\nimport { Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\n// Use the middleware to serve Swagger UI at /ui\napp.get('/ui', swaggerUI({ url: '/doc' }))\n\nexport default app\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/swagger-ui", "title": "Swagger UI", "description": "Swagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:48:44", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Swagger UI - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "scrapeId": "76724d62-2a43-4ff4-b6c3-1ecf59e80c57", "sourceURL": "https://hono.dev/examples/swagger-ui", "url": "https://hono.dev/examples/swagger-ui", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I swagger ui middleware in hono?\n\nAssistant: To swagger ui middleware in hono, here's what you do:\nSwagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/swagger-ui", "title": "Swagger UI", "description": "Swagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:48:44", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Swagger UI - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "scrapeId": "76724d62-2a43-4ff4-b6c3-1ecf59e80c57", "sourceURL": "https://hono.dev/examples/swagger-ui", "url": "https://hono.dev/examples/swagger-ui", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I code example in hono?\n\nAssistant: To code example in hono, here's what you do:\n```typescript\nimport { Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\n// Use the middleware to serve Swagger UI at /ui\napp.get('/ui', swaggerUI({ url: '/doc' }))\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/swagger-ui", "title": "Swagger UI", "description": "Swagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:48:44", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Swagger UI - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "scrapeId": "76724d62-2a43-4ff4-b6c3-1ecf59e80c57", "sourceURL": "https://hono.dev/examples/swagger-ui", "url": "https://hono.dev/examples/swagger-ui", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Swagger UI in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Swagger UI Integration Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\n// Use the middleware to serve Swagger UI at /ui\napp.get('/ui', swaggerUI({ url: '/doc' }))\n\nexport default app\n```\n\nThis snippet shows you how to swagger ui integration example, which is an important aspect of swagger ui.\n\n", "metadata": {"source_url": "https://hono.dev/examples/swagger-ui", "title": "Swagger UI", "description": "Swagger UI Middleware provides a middleware and a component for integrating Swagger UI with Hono applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 03:48:44", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "title": "Swagger UI - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "scrapeId": "76724d62-2a43-4ff4-b6c3-1ecf59e80c57", "sourceURL": "https://hono.dev/examples/swagger-ui", "url": "https://hono.dev/examples/swagger-ui", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what ETag Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain ETag Middleware in hono.\n\n# ETag Middleware\n\nUsing this middleware, you can add ETag headers easily.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.use('/etag/*', etag())\napp.get('/etag/abc', (c) => {\n  return c.text('Hono is cool')\n})\n```\n\n## The retained headers\n\nThe 304 Response must include the headers that would have been sent in an equivalent 200 OK response. The default headers are Cache-Control, Content-Location, Date, ETag, Expires, and Vary.\n\nIf you want to add the header that is sent, you can use `retainedHeaders` option and `RETAINED_304_HEADERS` strings array variable that includes the default headers:\n\n```ts\nimport { etag, RETAINED_304_HEADERS } from 'hono/etag'\n\n// ...\n\napp.use(\n  '/etag/*',\n  etag({\n    retainedHeaders: ['x-message', ...RETAINED_304_HEADERS],\n  })\n)\n```\n\n## Options\n\n### optional weak: `boolean`\n\nDefine using or not using a [weak validation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests#weak_validation). If `true` is set, then `w/` is added to the prefix of the value. The default is `false`.\n\n### optional retainedHeaders: `string[]`\n\nThe headers that you want to retain in the 304 Response.\n\n### optional generateDigest: `(body: Uint8Array) => ArrayBuffer | Promise<ArrayBuffer>`\n\nA custom digest generation function. By default, it uses `SHA-1`. This function is called with the response body as a `Uint8Array` and should return a hash as an `ArrayBuffer` or a Promise of one.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "overview", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use('/etag/*', etag())\napp.get('/etag/abc', (c) => {\n  return c.text('Hono is cool')\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I the retained headers in hono?\n\nAssistant: To the retained headers in hono, here's what you do:\nThe 304 Response must include the headers that would have been sent in an equivalent 200 OK response. The default headers are Cache-Control, Content-Location, Date, ETag, Expires, and Vary.\n\nIf you want to add the header that is sent, you can use `retainedHeaders` option and `RETAINED_304_HEADERS` strings array variable that includes the default headers:\n\n```ts\nimport { etag, RETAINED_304_HEADERS } from 'hono/etag'\n\n// ...\n\napp.use(\n  '/etag/*',\n  etag({\n    retainedHeaders: ['x-message', ...RETAINED_304_HEADERS],\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional weak: `boolean`\n\nDefine using or not using a [weak validation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests#weak_validation). If `true` is set, then `w/` is added to the prefix of the value. The default is `false`.\n\n### optional retainedHeaders: `string[]`\n\nThe headers that you want to retain in the 304 Response.\n\n### optional generateDigest: `(body: Uint8Array) => ArrayBuffer | Promise<ArrayBuffer>`\n\nA custom digest generation function. By default, it uses `SHA-1`. This function is called with the response body as a `Uint8Array` and should return a hash as an `ArrayBuffer` or a Promise of one..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for ETag Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\n```\n\nThis snippet shows you how to import example, which is an important aspect of etag middleware.\n\n**Usage Example**:\n\n```yaml\nconst app = new Hono()\n\napp.use('/etag/*', etag())\napp.get('/etag/abc', (c) => {\n  return c.text('Hono is cool')\n})\n```\n\nThis snippet shows you how to usage example, which is an important aspect of etag middleware.\n\n**Retained Headers Example**:\n\n```yaml\nimport { etag, RETAINED_304_HEADERS } from 'hono/etag'\n\n// ...\n\napp.use(\n  '/etag/*',\n  etag({\n    retainedHeaders: ['x-message', ...RETAINED_304_HEADERS],\n  })\n)\n```\n\nThis snippet shows you how to retained headers example, which is an important aspect of etag middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "code_examples", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using ETag Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `retainedHeaders` option to customize which headers are included in the 304 response.\n\nConsider using weak validation by setting the `weak` option to true if appropriate for your application.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/etag", "title": "ETag Middleware", "description": "Using this middleware, you can add ETag headers easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:48:59", "type": "best_practices", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "ETag Middleware - Hono", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "og:type": "website", "scrapeId": "9c4fb2c9-578d-40e2-9ee5-ed07e69ce385", "sourceURL": "https://hono.dev/docs/middleware/builtin/etag", "url": "https://hono.dev/docs/middleware/builtin/etag", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Logger Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Logger Middleware in hono.\n\n# Logger Middleware\n\nIt's a simple logger.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { logger } from 'hono/logger'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.use(logger())\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\n## Logging Details\n\nThe Logger Middleware logs the following details for each request:\n\n- **Incoming Request**: Logs the HTTP method, request path, and incoming request.\n- **Outgoing Response**: Logs the HTTP method, request path, response status code, and request/response times.\n- **Status Code Coloring**: Response status codes are color-coded for better visibility and quick identification of status categories. Different status code categories are represented by different colors.\n- **Elapsed Time**: The time taken for the request/response cycle is logged in a human-readable format, either in milliseconds (ms) or seconds (s).\n\nBy using the Logger Middleware, you can easily monitor the flow of requests and responses in your Hono application and quickly identify any issues or performance bottlenecks.\n\nYou can also extend the middleware further by providing your own `PrintFunc` function for tailored logging behavior.\n\n## PrintFunc\n\nThe Logger Middleware accepts an optional `PrintFunc` function as a parameter. This function allows you to customize the logger and add additional logs.\n\n## Options\n\n### optional fn: `PrintFunc(str: string, ...rest: string[])`\n\n- `str`: Passed by the logger.\n- `...rest`: Additional string props to be printed to console.\n\n## Example\n\nSetting up a custom `PrintFunc` function to the Logger Middleware:\n\n```ts\nexport const customLogger = (message: string, ...rest: string[]) => {\n  console.log(message, ...rest)\n}\n\napp.use(logger(customLogger))\n```\n\nSetting up the custom logger in a route:\n\n```ts\napp.post('/blog', (c) => {\n  // Routing logic\n\n  customLogger('Blog saved:', `Path: ${blog.url},`, `ID: ${blog.id}`)\n  // Output\n  // <-- POST /blog\n  // Blog saved: Path: /blog/example, ID: 1\n  // --> POST /blog 201 93ms\n\n  // Return Context\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "overview", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { logger } from 'hono/logger'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "section_detail", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use(logger())\napp.get('/', (c) => c.text('Hello Hono!'))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "section_detail", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I logging details in hono?\n\nAssistant: To logging details in hono, here's what you do:\nThe Logger Middleware logs the following details for each request:\n\n- **Incoming Request**: Logs the HTTP method, request path, and incoming request.\n- **Outgoing Response**: Logs the HTTP method, request path, response status code, and request/response times.\n- **Status Code Coloring**: Response status codes are color-coded for better visibility and quick identification of status categories. Different status code categories are represented by different colors.\n- **Elapsed Time**: The time taken for the request/response cycle is logged in a human-readable format, either in milliseconds (ms) or seconds (s).\n\nBy using the Logger Middleware, you can easily monitor the flow of requests and responses in your Hono application and quickly identify any issues or performance bottlenecks.\n\nYou can also extend the middleware further by providing your own `PrintFunc` function for tailored logging behavior..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "section_detail", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I printfunc in hono?\n\nAssistant: To printfunc in hono, here's what you do:\nThe Logger Middleware accepts an optional `PrintFunc` function as a parameter. This function allows you to customize the logger and add additional logs..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "section_detail", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional fn: `PrintFunc(str: string, ...rest: string[])`\n\n- `str`: Passed by the logger.\n- `...rest`: Additional string props to be printed to console..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "section_detail", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I example in hono?\n\nAssistant: To example in hono, here's what you do:\nSetting up a custom `PrintFunc` function to the Logger Middleware:\n\n```ts\nexport const customLogger = (message: string, ...rest: string[]) => {\n  console.log(message, ...rest)\n}\n\napp.use(logger(customLogger))\n```\n\nSetting up the custom logger in a route:\n\n```ts\napp.post('/blog', (c) => {\n  // Routing logic\n\n  customLogger('Blog saved:', `Path: ${blog.url},`, `ID: ${blog.id}`)\n  // Output\n  // <-- POST /blog\n  // Blog saved: Path: /blog/example, ID: 1\n  // --> POST /blog 201 93ms\n\n  // Return Context\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "section_detail", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Logger Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { logger } from 'hono/logger'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of logger middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.use(logger())\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of logger middleware.\n\n**Custom PrintFunc Example**:\n\n```yaml\n```ts\nexport const customLogger = (message: string, ...rest: string[]) => {\n  console.log(message, ...rest)\n}\n\napp.use(logger(customLogger))\n```\n```\n\nThis snippet shows you how to custom printfunc example, which is an important aspect of logger middleware.\n\n**Custom Logger in Route Example**:\n\n```yaml\n```ts\napp.post('/blog', (c) => {\n  // Routing logic\n\n  customLogger('Blog saved:', `Path: ${blog.url},`, `ID: ${blog.id}`)\n  // Output\n  // <-- POST /blog\n  // Blog saved: Path: /blog/example, ID: 1\n  // --> POST /blog 201 93ms\n\n  // Return Context\n})\n```\n```\n\nThis snippet shows you how to custom logger in route example, which is an important aspect of logger middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "code_examples", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Logger Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the Logger Middleware to monitor the flow of requests and responses in your application.\n\nCustomize the logging behavior by providing your own PrintFunc for tailored logging.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/logger", "title": "Logger Middleware", "description": "It's a simple logger.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:49:38", "type": "best_practices", "page_metadata": {"title": "Logger Middleware - Hono", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "272adcec-4113-47e1-a7ed-f3cd95ebcb26", "sourceURL": "https://hono.dev/docs/middleware/builtin/logger", "url": "https://hono.dev/docs/middleware/builtin/logger", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Bun is in hono?\n\nAssistant: Sure, I'd be happy to explain Bun in hono.\n\n# Bun\n\nBun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.Here's a quick rundown of what this is about:\n\n## 1. Install Bun\n\nTo install `bun` command, follow the instruction in [the official web site](https://bun.sh/).\n\n## 2. Setup\n\n### 2.1. Setup a new project\nA starter for Bun is available. Start your project with \"bun create\" command. Select `bun` template for this example.\n\nsh\n\n```\nbun create hono@latest my-app\n```\n\nMove into my-app and install the dependencies.\n\nsh\n\n```\ncd my-app\nbun install\n```\n\n### 2.2. Setup an existing project\nOn an existing Bun project, we only need to install `hono` dependencies on the project root directory via\n\nsh\n\n```\nbun add hono\n```\n\n## 3. Hello World\n\n\"Hello World\" script is below. Almost the same as writing on other platforms.\n\nts\n\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\n```\n\n## 4. Run\n\nRun the command.\n\nsh\n\n```\nbun run dev\n```\n\nThen, access `http://localhost:3000` in your browser.\n\n## Change port number\n\nYou can specify the port number with exporting the `port`.\n\nts\n\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\nexport default {\n  port: 3000,\n  fetch: app.fetch,\n}\n```\n\n## Serve static files\n\nTo serve static files, use `serveStatic` imported from `hono/bun`.\n\nts\n\n```\nimport { serveStatic } from 'hono/bun'\n\nconst app = new Hono()\n\napp.use('/static/*', serveStatic({ root: './' }))\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\napp.get('/', (c) => c.text('You can access: /static/hello.txt'))\napp.get('*', serveStatic({ path: './static/fallback.txt' }))\n```\n\nFor the above code, it will work well with the following directory structure.\n\n```\n./\n├── favicon.ico\n├── src\n└── static\n    ├── demo\n    │   └── index.html\n    ├── fallback.txt\n    ├── hello.txt\n    └── images\n        └── dinotocat.png\n```\n\n## `rewriteRequestPath`\n\nIf you want to map `http://localhost:3000/static/*` to `./statics`, you can use the `rewriteRequestPath` option:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    root: './',\n    rewriteRequestPath: (path) =>\n      path.replace(/^\\/static/, '/statics'),\n  })\n)\n```\n\n## `mimes`\n\nYou can add MIME types with `mimes`:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    mimes: {\n      m3u8: 'application/vnd.apple.mpegurl',\n      ts: 'video/mp2t',\n    },\n  })\n)\n```\n\n## `onFound`\n\nYou can specify handling when the requested file is found with `onFound`:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    // ...\n    onFound: (_path, c) => {\n      c.header('Cache-Control', `public, immutable, max-age=31536000`)\n    },\n  })\n)\n```\n\n## `onNotFound`\n\nYou can specify handling when the requested file is not found with `onNotFound`:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    onNotFound: (path, c) => {\n      console.log(`${path} is not found, you access ${c.req.path}`)\n    },\n  })\n)\n```\n\n## `precompressed`\n\nThe `precompressed` option checks if files with extensions like `.br` or `.gz` are available and serves them based on the `Accept-Encoding` header. It prioritizes Brotli, then Zstd, and Gzip. If none are available, it serves the original file.\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    precompressed: true,\n  })\n)\n```\n\n## Testing\n\nYou can use `bun:test` for testing on Bun.\n\nts\n\n```\nimport { describe, expect, it } from 'bun:test'\nimport app from '.'\n\ndescribe('My first test', () => {\n  it('Should return 200 Response', async () => {\n    const req = new Request('http://localhost/')\n    const res = await app.fetch(req)\n    expect(res.status).toBe(200)\n  })\n})\n```\n\nThen, run the command.\n\nsh\n\n```\nbun test index.test.ts\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. install bun in hono?\n\nAssistant: To 1. install bun in hono, here's what you do:\nTo install `bun` command, follow the instruction in [the official web site](https://bun.sh/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. setup in hono?\n\nAssistant: To 2. setup in hono, here's what you do:\n### 2.1. Setup a new project\nA starter for Bun is available. Start your project with \"bun create\" command. Select `bun` template for this example.\n\nsh\n\n```\nbun create hono@latest my-app\n```\n\nMove into my-app and install the dependencies.\n\nsh\n\n```\ncd my-app\nbun install\n```\n\n### 2.2. Setup an existing project\nOn an existing Bun project, we only need to install `hono` dependencies on the project root directory via\n\nsh\n\n```\nbun add hono\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. hello world in hono?\n\nAssistant: To 3. hello world in hono, here's what you do:\n\"Hello World\" script is below. Almost the same as writing on other platforms.\n\nts\n\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. run in hono?\n\nAssistant: To 4. run in hono, here's what you do:\nRun the command.\n\nsh\n\n```\nbun run dev\n```\n\nThen, access `http://localhost:3000` in your browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I change port number in hono?\n\nAssistant: To change port number in hono, here's what you do:\nYou can specify the port number with exporting the `port`.\n\nts\n\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\nexport default {\n  port: 3000,\n  fetch: app.fetch,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I serve static files in hono?\n\nAssistant: To serve static files in hono, here's what you do:\nTo serve static files, use `serveStatic` imported from `hono/bun`.\n\nts\n\n```\nimport { serveStatic } from 'hono/bun'\n\nconst app = new Hono()\n\napp.use('/static/*', serveStatic({ root: './' }))\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\napp.get('/', (c) => c.text('You can access: /static/hello.txt'))\napp.get('*', serveStatic({ path: './static/fallback.txt' }))\n```\n\nFor the above code, it will work well with the following directory structure.\n\n```\n./\n├── favicon.ico\n├── src\n└── static\n    ├── demo\n    │   └── index.html\n    ├── fallback.txt\n    ├── hello.txt\n    └── images\n        └── dinotocat.png\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `rewriterequestpath` in hono?\n\nAssistant: To `rewriterequestpath` in hono, here's what you do:\nIf you want to map `http://localhost:3000/static/*` to `./statics`, you can use the `rewriteRequestPath` option:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    root: './',\n    rewriteRequestPath: (path) =>\n      path.replace(/^\\/static/, '/statics'),\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `mimes` in hono?\n\nAssistant: To `mimes` in hono, here's what you do:\nYou can add MIME types with `mimes`:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    mimes: {\n      m3u8: 'application/vnd.apple.mpegurl',\n      ts: 'video/mp2t',\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `onfound` in hono?\n\nAssistant: To `onfound` in hono, here's what you do:\nYou can specify handling when the requested file is found with `onFound`:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    // ...\n    onFound: (_path, c) => {\n      c.header('Cache-Control', `public, immutable, max-age=31536000`)\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `onnotfound` in hono?\n\nAssistant: To `onnotfound` in hono, here's what you do:\nYou can specify handling when the requested file is not found with `onNotFound`:\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    onNotFound: (path, c) => {\n      console.log(`${path} is not found, you access ${c.req.path}`)\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `precompressed` in hono?\n\nAssistant: To `precompressed` in hono, here's what you do:\nThe `precompressed` option checks if files with extensions like `.br` or `.gz` are available and serves them based on the `Accept-Encoding` header. It prioritizes Brotli, then Zstd, and Gzip. If none are available, it serves the original file.\n\nts\n\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    precompressed: true,\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I testing in hono?\n\nAssistant: To testing in hono, here's what you do:\nYou can use `bun:test` for testing on Bun.\n\nts\n\n```\nimport { describe, expect, it } from 'bun:test'\nimport app from '.'\n\ndescribe('My first test', () => {\n  it('Should return 200 Response', async () => {\n    const req = new Request('http://localhost/')\n    const res = await app.fetch(req)\n    expect(res.status).toBe(200)\n  })\n})\n```\n\nThen, run the command.\n\nsh\n\n```\nbun test index.test.ts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Bun in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup a new project**:\n\n```yaml\nbun create hono@latest my-app\n```\n\nThis snippet shows you how to setup a new project, which is an important aspect of bun.\n\n**Install dependencies**:\n\n```yaml\ncd my-app\nbun install\n```\n\nThis snippet shows you how to install dependencies, which is an important aspect of bun.\n\n**Add hono dependencies**:\n\n```yaml\nbun add hono\n```\n\nThis snippet shows you how to add hono dependencies, which is an important aspect of bun.\n\n**Hello World script**:\n\n```yaml\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\n```\n\nThis snippet shows you how to hello world script, which is an important aspect of bun.\n\n**Run command**:\n\n```yaml\nbun run dev\n```\n\nThis snippet shows you how to run command, which is an important aspect of bun.\n\n**Change port number**:\n\n```yaml\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\nexport default {\n  port: 3000,\n  fetch: app.fetch,\n}\n```\n\nThis snippet shows you how to change port number, which is an important aspect of bun.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "code_examples", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Bun in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFollow the official website for installation instructions.\n\nUse 'bun create' to start a new project with the Bun template.\n\nFor existing projects, install 'hono' dependencies in the project root directory.\n\nAccess your application at 'http://localhost:3000' after running it.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/bun", "title": "Bun", "description": "Bun is another JavaScript runtime. It's not Node.js or Deno. Bun includes a trans compiler, we can write the code with TypeScript. Hono also works on Bun.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:50:20", "type": "best_practices", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "title": "Bun - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "scrapeId": "ae32227c-70e4-4154-8b44-cc04370f2066", "sourceURL": "https://hono.dev/docs/getting-started/bun", "url": "https://hono.dev/docs/getting-started/bun", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Getting Started with Node.js is in hono?\n\nAssistant: Sure, I'd be happy to explain Getting Started with Node.js in hono.\n\n# Getting Started with Node.js\n\nThis page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.Here's a quick rundown of what this is about:\n\n## Node.js\n\nNode.js is an open-source, cross-platform JavaScript runtime environment.\n\nHono was not designed for Node.js at first. But with a Node.js Adapter it can run on Node.js as well.\n\nINFO\n\nIt works on Node.js versions greater than 18.x. The specific required Node.js versions are as follows:\n\n- 18.x => 18.14.1+\n- 19.x => 19.7.0+\n- 20.x => 20.0.0+\n\nEssentially, you can simply use the latest version of each major release.\n\n## 1. Setup\n\nA starter for Node.js is available. Start your project with \"create-hono\" command. Select `nodejs` template for this example.\n\n```\nnpm create hono@latest my-app\n```\n\n```\nyarn create hono my-app\n```\n\n```\npnpm create hono my-app\n```\n\n```\nbun create hono@latest my-app\n```\n\n```\ndeno init --npm hono my-app\n```\n\nMove to `my-app` and install the dependencies.\n\n```\ncd my-app\nnpm i\n```\n\n```\ncd my-app\nyarn\n```\n\n```\ncd my-app\npnpm i\n```\n\n```\ncd my-app\nbun i\n```\n\n## 2. Hello World\n\nEdit `src/index.ts`:\n\n```\nimport { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Node.js!'))\n\nserve(app)\n```\n\n## 3. Run\n\nRun the development server locally. Then, access `http://localhost:3000` in your Web browser.\n\n```\nnpm run dev\n```\n\n```\nyarn dev\n```\n\n```\npnpm dev\n```\n\n## Change port number\n\nYou can specify the port number with the `port` option.\n\n```\nserve({\n  fetch: app.fetch,\n  port: 8787,\n})\n```\n\n## Access the raw Node.js APIs\n\nYou can access the Node.js APIs from `c.env.incoming` and `c.env.outgoing`.\n\n```\nimport { Hono } from 'hono'\nimport { serve, type HttpBindings } from '@hono/node-server'\n// or `Http2Bindings` if you use HTTP2\n\ntype Bindings = HttpBindings & {\n  /* ... */\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/', (c) => {\n  return c.json({\n    remoteAddress: c.env.incoming.socket.remoteAddress,\n  })\n})\n\nserve(app)\n```\n\n## Serve static files\n\nYou can use `serveStatic` to serve static files from the local file system. For example, suppose the directory structure is as follows:\n\n```\n./\n├── favicon.ico\n├── index.ts\n└── static\n    ├── hello.txt\n    └── image.png\n```\n\nIf access to the path `/static/*` comes in and returns a file under `./static`, you can write the following:\n\n```\nimport { serveStatic } from '@hono/node-server/serve-static'\n\napp.use('/static/*', serveStatic({ root: './' }))\n```\n\nUse the `path` option to serve `favicon.ico` in the directory root:\n\n```\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\n```\n\nIf access comes to the path `/hello.txt` or `/image.png` and returns a file named `./static/hello.txt` or `./static/image.png`, you can use the following:\n\n```\napp.use('*', serveStatic({ root: './static' }))\n```\n\n## http2\n\nYou can run hono on a Node.js http2 Server.\n\n### unencrypted http2\n\n```\nimport { createServer } from 'node:http2'\n\nconst server = serve({\n  fetch: app.fetch,\n  createServer,\n})\n```\n\n### encrypted http2\n\n```\nimport { createSecureServer } from 'node:http2'\nimport { readFileSync } from 'node:fs'\n\nconst server = serve({\n  fetch: app.fetch,\n  createServer: createSecureServer,\n  serverOptions: {\n    key: readFileSync('localhost-privkey.pem'),\n    cert: readFileSync('localhost-cert.pem'),\n  },\n})\n```\n\n## Dockerfile\n\nHere is an example of a Dockerfile.\n\n```\nFROM node:20-alpine AS base\n\nFROM base AS builder\n\nRUN apk add --no-cache gcompat\nWORKDIR /app\n\nCOPY package*json tsconfig.json src ./\n\nRUN npm ci && \\\n    npm run build && \\\n    npm prune --production\n\nFROM base AS runner\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 hono\n\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\nCOPY --from=builder --chown=hono:nodejs /app/package.json /app/package.json\n\nUSER hono\nEXPOSE 3000\n\nCMD [\"node\", \"/app/dist/index.js\"]\n```\n\nThe following steps shall be taken in advance.\n1. Add `\"outDir\": \"./dist\"` to the `compilerOptions` section `tsconfig.json`.\n2. Add `\"exclude\": [\"node_modules\"]` to `tsconfig.json`.\n3. Add `\"build\": \"tsc\"` to `script` section of `package.json`.\n4. Run `npm install typescript --save-dev`.\n5. Add `\"type\": \"module\"` to `package.json`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "overview", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I node.js in hono?\n\nAssistant: To node.js in hono, here's what you do:\nNode.js is an open-source, cross-platform JavaScript runtime environment.\n\nHono was not designed for Node.js at first. But with a Node.js Adapter it can run on Node.js as well.\n\nINFO\n\nIt works on Node.js versions greater than 18.x. The specific required Node.js versions are as follows:\n\n- 18.x => 18.14.1+\n- 19.x => 19.7.0+\n- 20.x => 20.0.0+\n\nEssentially, you can simply use the latest version of each major release..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nA starter for Node.js is available. Start your project with \"create-hono\" command. Select `nodejs` template for this example.\n\n```\nnpm create hono@latest my-app\n```\n\n```\nyarn create hono my-app\n```\n\n```\npnpm create hono my-app\n```\n\n```\nbun create hono@latest my-app\n```\n\n```\ndeno init --npm hono my-app\n```\n\nMove to `my-app` and install the dependencies.\n\n```\ncd my-app\nnpm i\n```\n\n```\ncd my-app\nyarn\n```\n\n```\ncd my-app\npnpm i\n```\n\n```\ncd my-app\nbun i\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `src/index.ts`:\n\n```\nimport { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Node.js!'))\n\nserve(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nRun the development server locally. Then, access `http://localhost:3000` in your Web browser.\n\n```\nnpm run dev\n```\n\n```\nyarn dev\n```\n\n```\npnpm dev\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I change port number in hono?\n\nAssistant: To change port number in hono, here's what you do:\nYou can specify the port number with the `port` option.\n\n```\nserve({\n  fetch: app.fetch,\n  port: 8787,\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I access the raw node.js apis in hono?\n\nAssistant: To access the raw node.js apis in hono, here's what you do:\nYou can access the Node.js APIs from `c.env.incoming` and `c.env.outgoing`.\n\n```\nimport { Hono } from 'hono'\nimport { serve, type HttpBindings } from '@hono/node-server'\n// or `Http2Bindings` if you use HTTP2\n\ntype Bindings = HttpBindings & {\n  /* ... */\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/', (c) => {\n  return c.json({\n    remoteAddress: c.env.incoming.socket.remoteAddress,\n  })\n})\n\nserve(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I serve static files in hono?\n\nAssistant: To serve static files in hono, here's what you do:\nYou can use `serveStatic` to serve static files from the local file system. For example, suppose the directory structure is as follows:\n\n```\n./\n├── favicon.ico\n├── index.ts\n└── static\n    ├── hello.txt\n    └── image.png\n```\n\nIf access to the path `/static/*` comes in and returns a file under `./static`, you can write the following:\n\n```\nimport { serveStatic } from '@hono/node-server/serve-static'\n\napp.use('/static/*', serveStatic({ root: './' }))\n```\n\nUse the `path` option to serve `favicon.ico` in the directory root:\n\n```\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\n```\n\nIf access comes to the path `/hello.txt` or `/image.png` and returns a file named `./static/hello.txt` or `./static/image.png`, you can use the following:\n\n```\napp.use('*', serveStatic({ root: './static' }))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I http2 in hono?\n\nAssistant: To http2 in hono, here's what you do:\nYou can run hono on a Node.js http2 Server.\n\n### unencrypted http2\n\n```\nimport { createServer } from 'node:http2'\n\nconst server = serve({\n  fetch: app.fetch,\n  createServer,\n})\n```\n\n### encrypted http2\n\n```\nimport { createSecureServer } from 'node:http2'\nimport { readFileSync } from 'node:fs'\n\nconst server = serve({\n  fetch: app.fetch,\n  createServer: createSecureServer,\n  serverOptions: {\n    key: readFileSync('localhost-privkey.pem'),\n    cert: readFileSync('localhost-cert.pem'),\n  },\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I dockerfile in hono?\n\nAssistant: To dockerfile in hono, here's what you do:\nHere is an example of a Dockerfile.\n\n```\nFROM node:20-alpine AS base\n\nFROM base AS builder\n\nRUN apk add --no-cache gcompat\nWORKDIR /app\n\nCOPY package*json tsconfig.json src ./\n\nRUN npm ci && \\\n    npm run build && \\\n    npm prune --production\n\nFROM base AS runner\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 hono\n\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\nCOPY --from=builder --chown=hono:nodejs /app/package.json /app/package.json\n\nUSER hono\nEXPOSE 3000\n\nCMD [\"node\", \"/app/dist/index.js\"]\n```\n\nThe following steps shall be taken in advance.\n1. Add `\"outDir\": \"./dist\"` to the `compilerOptions` section `tsconfig.json`.\n2. Add `\"exclude\": [\"node_modules\"]` to `tsconfig.json`.\n3. Add `\"build\": \"tsc\"` to `script` section of `package.json`.\n4. Run `npm install typescript --save-dev`.\n5. Add `\"type\": \"module\"` to `package.json`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "section_detail", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Getting Started with Node.js in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup Commands**:\n\n```yaml\nnpm create hono@latest my-app\n\nyarn create hono my-app\n\npnpm create hono my-app\n\nbun create hono@latest my-app\n\ndeno init --npm hono my-app\n```\n\nThis snippet shows you how to setup commands, which is an important aspect of getting started with node.js.\n\n**Hello World Example**:\n\n```yaml\nimport { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Node.js!'))\n\nserve(app)\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of getting started with node.js.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "code_examples", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Getting Started with Node.js in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the latest version of Node.js for compatibility with Hono.\n\nEnsure to install dependencies after creating the project.\n\nWhen serving static files, ensure the directory structure is correctly set up.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/nodejs", "title": "Getting Started with Node.js", "description": "This page provides a comprehensive guide on how to set up and run Hono on Node.js, including installation, basic usage, and advanced features.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:51:04", "type": "best_practices", "page_metadata": {"title": "Node.js - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "twitter:card": "summary_large_image", "scrapeId": "ebec0d3d-607d-4268-ab30-8503191676f7", "sourceURL": "https://hono.dev/docs/getting-started/nodejs", "url": "https://hono.dev/docs/getting-started/nodejs", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Client Components is in hono?\n\nAssistant: Sure, I'd be happy to explain Client Components in hono.\n\n# Client Components\n\n`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.Here's a quick rundown of what this is about:\n\n## Counter example\n\nHere is an example of a simple counter, the same code works as in React.\n\n## `render()`\n\nYou can use `render()` to insert JSX components within a specified HTML element.\n\n## Hooks compatible with React\n\nhono/jsx/dom has Hooks that are compatible or partially compatible with React. You can learn about these APIs by looking at [the React documentation](https://react.dev/reference/react/hooks).\n\n## `startViewTransition()` family\n\nThe `startViewTransition()` family contains original hooks and functions to handle [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) easily.\n\n## The `hono/jsx/dom` runtime\n\nThere is a small JSX Runtime for Client Components. Using this will result in smaller bundled results than using `hono/jsx`. Specify `hono/jsx/dom` in `tsconfig.json`. For Deno, modify the deno.json.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I counter example in hono?\n\nAssistant: To counter example in hono, here's what you do:\nHere is an example of a simple counter, the same code works as in React..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `render()` in hono?\n\nAssistant: To `render()` in hono, here's what you do:\nYou can use `render()` to insert JSX components within a specified HTML element..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I hooks compatible with react in hono?\n\nAssistant: To hooks compatible with react in hono, here's what you do:\nhono/jsx/dom has Hooks that are compatible or partially compatible with React. You can learn about these APIs by looking at [the React documentation](https://react.dev/reference/react/hooks)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `startviewtransition()` family in hono?\n\nAssistant: To `startviewtransition()` family in hono, here's what you do:\nThe `startViewTransition()` family contains original hooks and functions to handle [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) easily..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I the `hono/jsx/dom` runtime in hono?\n\nAssistant: To the `hono/jsx/dom` runtime in hono, here's what you do:\nThere is a small JSX Runtime for Client Components. Using this will result in smaller bundled results than using `hono/jsx`. Specify `hono/jsx/dom` in `tsconfig.json`. For Deno, modify the deno.json..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Client Components in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Counter example**:\n\n```yaml\nimport { useState } from 'hono/jsx'\nimport { render } from 'hono/jsx/dom'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <html>\n      <body>\n        <Counter />\n      </body>\n    </html>\n  )\n}\n\nconst root = document.getElementById('root')\nrender(<App />, root)\n```\n\nThis snippet shows you how to counter example, which is an important aspect of client components.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/jsx-dom", "title": "Client Components", "description": "`hono/jsx` supports not only server side but also client side. This means that it is possible to create an interactive UI that runs in the browser. We call it Client Components or `hono/jsx/dom`.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:51:14", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "website", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Client Components - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "a81b0404-92c4-4273-a728-2319e6bc6439", "sourceURL": "https://hono.dev/docs/guides/jsx-dom", "url": "https://hono.dev/docs/guides/jsx-dom", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Timeout Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Timeout Middleware in hono.\n\n# Timeout Middleware\n\nThe Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { timeout } from 'hono/timeout'\n```\n\n## Usage\n\nHere's how to use the Timeout Middleware with both default and custom settings:\n\nDefault Settings:\n\n```ts\nconst app = new Hono()\n\n// Applying a 5-second timeout\napp.use('/api', timeout(5000))\n\n// Handling a route\napp.get('/api/data', async (c) => {\n  // Your route handler logic\n  return c.json({ data: 'Your data here' })\n})\n```\n\nCustom settings:\n\n```ts\nimport { HTTPException } from 'hono/http-exception'\n\n// Custom exception factory function\nconst customTimeoutException = (context) =>\n  new HTTPException(408, {\n    message: `Request timeout after waiting ${context.req.headers.get(\n      'Duration'\n    )} seconds. Please try again later.`,\n  })\n\n// for Static Exception Message\n// const customTimeoutException = new HTTPException(408, {\n//   message: 'Operation timed out. Please try again later.'\n// });\n\n// Applying a 1-minute timeout with a custom exception\napp.use('/api/long-process', timeout(60000, customTimeoutException))\n\napp.get('/api/long-process', async (c) => {\n  // Simulate a long process\n  await new Promise((resolve) => setTimeout(resolve, 61000))\n  return c.json({ data: 'This usually takes longer' })\n})\n```\n\n## Notes\n\n- The duration for the timeout can be specified in milliseconds. The middleware will automatically reject the promise and potentially throw an error if the specified duration is exceeded.\n\n- The timeout middleware cannot be used with stream Thus, use `stream.close` and `setTimeout` together.\n\n```ts\napp.get('/sse', async (c) => {\n  let id = 0\n  let running = true\n  let timer: number | undefined\n\n  return streamSSE(c, async (stream) => {\n    timer = setTimeout(() => {\n      console.log('Stream timeout reached, closing stream')\n      stream.close()\n    }, 3000) as unknown as number\n\n    stream.onAbort(async () => {\n      console.log('Client closed connection')\n      running = false\n      clearTimeout(timer)\n    })\n\n    while (running) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```\n\n## Middleware Conflicts\n\nBe cautious about the order of middleware, especially when using error-handling or other timing-related middleware, as it might affect the behavior of this timeout middleware.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "overview", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { timeout } from 'hono/timeout'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nHere's how to use the Timeout Middleware with both default and custom settings:\n\nDefault Settings:\n\n```ts\nconst app = new Hono()\n\n// Applying a 5-second timeout\napp.use('/api', timeout(5000))\n\n// Handling a route\napp.get('/api/data', async (c) => {\n  // Your route handler logic\n  return c.json({ data: 'Your data here' })\n})\n```\n\nCustom settings:\n\n```ts\nimport { HTTPException } from 'hono/http-exception'\n\n// Custom exception factory function\nconst customTimeoutException = (context) =>\n  new HTTPException(408, {\n    message: `Request timeout after waiting ${context.req.headers.get(\n      'Duration'\n    )} seconds. Please try again later.`,\n  })\n\n// for Static Exception Message\n// const customTimeoutException = new HTTPException(408, {\n//   message: 'Operation timed out. Please try again later.'\n// });\n\n// Applying a 1-minute timeout with a custom exception\napp.use('/api/long-process', timeout(60000, customTimeoutException))\n\napp.get('/api/long-process', async (c) => {\n  // Simulate a long process\n  await new Promise((resolve) => setTimeout(resolve, 61000))\n  return c.json({ data: 'This usually takes longer' })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I notes in hono?\n\nAssistant: To notes in hono, here's what you do:\n- The duration for the timeout can be specified in milliseconds. The middleware will automatically reject the promise and potentially throw an error if the specified duration is exceeded.\n\n- The timeout middleware cannot be used with stream Thus, use `stream.close` and `setTimeout` together.\n\n```ts\napp.get('/sse', async (c) => {\n  let id = 0\n  let running = true\n  let timer: number | undefined\n\n  return streamSSE(c, async (stream) => {\n    timer = setTimeout(() => {\n      console.log('Stream timeout reached, closing stream')\n      stream.close()\n    }, 3000) as unknown as number\n\n    stream.onAbort(async () => {\n      console.log('Client closed connection')\n      running = false\n      clearTimeout(timer)\n    })\n\n    while (running) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I middleware conflicts in hono?\n\nAssistant: To middleware conflicts in hono, here's what you do:\nBe cautious about the order of middleware, especially when using error-handling or other timing-related middleware, as it might affect the behavior of this timeout middleware..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Timeout Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { timeout } from 'hono/timeout'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of timeout middleware.\n\n**Default Settings Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\n// Applying a 5-second timeout\napp.use('/api', timeout(5000))\n\n// Handling a route\napp.get('/api/data', async (c) => {\n  // Your route handler logic\n  return c.json({ data: 'Your data here' })\n})\n```\n```\n\nThis snippet shows you how to default settings example, which is an important aspect of timeout middleware.\n\n**Custom Settings Example**:\n\n```yaml\n```ts\nimport { HTTPException } from 'hono/http-exception'\n\n// Custom exception factory function\nconst customTimeoutException = (context) =>\n  new HTTPException(408, {\n    message: `Request timeout after waiting ${context.req.headers.get(\n      'Duration'\n    )} seconds. Please try again later.`,\n  })\n\n// Applying a 1-minute timeout with a custom exception\napp.use('/api/long-process', timeout(60000, customTimeoutException))\n\napp.get('/api/long-process', async (c) => {\n  // Simulate a long process\n  await new Promise((resolve) => setTimeout(resolve, 61000))\n  return c.json({ data: 'This usually takes longer' })\n})\n```\n```\n\nThis snippet shows you how to custom settings example, which is an important aspect of timeout middleware.\n\n**SSE Example with Timeout**:\n\n```yaml\n```ts\napp.get('/sse', async (c) => {\n  let id = 0\n  let running = true\n  let timer: number | undefined\n\n  return streamSSE(c, async (stream) => {\n    timer = setTimeout(() => {\n      console.log('Stream timeout reached, closing stream')\n      stream.close()\n    }, 3000) as unknown as number\n\n    stream.onAbort(async () => {\n      console.log('Client closed connection')\n      running = false\n      clearTimeout(timer)\n    })\n\n    while (running) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```\n```\n\nThis snippet shows you how to sse example with timeout, which is an important aspect of timeout middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "code_examples", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Timeout Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe duration for the timeout can be specified in milliseconds.\n\nBe cautious about the order of middleware, especially when using error-handling or other timing-related middleware.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timeout", "title": "Timeout Middleware", "description": "The Timeout Middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and optionally define custom error responses if the specified timeout is exceeded.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:51:38", "type": "best_practices", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "title": "Timeout Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7d135c1b-3714-4ef6-a13e-ccf69e18820c", "sourceURL": "https://hono.dev/docs/middleware/builtin/timeout", "url": "https://hono.dev/docs/middleware/builtin/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Best Practices is in hono?\n\nAssistant: Sure, I'd be happy to explain Best Practices in hono.\n\n# Best Practices\n\nHono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.Here's a quick rundown of what this is about:\n\n## Don't make \"Controllers\" when possible\n\nWhen possible, you should not create \"Ruby on Rails-like Controllers\".\n\n```ts\n// 🙁\n// A RoR-like Controller\nconst booksList = (c: Context) => {\n  return c.json('list books')\n}\n\napp.get('/books', booksList)\n```\n\nThe issue is related to types. For example, the path parameter cannot be inferred in the Controller without writing complex generics.\n\n```ts\n// 🙁\n// A RoR-like Controller\nconst bookPermalink = (c: Context) => {\n  const id = c.req.param('id') // Can't infer the path param\n  return c.json(`get ${id}`)\n}\n```\n\nTherefore, you don't need to create RoR-like controllers and should write handlers directly after path definitions.\n\n```ts\n// 😃\napp.get('/books/:id', (c) => {\n  const id = c.req.param('id') // Can infer the path param\n  return c.json(`get ${id}`)\n})\n```\n\n## `factory.createHandlers()` in `hono/factory`\n\nIf you still want to create a RoR-like Controller, use `factory.createHandlers()` in [`hono/factory`](https://hono.dev/docs/helpers/factory). If you use this, type inference will work correctly.\n\n```ts\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\n// 😃\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```\n\n## Building a larger application\n\nUse `app.route()` to build a larger application without creating \"Ruby on Rails-like Controllers\".\n\nIf your application has `/authors` and `/books` endpoints and you wish to separate files from `index.ts`, create `authors.ts` and `books.ts`.\n\n```ts\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list authors'))\napp.post('/', (c) => c.json('create an author', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\n```ts\n// books.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list books'))\napp.post('/', (c) => c.json('create a book', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nThen, import them and mount on the paths `/authors` and `/books` with `app.route()`.\n\n```ts\n// index.ts\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\n// 😃\napp.route('/authors', authors)\napp.route('/books', books)\n\nexport default app\n```\n\n## If you want to use RPC features\n\nThe code above works well for normal use cases. However, if you want to use the `RPC` feature, you can get the correct type by chaining as follows.\n\n```ts\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nIf you pass the type of the `app` to `hc`, it will get the correct type.\n\n```ts\nimport app from './authors'\nimport { hc } from 'hono/client'\n\n// 😃\nconst client = hc<typeof app>('http://localhost') // Typed correctly\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I don't make \"controllers\" when possible in hono?\n\nAssistant: To don't make \"controllers\" when possible in hono, here's what you do:\nWhen possible, you should not create \"Ruby on Rails-like Controllers\".\n\n```ts\n// 🙁\n// A RoR-like Controller\nconst booksList = (c: Context) => {\n  return c.json('list books')\n}\n\napp.get('/books', booksList)\n```\n\nThe issue is related to types. For example, the path parameter cannot be inferred in the Controller without writing complex generics.\n\n```ts\n// 🙁\n// A RoR-like Controller\nconst bookPermalink = (c: Context) => {\n  const id = c.req.param('id') // Can't infer the path param\n  return c.json(`get ${id}`)\n}\n```\n\nTherefore, you don't need to create RoR-like controllers and should write handlers directly after path definitions.\n\n```ts\n// 😃\napp.get('/books/:id', (c) => {\n  const id = c.req.param('id') // Can infer the path param\n  return c.json(`get ${id}`)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `factory.createhandlers()` in `hono/factory` in hono?\n\nAssistant: To `factory.createhandlers()` in `hono/factory` in hono, here's what you do:\nIf you still want to create a RoR-like Controller, use `factory.createHandlers()` in [`hono/factory`](https://hono.dev/docs/helpers/factory). If you use this, type inference will work correctly.\n\n```ts\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\n// 😃\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I building a larger application in hono?\n\nAssistant: To building a larger application in hono, here's what you do:\nUse `app.route()` to build a larger application without creating \"Ruby on Rails-like Controllers\".\n\nIf your application has `/authors` and `/books` endpoints and you wish to separate files from `index.ts`, create `authors.ts` and `books.ts`.\n\n```ts\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list authors'))\napp.post('/', (c) => c.json('create an author', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\n```ts\n// books.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list books'))\napp.post('/', (c) => c.json('create a book', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nThen, import them and mount on the paths `/authors` and `/books` with `app.route()`.\n\n```ts\n// index.ts\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\n// 😃\napp.route('/authors', authors)\napp.route('/books', books)\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I if you want to use rpc features in hono?\n\nAssistant: To if you want to use rpc features in hono, here's what you do:\nThe code above works well for normal use cases. However, if you want to use the `RPC` feature, you can get the correct type by chaining as follows.\n\n```ts\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nIf you pass the type of the `app` to `hc`, it will get the correct type.\n\n```ts\nimport app from './authors'\nimport { hc } from 'hono/client'\n\n// 😃\nconst client = hc<typeof app>('http://localhost') // Typed correctly\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Best Practices in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**RoR-like Controller Example**:\n\n```yaml\n// 🙁\n// A RoR-like Controller\nconst booksList = (c: Context) => {\n  return c.json('list books')\n}\n\napp.get('/books', booksList)\n```\n\nThis snippet shows you how to ror-like controller example, which is an important aspect of best practices.\n\n**Path Parameter Inference Issue**:\n\n```yaml\n// 🙁\n// A RoR-like Controller\nconst bookPermalink = (c: Context) => {\n  const id = c.req.param('id') // Can't infer the path param\n  return c.json(`get ${id}`)\n}\n```\n\nThis snippet shows you how to path parameter inference issue, which is an important aspect of best practices.\n\n**Direct Handler Example**:\n\n```yaml\n// 😃\napp.get('/books/:id', (c) => {\n  const id = c.req.param('id') // Can infer the path param\n  return c.json(`get ${id}`)\n})\n```\n\nThis snippet shows you how to direct handler example, which is an important aspect of best practices.\n\n**Using factory.createHandlers()**:\n\n```yaml\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\n// 😃\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```\n\nThis snippet shows you how to using factory.createhandlers(), which is an important aspect of best practices.\n\n**Authors Route Example**:\n\n```yaml\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list authors'))\napp.post('/', (c) => c.json('create an author', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nThis snippet shows you how to authors route example, which is an important aspect of best practices.\n\n**Books Route Example**:\n\n```yaml\n// books.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list books'))\napp.post('/', (c) => c.json('create a book', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nThis snippet shows you how to books route example, which is an important aspect of best practices.\n\n**Index File Example**:\n\n```yaml\n// index.ts\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\n// 😃\napp.route('/authors', authors)\napp.route('/books', books)\n\nexport default app\n```\n\nThis snippet shows you how to index file example, which is an important aspect of best practices.\n\n**RPC Feature Example**:\n\n```yaml\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nThis snippet shows you how to rpc feature example, which is an important aspect of best practices.\n\n**Typed RPC Client Example**:\n\n```yaml\nimport app from './authors'\nimport { hc } from 'hono/client'\n\n// 😃\nconst client = hc<typeof app>('http://localhost') // Typed correctly\n```\n\nThis snippet shows you how to typed rpc client example, which is an important aspect of best practices.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "code_examples", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Best Practices in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid creating \"Ruby on Rails-like Controllers\".\n\nUse `factory.createHandlers()` for type inference if you need a controller-like structure.\n\nUtilize `app.route()` to manage larger applications effectively.\n\nFor RPC features, ensure to pass the type of the app to get correct typing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/best-practices", "title": "Best Practices", "description": "Hono is very flexible. You can write your app as you like. However, there are best practices that are better to follow.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:27", "type": "best_practices", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Best Practices - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9f429267-71d5-4001-b742-1dee2b74b08f", "sourceURL": "https://hono.dev/docs/guides/best-practices", "url": "https://hono.dev/docs/guides/best-practices", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what JWT Auth Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain JWT Auth Middleware in hono.\n\n# JWT Auth Middleware\n\nThe JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { jwt } from 'hono/jwt'\nimport type { JwtVariables } from 'hono/jwt'\n```\n\n## Usage\n\n```ts\n// Specify the variable types to infer the `c.get('jwtPayload')`:\ntype Variables = JwtVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\nGet payload:\n\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```\n\n## TIP\n\n`jwt()` is just a middleware function. If you want to use an environment variable (eg: `c.env.JWT_SECRET`), you can use it as follows:\n\n```js\napp.use('/auth/*', (c, next) => {\n  const jwtMiddleware = jwt({\n    secret: c.env.JWT_SECRET,\n  })\n  return jwtMiddleware(c, next)\n})\n```\n\n## Options\n\n### required secret: `string`\nA value of your secret key.\n\n### optional cookie: `string`\nIf this value is set, then the value is retrieved from the cookie header using that value as a key, which is then validated as a token.\n\n### optional alg: `string`\nAn algorithm type that is used for verifying.\n\nThe default is `HS256`.\n\nAvailable types are `HS256` | `HS384` | `HS512` | `RS256` | `RS384` | `RS512` | `PS256` | `PS384` | `PS512` | `ES256` | `ES384` | `ES512` | `EdDSA`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { jwt } from 'hono/jwt'\nimport type { JwtVariables } from 'hono/jwt'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\n// Specify the variable types to infer the `c.get('jwtPayload')`:\ntype Variables = JwtVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\nGet payload:\n\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I tip in hono?\n\nAssistant: To tip in hono, here's what you do:\n`jwt()` is just a middleware function. If you want to use an environment variable (eg: `c.env.JWT_SECRET`), you can use it as follows:\n\n```js\napp.use('/auth/*', (c, next) => {\n  const jwtMiddleware = jwt({\n    secret: c.env.JWT_SECRET,\n  })\n  return jwtMiddleware(c, next)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required secret: `string`\nA value of your secret key.\n\n### optional cookie: `string`\nIf this value is set, then the value is retrieved from the cookie header using that value as a key, which is then validated as a token.\n\n### optional alg: `string`\nAn algorithm type that is used for verifying.\n\nThe default is `HS256`.\n\nAvailable types are `HS256` | `HS384` | `HS512` | `RS256` | `RS384` | `RS512` | `PS256` | `PS384` | `PS512` | `ES256` | `ES384` | `ES512` | `EdDSA`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for JWT Auth Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { jwt } from 'hono/jwt'\nimport type { JwtVariables } from 'hono/jwt'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of jwt auth middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\n// Specify the variable types to infer the `c.get('jwtPayload')`:\ntype Variables = JwtVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of jwt auth middleware.\n\n**Get Payload Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```\n```\n\nThis snippet shows you how to get payload example, which is an important aspect of jwt auth middleware.\n\n**TIP Example**:\n\n```yaml\n```js\napp.use('/auth/*', (c, next) => {\n  const jwtMiddleware = jwt({\n    secret: c.env.JWT_SECRET,\n  })\n  return jwtMiddleware(c, next)\n})\n```\n```\n\nThis snippet shows you how to tip example, which is an important aspect of jwt auth middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "code_examples", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using JWT Auth Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe Authorization header sent from the client must have a specified scheme. Example: `Bearer my.token.value` or `Basic my.token.value`\n\n`jwt()` is just a middleware function. If you want to use an environment variable (eg: `c.env.JWT_SECRET`), you can use it as shown in the TIP section.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwt", "title": "JWT Auth Middleware", "description": "The JWT Auth Middleware provides authentication by verifying the token with JWT. The middleware will check for an `Authorization` header if the `cookie` option is not set.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:52", "type": "best_practices", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "JWT Auth Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "79e33586-beb8-464a-8e58-99d41d04e110", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwt", "url": "https://hono.dev/docs/middleware/builtin/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what CORS Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain CORS Middleware in hono.\n\n# CORS Middleware\n\nThis page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.Here's a quick rundown of what this is about:\n\n## Import\n\nTo use the CORS middleware, you need to import it along with Hono:\n\n```ts\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\n```\n\n## Usage\n\nTo implement CORS in your application, you can use the following code:\n\n```ts\nconst app = new Hono()\n\n// CORS should be called before the route\napp.use('/api/*', cors())\napp.use(\n  '/api2/*',\n  cors({\n    origin: 'http://example.com',\n    allowHeaders: ['X-Custom-Header', 'Upgrade-Insecure-Requests'],\n    allowMethods: ['POST', 'GET', 'OPTIONS'],\n    exposeHeaders: ['Content-Length', 'X-Kuma-Revision'],\n    maxAge: 600,\n    credentials: true,\n  })\n)\n\napp.all('/api/abc', (c) => {\n  return c.json({ success: true })\n})\napp.all('/api2/abc', (c) => {\n  return c.json({ success: true })\n})\n```\n\nFor multiple origins, you can use:\n\n```ts\napp.use(\n  '/api3/*',\n  cors({\n    origin: ['https://example.com', 'https://example.org'],\n  })\n)\n\n// Or you can use \"function\"\napp.use(\n  '/api4/*',\n  cors({\n    // `c` is a `Context` object\n    origin: (origin, c) => {\n      return origin.endsWith('.example.com')\n        ? origin\n        : 'http://example.com'\n    },\n  })\n)\n```\n\n## Options\n\nThe CORS middleware accepts several options:\n\n- **optional origin**: `string` | `string[]` | `(origin:string, c:Context) => string`\n  - The value of \"_Access-Control-Allow-Origin_\" CORS header. You can also pass a callback function. The default is `*`.\n\n- **optional allowMethods**: `string[]`\n  - The value of \"_Access-Control-Allow-Methods_\" CORS header. The default is `['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'PATCH']`.\n\n- **optional allowHeaders**: `string[]`\n  - The value of \"_Access-Control-Allow-Headers_\" CORS header. The default is `[]`.\n\n- **optional maxAge**: `number`\n  - The value of \"_Access-Control-Max-Age_\" CORS header.\n\n- **optional credentials**: `boolean`\n  - The value of \"_Access-Control-Allow-Credentials_\" CORS header.\n\n- **optional exposeHeaders**: `string[]`\n  - The value of \"_Access-Control-Expose-Headers_\" CORS header. The default is `[]`.\n\n## Environment-dependent CORS configuration\n\nTo adjust CORS configuration based on the execution environment, you can use environment variables. Here’s an example:\n\n```ts\napp.use('*', async (c, next) => {\n  const corsMiddlewareHandler = cors({\n    origin: c.env.CORS_ORIGIN,\n  })\n  return corsMiddlewareHandler(c, next)\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\nTo use the CORS middleware, you need to import it along with Hono:\n\n```ts\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nTo implement CORS in your application, you can use the following code:\n\n```ts\nconst app = new Hono()\n\n// CORS should be called before the route\napp.use('/api/*', cors())\napp.use(\n  '/api2/*',\n  cors({\n    origin: 'http://example.com',\n    allowHeaders: ['X-Custom-Header', 'Upgrade-Insecure-Requests'],\n    allowMethods: ['POST', 'GET', 'OPTIONS'],\n    exposeHeaders: ['Content-Length', 'X-Kuma-Revision'],\n    maxAge: 600,\n    credentials: true,\n  })\n)\n\napp.all('/api/abc', (c) => {\n  return c.json({ success: true })\n})\napp.all('/api2/abc', (c) => {\n  return c.json({ success: true })\n})\n```\n\nFor multiple origins, you can use:\n\n```ts\napp.use(\n  '/api3/*',\n  cors({\n    origin: ['https://example.com', 'https://example.org'],\n  })\n)\n\n// Or you can use \"function\"\napp.use(\n  '/api4/*',\n  cors({\n    // `c` is a `Context` object\n    origin: (origin, c) => {\n      return origin.endsWith('.example.com')\n        ? origin\n        : 'http://example.com'\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\nThe CORS middleware accepts several options:\n\n- **optional origin**: `string` | `string[]` | `(origin:string, c:Context) => string`\n  - The value of \"_Access-Control-Allow-Origin_\" CORS header. You can also pass a callback function. The default is `*`.\n\n- **optional allowMethods**: `string[]`\n  - The value of \"_Access-Control-Allow-Methods_\" CORS header. The default is `['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'PATCH']`.\n\n- **optional allowHeaders**: `string[]`\n  - The value of \"_Access-Control-Allow-Headers_\" CORS header. The default is `[]`.\n\n- **optional maxAge**: `number`\n  - The value of \"_Access-Control-Max-Age_\" CORS header.\n\n- **optional credentials**: `boolean`\n  - The value of \"_Access-Control-Allow-Credentials_\" CORS header.\n\n- **optional exposeHeaders**: `string[]`\n  - The value of \"_Access-Control-Expose-Headers_\" CORS header. The default is `[]`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I environment-dependent cors configuration in hono?\n\nAssistant: To environment-dependent cors configuration in hono, here's what you do:\nTo adjust CORS configuration based on the execution environment, you can use environment variables. Here’s an example:\n\n```ts\napp.use('*', async (c, next) => {\n  const corsMiddlewareHandler = cors({\n    origin: c.env.CORS_ORIGIN,\n  })\n  return corsMiddlewareHandler(c, next)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for CORS Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Hono and CORS**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\n```\n\nThis snippet shows you how to importing hono and cors, which is an important aspect of cors middleware.\n\n**Basic CORS Usage**:\n\n```yaml\nconst app = new Hono()\n\n// CORS should be called before the route\napp.use('/api/*', cors())\napp.use(\n  '/api2/*',\n  cors({\n    origin: 'http://example.com',\n    allowHeaders: ['X-Custom-Header', 'Upgrade-Insecure-Requests'],\n    allowMethods: ['POST', 'GET', 'OPTIONS'],\n    exposeHeaders: ['Content-Length', 'X-Kuma-Revision'],\n    maxAge: 600,\n    credentials: true,\n  })\n)\n\napp.all('/api/abc', (c) => {\n  return c.json({ success: true })\n})\napp.all('/api2/abc', (c) => {\n  return c.json({ success: true })\n})\n```\n\nThis snippet shows you how to basic cors usage, which is an important aspect of cors middleware.\n\n**Multiple Origins CORS Usage**:\n\n```yaml\napp.use(\n  '/api3/*',\n  cors({\n    origin: ['https://example.com', 'https://example.org'],\n  })\n)\n\n// Or you can use \"function\"\napp.use(\n  '/api4/*',\n  cors({\n    // `c` is a `Context` object\n    origin: (origin, c) => {\n      return origin.endsWith('.example.com')\n        ? origin\n        : 'http://example.com'\n    },\n  })\n)\n\n```\n\nThis snippet shows you how to multiple origins cors usage, which is an important aspect of cors middleware.\n\n**Environment-dependent CORS Configuration**:\n\n```yaml\napp.use('*', async (c, next) => {\n  const corsMiddlewareHandler = cors({\n    origin: c.env.CORS_ORIGIN,\n  })\n  return corsMiddlewareHandler(c, next)\n})\n```\n\nThis snippet shows you how to environment-dependent cors configuration, which is an important aspect of cors middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using CORS Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure CORS middleware is called before defining routes.\n\nUse environment variables to manage CORS settings based on the execution environment.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cors", "title": "CORS Middleware", "description": "This page covers the implementation of CORS middleware for Cloudflare Workers, detailing its usage, options, and environment-dependent configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:53:34", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "title": "CORS Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "scrapeId": "cc7a07f3-c230-41d5-bd85-5bde42fc8af5", "sourceURL": "https://hono.dev/docs/middleware/builtin/cors", "url": "https://hono.dev/docs/middleware/builtin/cors", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Netlify is in hono?\n\nAssistant: Sure, I'd be happy to explain Netlify in hono.\n\n# Netlify\n\nNetlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nA starter for Netlify is available. Start your project with \"create-hono\" command. Select `netlify` template for this example.\n\nMove into `my-app`.\n\n## 2. Hello World\n\nEdit `netlify/edge-functions/index.ts`:\n\n```typescript\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!')\n})\n\nexport default handle(app)\n```\n\n## 3. Run\n\nRun the development server with Netlify CLI. Then, access `http://localhost:8888` in your Web browser.\n\n## 4. Deploy\n\nYou can deploy with a `netlify deploy` command.\n\n## Context\n\nYou can access the Netlify's `Context` through `c.env`:\n\n```typescript\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\n// Import the type definition\nimport type { Context } from 'https://edge.netlify.com/'\n\nexport type Env = {\n  Bindings: {\n    context: Context\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.get('/country', (c) =>\n  c.json({\n    'You are in': c.env.context.geo.country?.name,\n  })\n)\n\nexport default handle(app)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "overview", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nA starter for Netlify is available. Start your project with \"create-hono\" command. Select `netlify` template for this example.\n\nMove into `my-app`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `netlify/edge-functions/index.ts`:\n\n```typescript\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!')\n})\n\nexport default handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nRun the development server with Netlify CLI. Then, access `http://localhost:8888` in your Web browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\nYou can deploy with a `netlify deploy` command..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I context in hono?\n\nAssistant: To context in hono, here's what you do:\nYou can access the Netlify's `Context` through `c.env`:\n\n```typescript\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\n// Import the type definition\nimport type { Context } from 'https://edge.netlify.com/'\n\nexport type Env = {\n  Bindings: {\n    context: Context\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.get('/country', (c) =>\n  c.json({\n    'You are in': c.env.context.geo.country?.name,\n  })\n)\n\nexport default handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "section_detail", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Netlify in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup Commands**:\n\n```yaml\nnpm create hono@latest my-app\n\nyarn create hono my-app\n\npnpm create hono my-app\n\nbun create hono@latest my-app\n\ndeno init --npm hono my-app\n```\n\nThis snippet shows you how to setup commands, which is an important aspect of netlify.\n\n**Hello World Example**:\n\n```yaml\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!')\n})\n\nexport default handle(app)\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of netlify.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "code_examples", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Netlify in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSelect the `netlify` template when starting your project with the create-hono command.\n\nEnsure to run the development server using the Netlify CLI before accessing the application in the browser.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/netlify", "title": "Netlify", "description": "Netlify provides static site hosting and serverless backend services. Edge Functions enables us to make the web pages dynamic.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:53:55", "type": "best_practices", "page_metadata": {"ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Netlify - Hono", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "10427f79-5c62-41ea-bdf8-186fa3a78ebf", "sourceURL": "https://hono.dev/docs/getting-started/netlify", "url": "https://hono.dev/docs/getting-started/netlify", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Getting Started with Deno is in hono?\n\nAssistant: Sure, I'd be happy to explain Getting Started with Deno in hono.\n\n# Getting Started with Deno\n\nThis page covers how to get started with Hono on Deno, including installation, setup, and examples.Here's a quick rundown of what this is about:\n\n## Deno\n\nDeno is a JavaScript runtime built on V8. It's not Node.js. Hono also works on Deno.\n\n## 1. Install Deno\n\nFirst, install `deno` command. Please refer to [the official document](https://docs.deno.com/runtime/manual/getting_started/installation).\n\n## 2. Setup\n\nA starter for Deno is available. Start your project with \"create-hono\" command.\n\n```sh\ndeno init --npm hono my-app\n```\n\nSelect `deno` template for this example.\n\nMove into `my-app`. For Deno, you don't have to install Hono explicitly.\n\n```sh\ncd my-app\n```\n\n## 3. Hello World\n\nWrite your first application.\n\n```ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Deno!'))\n\nDeno.serve(app.fetch)\n```\n\n## 4. Run\n\nJust this command:\n\n```sh\ndeno task start\n```\n\n## Change port number\n\nYou can specify the port number by updating the arguments of `Deno.serve` in `main.ts`:\n\n```ts\nDeno.serve(app.fetch)\nDeno.serve({ port: 8787 }, app.fetch)\n```\n\n## Serve static files\n\nTo serve static files, use `serveStatic` imported from `hono/middleware.ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { serveStatic } from 'hono/deno'\n\nconst app = new Hono()\n\napp.use('/static/*', serveStatic({ root: './' }))\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\napp.get('/', (c) => c.text('You can access: /static/hello.txt'))\napp.get('*', serveStatic({ path: './static/fallback.txt' }))\n\nDeno.serve(app.fetch)\n```\n\nFor the above code, it will work well with the following directory structure.\n\n```\n./\n├── favicon.ico\n├── index.ts\n└── static\n    ├── demo\n    │   └── index.html\n    ├── fallback.txt\n    ├── hello.txt\n    └── images\n        └── dinotocat.png\n```\n\n## `rewriteRequestPath`\n\nIf you want to map `http://localhost:8000/static/*` to `./statics`, you can use the `rewriteRequestPath` option:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    root: './',\n    rewriteRequestPath: (path) =>\n      path.replace(/^\\/static/, '/statics'),\n  })\n)\n```\n\n## `mimes`\n\nYou can add MIME types with `mimes`:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    mimes: {\n      m3u8: 'application/vnd.apple.mpegurl',\n      ts: 'video/mp2t',\n    },\n  })\n)\n```\n\n## `onFound`\n\nYou can specify handling when the requested file is found with `onFound`:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    // ...\n    onFound: (_path, c) => {\n      c.header('Cache-Control', `public, immutable, max-age=31536000`)\n    },\n  })\n)\n```\n\n## `onNotFound`\n\nYou can specify handling when the requested file is not found with `onNotFound`:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    onNotFound: (path, c) => {\n      console.log(`${path} is not found, you access ${c.req.path}`)\n    },\n  })\n)\n```\n\n## `precompressed`\n\nThe `precompressed` option checks if files with extensions like `.br` or `.gz` are available and serves them based on the `Accept-Encoding` header. It prioritizes Brotli, then Zstd, and Gzip. If none are available, it serves the original file.\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    precompressed: true,\n  })\n)\n```\n\n## Deno Deploy\n\nDeno Deploy is an edge runtime platform for Deno. We can publish the application world widely on Deno Deploy.\n\nHono also supports Deno Deploy. Please refer to [the official document](https://docs.deno.com/deploy/manual/).\n\n## Testing\n\nTesting the application on Deno is easy. You can write with `Deno.test` and use `assert` or `assertEquals` from [@std/assert](https://jsr.io/@std/assert).\n\n```sh\ndeno add jsr:@std/assert\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { assertEquals } from '@std/assert'\n\nDeno.test('Hello World', async () => {\n  const app = new Hono()\n  app.get('/', (c) => c.text('Please test me'))\n\n  const res = await app.request('http://localhost/')\n  assertEquals(res.status, 200)\n})\n```\n\nThen run the command:\n\n```sh\ndeno test hello.ts\n```\n\n## `npm:` specifier\n\n`npm:hono` is also available. You can use it by fixing the `deno.json`:\n\n```json\n{\n  \"imports\": {\n    \"hono\": \"jsr:@hono/hono\"\n    \"hono\": \"npm:hono\"\n  }\n}\n```\n\nYou can use either `npm:hono` or `jsr:@hono/hono`.\n\nIf you want to use Third-party Middleware such as `npm:@hono/zod-validator` with the TypeScript Type inferences, you need to use the `npm:` specifier.\n\n```json\n{\n  \"imports\": {\n    \"hono\": \"npm:hono\",\n    \"zod\": \"npm:zod\",\n    \"@hono/zod-validator\": \"npm:@hono/zod-validator\"\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I deno in hono?\n\nAssistant: To deno in hono, here's what you do:\nDeno is a JavaScript runtime built on V8. It's not Node.js. Hono also works on Deno..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. install deno in hono?\n\nAssistant: To 1. install deno in hono, here's what you do:\nFirst, install `deno` command. Please refer to [the official document](https://docs.deno.com/runtime/manual/getting_started/installation)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. setup in hono?\n\nAssistant: To 2. setup in hono, here's what you do:\nA starter for Deno is available. Start your project with \"create-hono\" command.\n\n```sh\ndeno init --npm hono my-app\n```\n\nSelect `deno` template for this example.\n\nMove into `my-app`. For Deno, you don't have to install Hono explicitly.\n\n```sh\ncd my-app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. hello world in hono?\n\nAssistant: To 3. hello world in hono, here's what you do:\nWrite your first application.\n\n```ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Deno!'))\n\nDeno.serve(app.fetch)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. run in hono?\n\nAssistant: To 4. run in hono, here's what you do:\nJust this command:\n\n```sh\ndeno task start\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I change port number in hono?\n\nAssistant: To change port number in hono, here's what you do:\nYou can specify the port number by updating the arguments of `Deno.serve` in `main.ts`:\n\n```ts\nDeno.serve(app.fetch)\nDeno.serve({ port: 8787 }, app.fetch)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I serve static files in hono?\n\nAssistant: To serve static files in hono, here's what you do:\nTo serve static files, use `serveStatic` imported from `hono/middleware.ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { serveStatic } from 'hono/deno'\n\nconst app = new Hono()\n\napp.use('/static/*', serveStatic({ root: './' }))\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\napp.get('/', (c) => c.text('You can access: /static/hello.txt'))\napp.get('*', serveStatic({ path: './static/fallback.txt' }))\n\nDeno.serve(app.fetch)\n```\n\nFor the above code, it will work well with the following directory structure.\n\n```\n./\n├── favicon.ico\n├── index.ts\n└── static\n    ├── demo\n    │   └── index.html\n    ├── fallback.txt\n    ├── hello.txt\n    └── images\n        └── dinotocat.png\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `rewriterequestpath` in hono?\n\nAssistant: To `rewriterequestpath` in hono, here's what you do:\nIf you want to map `http://localhost:8000/static/*` to `./statics`, you can use the `rewriteRequestPath` option:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    root: './',\n    rewriteRequestPath: (path) =>\n      path.replace(/^\\/static/, '/statics'),\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `mimes` in hono?\n\nAssistant: To `mimes` in hono, here's what you do:\nYou can add MIME types with `mimes`:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    mimes: {\n      m3u8: 'application/vnd.apple.mpegurl',\n      ts: 'video/mp2t',\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `onfound` in hono?\n\nAssistant: To `onfound` in hono, here's what you do:\nYou can specify handling when the requested file is found with `onFound`:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    // ...\n    onFound: (_path, c) => {\n      c.header('Cache-Control', `public, immutable, max-age=31536000`)\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `onnotfound` in hono?\n\nAssistant: To `onnotfound` in hono, here's what you do:\nYou can specify handling when the requested file is not found with `onNotFound`:\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    onNotFound: (path, c) => {\n      console.log(`${path} is not found, you access ${c.req.path}`)\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `precompressed` in hono?\n\nAssistant: To `precompressed` in hono, here's what you do:\nThe `precompressed` option checks if files with extensions like `.br` or `.gz` are available and serves them based on the `Accept-Encoding` header. It prioritizes Brotli, then Zstd, and Gzip. If none are available, it serves the original file.\n\n```ts\napp.get(\n  '/static/*',\n  serveStatic({\n    precompressed: true,\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I deno deploy in hono?\n\nAssistant: To deno deploy in hono, here's what you do:\nDeno Deploy is an edge runtime platform for Deno. We can publish the application world widely on Deno Deploy.\n\nHono also supports Deno Deploy. Please refer to [the official document](https://docs.deno.com/deploy/manual/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I testing in hono?\n\nAssistant: To testing in hono, here's what you do:\nTesting the application on Deno is easy. You can write with `Deno.test` and use `assert` or `assertEquals` from [@std/assert](https://jsr.io/@std/assert).\n\n```sh\ndeno add jsr:@std/assert\n```\n\n```ts\nimport { Hono } from 'hono'\nimport { assertEquals } from '@std/assert'\n\nDeno.test('Hello World', async () => {\n  const app = new Hono()\n  app.get('/', (c) => c.text('Please test me'))\n\n  const res = await app.request('http://localhost/')\n  assertEquals(res.status, 200)\n})\n```\n\nThen run the command:\n\n```sh\ndeno test hello.ts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I `npm:` specifier in hono?\n\nAssistant: To `npm:` specifier in hono, here's what you do:\n`npm:hono` is also available. You can use it by fixing the `deno.json`:\n\n```json\n{\n  \"imports\": {\n    \"hono\": \"jsr:@hono/hono\"\n    \"hono\": \"npm:hono\"\n  }\n}\n```\n\nYou can use either `npm:hono` or `jsr:@hono/hono`.\n\nIf you want to use Third-party Middleware such as `npm:@hono/zod-validator` with the TypeScript Type inferences, you need to use the `npm:` specifier.\n\n```json\n{\n  \"imports\": {\n    \"hono\": \"npm:hono\",\n    \"zod\": \"npm:zod\",\n    \"@hono/zod-validator\": \"npm:@hono/zod-validator\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Getting Started with Deno in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup Command**:\n\n```yaml\ndeno init --npm hono my-app\n```\n\nThis snippet shows you how to setup command, which is an important aspect of getting started with deno.\n\n**Change Port Number**:\n\n```yaml\nDeno.serve({ port: 8787 }, app.fetch)\n```\n\nThis snippet shows you how to change port number, which is an important aspect of getting started with deno.\n\n**Hello World Example**:\n\n```yaml\nimport { Hono } from 'hono'\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Deno!'))\nDeno.serve(app.fetch)\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of getting started with deno.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Getting Started with Deno in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor Deno, you don't have to install Hono explicitly.\n\nUse `serveStatic` to serve static files efficiently.\n\nUtilize the `rewriteRequestPath` option for custom path mapping.\n\nAdd MIME types using the `mimes` option for better content handling.\n\nImplement caching strategies with the `onFound` option.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/deno", "title": "Getting Started with Deno", "description": "This page covers how to get started with Hono on Deno, including installation, setup, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 03:54:23", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "Deno - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "b90378c2-bd7d-4bde-8951-24b284ec209a", "sourceURL": "https://hono.dev/docs/getting-started/deno", "url": "https://hono.dev/docs/getting-started/deno", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Combine Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Combine Middleware in hono.\n\n# Combine Middleware\n\nCombine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { some, every, except } from 'hono/combine'\n```\n\n## Usage\n\nHere's an example of complex access control rules using Combine Middleware.\n\n```ts\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { getConnInfo } from 'hono/cloudflare-workers'\nimport { every, some } from 'hono/combine'\nimport { ipRestriction } from 'hono/ip-restriction'\nimport { rateLimit } from '@/my-rate-limit'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  some(\n    every(\n      ipRestriction(getConnInfo, { allowList: ['192.168.0.2'] }),\n      bearerAuth({ token })\n    ),\n    // If both conditions are met, rateLimit will not execute.\n    rateLimit()\n  )\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\n## some\n\nRuns the first middleware that returns true. Middleware is applied in order, and if any middleware exits successfully, subsequent middleware will not run.\n\n```ts\nimport { some } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client has a valid token, skip rate limiting.\n// Otherwise, apply rate limiting.\napp.use(\n  '/api/*',\n  some(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n)\n```\n\n## every\n\nRuns all middleware and stops if any of them fail. Middleware is applied in order, and if any middleware throws an error, subsequent middleware will not run.\n\n```ts\nimport { some, every } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myCheckLocalNetwork } from '@/check-local-network'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client is in local network, skip authentication and rate limiting.\n// Otherwise, apply authentication and rate limiting.\napp.use(\n  '/api/*',\n  some(\n    myCheckLocalNetwork(),\n    every(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n  )\n)\n```\n\n## except\n\nRuns all middleware except when the condition is met. You can pass a string or function as the condition. If multiple targets need to be matched, pass them as an array.\n\n```ts\nimport { except } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\n\n// If client is accessing public API, skip authentication.\n// Otherwise, require a valid token.\napp.use('/api/*', except('/api/public/*', bearerAuth({ token })))\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { some, every, except } from 'hono/combine'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nHere's an example of complex access control rules using Combine Middleware.\n\n```ts\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { getConnInfo } from 'hono/cloudflare-workers'\nimport { every, some } from 'hono/combine'\nimport { ipRestriction } from 'hono/ip-restriction'\nimport { rateLimit } from '@/my-rate-limit'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  some(\n    every(\n      ipRestriction(getConnInfo, { allowList: ['192.168.0.2'] }),\n      bearerAuth({ token })\n    ),\n    // If both conditions are met, rateLimit will not execute.\n    rateLimit()\n  )\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I some in hono?\n\nAssistant: To some in hono, here's what you do:\nRuns the first middleware that returns true. Middleware is applied in order, and if any middleware exits successfully, subsequent middleware will not run.\n\n```ts\nimport { some } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client has a valid token, skip rate limiting.\n// Otherwise, apply rate limiting.\napp.use(\n  '/api/*',\n  some(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I every in hono?\n\nAssistant: To every in hono, here's what you do:\nRuns all middleware and stops if any of them fail. Middleware is applied in order, and if any middleware throws an error, subsequent middleware will not run.\n\n```ts\nimport { some, every } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myCheckLocalNetwork } from '@/check-local-network'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client is in local network, skip authentication and rate limiting.\n// Otherwise, apply authentication and rate limiting.\napp.use(\n  '/api/*',\n  some(\n    myCheckLocalNetwork(),\n    every(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n  )\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I except in hono?\n\nAssistant: To except in hono, here's what you do:\nRuns all middleware except when the condition is met. You can pass a string or function as the condition. If multiple targets need to be matched, pass them as an array.\n\n```ts\nimport { except } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\n\n// If client is accessing public API, skip authentication.\n// Otherwise, require a valid token.\napp.use('/api/*', except('/api/public/*', bearerAuth({ token })))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Combine Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { some, every, except } from 'hono/combine'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of combine middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { getConnInfo } from 'hono/cloudflare-workers'\nimport { every, some } from 'hono/combine'\nimport { ipRestriction } from 'hono/ip-restriction'\nimport { rateLimit } from '@/my-rate-limit'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  some(\n    every(\n      ipRestriction(getConnInfo, { allowList: ['192.168.0.2'] }),\n      bearerAuth({ token })\n    ),\n    // If both conditions are met, rateLimit will not execute.\n    rateLimit()\n  )\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of combine middleware.\n\n**some Example**:\n\n```yaml\n```ts\nimport { some } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client has a valid token, skip rate limiting.\n// Otherwise, apply rate limiting.\napp.use(\n  '/api/*',\n  some(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n)\n```\n```\n\nThis snippet shows you how to some example, which is an important aspect of combine middleware.\n\n**every Example**:\n\n```yaml\n```ts\nimport { some, every } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myCheckLocalNetwork } from '@/check-local-network'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client is in local network, skip authentication and rate limiting.\n// Otherwise, apply authentication and rate limiting.\napp.use(\n  '/api/*',\n  some(\n    myCheckLocalNetwork(),\n    every(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n  )\n)\n```\n```\n\nThis snippet shows you how to every example, which is an important aspect of combine middleware.\n\n**except Example**:\n\n```yaml\n```ts\nimport { except } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\n\n// If client is accessing public API, skip authentication.\n// Otherwise, require a valid token.\napp.use('/api/*', except('/api/public/*', bearerAuth({ token })))\n```\n```\n\nThis snippet shows you how to except example, which is an important aspect of combine middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Combine Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMiddleware is applied in order, and if any middleware exits successfully, subsequent middleware will not run for 'some'.\n\nIf any middleware throws an error, subsequent middleware will not run for 'every'.\n\nYou can pass a string or function as the condition for 'except'.\n\nIf multiple targets need to be matched in 'except', pass them as an array.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/combine", "title": "Combine Middleware", "description": "Combine Middleware combines multiple middleware functions into a single middleware. It provides three functions: some, every, and except.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:55:23", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Combine Middleware - Hono", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "6c27212c-6a11-4aa5-8135-ef491caa0d1e", "sourceURL": "https://hono.dev/docs/middleware/builtin/combine", "url": "https://hono.dev/docs/middleware/builtin/combine", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Getting Started is in hono?\n\nAssistant: Sure, I'd be happy to explain Getting Started in hono.\n\n# Getting Started\n\nUsing Hono is super easy. We can set up the project, write code, develop with a local server, and deploy quickly. The same code will work on any runtime, just with different entry points. Let's look at the basic usage of Hono.Here's a quick rundown of what this is about:\n\n## Starter\n\nStarter templates are available for each platform. Use the following \"create-hono\" command.\n\n```\nnpm create hono@latest my-app\n```\n\n```\nyarn create hono my-app\n```\n\n```\npnpm create hono@latest my-app\n```\n\n```\nbun create hono@latest my-app\n```\n\n```\ndeno init --npm hono@latest my-app\n```\n\nThen you will be asked which template you would like to use. Let's select Cloudflare Workers for this example.\n\n```\n? Which template do you want to use?\n    aws-lambda\n    bun\n    cloudflare-pages\n❯   cloudflare-workers\n    deno\n    fastly\n    nextjs\n    nodejs\n    vercel\n```\n\nThe template will be pulled into `my-app`, so go to it and install the dependencies.\n\n```\ncd my-app\nnpm i\n```\n\n```\ncd my-app\nyarn\n```\n\n```\ncd my-app\npnpm i\n```\n\n```\ncd my-app\nbun i\n```\n\nOnce the package installation is complete, run the following command to start up a local server.\n\n```\nnpm run dev\n```\n\n```\nyarn dev\n```\n\n```\npnpm dev\n```\n\n```\nbun run dev\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/basic", "title": "Getting Started", "description": "Using Hono is super easy. We can set up the project, write code, develop with a local server, and deploy quickly. The same code will work on any runtime, just with different entry points. Let's look at the basic usage of Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:55:54", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "title": "Getting Started - Hono", "scrapeId": "34c5be3d-7327-4ff4-aa1c-ed703241fc6b", "sourceURL": "https://hono.dev/docs/getting-started/basic", "url": "https://hono.dev/docs/getting-started/basic", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I starter in hono?\n\nAssistant: To starter in hono, here's what you do:\nStarter templates are available for each platform. Use the following \"create-hono\" command.\n\n```\nnpm create hono@latest my-app\n```\n\n```\nyarn create hono my-app\n```\n\n```\npnpm create hono@latest my-app\n```\n\n```\nbun create hono@latest my-app\n```\n\n```\ndeno init --npm hono@latest my-app\n```\n\nThen you will be asked which template you would like to use. Let's select Cloudflare Workers for this example.\n\n```\n? Which template do you want to use?\n    aws-lambda\n    bun\n    cloudflare-pages\n❯   cloudflare-workers\n    deno\n    fastly\n    nextjs\n    nodejs\n    vercel\n```\n\nThe template will be pulled into `my-app`, so go to it and install the dependencies.\n\n```\ncd my-app\nnpm i\n```\n\n```\ncd my-app\nyarn\n```\n\n```\ncd my-app\npnpm i\n```\n\n```\ncd my-app\nbun i\n```\n\nOnce the package installation is complete, run the following command to start up a local server.\n\n```\nnpm run dev\n```\n\n```\nyarn dev\n```\n\n```\npnpm dev\n```\n\n```\nbun run dev\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/basic", "title": "Getting Started", "description": "Using Hono is super easy. We can set up the project, write code, develop with a local server, and deploy quickly. The same code will work on any runtime, just with different entry points. Let's look at the basic usage of Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:55:54", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "title": "Getting Started - Hono", "scrapeId": "34c5be3d-7327-4ff4-aa1c-ed703241fc6b", "sourceURL": "https://hono.dev/docs/getting-started/basic", "url": "https://hono.dev/docs/getting-started/basic", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Getting Started in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Hello World Example**:\n\n```yaml\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!')\n})\n\nexport default app\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of getting started.\n\n**Return JSON Example**:\n\n```yaml\napp.get('/api/hello', (c) => {\n  return c.json({\n    ok: true,\n    message: 'Hello Hono!',\n  })\n})\n```\n\nThis snippet shows you how to return json example, which is an important aspect of getting started.\n\n**Request and Response Example**:\n\n```yaml\napp.get('/posts/:id', (c) => {\n  const page = c.req.query('page')\n  const id = c.req.param('id')\n  c.header('X-Message', 'Hi!')\n  return c.text(`You want to see ${page} of ${id}`)\n})\n\napp.post('/posts', (c) => c.text('Created!', 201))\napp.delete('/posts/:id', (c) =>\n  c.text(`${c.req.param('id')} is deleted!`)\n)\n```\n\nThis snippet shows you how to request and response example, which is an important aspect of getting started.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/basic", "title": "Getting Started", "description": "Using Hono is super easy. We can set up the project, write code, develop with a local server, and deploy quickly. The same code will work on any runtime, just with different entry points. Let's look at the basic usage of Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:55:54", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "title": "Getting Started - Hono", "scrapeId": "34c5be3d-7327-4ff4-aa1c-ed703241fc6b", "sourceURL": "https://hono.dev/docs/getting-started/basic", "url": "https://hono.dev/docs/getting-started/basic", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Getting Started in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMost code will work on any platform, but there are guides for each.\n\nCheck with each runtime for specific configurations when using JSX.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/basic", "title": "Getting Started", "description": "Using Hono is super easy. We can set up the project, write code, develop with a local server, and deploy quickly. The same code will work on any runtime, just with different entry points. Let's look at the basic usage of Hono.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:55:54", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "title": "Getting Started - Hono", "scrapeId": "34c5be3d-7327-4ff4-aa1c-ed703241fc6b", "sourceURL": "https://hono.dev/docs/getting-started/basic", "url": "https://hono.dev/docs/getting-started/basic", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Vercel is in hono?\n\nAssistant: Sure, I'd be happy to explain Vercel in hono.\n\n# Vercel\n\nVercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nA starter for Next.js is available. Start your project with \"create-hono\" command. Select `nextjs` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove into `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```\n\n## 2. Hello World\n\nIf you use the App Router, Edit `app/api/[[...route]]/route.ts`. Refer to the [Supported HTTP Methods](https://nextjs.org/docs/app/building-your-application/routing/route-handlers#supported-http-methods) section for more options.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'edge'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\nIf you use the Pages Router, Edit `pages/api/[[...route]].ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\nimport type { PageConfig } from 'next'\n\nexport const config: PageConfig = {\n  runtime: 'edge',\n}\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport default handle(app)\n```\n\n## 3. Run\n\nRun the development server locally. Then, access `http://localhost:3000` in your Web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```\n\nNow, `/api/hello` just returns JSON, but if you build React UIs, you can create a full-stack application with Hono.\n\n## 4. Deploy\n\nIf you have a Vercel account, you can deploy by linking the Git repository.\n\n## Node.js\n\nYou can also run Hono on Next.js running on the Node.js runtime.\n\n### App Router\n\nFor the App Router, you can simply set the runtime to `nodejs` in your route handler:\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'nodejs'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello from Hono!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\n### Pages Router\n\nFor the Pages Router, you'll need to install the Node.js adapter first:\n\n```sh\nnpm i @hono/node-server\n```\n\n```sh\nyarn add @hono/node-server\n```\n\n```sh\npnpm add @hono/node-server\n```\n\n```sh\nbun add @hono/node-server\n```\n\nThen, you can utilize the `handle` function imported from `@hono/node-server/vercel`:\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from '@hono/node-server/vercel'\nimport type { PageConfig } from 'next'\n\nexport const config: PageConfig = {\n  api: {\n    bodyParser: false,\n  },\n}\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello from Hono!',\n  })\n})\n\nexport default handle(app)\n```\n\nIn order for this to work with the Pages Router, it's important to disable Vercel Node.js helpers by setting up an environment variable in your project dashboard or in your `.env` file:\n\n```text\nNODEJS_HELPERS=0\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nA starter for Next.js is available. Start your project with \"create-hono\" command. Select `nextjs` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove into `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nIf you use the App Router, Edit `app/api/[[...route]]/route.ts`. Refer to the [Supported HTTP Methods](https://nextjs.org/docs/app/building-your-application/routing/route-handlers#supported-http-methods) section for more options.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'edge'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\nIf you use the Pages Router, Edit `pages/api/[[...route]].ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\nimport type { PageConfig } from 'next'\n\nexport const config: PageConfig = {\n  runtime: 'edge',\n}\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport default handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nRun the development server locally. Then, access `http://localhost:3000` in your Web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```\n\nNow, `/api/hello` just returns JSON, but if you build React UIs, you can create a full-stack application with Hono..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\nIf you have a Vercel account, you can deploy by linking the Git repository..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I node.js in hono?\n\nAssistant: To node.js in hono, here's what you do:\nYou can also run Hono on Next.js running on the Node.js runtime.\n\n### App Router\n\nFor the App Router, you can simply set the runtime to `nodejs` in your route handler:\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'nodejs'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello from Hono!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\n### Pages Router\n\nFor the Pages Router, you'll need to install the Node.js adapter first:\n\n```sh\nnpm i @hono/node-server\n```\n\n```sh\nyarn add @hono/node-server\n```\n\n```sh\npnpm add @hono/node-server\n```\n\n```sh\nbun add @hono/node-server\n```\n\nThen, you can utilize the `handle` function imported from `@hono/node-server/vercel`:\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from '@hono/node-server/vercel'\nimport type { PageConfig } from 'next'\n\nexport const config: PageConfig = {\n  api: {\n    bodyParser: false,\n  },\n}\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello from Hono!',\n  })\n})\n\nexport default handle(app)\n```\n\nIn order for this to work with the Pages Router, it's important to disable Vercel Node.js helpers by setting up an environment variable in your project dashboard or in your `.env` file:\n\n```text\nNODEJS_HELPERS=0\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Vercel in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup - Create Hono App**:\n\n```yaml\nnpm create hono@latest my-app\n```\n\nThis snippet shows you how to setup - create hono app, which is an important aspect of vercel.\n\n**Setup - Create Hono App with Yarn**:\n\n```yaml\nyarn create hono my-app\n```\n\nThis snippet shows you how to setup - create hono app with yarn, which is an important aspect of vercel.\n\n**Setup - Create Hono App with Pnpm**:\n\n```yaml\npnpm create hono my-app\n```\n\nThis snippet shows you how to setup - create hono app with pnpm, which is an important aspect of vercel.\n\n**Setup - Create Hono App with Bun**:\n\n```yaml\nbun create hono@latest my-app\n```\n\nThis snippet shows you how to setup - create hono app with bun, which is an important aspect of vercel.\n\n**Setup - Create Hono App with Deno**:\n\n```yaml\ndeno init --npm hono my-app\n```\n\nThis snippet shows you how to setup - create hono app with deno, which is an important aspect of vercel.\n\n**Setup - Install Dependencies with Npm**:\n\n```yaml\ncd my-app\nnpm i\n```\n\nThis snippet shows you how to setup - install dependencies with npm, which is an important aspect of vercel.\n\n**Setup - Install Dependencies with Yarn**:\n\n```yaml\ncd my-app\nyarn\n```\n\nThis snippet shows you how to setup - install dependencies with yarn, which is an important aspect of vercel.\n\n**Setup - Install Dependencies with Pnpm**:\n\n```yaml\ncd my-app\npnpm i\n```\n\nThis snippet shows you how to setup - install dependencies with pnpm, which is an important aspect of vercel.\n\n**Setup - Install Dependencies with Bun**:\n\n```yaml\ncd my-app\nbun i\n```\n\nThis snippet shows you how to setup - install dependencies with bun, which is an important aspect of vercel.\n\n**Hello World - App Router**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'edge'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\nThis snippet shows you how to hello world - app router, which is an important aspect of vercel.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Vercel in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRefer to the Supported HTTP Methods section for more options when using the App Router.\n\nTo work with the Pages Router, disable Vercel Node.js helpers by setting NODEJS_HELPERS=0 in your environment.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/vercel", "title": "Vercel", "description": "Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration. This section introduces Next.js running on Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:56:26", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "title": "Vercel - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "58884ba8-c918-4ad4-acea-5ae7f5c2c90a", "sourceURL": "https://hono.dev/docs/getting-started/vercel", "url": "https://hono.dev/docs/getting-started/vercel", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Developer Experience is in hono?\n\nAssistant: Sure, I'd be happy to explain Developer Experience in hono.\n\n# Developer Experience\n\nTo create a great application, we need great development experience. Fortunately, we can write applications for Cloudflare Workers, Deno, and Bun in TypeScript without having the transpiling to JavaScript. Hono is written in TypeScript and can make applications Type-safe.Here's a quick rundown of what this is about:\n\n## Developer Experience\n\nTo create a great application, we need great development experience. Fortunately, we can write applications for Cloudflare Workers, Deno, and Bun in TypeScript without having the transpiling to JavaScript. Hono is written in TypeScript and can make applications Type-safe.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/developer-experience", "title": "Developer Experience", "description": "To create a great application, we need great development experience. Fortunately, we can write applications for Cloudflare Workers, Deno, and Bun in TypeScript without having the transpiling to JavaScript. Hono is written in TypeScript and can make applications Type-safe.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:56:45", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "title": "Developer Experience - Hono", "scrapeId": "9d2cde63-77a7-4fe6-90f4-032846cf3d3c", "sourceURL": "https://hono.dev/docs/concepts/developer-experience", "url": "https://hono.dev/docs/concepts/developer-experience", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I developer experience in hono?\n\nAssistant: To developer experience in hono, here's what you do:\nTo create a great application, we need great development experience. Fortunately, we can write applications for Cloudflare Workers, Deno, and Bun in TypeScript without having the transpiling to JavaScript. Hono is written in TypeScript and can make applications Type-safe..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/developer-experience", "title": "Developer Experience", "description": "To create a great application, we need great development experience. Fortunately, we can write applications for Cloudflare Workers, Deno, and Bun in TypeScript without having the transpiling to JavaScript. Hono is written in TypeScript and can make applications Type-safe.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:56:45", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "title": "Developer Experience - Hono", "scrapeId": "9d2cde63-77a7-4fe6-90f4-032846cf3d3c", "sourceURL": "https://hono.dev/docs/concepts/developer-experience", "url": "https://hono.dev/docs/concepts/developer-experience", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Third-party Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Third-party Middleware in hono.\n\n# Third-party Middleware\n\nThird-party middleware refers to middleware not bundled within the Hono package. Most of this middleware leverages external libraries.Here's a quick rundown of what this is about:\n\n## Authentication\n\n- [Auth.js(Next Auth)](https://github.com/honojs/middleware/tree/main/packages/auth-js)\n- [Clerk Auth](https://github.com/honojs/middleware/tree/main/packages/clerk-auth)\n- [OAuth Providers](https://github.com/honojs/middleware/tree/main/packages/oauth-providers)\n- [OIDC Auth](https://github.com/honojs/middleware/tree/main/packages/oidc-auth)\n- [Firebase Auth](https://github.com/honojs/middleware/tree/main/packages/firebase-auth)\n- [Verify RSA JWT (JWKS)](https://github.com/wataruoguchi/verify-rsa-jwt-cloudflare-worker)\n\n## Validators\n\n- [ArkType validator](https://github.com/honojs/middleware/tree/main/packages/arktype-validator)\n- [Effect Schema Validator](https://github.com/honojs/middleware/tree/main/packages/effect-validator)\n- [Standard Schema Validator](https://github.com/honojs/middleware/tree/main/packages/standard-validator)\n- [TypeBox Validator](https://github.com/honojs/middleware/tree/main/packages/typebox-validator)\n- [Typia Validator](https://github.com/honojs/middleware/tree/main/packages/typia-validator)\n- [unknownutil Validator](https://github.com/ryoppippi/hono-unknownutil-validator)\n- [Valibot Validator](https://github.com/honojs/middleware/tree/main/packages/valibot-validator)\n- [Zod Validator](https://github.com/honojs/middleware/tree/main/packages/zod-validator)\n\n## OpenAPI\n\n- [Zod OpenAPI](https://github.com/honojs/middleware/tree/main/packages/zod-openapi)\n- [Scalar API Reference](https://github.com/scalar/scalar/tree/main/integrations/hono)\n- [Swagger UI](https://github.com/honojs/middleware/tree/main/packages/swagger-ui)\n- [Hono OpenAPI](https://github.com/rhinobase/hono-openapi)\n\n## Others\n\n- [Bun Transpiler](https://github.com/honojs/middleware/tree/main/packages/bun-transpiler)\n- [esbuild Transpiler](https://github.com/honojs/middleware/tree/main/packages/esbuild-transpiler)\n- [Event Emitter](https://github.com/honojs/middleware/tree/main/packages/event-emitter)\n- [GraphQL Server](https://github.com/honojs/middleware/tree/main/packages/graphql-server)\n- [Hono Rate Limiter](https://github.com/rhinobase/hono-rate-limiter)\n- [Node WebSocket Helper](https://github.com/honojs/middleware/tree/main/packages/node-ws)\n- [Prometheus Metrics](https://github.com/honojs/middleware/tree/main/packages/prometheus)\n- [Qwik City](https://github.com/honojs/middleware/tree/main/packages/qwik-city)\n- [React Compatibility](https://github.com/honojs/middleware/tree/main/packages/react-compat)\n- [React Renderer](https://github.com/honojs/middleware/tree/main/packages/react-renderer)\n- [RONIN (Database)](https://github.com/ronin-co/hono-client)\n- [Sentry](https://github.com/honojs/middleware/tree/main/packages/sentry)\n- [tRPC Server](https://github.com/honojs/middleware/tree/main/packages/trpc-server)\n- [Geo](https://github.com/ktkongtong/hono-geo-middleware/tree/main/packages/middleware)\n- [Hono Simple DI](https://github.com/maou-shonen/hono-simple-DI)\n- [Highlight.io](https://www.highlight.io/docs/getting-started/backend-sdk/js/hono)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/third-party", "title": "Third-party Middleware", "description": "Third-party middleware refers to middleware not bundled within the Hono package. Most of this middleware leverages external libraries.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:57:15", "type": "overview", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "title": "Third-party Middleware - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f13c3b69-b769-4699-819b-b95da3e3b840", "sourceURL": "https://hono.dev/docs/middleware/third-party", "url": "https://hono.dev/docs/middleware/third-party", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I authentication in hono?\n\nAssistant: To authentication in hono, here's what you do:\n- [Auth.js(Next Auth)](https://github.com/honojs/middleware/tree/main/packages/auth-js)\n- [Clerk Auth](https://github.com/honojs/middleware/tree/main/packages/clerk-auth)\n- [OAuth Providers](https://github.com/honojs/middleware/tree/main/packages/oauth-providers)\n- [OIDC Auth](https://github.com/honojs/middleware/tree/main/packages/oidc-auth)\n- [Firebase Auth](https://github.com/honojs/middleware/tree/main/packages/firebase-auth)\n- [Verify RSA JWT (JWKS)](https://github.com/wataruoguchi/verify-rsa-jwt-cloudflare-worker).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/third-party", "title": "Third-party Middleware", "description": "Third-party middleware refers to middleware not bundled within the Hono package. Most of this middleware leverages external libraries.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:57:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "title": "Third-party Middleware - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f13c3b69-b769-4699-819b-b95da3e3b840", "sourceURL": "https://hono.dev/docs/middleware/third-party", "url": "https://hono.dev/docs/middleware/third-party", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I validators in hono?\n\nAssistant: To validators in hono, here's what you do:\n- [ArkType validator](https://github.com/honojs/middleware/tree/main/packages/arktype-validator)\n- [Effect Schema Validator](https://github.com/honojs/middleware/tree/main/packages/effect-validator)\n- [Standard Schema Validator](https://github.com/honojs/middleware/tree/main/packages/standard-validator)\n- [TypeBox Validator](https://github.com/honojs/middleware/tree/main/packages/typebox-validator)\n- [Typia Validator](https://github.com/honojs/middleware/tree/main/packages/typia-validator)\n- [unknownutil Validator](https://github.com/ryoppippi/hono-unknownutil-validator)\n- [Valibot Validator](https://github.com/honojs/middleware/tree/main/packages/valibot-validator)\n- [Zod Validator](https://github.com/honojs/middleware/tree/main/packages/zod-validator).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/third-party", "title": "Third-party Middleware", "description": "Third-party middleware refers to middleware not bundled within the Hono package. Most of this middleware leverages external libraries.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:57:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "title": "Third-party Middleware - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f13c3b69-b769-4699-819b-b95da3e3b840", "sourceURL": "https://hono.dev/docs/middleware/third-party", "url": "https://hono.dev/docs/middleware/third-party", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I openapi in hono?\n\nAssistant: To openapi in hono, here's what you do:\n- [Zod OpenAPI](https://github.com/honojs/middleware/tree/main/packages/zod-openapi)\n- [Scalar API Reference](https://github.com/scalar/scalar/tree/main/integrations/hono)\n- [Swagger UI](https://github.com/honojs/middleware/tree/main/packages/swagger-ui)\n- [Hono OpenAPI](https://github.com/rhinobase/hono-openapi).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/third-party", "title": "Third-party Middleware", "description": "Third-party middleware refers to middleware not bundled within the Hono package. Most of this middleware leverages external libraries.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:57:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "title": "Third-party Middleware - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f13c3b69-b769-4699-819b-b95da3e3b840", "sourceURL": "https://hono.dev/docs/middleware/third-party", "url": "https://hono.dev/docs/middleware/third-party", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I others in hono?\n\nAssistant: To others in hono, here's what you do:\n- [Bun Transpiler](https://github.com/honojs/middleware/tree/main/packages/bun-transpiler)\n- [esbuild Transpiler](https://github.com/honojs/middleware/tree/main/packages/esbuild-transpiler)\n- [Event Emitter](https://github.com/honojs/middleware/tree/main/packages/event-emitter)\n- [GraphQL Server](https://github.com/honojs/middleware/tree/main/packages/graphql-server)\n- [Hono Rate Limiter](https://github.com/rhinobase/hono-rate-limiter)\n- [Node WebSocket Helper](https://github.com/honojs/middleware/tree/main/packages/node-ws)\n- [Prometheus Metrics](https://github.com/honojs/middleware/tree/main/packages/prometheus)\n- [Qwik City](https://github.com/honojs/middleware/tree/main/packages/qwik-city)\n- [React Compatibility](https://github.com/honojs/middleware/tree/main/packages/react-compat)\n- [React Renderer](https://github.com/honojs/middleware/tree/main/packages/react-renderer)\n- [RONIN (Database)](https://github.com/ronin-co/hono-client)\n- [Sentry](https://github.com/honojs/middleware/tree/main/packages/sentry)\n- [tRPC Server](https://github.com/honojs/middleware/tree/main/packages/trpc-server)\n- [Geo](https://github.com/ktkongtong/hono-geo-middleware/tree/main/packages/middleware)\n- [Hono Simple DI](https://github.com/maou-shonen/hono-simple-DI)\n- [Highlight.io](https://www.highlight.io/docs/getting-started/backend-sdk/js/hono).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/third-party", "title": "Third-party Middleware", "description": "Third-party middleware refers to middleware not bundled within the Hono package. Most of this middleware leverages external libraries.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:57:15", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "generator": "VitePress v1.6.3", "title": "Third-party Middleware - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f13c3b69-b769-4699-819b-b95da3e3b840", "sourceURL": "https://hono.dev/docs/middleware/third-party", "url": "https://hono.dev/docs/middleware/third-party", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Server-Timing Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Server-Timing Middleware in hono.\n\n# Server-Timing Middleware\n\nThe Server-Timing Middleware provides performance metrics in the response headers.Here's a quick rundown of what this is about:\n\n## Import\n\n```typescript\nimport { Hono } from 'hono'\nimport { timing, setMetric, startTime, endTime } from 'hono/timing'\nimport type { TimingVariables } from 'hono/timing'\n```\n\n## Usage\n\n```javascript\n// Specify the variable types to infer the `c.get('metric')`:\ntype Variables = TimingVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\n// add the middleware to your router\napp.use(timing());\n\napp.get('/', async (c) => {\n\n  // add custom metrics\n  setMetric(c, 'region', 'europe-west3')\n\n  // add custom metrics with timing, must be in milliseconds\n  setMetric(c, 'custom', 23.8, 'My custom Metric')\n\n  // start a new timer\n  startTime(c, 'db');\n  const data = await db.findMany(...);\n\n  // end the timer\n  endTime(c, 'db');\n\n  return c.json({ response: data });\n});\n```\n\n## Conditionally enabled\n\n```typescript\nconst app = new Hono()\n\napp.use(\n  '*',\n  timing({\n    // c: Context of the request\n    enabled: (c) => c.req.method === 'POST',\n  })\n)\n```\n\n## Result\n\n![Example timing output](https://hono.dev/images/timing-example.png)\n\n## Options\n\n### optional total: `boolean`\nShow the total response time. The default is `true`.\n\n### optional enabled: `boolean` | `(c: Context) => boolean`\nWhether timings should be added to the headers or not. The default is `true`.\n\n### optional totalDescription: `boolean`\nDescription for the total response time. The default is `Total Response Time`.\n\n### optional autoEnd: `boolean`\nIf `startTime()` should end automatically at the end of the request. If disabled, not manually ended timers will not be shown.\n\n### optional crossOrigin: `boolean` | `string` | `(c: Context) => boolean | string`\nThe origin this timings header should be readable.\n- If false, only from current origin.\n- If true, from all origin.\n- If string, from this domain(s). Multiple domains must be separated with a comma.\nThe default is `false`. See more [docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "overview", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```typescript\nimport { Hono } from 'hono'\nimport { timing, setMetric, startTime, endTime } from 'hono/timing'\nimport type { TimingVariables } from 'hono/timing'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```javascript\n// Specify the variable types to infer the `c.get('metric')`:\ntype Variables = TimingVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\n// add the middleware to your router\napp.use(timing());\n\napp.get('/', async (c) => {\n\n  // add custom metrics\n  setMetric(c, 'region', 'europe-west3')\n\n  // add custom metrics with timing, must be in milliseconds\n  setMetric(c, 'custom', 23.8, 'My custom Metric')\n\n  // start a new timer\n  startTime(c, 'db');\n  const data = await db.findMany(...);\n\n  // end the timer\n  endTime(c, 'db');\n\n  return c.json({ response: data });\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I conditionally enabled in hono?\n\nAssistant: To conditionally enabled in hono, here's what you do:\n```typescript\nconst app = new Hono()\n\napp.use(\n  '*',\n  timing({\n    // c: Context of the request\n    enabled: (c) => c.req.method === 'POST',\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I result in hono?\n\nAssistant: To result in hono, here's what you do:\n![Example timing output](https://hono.dev/images/timing-example.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional total: `boolean`\nShow the total response time. The default is `true`.\n\n### optional enabled: `boolean` | `(c: Context) => boolean`\nWhether timings should be added to the headers or not. The default is `true`.\n\n### optional totalDescription: `boolean`\nDescription for the total response time. The default is `Total Response Time`.\n\n### optional autoEnd: `boolean`\nIf `startTime()` should end automatically at the end of the request. If disabled, not manually ended timers will not be shown.\n\n### optional crossOrigin: `boolean` | `string` | `(c: Context) => boolean | string`\nThe origin this timings header should be readable.\n- If false, only from current origin.\n- If true, from all origin.\n- If string, from this domain(s). Multiple domains must be separated with a comma.\nThe default is `false`. See more [docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin)..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "section_detail", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Server-Timing Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { timing, setMetric, startTime, endTime } from 'hono/timing'\nimport type { TimingVariables } from 'hono/timing'\n```\n\nThis snippet shows you how to import example, which is an important aspect of server-timing middleware.\n\n**Usage Example**:\n\n```yaml\n// Specify the variable types to infer the `c.get('metric')`:\ntype Variables = TimingVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\n// add the middleware to your router\napp.use(timing());\n\napp.get('/', async (c) => {\n\n  // add custom metrics\n  setMetric(c, 'region', 'europe-west3')\n\n  // add custom metrics with timing, must be in milliseconds\n  setMetric(c, 'custom', 23.8, 'My custom Metric')\n\n  // start a new timer\n  startTime(c, 'db');\n  const data = await db.findMany(...);\n\n  // end the timer\n  endTime(c, 'db');\n\n  return c.json({ response: data });\n});\n```\n\nThis snippet shows you how to usage example, which is an important aspect of server-timing middleware.\n\n**Conditionally Enabled Example**:\n\n```yaml\nconst app = new Hono()\n\napp.use(\n  '*',\n  timing({\n    // c: Context of the request\n    enabled: (c) => c.req.method === 'POST',\n  })\n)\n```\n\nThis snippet shows you how to conditionally enabled example, which is an important aspect of server-timing middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "code_examples", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Server-Timing Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn Cloudflare Workers, the timer metrics may not be accurate, since timers only show the time of last I/O.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/timing", "title": "Server-Timing Middleware", "description": "The Server-Timing Middleware provides performance metrics in the response headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:57:44", "type": "best_practices", "page_metadata": {"language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "title": "Server-Timing Middleware - Hono", "scrapeId": "5d5afb2c-316f-494b-8390-bee523b7183b", "sourceURL": "https://hono.dev/docs/middleware/builtin/timing", "url": "https://hono.dev/docs/middleware/builtin/timing", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cache Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Cache Middleware in hono.\n\n# Cache Middleware\n\nThe Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { cache } from 'hono/cache'\n```\n\n## Usage\n\n### Cloudflare Workers\n```ts\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n  })\n)\n```\n\n### Deno\n```ts\n// Must use `wait: true` for the Deno runtime\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n    wait: true,\n  })\n)\n```\n\n## Options\n\n### required cacheName: `string` | `(c: Context) => string` | `Promise<string`\nThe name of the cache. Can be used to store multiple caches with different identifiers.\n\n### optional wait: `boolean`\nA boolean indicating if Hono should wait for the Promise of the `cache.put` function to resolve before continuing with the request. _Required to be true for the Deno environment_. The default is `false`.\n\n### optional cacheControl: `string`\nA string of directives for the `Cache-Control` header. See the MDN docs for more information. When this option is not provided, no `Cache-Control` header is added to requests.\n\n### optional vary: `string` | `string[]`\nSets the `Vary` header in the response. If the original response header already contains a `Vary` header, the values are merged, removing any duplicates. Setting this to `*` will result in an error. For more details on the Vary header and its implications for caching strategies, refer to the MDN docs.\n\n### optional keyGenerator: `(c: Context) => string | Promise<string>`\nGenerates keys for every request in the `cacheName` store. This can be used to cache data based on request parameters or context parameters. The default is `c.req.url`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cache", "title": "Cache Middleware", "description": "The Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:57:54", "type": "overview", "page_metadata": {"language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cache Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "9ac7d57f-4857-4508-8091-bc678a1f6d25", "sourceURL": "https://hono.dev/docs/middleware/builtin/cache", "url": "https://hono.dev/docs/middleware/builtin/cache", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { cache } from 'hono/cache'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cache", "title": "Cache Middleware", "description": "The Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:57:54", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cache Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "9ac7d57f-4857-4508-8091-bc678a1f6d25", "sourceURL": "https://hono.dev/docs/middleware/builtin/cache", "url": "https://hono.dev/docs/middleware/builtin/cache", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n### Cloudflare Workers\n```ts\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n  })\n)\n```\n\n### Deno\n```ts\n// Must use `wait: true` for the Deno runtime\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n    wait: true,\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cache", "title": "Cache Middleware", "description": "The Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:57:54", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cache Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "9ac7d57f-4857-4508-8091-bc678a1f6d25", "sourceURL": "https://hono.dev/docs/middleware/builtin/cache", "url": "https://hono.dev/docs/middleware/builtin/cache", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required cacheName: `string` | `(c: Context) => string` | `Promise<string`\nThe name of the cache. Can be used to store multiple caches with different identifiers.\n\n### optional wait: `boolean`\nA boolean indicating if Hono should wait for the Promise of the `cache.put` function to resolve before continuing with the request. _Required to be true for the Deno environment_. The default is `false`.\n\n### optional cacheControl: `string`\nA string of directives for the `Cache-Control` header. See the MDN docs for more information. When this option is not provided, no `Cache-Control` header is added to requests.\n\n### optional vary: `string` | `string[]`\nSets the `Vary` header in the response. If the original response header already contains a `Vary` header, the values are merged, removing any duplicates. Setting this to `*` will result in an error. For more details on the Vary header and its implications for caching strategies, refer to the MDN docs.\n\n### optional keyGenerator: `(c: Context) => string | Promise<string>`\nGenerates keys for every request in the `cacheName` store. This can be used to cache data based on request parameters or context parameters. The default is `c.req.url`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cache", "title": "Cache Middleware", "description": "The Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:57:54", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cache Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "9ac7d57f-4857-4508-8091-bc678a1f6d25", "sourceURL": "https://hono.dev/docs/middleware/builtin/cache", "url": "https://hono.dev/docs/middleware/builtin/cache", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cache Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { cache } from 'hono/cache'\n```\n\nThis snippet shows you how to import example, which is an important aspect of cache middleware.\n\n**Cloudflare Workers Usage Example**:\n\n```yaml\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n  })\n)\n```\n\nThis snippet shows you how to cloudflare workers usage example, which is an important aspect of cache middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cache", "title": "Cache Middleware", "description": "The Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:57:54", "type": "code_examples", "page_metadata": {"language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cache Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "9ac7d57f-4857-4508-8091-bc678a1f6d25", "sourceURL": "https://hono.dev/docs/middleware/builtin/cache", "url": "https://hono.dev/docs/middleware/builtin/cache", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cache Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCloudflare Workers respects the `Cache-Control` header and returns cached responses. Deno does not respect headers, so implement your own mechanism to update the cache if needed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/cache", "title": "Cache Middleware", "description": "The Cache middleware uses the Web Standards' Cache API. It supports Cloudflare Workers projects using custom domains and Deno projects using Deno 1.26+.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:57:54", "type": "best_practices", "page_metadata": {"language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Cache Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "scrapeId": "9ac7d57f-4857-4508-8091-bc678a1f6d25", "sourceURL": "https://hono.dev/docs/middleware/builtin/cache", "url": "https://hono.dev/docs/middleware/builtin/cache", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what JWK Auth Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain JWK Auth Middleware in hono.\n\n# JWK Auth Middleware\n\nThe JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { jwk } from 'hono/jwk'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwk({\n    jwks_uri: `https://${backendServer}/.well-known/jwks.json`,\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n\n// Get payload:\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```\n\n## Options\n\n### optional keys: `HonoJsonWebKey[] | (() => Promise<HonoJsonWebKey[]>)`\nThe values of your public keys, or a function that returns them.\n\n### optional jwks_uri: `string`\nIf this value is set, attempt to fetch JWKs from this URI, expecting a JSON response with `keys`, which are added to the provided `keys` option.\n\n### optional cookie: `string`\nIf this value is set, then the value is retrieved from the cookie header using that value as a key, which is then validated as a token.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwk", "title": "JWK Auth Middleware", "description": "The JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:08", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "title": "JWK Auth Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "2a142fc2-2776-47a2-b782-a12135b47ed2", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwk", "url": "https://hono.dev/docs/middleware/builtin/jwk", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { jwk } from 'hono/jwk'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwk", "title": "JWK Auth Middleware", "description": "The JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:08", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "JWK Auth Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "2a142fc2-2776-47a2-b782-a12135b47ed2", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwk", "url": "https://hono.dev/docs/middleware/builtin/jwk", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwk({\n    jwks_uri: `https://${backendServer}/.well-known/jwks.json`,\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n\n// Get payload:\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwk", "title": "JWK Auth Middleware", "description": "The JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:08", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "JWK Auth Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "2a142fc2-2776-47a2-b782-a12135b47ed2", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwk", "url": "https://hono.dev/docs/middleware/builtin/jwk", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional keys: `HonoJsonWebKey[] | (() => Promise<HonoJsonWebKey[]>)`\nThe values of your public keys, or a function that returns them.\n\n### optional jwks_uri: `string`\nIf this value is set, attempt to fetch JWKs from this URI, expecting a JSON response with `keys`, which are added to the provided `keys` option.\n\n### optional cookie: `string`\nIf this value is set, then the value is retrieved from the cookie header using that value as a key, which is then validated as a token..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwk", "title": "JWK Auth Middleware", "description": "The JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:08", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "title": "JWK Auth Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "2a142fc2-2776-47a2-b782-a12135b47ed2", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwk", "url": "https://hono.dev/docs/middleware/builtin/jwk", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for JWK Auth Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { jwk } from 'hono/jwk'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of jwk auth middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwk({\n    jwks_uri: `https://${backendServer}/.well-known/jwks.json`,\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n\n// Get payload:\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of jwk auth middleware.\n\n**Options Description**:\n\n```yaml\n### optional keys: `HonoJsonWebKey[] | (() => Promise<HonoJsonWebKey[]>)`\nThe values of your public keys, or a function that returns them.\n\n### optional jwks_uri: `string`\nIf this value is set, attempt to fetch JWKs from this URI, expecting a JSON response with `keys`, which are added to the provided `keys` option.\n\n### optional cookie: `string`\nIf this value is set, then the value is retrieved from the cookie header using that value as a key, which is then validated as a token.\n```\n\nThis snippet shows you how to options description, which is an important aspect of jwk auth middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwk", "title": "JWK Auth Middleware", "description": "The JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:08", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "title": "JWK Auth Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "2a142fc2-2776-47a2-b782-a12135b47ed2", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwk", "url": "https://hono.dev/docs/middleware/builtin/jwk", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using JWK Auth Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe Authorization header sent from the client must have a specified scheme. Example: `Bearer my.token.value` or `Basic my.token.value`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jwk", "title": "JWK Auth Middleware", "description": "The JWK Auth Middleware authenticates requests by verifying tokens using JWK (JSON Web Key). It checks for an `Authorization` header and other configured sources, such as cookies, if specified. Specifically, it validates tokens using the provided `keys`, retrieves keys from `jwks_uri` if specified, and supports token extraction from cookies if the `cookie` option is set.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:08", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "title": "JWK Auth Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "2a142fc2-2776-47a2-b782-a12135b47ed2", "sourceURL": "https://hono.dev/docs/middleware/builtin/jwk", "url": "https://hono.dev/docs/middleware/builtin/jwk", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Fastly Compute is in hono?\n\nAssistant: Sure, I'd be happy to explain Fastly Compute in hono.\n\n# Fastly Compute\n\nFastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.Here's a quick rundown of what this is about:\n\n## 1. Install CLI\n\nTo use Fastly Compute, you must create a Fastly account if you don't already have one. Then, install Fastly CLI.\n\nmacOS\n\n```sh\nbrew install fastly/tap/fastly\n```\n\nFollow this link for other OS:\n\n- [Compute services | Fastly Developer Hub](https://developer.fastly.com/learning/compute/#download-and-install-the-fastly-cli)\n\n## 2. Setup\n\nA starter for Fastly Compute is available. Start your project with \"create-hono\" command. Select `fastly` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove to `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```\n\n## 3. Hello World\n\nEdit `src/index.ts`:\n\n```ts\n// src/index.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Fastly!'))\n\napp.fire()\n```\n\n## 4. Run\n\nRun the development server locally. Then, access `http://localhost:7676` in your Web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```\n\n## 4. Deploy\n\n```sh\nnpm run deploy\n```\n\n```sh\nyarn deploy\n```\n\n```sh\npnpm deploy\n```\n\n```sh\nbun run deploy\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. install cli in hono?\n\nAssistant: To 1. install cli in hono, here's what you do:\nTo use Fastly Compute, you must create a Fastly account if you don't already have one. Then, install Fastly CLI.\n\nmacOS\n\n```sh\nbrew install fastly/tap/fastly\n```\n\nFollow this link for other OS:\n\n- [Compute services | Fastly Developer Hub](https://developer.fastly.com/learning/compute/#download-and-install-the-fastly-cli).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. setup in hono?\n\nAssistant: To 2. setup in hono, here's what you do:\nA starter for Fastly Compute is available. Start your project with \"create-hono\" command. Select `fastly` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove to `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. hello world in hono?\n\nAssistant: To 3. hello world in hono, here's what you do:\nEdit `src/index.ts`:\n\n```ts\n// src/index.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Fastly!'))\n\napp.fire()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. run in hono?\n\nAssistant: To 4. run in hono, here's what you do:\nRun the development server locally. Then, access `http://localhost:7676` in your Web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\n```sh\nnpm run deploy\n```\n\n```sh\nyarn deploy\n```\n\n```sh\npnpm deploy\n```\n\n```sh\nbun run deploy\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Fastly Compute in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Fastly CLI**:\n\n```yaml\n```sh\nbrew install fastly/tap/fastly\n```\n```\n\nThis snippet shows you how to install fastly cli, which is an important aspect of fastly compute.\n\n**Setup Project with npm**:\n\n```yaml\n```sh\nnpm create hono@latest my-app\n```\n```\n\nThis snippet shows you how to setup project with npm, which is an important aspect of fastly compute.\n\n**Setup Project with yarn**:\n\n```yaml\n```sh\nyarn create hono my-app\n```\n```\n\nThis snippet shows you how to setup project with yarn, which is an important aspect of fastly compute.\n\n**Setup Project with pnpm**:\n\n```yaml\n```sh\npnpm create hono my-app\n```\n```\n\nThis snippet shows you how to setup project with pnpm, which is an important aspect of fastly compute.\n\n**Setup Project with bun**:\n\n```yaml\n```sh\nbun create hono@latest my-app\n```\n```\n\nThis snippet shows you how to setup project with bun, which is an important aspect of fastly compute.\n\n**Setup Project with deno**:\n\n```yaml\n```sh\ndeno init --npm hono my-app\n```\n```\n\nThis snippet shows you how to setup project with deno, which is an important aspect of fastly compute.\n\n**Install Dependencies with npm**:\n\n```yaml\n```sh\ncd my-app\nnpm i\n```\n```\n\nThis snippet shows you how to install dependencies with npm, which is an important aspect of fastly compute.\n\n**Install Dependencies with yarn**:\n\n```yaml\n```sh\ncd my-app\nyarn\n```\n```\n\nThis snippet shows you how to install dependencies with yarn, which is an important aspect of fastly compute.\n\n**Install Dependencies with pnpm**:\n\n```yaml\n```sh\ncd my-app\npnpm i\n```\n```\n\nThis snippet shows you how to install dependencies with pnpm, which is an important aspect of fastly compute.\n\n**Install Dependencies with bun**:\n\n```yaml\n```sh\ncd my-app\nbun i\n```\n```\n\nThis snippet shows you how to install dependencies with bun, which is an important aspect of fastly compute.\n\n**Hello World Example**:\n\n```yaml\n```ts\n// src/index.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Fastly!'))\n\napp.fire()\n```\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of fastly compute.\n\n**Run Development Server with npm**:\n\n```yaml\n```sh\nnpm run dev\n```\n```\n\nThis snippet shows you how to run development server with npm, which is an important aspect of fastly compute.\n\n**Run Development Server with yarn**:\n\n```yaml\n```sh\nyarn dev\n```\n```\n\nThis snippet shows you how to run development server with yarn, which is an important aspect of fastly compute.\n\n**Run Development Server with pnpm**:\n\n```yaml\n```sh\npnpm dev\n```\n```\n\nThis snippet shows you how to run development server with pnpm, which is an important aspect of fastly compute.\n\n**Run Development Server with bun**:\n\n```yaml\n```sh\nbun run dev\n```\n```\n\nThis snippet shows you how to run development server with bun, which is an important aspect of fastly compute.\n\n**Deploy with npm**:\n\n```yaml\n```sh\nnpm run deploy\n```\n```\n\nThis snippet shows you how to deploy with npm, which is an important aspect of fastly compute.\n\n**Deploy with yarn**:\n\n```yaml\n```sh\nyarn deploy\n```\n```\n\nThis snippet shows you how to deploy with yarn, which is an important aspect of fastly compute.\n\n**Deploy with pnpm**:\n\n```yaml\n```sh\npnpm deploy\n```\n```\n\nThis snippet shows you how to deploy with pnpm, which is an important aspect of fastly compute.\n\n**Deploy with bun**:\n\n```yaml\n```sh\nbun run deploy\n```\n```\n\nThis snippet shows you how to deploy with bun, which is an important aspect of fastly compute.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/fastly", "title": "Fastly Compute", "description": "Fastly's Compute offering allows us to build high scale, globally distributed applications and execute code at the edge of Fastly CDN. Hono also works on Fastly Compute.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:58:58", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Fastly Compute - Hono", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "50fd7802-d5a6-4739-ab44-314afe0e79e9", "sourceURL": "https://hono.dev/docs/getting-started/fastly", "url": "https://hono.dev/docs/getting-started/fastly", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Language Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Language Middleware in hono.\n\n# Language Middleware\n\nThe Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { languageDetector } from 'hono/language'\n```\n\n## Basic Usage\n\n```ts\nconst app = new Hono()\n\napp.use(\n  languageDetector({\n    supportedLanguages: ['en', 'ar', 'ja'], // Must include fallback\n    fallbackLanguage: 'en', // Required\n  })\n)\n\napp.get('/', (c) => {\n  const lang = c.get('language')\n  return c.text(`Hello! Your language is ${lang}`)\n})\n```\n\n## Client Examples\n\n```sh\n# Via path\ncurl http://localhost:8787/ar/home\n\n# Via query parameter\ncurl http://localhost:8787/?lang=ar\n\n# Via cookie\ncurl -H 'Cookie: language=ja' http://localhost:8787/\n\n# Via header\ncurl -H 'Accept-Language: ar,en;q=0.9' http://localhost:8787/\n```\n\n## Default Configuration\n\n```ts\nexport const DEFAULT_OPTIONS: DetectorOptions = {\n  order: ['querystring', 'cookie', 'header'],\n  lookupQueryString: 'lang',\n  lookupCookie: 'language',\n  lookupFromHeaderKey: 'accept-language',\n  lookupFromPathIndex: 0,\n  caches: ['cookie'],\n  ignoreCase: true,\n  fallbackLanguage: 'en',\n  supportedLanguages: ['en'],\n  cookieOptions: {\n    sameSite: 'Strict',\n    secure: true,\n    maxAge: 365 * 24 * 60 * 60,\n    httpOnly: true,\n  },\n  debug: false,\n}\n```\n\n## Key Behaviors\n\n### Detection Workflow\n1. **Order**: Checks sources in this sequence by default:\n   - Query parameter (?lang=ar)\n   - Cookie (language=ar)\n   - Accept-Language header\n2. **Caching**: Stores detected language in a cookie (1 year by default)\n3. **Fallback**: Uses `fallbackLanguage` if no valid detection (must be in `supportedLanguages`)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { languageDetector } from 'hono/language'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I basic usage in hono?\n\nAssistant: To basic usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use(\n  languageDetector({\n    supportedLanguages: ['en', 'ar', 'ja'], // Must include fallback\n    fallbackLanguage: 'en', // Required\n  })\n)\n\napp.get('/', (c) => {\n  const lang = c.get('language')\n  return c.text(`Hello! Your language is ${lang}`)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I client examples in hono?\n\nAssistant: To client examples in hono, here's what you do:\n```sh\n# Via path\ncurl http://localhost:8787/ar/home\n\n# Via query parameter\ncurl http://localhost:8787/?lang=ar\n\n# Via cookie\ncurl -H 'Cookie: language=ja' http://localhost:8787/\n\n# Via header\ncurl -H 'Accept-Language: ar,en;q=0.9' http://localhost:8787/\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I default configuration in hono?\n\nAssistant: To default configuration in hono, here's what you do:\n```ts\nexport const DEFAULT_OPTIONS: DetectorOptions = {\n  order: ['querystring', 'cookie', 'header'],\n  lookupQueryString: 'lang',\n  lookupCookie: 'language',\n  lookupFromHeaderKey: 'accept-language',\n  lookupFromPathIndex: 0,\n  caches: ['cookie'],\n  ignoreCase: true,\n  fallbackLanguage: 'en',\n  supportedLanguages: ['en'],\n  cookieOptions: {\n    sameSite: 'Strict',\n    secure: true,\n    maxAge: 365 * 24 * 60 * 60,\n    httpOnly: true,\n  },\n  debug: false,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I key behaviors in hono?\n\nAssistant: To key behaviors in hono, here's what you do:\n### Detection Workflow\n1. **Order**: Checks sources in this sequence by default:\n   - Query parameter (?lang=ar)\n   - Cookie (language=ar)\n   - Accept-Language header\n2. **Caching**: Stores detected language in a cookie (1 year by default)\n3. **Fallback**: Uses `fallbackLanguage` if no valid detection (must be in `supportedLanguages`).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Language Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Custom Detection Order**:\n\n```yaml\n```ts\napp.use(\n  languageDetector({\n    order: ['path', 'cookie', 'querystring', 'header'],\n    lookupFromPathIndex: 0, // /en/profile → index 0 = 'en'\n    supportedLanguages: ['en', 'ar'],\n    fallbackLanguage: 'en',\n  })\n)\n```\n```\n\nThis snippet shows you how to custom detection order, which is an important aspect of language middleware.\n\n**Language Code Transformation**:\n\n```yaml\n```ts\napp.use(\n  languageDetector({\n    convertDetectedLanguage: (lang) => lang.split('-')[0],\n    supportedLanguages: ['en', 'ja'],\n    fallbackLanguage: 'en',\n  })\n)\n```\n```\n\nThis snippet shows you how to language code transformation, which is an important aspect of language middleware.\n\n**Cookie Configuration**:\n\n```yaml\n```ts\napp.use(\n  languageDetector({\n    lookupCookie: 'app_lang',\n    caches: ['cookie'],\n    cookieOptions: {\n      path: '/', // Cookie path\n      sameSite: 'Lax', // Cookie same-site policy\n      secure: true, // Only send over HTTPS\n      maxAge: 86400 * 365, // 1 year expiration\n      httpOnly: true, // Not accessible via JavaScript\n      domain: '.example.com', // Optional: specific domain\n    },\n  })\n)\n```\n```\n\nThis snippet shows you how to cookie configuration, which is an important aspect of language middleware.\n\n**Disable Cookie Caching**:\n\n```yaml\n```ts\nlanguageDetector({\n  caches: false,\n})\n```\n```\n\nThis snippet shows you how to disable cookie caching, which is an important aspect of language middleware.\n\n**Debugging**:\n\n```yaml\n```ts\nlanguageDetector({\n  debug: true, // Shows: \"Detected from querystring: ar\"\n})\n```\n```\n\nThis snippet shows you how to debugging, which is an important aspect of language middleware.\n\n**Path-Based Routing**:\n\n```yaml\n```ts\napp.get('/:lang/home', (c) => {\n  const lang = c.get('language') // 'en', 'ar', etc.\n  return c.json({ message: getLocalizedContent(lang) })\n})\n```\n```\n\nThis snippet shows you how to path-based routing, which is an important aspect of language middleware.\n\n**Multiple Supported Languages**:\n\n```yaml\n```ts\nlanguageDetector({\n  supportedLanguages: ['en', 'en-GB', 'ar', 'ar-EG'],\n  convertDetectedLanguage: (lang) => lang.replace('_', '-'), // Normalize\n})\n```\n```\n\nThis snippet shows you how to multiple supported languages, which is an important aspect of language middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Language Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure `fallbackLanguage` is included in `supportedLanguages` to avoid errors during setup.\n\nUse the `debug` option to log detection steps for troubleshooting.\n\nNormalize language codes to avoid mismatches in detection.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/language", "title": "Language Middleware", "description": "The Language Detector middleware automatically determines a user's preferred language (locale) from various sources and makes it available via `c.get('language')`. Detection strategies include query parameters, cookies, headers, and URL path segments. Perfect for internationalization (i18n) and locale-specific content.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:18", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Language Middleware - Hono", "scrapeId": "adaad26a-d7d5-4664-ae3e-4d0044ae1356", "sourceURL": "https://hono.dev/docs/middleware/builtin/language", "url": "https://hono.dev/docs/middleware/builtin/language", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what CSRF Protection is in hono?\n\nAssistant: Sure, I'd be happy to explain CSRF Protection in hono.\n\n# CSRF Protection\n\nCSRF Protection Middleware prevents CSRF attacks by checking request headers.Here's a quick rundown of what this is about:\n\n## CSRF Protection\n\nCSRF Protection Middleware prevents CSRF attacks by checking request headers.\n\nThis middleware protects against CSRF attacks such as submitting with a form element by comparing the value of the `Origin` header with the requested URL.\n\nOld browsers that do not send `Origin` headers, or environments that use reverse proxies to remove `Origin` headers, may not work well. In such environments, use the other CSRF token methods.\n\n## Import\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { csrf } from 'hono/csrf'\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/csrf", "title": "CSRF Protection", "description": "CSRF Protection Middleware prevents CSRF attacks by checking request headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:01:01", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "CSRF Protection - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7faaf510-2a74-4ea8-93f5-477c0477cb92", "sourceURL": "https://hono.dev/docs/middleware/builtin/csrf", "url": "https://hono.dev/docs/middleware/builtin/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I csrf protection in hono?\n\nAssistant: To csrf protection in hono, here's what you do:\nCSRF Protection Middleware prevents CSRF attacks by checking request headers.\n\nThis middleware protects against CSRF attacks such as submitting with a form element by comparing the value of the `Origin` header with the requested URL.\n\nOld browsers that do not send `Origin` headers, or environments that use reverse proxies to remove `Origin` headers, may not work well. In such environments, use the other CSRF token methods..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/csrf", "title": "CSRF Protection", "description": "CSRF Protection Middleware prevents CSRF attacks by checking request headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:01:01", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "CSRF Protection - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7faaf510-2a74-4ea8-93f5-477c0477cb92", "sourceURL": "https://hono.dev/docs/middleware/builtin/csrf", "url": "https://hono.dev/docs/middleware/builtin/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\nts\n\n```\nimport { Hono } from 'hono'\nimport { csrf } from 'hono/csrf'\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/csrf", "title": "CSRF Protection", "description": "CSRF Protection Middleware prevents CSRF attacks by checking request headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:01:01", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "CSRF Protection - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7faaf510-2a74-4ea8-93f5-477c0477cb92", "sourceURL": "https://hono.dev/docs/middleware/builtin/csrf", "url": "https://hono.dev/docs/middleware/builtin/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for CSRF Protection in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage**:\n\n```yaml\nts\n\n```\nconst app = new Hono()\n\napp.use(csrf())\n\n// Specifying origins with using `origin` option\n// string\napp.use(csrf({ origin: 'myapp.example.com' }))\n\n// string[]\napp.use(\n  csrf({\n    origin: ['myapp.example.com', 'development.myapp.example.com'],\n  })\n)\n\n// Function\n// It is strongly recommended that the protocol be verified to ensure a match to `$`.\n// You should *never* do a forward match.\napp.use(\n  '*',\n  csrf({\n    origin: (origin) =>\n      /https:\\/\\/(\\w+\\.)?myapp\\.example\\.com$/.test(origin),\n  })\n)\n```\n\n```\n\nThis snippet shows you how to usage, which is an important aspect of csrf protection.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/csrf", "title": "CSRF Protection", "description": "CSRF Protection Middleware prevents CSRF attacks by checking request headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:01:01", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "CSRF Protection - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7faaf510-2a74-4ea8-93f5-477c0477cb92", "sourceURL": "https://hono.dev/docs/middleware/builtin/csrf", "url": "https://hono.dev/docs/middleware/builtin/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using CSRF Protection in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is strongly recommended that the protocol be verified to ensure a match to `$`.\n\nYou should *never* do a forward match.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/csrf", "title": "CSRF Protection", "description": "CSRF Protection Middleware prevents CSRF attacks by checking request headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:01:01", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "CSRF Protection - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "7faaf510-2a74-4ea8-93f5-477c0477cb92", "sourceURL": "https://hono.dev/docs/middleware/builtin/csrf", "url": "https://hono.dev/docs/middleware/builtin/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Compress Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Compress Middleware in hono.\n\n# Compress Middleware\n\nThis middleware compresses the response body, according to `Accept-Encoding` request header.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { compress } from 'hono/compress'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.use(compress())\n```\n\n## Options\n\n### optional encoding: 'gzip' | 'deflate'\nThe compression scheme to allow for response compression. Either `gzip` or `deflate`. If not defined, both are allowed and will be used based on the `Accept-Encoding` header. `gzip` is prioritized if this option is not provided and the client provides both in the `Accept-Encoding` header.\n\n### optional threshold: number\nThe minimum size in bytes to compress. Defaults to 1024 bytes.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/compress", "title": "Compress Middleware", "description": "This middleware compresses the response body, according to `Accept-Encoding` request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:51", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Compress Middleware - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "21ad48fc-2ea2-4781-adb5-1ce0f7f310c6", "sourceURL": "https://hono.dev/docs/middleware/builtin/compress", "url": "https://hono.dev/docs/middleware/builtin/compress", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { compress } from 'hono/compress'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/compress", "title": "Compress Middleware", "description": "This middleware compresses the response body, according to `Accept-Encoding` request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:51", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Compress Middleware - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "21ad48fc-2ea2-4781-adb5-1ce0f7f310c6", "sourceURL": "https://hono.dev/docs/middleware/builtin/compress", "url": "https://hono.dev/docs/middleware/builtin/compress", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use(compress())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/compress", "title": "Compress Middleware", "description": "This middleware compresses the response body, according to `Accept-Encoding` request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:51", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Compress Middleware - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "21ad48fc-2ea2-4781-adb5-1ce0f7f310c6", "sourceURL": "https://hono.dev/docs/middleware/builtin/compress", "url": "https://hono.dev/docs/middleware/builtin/compress", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional encoding: 'gzip' | 'deflate'\nThe compression scheme to allow for response compression. Either `gzip` or `deflate`. If not defined, both are allowed and will be used based on the `Accept-Encoding` header. `gzip` is prioritized if this option is not provided and the client provides both in the `Accept-Encoding` header.\n\n### optional threshold: number\nThe minimum size in bytes to compress. Defaults to 1024 bytes..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/compress", "title": "Compress Middleware", "description": "This middleware compresses the response body, according to `Accept-Encoding` request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:51", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Compress Middleware - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "21ad48fc-2ea2-4781-adb5-1ce0f7f310c6", "sourceURL": "https://hono.dev/docs/middleware/builtin/compress", "url": "https://hono.dev/docs/middleware/builtin/compress", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Compress Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { compress } from 'hono/compress'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of compress middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.use(compress())\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of compress middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/compress", "title": "Compress Middleware", "description": "This middleware compresses the response body, according to `Accept-Encoding` request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:51", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Compress Middleware - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "21ad48fc-2ea2-4781-adb5-1ce0f7f310c6", "sourceURL": "https://hono.dev/docs/middleware/builtin/compress", "url": "https://hono.dev/docs/middleware/builtin/compress", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Compress Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn Cloudflare Workers and Deno Deploy, the response body will be compressed automatically, so there is no need to use this middleware.\n\nThis middleware uses `CompressionStream` which is not yet supported in bun.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/compress", "title": "Compress Middleware", "description": "This middleware compresses the response body, according to `Accept-Encoding` request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:51", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "title": "Compress Middleware - Hono", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "21ad48fc-2ea2-4781-adb5-1ce0f7f310c6", "sourceURL": "https://hono.dev/docs/middleware/builtin/compress", "url": "https://hono.dev/docs/middleware/builtin/compress", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Error handling in Validator is in hono?\n\nAssistant: Sure, I'd be happy to explain Error handling in Validator in hono.\n\n# Error handling in Validator\n\nBy using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.Here's a quick rundown of what this is about:\n\n## Error handling in Validator\n\nBy using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.\n\nAlthough this snippet employs Zod Validator, you can apply a similar approach with any supported validator library.\n\n## See also\n\n- Zod Validator\n- Valibot Validator\n- Typebox Validator\n- Typia Validator\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/validator-error-handling", "title": "Error handling in Validator", "description": "By using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:05:47", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "Error handling in Validator - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "scrapeId": "4c4fd422-5cfc-47ba-8576-0cf18bfdb89b", "sourceURL": "https://hono.dev/examples/validator-error-handling", "url": "https://hono.dev/examples/validator-error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I error handling in validator in hono?\n\nAssistant: To error handling in validator in hono, here's what you do:\nBy using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.\n\nAlthough this snippet employs Zod Validator, you can apply a similar approach with any supported validator library..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/validator-error-handling", "title": "Error handling in Validator", "description": "By using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:05:47", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "Error handling in Validator - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "scrapeId": "4c4fd422-5cfc-47ba-8576-0cf18bfdb89b", "sourceURL": "https://hono.dev/examples/validator-error-handling", "url": "https://hono.dev/examples/validator-error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I see also in hono?\n\nAssistant: To see also in hono, here's what you do:\n- Zod Validator\n- Valibot Validator\n- Typebox Validator\n- Typia Validator.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/validator-error-handling", "title": "Error handling in Validator", "description": "By using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:05:47", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "Error handling in Validator - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "scrapeId": "4c4fd422-5cfc-47ba-8576-0cf18bfdb89b", "sourceURL": "https://hono.dev/examples/validator-error-handling", "url": "https://hono.dev/examples/validator-error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Error handling in Validator in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Validator Example**:\n\n```yaml\nimport { z } from 'zod'\nimport { zValidator } from '@hono/zod-validator'\n\nconst app = new Hono()\n\nconst userSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n})\n\napp.post(\n  '/users/new',\n  zValidator('json', userSchema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  }),\n  async (c) => {\n    const user = c.req.valid('json')\n    console.log(user.name) // string\n    console.log(user.age) // number\n  }\n)\n```\n\nThis snippet shows you how to validator example, which is an important aspect of error handling in validator.\n\n", "metadata": {"source_url": "https://hono.dev/examples/validator-error-handling", "title": "Error handling in Validator", "description": "By using a validator, you can handle invalid input more easily. This example shows you can utilize the callback result for implementing custom error handling.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:05:47", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "title": "Error handling in Validator - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "scrapeId": "4c4fd422-5cfc-47ba-8576-0cf18bfdb89b", "sourceURL": "https://hono.dev/examples/validator-error-handling", "url": "https://hono.dev/examples/validator-error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Grouping routes for RPC is in hono?\n\nAssistant: Sure, I'd be happy to explain Grouping routes for RPC in hono.\n\n# Grouping routes for RPC\n\nIf you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.Here's a quick rundown of what this is about:\n\n## On this page\n\n\n\n## Grouping routes for RPC\n\nIf you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.\n\nPass the value returned from methods like `app.get()` or `app.post()` to the second argument of `app.route()`. \n\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/grouping-routes-rpc", "title": "Grouping routes for RPC", "description": "If you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:07:15", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Grouping routes for RPC - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "01151782-5316-4ff5-bf93-3d9258b4ba72", "sourceURL": "https://hono.dev/examples/grouping-routes-rpc", "url": "https://hono.dev/examples/grouping-routes-rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I on this page in hono?\n\nAssistant: To on this page in hono, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/grouping-routes-rpc", "title": "Grouping routes for RPC", "description": "If you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:07:15", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Grouping routes for RPC - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "01151782-5316-4ff5-bf93-3d9258b4ba72", "sourceURL": "https://hono.dev/examples/grouping-routes-rpc", "url": "https://hono.dev/examples/grouping-routes-rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I grouping routes for rpc in hono?\n\nAssistant: To grouping routes for rpc in hono, here's what you do:\nIf you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.\n\nPass the value returned from methods like `app.get()` or `app.post()` to the second argument of `app.route()`. \n\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/grouping-routes-rpc", "title": "Grouping routes for RPC", "description": "If you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:07:15", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Grouping routes for RPC - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "01151782-5316-4ff5-bf93-3d9258b4ba72", "sourceURL": "https://hono.dev/examples/grouping-routes-rpc", "url": "https://hono.dev/examples/grouping-routes-rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Grouping routes for RPC in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of Grouping Routes for RPC**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { hc } from 'hono/client'\n\nconst authorsApp = new Hono()\n  .get('/', (c) => c.json({ result: 'list authors' }))\n  .post('/', (c) => c.json({ result: 'create an author' }, 201))\n  .get('/:id', (c) => c.json({ result: `get ${c.req.param('id')}` }))\n\nconst booksApp = new Hono()\n  .get('/', (c) => c.json({ result: 'list books' }))\n  .post('/', (c) => c.json({ result: 'create a book' }, 201))\n  .get('/:id', (c) => c.json({ result: `get ${c.req.param('id')}` }))\n\nconst app = new Hono()\n  .route('/authors', authorsApp)\n  .route('/books', booksApp)\n\ntype AppType = typeof app\n```\n\nThis snippet shows you how to example of grouping routes for rpc, which is an important aspect of grouping routes for rpc.\n\n", "metadata": {"source_url": "https://hono.dev/examples/grouping-routes-rpc", "title": "Grouping routes for RPC", "description": "If you want to enable type inference for multiple `app` s correctly, you can use `app.route()` as follows.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:07:15", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Grouping routes for RPC - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "01151782-5316-4ff5-bf93-3d9258b4ba72", "sourceURL": "https://hono.dev/examples/grouping-routes-rpc", "url": "https://hono.dev/examples/grouping-routes-rpc", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cloudflare Durable Objects is in hono?\n\nAssistant: Sure, I'd be happy to explain Cloudflare Durable Objects in hono.\n\n# Cloudflare Durable Objects\n\nBy using Hono, you can write Durable Objects application easily.Here's a quick rundown of what this is about:\n\n## On this page\n\nHono can handle a fetch event of Durable Objects and you can use it with the powerful router.\n\n## Code Example\n\n```typescript\nimport { Hono } from 'hono'\n\nexport class Counter {\n  value: number = 0\n  state: DurableObjectState\n  app: Hono = new Hono()\n\n  constructor(state: DurableObjectState) {\n    this.state = state\n    this.state.blockConcurrencyWhile(async () => {\n      const stored = await this.state.storage?.get<number>('value')\n      this.value = stored || 0\n    })\n\n    this.app.get('/increment', async (c) => {\n      const currentValue = ++this.value\n      await this.state.storage?.put('value', this.value)\n      return c.text(currentValue.toString())\n    })\n\n    this.app.get('/decrement', async (c) => {\n      const currentValue = --this.value\n      await this.state.storage?.put('value', this.value)\n      return c.text(currentValue.toString())\n    })\n\n    this.app.get('/', async (c) => {\n      return c.text(this.value.toString())\n    })\n  }\n\n  async fetch(request: Request) {\n    return this.app.fetch(request)\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-durable-objects", "title": "Cloudflare Durable Objects", "description": "By using Hono, you can write Durable Objects application easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:07:41", "type": "overview", "page_metadata": {"og:type": "website", "title": "Cloudflare Durable Objects - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9418fa83-8463-43af-baca-8b1cb920dbd8", "sourceURL": "https://hono.dev/examples/cloudflare-durable-objects", "url": "https://hono.dev/examples/cloudflare-durable-objects", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I on this page in hono?\n\nAssistant: To on this page in hono, here's what you do:\nHono can handle a fetch event of Durable Objects and you can use it with the powerful router..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-durable-objects", "title": "Cloudflare Durable Objects", "description": "By using Hono, you can write Durable Objects application easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:07:41", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Cloudflare Durable Objects - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9418fa83-8463-43af-baca-8b1cb920dbd8", "sourceURL": "https://hono.dev/examples/cloudflare-durable-objects", "url": "https://hono.dev/examples/cloudflare-durable-objects", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I code example in hono?\n\nAssistant: To code example in hono, here's what you do:\n```typescript\nimport { Hono } from 'hono'\n\nexport class Counter {\n  value: number = 0\n  state: DurableObjectState\n  app: Hono = new Hono()\n\n  constructor(state: DurableObjectState) {\n    this.state = state\n    this.state.blockConcurrencyWhile(async () => {\n      const stored = await this.state.storage?.get<number>('value')\n      this.value = stored || 0\n    })\n\n    this.app.get('/increment', async (c) => {\n      const currentValue = ++this.value\n      await this.state.storage?.put('value', this.value)\n      return c.text(currentValue.toString())\n    })\n\n    this.app.get('/decrement', async (c) => {\n      const currentValue = --this.value\n      await this.state.storage?.put('value', this.value)\n      return c.text(currentValue.toString())\n    })\n\n    this.app.get('/', async (c) => {\n      return c.text(this.value.toString())\n    })\n  }\n\n  async fetch(request: Request) {\n    return this.app.fetch(request)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-durable-objects", "title": "Cloudflare Durable Objects", "description": "By using Hono, you can write Durable Objects application easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:07:41", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Cloudflare Durable Objects - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9418fa83-8463-43af-baca-8b1cb920dbd8", "sourceURL": "https://hono.dev/examples/cloudflare-durable-objects", "url": "https://hono.dev/examples/cloudflare-durable-objects", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cloudflare Durable Objects in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Counter Class Example**:\n\n```yaml\nimport { Hono } from 'hono'\n\nexport class Counter {\n  value: number = 0\n  state: DurableObjectState\n  app: Hono = new Hono()\n\n  constructor(state: DurableObjectState) {\n    this.state = state\n    this.state.blockConcurrencyWhile(async () => {\n      const stored = await this.state.storage?.get<number>('value')\n      this.value = stored || 0\n    })\n\n    this.app.get('/increment', async (c) => {\n      const currentValue = ++this.value\n      await this.state.storage?.put('value', this.value)\n      return c.text(currentValue.toString())\n    })\n\n    this.app.get('/decrement', async (c) => {\n      const currentValue = --this.value\n      await this.state.storage?.put('value', this.value)\n      return c.text(currentValue.toString())\n    })\n\n    this.app.get('/', async (c) => {\n      return c.text(this.value.toString())\n    })\n  }\n\n  async fetch(request: Request) {\n    return this.app.fetch(request)\n  }\n}\n```\n\nThis snippet shows you how to counter class example, which is an important aspect of cloudflare durable objects.\n\n", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-durable-objects", "title": "Cloudflare Durable Objects", "description": "By using Hono, you can write Durable Objects application easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:07:41", "type": "code_examples", "page_metadata": {"og:type": "website", "title": "Cloudflare Durable Objects - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9418fa83-8463-43af-baca-8b1cb920dbd8", "sourceURL": "https://hono.dev/examples/cloudflare-durable-objects", "url": "https://hono.dev/examples/cloudflare-durable-objects", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cloudflare Durable Objects in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHono can handle a fetch event of Durable Objects and you can use it with the powerful router.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/examples/cloudflare-durable-objects", "title": "Cloudflare Durable Objects", "description": "By using Hono, you can write Durable Objects application easily.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:07:41", "type": "best_practices", "page_metadata": {"og:type": "website", "title": "Cloudflare Durable Objects - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "9418fa83-8463-43af-baca-8b1cb920dbd8", "sourceURL": "https://hono.dev/examples/cloudflare-durable-objects", "url": "https://hono.dev/examples/cloudflare-durable-objects", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what JSX Renderer Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain JSX Renderer Middleware in hono.\n\n# JSX Renderer Middleware\n\nJSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { jsxRenderer, useRequestContext } from 'hono/jsx-renderer'\n```\n\n## Usage\n\n```jsx\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/about', (c) => {\n  return c.render(<h1>About me!</h1>)\n})\n```\n\n## Options\n\n### optional docType: `boolean` | `string`\nIf you do not want to add a DOCTYPE at the beginning of the HTML, set the `docType` option to `false`.\n\n```tsx\napp.use(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>{children}</body>\n        </html>\n      )\n    },\n    { docType: false }\n  )\n)\n```\n\nAnd you can specify the DOCTYPE.\n\n```tsx\napp.use(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>{children}</body>\n        </html>\n      )\n    },\n    {\n      docType:\n        '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n    }\n  )\n)\n```\n\n### optional stream: `boolean` | `Record<string, string>`\nIf you set it to `true` or provide a Record value, it will be rendered as a streaming response.\n\n```tsx\nconst AsyncComponent = async () => {\n  await new Promise((r) => setTimeout(r, 1000)) // sleep 1s\n  return <div>Hi!</div>\n}\n\napp.get(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>\n            <h1>SSR Streaming</h1>\n            {children}\n          </body>\n        </html>\n      )\n    },\n    { stream: true }\n  )\n)\n\napp.get('/', (c) => {\n  return c.render(\n    <Suspense fallback={<div>loading...</div>}>\n      <AsyncComponent />\n    </Suspense>\n  )\n})\n```\n\nIf `true` is set, the following headers are added:\n\n```ts\n{\n  'Transfer-Encoding': 'chunked',\n  'Content-Type': 'text/html; charset=UTF-8',\n  'Content-Encoding': 'Identity'\n}\n```\n\nYou can customize the header values by specifying the Record values.\n\n## Nested Layouts\n\n```tsx\napp.use(\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>{children}</body>\n      </html>\n    )\n  })\n)\n\nconst blog = new Hono()\nblog.use(\n  jsxRenderer(({ children, Layout }) => {\n    return (\n      <Layout>\n        <nav>Blog Menu</nav>\n        <div>{children}</div>\n      </Layout>\n    )\n  })\n)\n\napp.route('/blog', blog)\n```\n\n## useRequestContext()\n\n`useRequestContext()` returns an instance of Context.\n\n```tsx\nimport { useRequestContext, jsxRenderer } from 'hono/jsx-renderer'\n\nconst app = new Hono()\napp.use(jsxRenderer())\n\nconst RequestUrlBadge: FC = () => {\n  const c = useRequestContext()\n  return <b>{c.req.url}</b>\n}\n\napp.get('/page/info', (c) => {\n  return c.render(\n    <div>\n      You are accessing: <RequestUrlBadge />\n    </div>\n  )\n})\n```\n\nWARNING\n\nYou can't use `useRequestContext()` with the Deno's `precompile` JSX option. Use the `react-jsx`:\n\n```json\n{\n   \"compilerOptions\": {\n     \"jsx\": \"precompile\",\n     \"jsx\": \"react-jsx\",\n     \"jsxImportSource\": \"hono/jsx\"\n   }\n }\n```\n\n## Extending ContextRenderer\n\nBy defining `ContextRenderer` as shown below, you can pass additional content to the renderer. This is handy, for instance, when you want to change the contents of the head tag depending on the page.\n\n```tsx\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (\n      content: string | Promise<string>,\n      props: { title: string }\n    ): Response\n  }\n}\n\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children, title }) => {\n    return (\n      <html>\n        <head>\n          <title>{title}</title>\n        </head>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/favorites', (c) => {\n  return c.render(\n    <div>\n      <ul>\n        <li>Eating sushi</li>\n        <li>Watching baseball games</li>\n      </ul>\n    </div>,\n    {\n      title: 'My favorites',\n    }\n  )\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { jsxRenderer, useRequestContext } from 'hono/jsx-renderer'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```jsx\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/about', (c) => {\n  return c.render(<h1>About me!</h1>)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional docType: `boolean` | `string`\nIf you do not want to add a DOCTYPE at the beginning of the HTML, set the `docType` option to `false`.\n\n```tsx\napp.use(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>{children}</body>\n        </html>\n      )\n    },\n    { docType: false }\n  )\n)\n```\n\nAnd you can specify the DOCTYPE.\n\n```tsx\napp.use(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>{children}</body>\n        </html>\n      )\n    },\n    {\n      docType:\n        '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n    }\n  )\n)\n```\n\n### optional stream: `boolean` | `Record<string, string>`\nIf you set it to `true` or provide a Record value, it will be rendered as a streaming response.\n\n```tsx\nconst AsyncComponent = async () => {\n  await new Promise((r) => setTimeout(r, 1000)) // sleep 1s\n  return <div>Hi!</div>\n}\n\napp.get(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>\n            <h1>SSR Streaming</h1>\n            {children}\n          </body>\n        </html>\n      )\n    },\n    { stream: true }\n  )\n)\n\napp.get('/', (c) => {\n  return c.render(\n    <Suspense fallback={<div>loading...</div>}>\n      <AsyncComponent />\n    </Suspense>\n  )\n})\n```\n\nIf `true` is set, the following headers are added:\n\n```ts\n{\n  'Transfer-Encoding': 'chunked',\n  'Content-Type': 'text/html; charset=UTF-8',\n  'Content-Encoding': 'Identity'\n}\n```\n\nYou can customize the header values by specifying the Record values..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I nested layouts in hono?\n\nAssistant: To nested layouts in hono, here's what you do:\n```tsx\napp.use(\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>{children}</body>\n      </html>\n    )\n  })\n)\n\nconst blog = new Hono()\nblog.use(\n  jsxRenderer(({ children, Layout }) => {\n    return (\n      <Layout>\n        <nav>Blog Menu</nav>\n        <div>{children}</div>\n      </Layout>\n    )\n  })\n)\n\napp.route('/blog', blog)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I userequestcontext() in hono?\n\nAssistant: To userequestcontext() in hono, here's what you do:\n`useRequestContext()` returns an instance of Context.\n\n```tsx\nimport { useRequestContext, jsxRenderer } from 'hono/jsx-renderer'\n\nconst app = new Hono()\napp.use(jsxRenderer())\n\nconst RequestUrlBadge: FC = () => {\n  const c = useRequestContext()\n  return <b>{c.req.url}</b>\n}\n\napp.get('/page/info', (c) => {\n  return c.render(\n    <div>\n      You are accessing: <RequestUrlBadge />\n    </div>\n  )\n})\n```\n\nWARNING\n\nYou can't use `useRequestContext()` with the Deno's `precompile` JSX option. Use the `react-jsx`:\n\n```json\n{\n   \"compilerOptions\": {\n     \"jsx\": \"precompile\",\n     \"jsx\": \"react-jsx\",\n     \"jsxImportSource\": \"hono/jsx\"\n   }\n }\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I extending contextrenderer in hono?\n\nAssistant: To extending contextrenderer in hono, here's what you do:\nBy defining `ContextRenderer` as shown below, you can pass additional content to the renderer. This is handy, for instance, when you want to change the contents of the head tag depending on the page.\n\n```tsx\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (\n      content: string | Promise<string>,\n      props: { title: string }\n    ): Response\n  }\n}\n\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children, title }) => {\n    return (\n      <html>\n        <head>\n          <title>{title}</title>\n        </head>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/favorites', (c) => {\n  return c.render(\n    <div>\n      <ul>\n        <li>Eating sushi</li>\n        <li>Watching baseball games</li>\n      </ul>\n    </div>,\n    {\n      title: 'My favorites',\n    }\n  )\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for JSX Renderer Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { jsxRenderer, useRequestContext } from 'hono/jsx-renderer'\n```\n\nThis snippet shows you how to import example, which is an important aspect of jsx renderer middleware.\n\n**Basic Usage Example**:\n\n```yaml\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/about', (c) => {\n  return c.render(<h1>About me!</h1>)\n})\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of jsx renderer middleware.\n\n**DocType Option Example**:\n\n```yaml\napp.use(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>{children}</body>\n        </html>\n      )\n    },\n    { docType: false }\n  )\n)\n```\n\nThis snippet shows you how to doctype option example, which is an important aspect of jsx renderer middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using JSX Renderer Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can't use `useRequestContext()` with the Deno's `precompile` JSX option. Use the `react-jsx`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "title": "JSX Renderer Middleware", "description": "JSX Renderer Middleware allows you to set up the layout when rendering JSX with the `c.render()` function, without the need for using `c.setRenderer()`. Additionally, it enables access to instances of Context within components through the use of `useRequestContext()`.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:10:50", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "title": "JSX Renderer Middleware - Hono", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "scrapeId": "84f322b7-fe2b-4722-ae76-130e97bcabcd", "sourceURL": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "url": "https://hono.dev/docs/middleware/builtin/jsx-renderer", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Pretty JSON Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Pretty JSON Middleware in hono.\n\n# Pretty JSON Middleware\n\nPretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { prettyJSON } from 'hono/pretty-json'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.use(prettyJSON()) // With options: prettyJSON({ space: 4 })\napp.get('/', (c) => {\n  return c.json({ message: 'Hono!' })\n})\n```\n\n## Options\n\n### optional space: `number`\n\nNumber of spaces for indentation. The default is `2`.\n\n### optional query: `string`\n\nThe name of the query string for applying. The default is `pretty`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/pretty-json", "title": "Pretty JSON Middleware", "description": "Pretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:13:18", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "Pretty JSON Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a99d0fe0-8c0a-4858-a5c3-3e548b0e2f10", "sourceURL": "https://hono.dev/docs/middleware/builtin/pretty-json", "url": "https://hono.dev/docs/middleware/builtin/pretty-json", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { prettyJSON } from 'hono/pretty-json'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/pretty-json", "title": "Pretty JSON Middleware", "description": "Pretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:13:18", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "Pretty JSON Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a99d0fe0-8c0a-4858-a5c3-3e548b0e2f10", "sourceURL": "https://hono.dev/docs/middleware/builtin/pretty-json", "url": "https://hono.dev/docs/middleware/builtin/pretty-json", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use(prettyJSON()) // With options: prettyJSON({ space: 4 })\napp.get('/', (c) => {\n  return c.json({ message: 'Hono!' })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/pretty-json", "title": "Pretty JSON Middleware", "description": "Pretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:13:18", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "Pretty JSON Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a99d0fe0-8c0a-4858-a5c3-3e548b0e2f10", "sourceURL": "https://hono.dev/docs/middleware/builtin/pretty-json", "url": "https://hono.dev/docs/middleware/builtin/pretty-json", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional space: `number`\n\nNumber of spaces for indentation. The default is `2`.\n\n### optional query: `string`\n\nThe name of the query string for applying. The default is `pretty`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/pretty-json", "title": "Pretty JSON Middleware", "description": "Pretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:13:18", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "Pretty JSON Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a99d0fe0-8c0a-4858-a5c3-3e548b0e2f10", "sourceURL": "https://hono.dev/docs/middleware/builtin/pretty-json", "url": "https://hono.dev/docs/middleware/builtin/pretty-json", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Pretty JSON Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**JSON Response without Pretty Print**:\n\n```yaml\n// GET /\n{\"project\":{\"name\":\"Hono\",\"repository\":\"https://github.com/honojs/hono\"}}\n```\n\nThis snippet shows you how to json response without pretty print, which is an important aspect of pretty json middleware.\n\n**JSON Response with Pretty Print**:\n\n```yaml\n// GET /?pretty\n{\n  \"project\": {\n    \"name\": \"Hono\",\n    \"repository\": \"https://github.com/honojs/hono\"\n  }\n}\n```\n\nThis snippet shows you how to json response with pretty print, which is an important aspect of pretty json middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/pretty-json", "title": "Pretty JSON Middleware", "description": "Pretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:13:18", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "Pretty JSON Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a99d0fe0-8c0a-4858-a5c3-3e548b0e2f10", "sourceURL": "https://hono.dev/docs/middleware/builtin/pretty-json", "url": "https://hono.dev/docs/middleware/builtin/pretty-json", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Pretty JSON Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the prettyJSON middleware to enhance the readability of JSON responses.\n\nCustomize the indentation by using the optional space parameter.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/pretty-json", "title": "Pretty JSON Middleware", "description": "Pretty JSON middleware enables \"_JSON pretty print_\" for JSON response body. Adding `?pretty` to url query param, the JSON strings are prettified.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:13:18", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1", "twitter:domain": "hono.dev", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "title": "Pretty JSON Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "a99d0fe0-8c0a-4858-a5c3-3e548b0e2f10", "sourceURL": "https://hono.dev/docs/middleware/builtin/pretty-json", "url": "https://hono.dev/docs/middleware/builtin/pretty-json", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cloudflare Pages is in hono?\n\nAssistant: Sure, I'd be happy to explain Cloudflare Pages in hono.\n\n# Cloudflare Pages\n\nCloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nA starter for Cloudflare Pages is available. Start your project with \"create-hono\" command. Select `cloudflare-pages` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove into `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```\n\nBelow is a basic directory structure.\n\n```\n./\n├── package.json\n├── public\n│   └── static // Put your static files.\n│       └── style.css // You can refer to it as `/static/style.css`.\n├── src\n│   ├── index.tsx // The entry point for server-side.\n│   └── renderer.tsx\n├── tsconfig.json\n└── vite.config.ts\n```\n\n## 2. Hello World\n\nEdit `src/index.tsx` like the following:\n\n```tsx\nimport { Hono } from 'hono'\nimport { renderer } from './renderer'\n\nconst app = new Hono()\n\napp.get('*', renderer)\n\napp.get('/', (c) => {\n  return c.render(<h1>Hello, Cloudflare Pages!</h1>)\n})\n\nexport default app\n```\n\n## 3. Run\n\nRun the development server locally. Then, access `http://localhost:5173` in your Web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```\n\n## 4. Deploy\n\nIf you have a Cloudflare account, you can deploy to Cloudflare. In `package.json`, `$npm_execpath` needs to be changed to your package manager of choice.\n\n```sh\nnpm run deploy\n```\n\n```sh\nyarn deploy\n```\n\n```sh\npnpm run deploy\n```\n\n```sh\nbun run deploy\n```\n\n### Deploy via the Cloudflare dashboard with GitHub\n\n1. Log in to the [Cloudflare dashboard](https://dash.cloudflare.com/) and select your account.\n2. In Account Home, select Workers & Pages > Create application > Pages > Connect to Git.\n3. Authorize your GitHub account, and select the repository. In Set up builds and deployments, provide the following information:\n\n| Configuration option | Value |\n| --- | --- |\n| Production branch | `main` |\n| Build command | `npm run build` |\n| Build directory | `dist` |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "overview", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nA starter for Cloudflare Pages is available. Start your project with \"create-hono\" command. Select `cloudflare-pages` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove into `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```\n\nBelow is a basic directory structure.\n\n```\n./\n├── package.json\n├── public\n│   └── static // Put your static files.\n│       └── style.css // You can refer to it as `/static/style.css`.\n├── src\n│   ├── index.tsx // The entry point for server-side.\n│   └── renderer.tsx\n├── tsconfig.json\n└── vite.config.ts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `src/index.tsx` like the following:\n\n```tsx\nimport { Hono } from 'hono'\nimport { renderer } from './renderer'\n\nconst app = new Hono()\n\napp.get('*', renderer)\n\napp.get('/', (c) => {\n  return c.render(<h1>Hello, Cloudflare Pages!</h1>)\n})\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nRun the development server locally. Then, access `http://localhost:5173` in your Web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\nIf you have a Cloudflare account, you can deploy to Cloudflare. In `package.json`, `$npm_execpath` needs to be changed to your package manager of choice.\n\n```sh\nnpm run deploy\n```\n\n```sh\nyarn deploy\n```\n\n```sh\npnpm run deploy\n```\n\n```sh\nbun run deploy\n```\n\n### Deploy via the Cloudflare dashboard with GitHub\n\n1. Log in to the [Cloudflare dashboard](https://dash.cloudflare.com/) and select your account.\n2. In Account Home, select Workers & Pages > Create application > Pages > Connect to Git.\n3. Authorize your GitHub account, and select the repository. In Set up builds and deployments, provide the following information:\n\n| Configuration option | Value |\n| --- | --- |\n| Production branch | `main` |\n| Build command | `npm run build` |\n| Build directory | `dist` |.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cloudflare Pages in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Directory Structure**:\n\n```yaml\n```\n./\n├── package.json\n├── public\n│   └── static // Put your static files.\n│       └── style.css // You can refer to it as `/static/style.css`.\n├── src\n│   ├── index.tsx // The entry point for server-side.\n│   └── renderer.tsx\n├── tsconfig.json\n└── vite.config.ts\n```\n```\n\nThis snippet shows you how to basic directory structure, which is an important aspect of cloudflare pages.\n\n**Hello World Example**:\n\n```yaml\n```tsx\nimport { Hono } from 'hono'\nimport { renderer } from './renderer'\n\nconst app = new Hono()\n\napp.get('*', renderer)\n\napp.get('/', (c) => {\n  return c.render(<h1>Hello, Cloudflare Pages!</h1>)\n})\n\nexport default app\n```\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of cloudflare pages.\n\n**Vite Config Example**:\n\n```yaml\n```ts\nimport devServer from '@hono/vite-dev-server'\nimport adapter from '@hono/vite-dev-server/cloudflare'\nimport build from '@hono/vite-cloudflare-pages'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    devServer({\n      entry: 'src/index.tsx',\n      adapter, // Cloudflare Adapter\n    }),\n    build(),\n  ],\n})\n```\n```\n\nThis snippet shows you how to vite config example, which is an important aspect of cloudflare pages.\n\n**Middleware Example**:\n\n```yaml\n```ts\n// functions/_middleware.ts\nexport async function onRequest(pagesContext) {\n  console.log(`You are accessing ${pagesContext.request.url}`)\n  return await pagesContext.next()\n}\n```\n```\n\nThis snippet shows you how to middleware example, which is an important aspect of cloudflare pages.\n\n**Using Hono Middleware**:\n\n```yaml\n```ts\n// functions/_middleware.ts\nimport { handleMiddleware } from 'hono/cloudflare-pages'\n\nexport const onRequest = handleMiddleware(async (c, next) => {\n  console.log(`You are accessing ${c.req.url}`)\n  await next()\n})\n```\n```\n\nThis snippet shows you how to using hono middleware, which is an important aspect of cloudflare pages.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "code_examples", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cloudflare Pages in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `create-hono` command to quickly set up a new project with the Cloudflare Pages template.\n\nEnsure to install dependencies after moving into the project directory.\n\nWhen deploying, make sure to adjust the `$npm_execpath` in `package.json` to match your package manager.\n\nFor production, set up Bindings in the Cloudflare dashboard instead of using `wrangler.toml`.\n\nUtilize Vite's features for client-side scripts and ensure proper entry points are defined.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-pages", "title": "Cloudflare Pages", "description": "Cloudflare Pages is an edge platform for full-stack web applications. It serves static files and dynamic content provided by Cloudflare Workers. Hono fully supports Cloudflare Pages, introducing a delightful developer experience with fast Vite's dev server and quick deployment using Wrangler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:13:41", "type": "best_practices", "page_metadata": {"language": "en-US", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Cloudflare Pages - Hono", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "590f7097-9e8a-4c04-b166-af3606b073d0", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-pages", "url": "https://hono.dev/docs/getting-started/cloudflare-pages", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Cloudflare Workers is in hono?\n\nAssistant: Sure, I'd be happy to explain Cloudflare Workers in hono.\n\n# Cloudflare Workers\n\nCloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nA starter for Cloudflare Workers is available. Start your project with \"create-hono\" command. Select `cloudflare-workers` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove to `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```\n\n## 2. Hello World\n\nEdit `src/index.ts` like below.\n\n```ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Cloudflare Workers!'))\n\nexport default app\n```\n\n## 3. Run\n\nRun the development server locally. Then, access `http://localhost:8787` in your web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```\n\n## Change port number\n\nIf you need to change the port number you can follow the instructions here to update `wrangler.toml` / `wrangler.json` / `wrangler.jsonc` files: [Wrangler Configuration](https://developers.cloudflare.com/workers/wrangler/configuration/#local-development-settings)\n\nOr, you can follow the instructions here to set CLI options: [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/commands/#dev)\n\n## 4. Deploy\n\nIf you have a Cloudflare account, you can deploy to Cloudflare. In `package.json`, `$npm_execpath` needs to be changed to your package manager of choice.\n\n```sh\nnpm run deploy\n```\n\n```sh\nyarn deploy\n```\n\n```sh\npnpm run deploy\n```\n\n```sh\nbun run deploy\n```\n\n## Service Worker mode or Module Worker mode\n\nThere are two syntaxes for writing the Cloudflare Workers. _Module Worker mode_ and _Service Worker mode_. Using Hono, you can write with both syntax, but we recommend using Module Worker mode so that binding variables are localized.\n\n```ts\n// Module Worker\nexport default app\n```\n\n```ts\n// Service Worker\napp.fire()\n```\n\n## Using Hono with other event handlers\n\nYou can integrate Hono with other event handlers (such as `scheduled`) in _Module Worker mode_.\n\nTo do this, export `app.fetch` as the module's `fetch` handler, and then implement other handlers as needed:\n\n```ts\nconst app = new Hono()\n\nexport default {\n  fetch: app.fetch,\n  scheduled: async (batch, env) => {},\n}\n```\n\n## Serve static files\n\nIf you want to serve static files, you can use [the Static Assets feature](https://developers.cloudflare.com/workers/static-assets/) of Cloudflare Workers. Specify the directory for the files in `wrangler.toml`:\n\n```toml\nassets = { directory = \"public\" }\n```\n\nThen create the `public` directory and place the files there. For instance, `./public/static/hello.txt` will be served as `/static/hello.txt`.\n\n```\n.\n├── package.json\n├── public\n│   ├── favicon.ico\n│   └── static\n│       └── hello.txt\n├── src\n│   └── index.ts\n└── wrangler.toml\n```\n\n## Types\n\nYou have to install `@cloudflare/workers-types` if you want to have workers types.\n\n```sh\nnpm i --save-dev @cloudflare/workers-types\n```\n\n```sh\nyarn add -D @cloudflare/workers-types\n```\n\n```sh\npnpm add -D @cloudflare/workers-types\n```\n\n```sh\nbun add --dev @cloudflare/workers-types\n```\n\n## Testing\n\nFor testing, we recommend using `@cloudflare/vitest-pool-workers`. Refer to [examples](https://github.com/honojs/examples) for setting it up.\n\nIf there is the application below.\n\n```ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Please test me!'))\n```\n\nWe can test if it returns \" _200 OK_\" Response with this code.\n\n```ts\ndescribe('Test the application', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('http://localhost/')\n    expect(res.status).toBe(200)\n  })\n})\n```\n\n## Bindings\n\nIn the Cloudflare Workers, we can bind the environment values, KV namespace, R2 bucket, or Durable Object. You can access them in `c.env`. It will have the types if you pass the \" _type struct_\" for the bindings to the `Hono` as generics.\n\n```ts\ntype Bindings = {\n  MY_BUCKET: R2Bucket\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// Access to environment values\napp.put('/upload/:key', async (c, next) => {\n  const key = c.req.param('key')\n  await c.env.MY_BUCKET.put(key, c.req.body)\n  return c.text(`Put ${key} successfully!`)\n})\n```\n\n## Using Variables in Middleware\n\nThis is the only case for Module Worker mode. If you want to use Variables or Secret Variables in Middleware, for example, \"username\" or \"password\" in Basic Authentication Middleware, you need to write like the following.\n\n```ts\nimport { basicAuth } from 'hono/basic-auth'\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n//...\n\napp.use('/auth/*', async (c, next) => {\n  const auth = basicAuth({\n    username: c.env.USERNAME,\n    password: c.env.PASSWORD,\n  })\n  return auth(c, next)\n})\n```\n\n## Deploy from GitHub Actions\n\nBefore deploying code to Cloudflare via CI, you need a Cloudflare token. You can manage it from [User API Tokens](https://dash.cloudflare.com/profile/api-tokens).\n\nIf it's a newly created token, select the **Edit Cloudflare Workers** template, if you already have another token, make sure the token has the corresponding permissions(No, token permissions are not shared between Cloudflare Pages and Cloudflare Workers).\n\nthen go to your GitHub repository settings dashboard: `Settings->Secrets and variables->Actions->Repository secrets`, and add a new secret with the name `CLOUDFLARE_API_TOKEN`.\n\nthen create `.github/workflows/deploy.yml` in your Hono project root folder, paste the following code:\n\n```yml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n```\n\nthen edit `wrangler.toml`, and add this code after `compatibility_date` line.\n\n```toml\nmain = \"src/index.ts\"\nminify = true\n```\n\nEverything is ready! Now push the code and enjoy it.\n\n## Load env when local development\n\nTo configure the environment variables for local development, create the `.dev.vars` file in the root directory of the project. Then configure your environment variables as you would with a normal env file.\n\n```\nSECRET_KEY=value\nAPI_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\n> For more about this section you can find in the Cloudflare documentation: [https://developers.cloudflare.com/workers/wrangler/configuration/#secrets](https://developers.cloudflare.com/workers/wrangler/configuration/#secrets)\n\nThen we use the `c.env.*` to get the environment variables in our code.\n\n**For Cloudflare Workers, environment variables must be obtained via `c`, not via `process.env`.**\n\n```ts\ntype Bindings = {\n  SECRET_KEY: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/env', (c) => {\n  const SECRET_KEY = c.env.SECRET_KEY\n  return c.text(SECRET_KEY)\n})\n```\n\nBefore you deploy your project to Cloudflare, remember to set the environment variable/secrets in the Cloudflare Workers project's configuration.\n\n> For more about this section you can find in the Cloudflare documentation: [https://developers.cloudflare.com/workers/configuration/environment-variables/#add-environment-variables-via-the-dashboard](https://developers.cloudflare.com/workers/configuration/environment-variables/#add-environment-variables-via-the-dashboard)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nA starter for Cloudflare Workers is available. Start your project with \"create-hono\" command. Select `cloudflare-workers` template for this example.\n\n```sh\nnpm create hono@latest my-app\n```\n\n```sh\nyarn create hono my-app\n```\n\n```sh\npnpm create hono my-app\n```\n\n```sh\nbun create hono@latest my-app\n```\n\n```sh\ndeno init --npm hono my-app\n```\n\nMove to `my-app` and install the dependencies.\n\n```sh\ncd my-app\nnpm i\n```\n\n```sh\ncd my-app\nyarn\n```\n\n```sh\ncd my-app\npnpm i\n```\n\n```sh\ncd my-app\nbun i\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `src/index.ts` like below.\n\n```ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Cloudflare Workers!'))\n\nexport default app\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nRun the development server locally. Then, access `http://localhost:8787` in your web browser.\n\n```sh\nnpm run dev\n```\n\n```sh\nyarn dev\n```\n\n```sh\npnpm dev\n```\n\n```sh\nbun run dev\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I change port number in hono?\n\nAssistant: To change port number in hono, here's what you do:\nIf you need to change the port number you can follow the instructions here to update `wrangler.toml` / `wrangler.json` / `wrangler.jsonc` files: [Wrangler Configuration](https://developers.cloudflare.com/workers/wrangler/configuration/#local-development-settings)\n\nOr, you can follow the instructions here to set CLI options: [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/commands/#dev).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\nIf you have a Cloudflare account, you can deploy to Cloudflare. In `package.json`, `$npm_execpath` needs to be changed to your package manager of choice.\n\n```sh\nnpm run deploy\n```\n\n```sh\nyarn deploy\n```\n\n```sh\npnpm run deploy\n```\n\n```sh\nbun run deploy\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I service worker mode or module worker mode in hono?\n\nAssistant: To service worker mode or module worker mode in hono, here's what you do:\nThere are two syntaxes for writing the Cloudflare Workers. _Module Worker mode_ and _Service Worker mode_. Using Hono, you can write with both syntax, but we recommend using Module Worker mode so that binding variables are localized.\n\n```ts\n// Module Worker\nexport default app\n```\n\n```ts\n// Service Worker\napp.fire()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I using hono with other event handlers in hono?\n\nAssistant: To using hono with other event handlers in hono, here's what you do:\nYou can integrate Hono with other event handlers (such as `scheduled`) in _Module Worker mode_.\n\nTo do this, export `app.fetch` as the module's `fetch` handler, and then implement other handlers as needed:\n\n```ts\nconst app = new Hono()\n\nexport default {\n  fetch: app.fetch,\n  scheduled: async (batch, env) => {},\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I serve static files in hono?\n\nAssistant: To serve static files in hono, here's what you do:\nIf you want to serve static files, you can use [the Static Assets feature](https://developers.cloudflare.com/workers/static-assets/) of Cloudflare Workers. Specify the directory for the files in `wrangler.toml`:\n\n```toml\nassets = { directory = \"public\" }\n```\n\nThen create the `public` directory and place the files there. For instance, `./public/static/hello.txt` will be served as `/static/hello.txt`.\n\n```\n.\n├── package.json\n├── public\n│   ├── favicon.ico\n│   └── static\n│       └── hello.txt\n├── src\n│   └── index.ts\n└── wrangler.toml\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I types in hono?\n\nAssistant: To types in hono, here's what you do:\nYou have to install `@cloudflare/workers-types` if you want to have workers types.\n\n```sh\nnpm i --save-dev @cloudflare/workers-types\n```\n\n```sh\nyarn add -D @cloudflare/workers-types\n```\n\n```sh\npnpm add -D @cloudflare/workers-types\n```\n\n```sh\nbun add --dev @cloudflare/workers-types\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I testing in hono?\n\nAssistant: To testing in hono, here's what you do:\nFor testing, we recommend using `@cloudflare/vitest-pool-workers`. Refer to [examples](https://github.com/honojs/examples) for setting it up.\n\nIf there is the application below.\n\n```ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Please test me!'))\n```\n\nWe can test if it returns \" _200 OK_\" Response with this code.\n\n```ts\ndescribe('Test the application', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('http://localhost/')\n    expect(res.status).toBe(200)\n  })\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I bindings in hono?\n\nAssistant: To bindings in hono, here's what you do:\nIn the Cloudflare Workers, we can bind the environment values, KV namespace, R2 bucket, or Durable Object. You can access them in `c.env`. It will have the types if you pass the \" _type struct_\" for the bindings to the `Hono` as generics.\n\n```ts\ntype Bindings = {\n  MY_BUCKET: R2Bucket\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// Access to environment values\napp.put('/upload/:key', async (c, next) => {\n  const key = c.req.param('key')\n  await c.env.MY_BUCKET.put(key, c.req.body)\n  return c.text(`Put ${key} successfully!`)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I using variables in middleware in hono?\n\nAssistant: To using variables in middleware in hono, here's what you do:\nThis is the only case for Module Worker mode. If you want to use Variables or Secret Variables in Middleware, for example, \"username\" or \"password\" in Basic Authentication Middleware, you need to write like the following.\n\n```ts\nimport { basicAuth } from 'hono/basic-auth'\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n//...\n\napp.use('/auth/*', async (c, next) => {\n  const auth = basicAuth({\n    username: c.env.USERNAME,\n    password: c.env.PASSWORD,\n  })\n  return auth(c, next)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I deploy from github actions in hono?\n\nAssistant: To deploy from github actions in hono, here's what you do:\nBefore deploying code to Cloudflare via CI, you need a Cloudflare token. You can manage it from [User API Tokens](https://dash.cloudflare.com/profile/api-tokens).\n\nIf it's a newly created token, select the **Edit Cloudflare Workers** template, if you already have another token, make sure the token has the corresponding permissions(No, token permissions are not shared between Cloudflare Pages and Cloudflare Workers).\n\nthen go to your GitHub repository settings dashboard: `Settings->Secrets and variables->Actions->Repository secrets`, and add a new secret with the name `CLOUDFLARE_API_TOKEN`.\n\nthen create `.github/workflows/deploy.yml` in your Hono project root folder, paste the following code:\n\n```yml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n```\n\nthen edit `wrangler.toml`, and add this code after `compatibility_date` line.\n\n```toml\nmain = \"src/index.ts\"\nminify = true\n```\n\nEverything is ready! Now push the code and enjoy it..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I load env when local development in hono?\n\nAssistant: To load env when local development in hono, here's what you do:\nTo configure the environment variables for local development, create the `.dev.vars` file in the root directory of the project. Then configure your environment variables as you would with a normal env file.\n\n```\nSECRET_KEY=value\nAPI_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\n> For more about this section you can find in the Cloudflare documentation: [https://developers.cloudflare.com/workers/wrangler/configuration/#secrets](https://developers.cloudflare.com/workers/wrangler/configuration/#secrets)\n\nThen we use the `c.env.*` to get the environment variables in our code.\n\n**For Cloudflare Workers, environment variables must be obtained via `c`, not via `process.env`.**\n\n```ts\ntype Bindings = {\n  SECRET_KEY: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/env', (c) => {\n  const SECRET_KEY = c.env.SECRET_KEY\n  return c.text(SECRET_KEY)\n})\n```\n\nBefore you deploy your project to Cloudflare, remember to set the environment variable/secrets in the Cloudflare Workers project's configuration.\n\n> For more about this section you can find in the Cloudflare documentation: [https://developers.cloudflare.com/workers/configuration/environment-variables/#add-environment-variables-via-the-dashboard](https://developers.cloudflare.com/workers/configuration/environment-variables/#add-environment-variables-via-the-dashboard).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Cloudflare Workers in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup Commands**:\n\n```yaml\nnpm create hono@latest my-app\nyarn create hono my-app\npnpm create hono my-app\nbun create hono@latest my-app\ndeno init --npm hono my-app\n```\n\nThis snippet shows you how to setup commands, which is an important aspect of cloudflare workers.\n\n**Hello World Example**:\n\n```yaml\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Cloudflare Workers!'))\n\nexport default app\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of cloudflare workers.\n\n**Run Development Server**:\n\n```yaml\nnpm run dev\nyarn dev\npnpm dev\nbun run dev\n```\n\nThis snippet shows you how to run development server, which is an important aspect of cloudflare workers.\n\n**Deploy Commands**:\n\n```yaml\nnpm run deploy\nyarn deploy\npnpm run deploy\nbun run deploy\n```\n\nThis snippet shows you how to deploy commands, which is an important aspect of cloudflare workers.\n\n**Module Worker Example**:\n\n```yaml\n// Module Worker\nexport default app\n```\n\nThis snippet shows you how to module worker example, which is an important aspect of cloudflare workers.\n\n**Service Worker Example**:\n\n```yaml\n// Service Worker\napp.fire()\n```\n\nThis snippet shows you how to service worker example, which is an important aspect of cloudflare workers.\n\n**Using Hono with Other Event Handlers**:\n\n```yaml\nconst app = new Hono()\n\nexport default {\n  fetch: app.fetch,\n  scheduled: async (batch, env) => {},\n}\n```\n\nThis snippet shows you how to using hono with other event handlers, which is an important aspect of cloudflare workers.\n\n**Serve Static Files Configuration**:\n\n```yaml\nassets = { directory = \"public\" }\n```\n\nThis snippet shows you how to serve static files configuration, which is an important aspect of cloudflare workers.\n\n**Testing Example**:\n\n```yaml\ndescribe('Test the application', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('http://localhost/')\n    expect(res.status).toBe(200)\n  })\n})\n```\n\nThis snippet shows you how to testing example, which is an important aspect of cloudflare workers.\n\n**Bindings Example**:\n\n```yaml\ntype Bindings = {\n  MY_BUCKET: R2Bucket\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.put('/upload/:key', async (c, next) => {\n  const key = c.req.param('key')\n  await c.env.MY_BUCKET.put(key, c.req.body)\n  return c.text(`Put ${key} successfully!`)\n})\n```\n\nThis snippet shows you how to bindings example, which is an important aspect of cloudflare workers.\n\n**Using Variables in Middleware Example**:\n\n```yaml\nimport { basicAuth } from 'hono/basic-auth'\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.use('/auth/*', async (c, next) => {\n  const auth = basicAuth({\n    username: c.env.USERNAME,\n    password: c.env.PASSWORD,\n  })\n  return auth(c, next)\n})\n```\n\nThis snippet shows you how to using variables in middleware example, which is an important aspect of cloudflare workers.\n\n**GitHub Actions Deploy Configuration**:\n\n```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n```\n\nThis snippet shows you how to github actions deploy configuration, which is an important aspect of cloudflare workers.\n\n**Local Development Environment Variables**:\n\n```yaml\nSECRET_KEY=value\nAPI_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\nThis snippet shows you how to local development environment variables, which is an important aspect of cloudflare workers.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Cloudflare Workers in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Module Worker mode for localized binding variables.\n\nEnsure to set environment variables in Cloudflare Workers project's configuration before deployment.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/cloudflare-workers", "title": "Cloudflare Workers", "description": "Cloudflare Workers is a JavaScript edge runtime on Cloudflare CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 04:18:32", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "title": "Cloudflare Workers - Hono", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "scrapeId": "16b3aa76-42a4-441a-8783-81f54a6ad422", "sourceURL": "https://hono.dev/docs/getting-started/cloudflare-workers", "url": "https://hono.dev/docs/getting-started/cloudflare-workers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Secure Headers Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Secure Headers Middleware in hono.\n\n# Secure Headers Middleware\n\nSecure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { secureHeaders } from 'hono/secure-headers'\n```\n\n## Usage\n\nYou can use the optimal settings by default.\n\n```ts\nconst app = new Hono()\napp.use(secureHeaders())\n```\n\nYou can suppress unnecessary headers by setting them to false.\n\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    xFrameOptions: false,\n    xXssProtection: false,\n  })\n)\n```\n\nYou can override default header values using a string.\n\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    strictTransportSecurity:\n      'max-age=63072000; includeSubDomains; preload',\n    xFrameOptions: 'DENY',\n    xXssProtection: '1',\n  })\n)\n```\n\n## Supported Options\n\nEach option corresponds to the following Header Key-Value pairs.\n\n| Option | Header | Value | Default |\n| --- | --- | --- | --- |\n| - | X-Powered-By | (Delete Header) | True |\n| contentSecurityPolicy | [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| contentSecurityPolicyReportOnly | [Content-Security-Policy-Report-Only](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| crossOriginEmbedderPolicy | [Cross-Origin-Embedder-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) | require-corp | **False** |\n| crossOriginResourcePolicy | [Cross-Origin-Resource-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) | same-origin | True |\n| crossOriginOpenerPolicy | [Cross-Origin-Opener-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) | same-origin | True |\n| originAgentCluster | [Origin-Agent-Cluster](https://developer.mozilla.org/docs/Web/HTTP/Headers/Origin-Agent-Cluster) | ?1 | True |\n| referrerPolicy | [Referrer-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Referrer-Policy) | no-referrer | True |\n| reportingEndpoints | [Reporting-Endpoints](https://www.w3.org/TR/reporting-1/#header) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| reportTo | [Report-To](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| strictTransportSecurity | [Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) | max-age=15552000; includeSubDomains | True |\n| xContentTypeOptions | [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) | nosniff | True |\n| xDnsPrefetchControl | [X-DNS-Prefetch-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) | off | True |\n| xDownloadOptions | [X-Download-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Download-Options) | noopen | True |\n| xFrameOptions | [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) | SAMEORIGIN | True |\n| xPermittedCrossDomainPolicies | [X-Permitted-Cross-Domain-Policies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Permitted-Cross-Domain-Policies) | none | True |\n| xXssProtection | [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) | 0 | True |\n| permissionPolicy | [Permissions-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy) | Usage: [Setting Permission-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-permission-policy) | No Setting |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/secure-headers", "title": "Secure Headers Middleware", "description": "Secure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:20:14", "type": "overview", "page_metadata": {"og:type": "website", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Secure Headers Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "2bed35a4-ffcb-4e8d-8a84-1011f3ebc846", "sourceURL": "https://hono.dev/docs/middleware/builtin/secure-headers", "url": "https://hono.dev/docs/middleware/builtin/secure-headers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { secureHeaders } from 'hono/secure-headers'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/secure-headers", "title": "Secure Headers Middleware", "description": "Secure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:20:14", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Secure Headers Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "2bed35a4-ffcb-4e8d-8a84-1011f3ebc846", "sourceURL": "https://hono.dev/docs/middleware/builtin/secure-headers", "url": "https://hono.dev/docs/middleware/builtin/secure-headers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nYou can use the optimal settings by default.\n\n```ts\nconst app = new Hono()\napp.use(secureHeaders())\n```\n\nYou can suppress unnecessary headers by setting them to false.\n\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    xFrameOptions: false,\n    xXssProtection: false,\n  })\n)\n```\n\nYou can override default header values using a string.\n\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    strictTransportSecurity:\n      'max-age=63072000; includeSubDomains; preload',\n    xFrameOptions: 'DENY',\n    xXssProtection: '1',\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/secure-headers", "title": "Secure Headers Middleware", "description": "Secure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:20:14", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Secure Headers Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "2bed35a4-ffcb-4e8d-8a84-1011f3ebc846", "sourceURL": "https://hono.dev/docs/middleware/builtin/secure-headers", "url": "https://hono.dev/docs/middleware/builtin/secure-headers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I supported options in hono?\n\nAssistant: To supported options in hono, here's what you do:\nEach option corresponds to the following Header Key-Value pairs.\n\n| Option | Header | Value | Default |\n| --- | --- | --- | --- |\n| - | X-Powered-By | (Delete Header) | True |\n| contentSecurityPolicy | [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| contentSecurityPolicyReportOnly | [Content-Security-Policy-Report-Only](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| crossOriginEmbedderPolicy | [Cross-Origin-Embedder-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) | require-corp | **False** |\n| crossOriginResourcePolicy | [Cross-Origin-Resource-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) | same-origin | True |\n| crossOriginOpenerPolicy | [Cross-Origin-Opener-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) | same-origin | True |\n| originAgentCluster | [Origin-Agent-Cluster](https://developer.mozilla.org/docs/Web/HTTP/Headers/Origin-Agent-Cluster) | ?1 | True |\n| referrerPolicy | [Referrer-Policy](https://developer.mozilla.org/docs/Web/HTTP/Headers/Referrer-Policy) | no-referrer | True |\n| reportingEndpoints | [Reporting-Endpoints](https://www.w3.org/TR/reporting-1/#header) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| reportTo | [Report-To](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to) | Usage: [Setting Content-Security-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-content-security-policy) | No Setting |\n| strictTransportSecurity | [Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) | max-age=15552000; includeSubDomains | True |\n| xContentTypeOptions | [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) | nosniff | True |\n| xDnsPrefetchControl | [X-DNS-Prefetch-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) | off | True |\n| xDownloadOptions | [X-Download-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Download-Options) | noopen | True |\n| xFrameOptions | [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) | SAMEORIGIN | True |\n| xPermittedCrossDomainPolicies | [X-Permitted-Cross-Domain-Policies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Permitted-Cross-Domain-Policies) | none | True |\n| xXssProtection | [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) | 0 | True |\n| permissionPolicy | [Permissions-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy) | Usage: [Setting Permission-Policy](https://hono.dev/docs/middleware/builtin/secure-headers#setting-permission-policy) | No Setting |.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/secure-headers", "title": "Secure Headers Middleware", "description": "Secure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:20:14", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Secure Headers Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "2bed35a4-ffcb-4e8d-8a84-1011f3ebc846", "sourceURL": "https://hono.dev/docs/middleware/builtin/secure-headers", "url": "https://hono.dev/docs/middleware/builtin/secure-headers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Secure Headers Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { secureHeaders } from 'hono/secure-headers'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of secure headers middleware.\n\n**Basic Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\napp.use(secureHeaders())\n```\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of secure headers middleware.\n\n**Suppressing Headers Example**:\n\n```yaml\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    xFrameOptions: false,\n    xXssProtection: false,\n  })\n)\n```\n```\n\nThis snippet shows you how to suppressing headers example, which is an important aspect of secure headers middleware.\n\n**Overriding Header Values Example**:\n\n```yaml\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    strictTransportSecurity:\n      'max-age=63072000; includeSubDomains; preload',\n    xFrameOptions: 'DENY',\n    xXssProtection: '1',\n  })\n)\n```\n```\n\nThis snippet shows you how to overriding header values example, which is an important aspect of secure headers middleware.\n\n**Middleware Conflict Example**:\n\n```yaml\n```ts\nconst app = new Hono()\napp.use(secureHeaders())\napp.use(poweredBy())\n```\n\n```ts\nconst app = new Hono()\napp.use(poweredBy())\napp.use(secureHeaders())\n```\n```\n\nThis snippet shows you how to middleware conflict example, which is an important aspect of secure headers middleware.\n\n**Setting Content-Security-Policy Example**:\n\n```yaml\n```ts\nconst app = new Hono()\napp.use(\n  '/test',\n  secureHeaders({\n    reportingEndpoints: [\n      {\n        name: 'endpoint-1',\n        url: 'https://example.com/reports',\n      },\n    ],\n    contentSecurityPolicy: {\n      defaultSrc: [\"'self'\"],\n      baseUri: [\"'self'\"],\n      childSrc: [\"'self'\"],\n      connectSrc: [\"'self'\"],\n      fontSrc: [\"'self'\", 'https:', 'data:'],\n      formAction: [\"'self'\"],\n      frameAncestors: [\"'self'\"],\n      frameSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", 'data:'],\n      manifestSrc: [\"'self'\"],\n      mediaSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      reportTo: 'endpoint-1',\n      sandbox: ['allow-same-origin', 'allow-scripts'],\n      scriptSrc: [\"'self'\"],\n      scriptSrcAttr: [\"'none'\"],\n      scriptSrcElem: [\"'self'\"],\n      styleSrc: [\"'self'\", 'https:', \"'unsafe-inline'\"],\n      styleSrcAttr: ['none'],\n      styleSrcElem: [\"'self'\", 'https:', \"'unsafe-inline'\"],\n      upgradeInsecureRequests: [],\n      workerSrc: [\"'self'\"],\n    },\n  })\n)\n```\n```\n\nThis snippet shows you how to setting content-security-policy example, which is an important aspect of secure headers middleware.\n\n**Nonce Attribute Example**:\n\n```yaml\n```tsx\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\nimport type { SecureHeadersVariables } from 'hono/secure-headers'\n\ntype Variables = SecureHeadersVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      scriptSrc: [NONCE, 'https://allowed1.example.com'],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        {/** contents */}\n        <script\n          src='/js/client.js'\n          nonce={c.get('secureHeadersNonce')}\n        />\n      </body>\n    </html>\n  )\n})\n```\n```\n\nThis snippet shows you how to nonce attribute example, which is an important aspect of secure headers middleware.\n\n**Custom Nonce Generator Example**:\n\n```yaml\n```tsx\nconst app = new Hono<{\n  Variables: { myNonce: string }\n}>()\n\nconst myNonceGenerator: ContentSecurityPolicyOptionHandler = (c) => {\n  const nonce = Math.random().toString(36).slice(2)\n  c.set('myNonce', nonce)\n  return `'nonce-${nonce}'`\n}\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      scriptSrc: [myNonceGenerator, 'https://allowed1.example.com'],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        {/** contents */}\n        <script src='/js/client.js' nonce={c.get('myNonce')} />\n      </body>\n    </html>\n  )\n})\n```\n```\n\nThis snippet shows you how to custom nonce generator example, which is an important aspect of secure headers middleware.\n\n**Setting Permission-Policy Example**:\n\n```yaml\n```ts\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    permissionsPolicy: {\n      fullscreen: ['self'], // fullscreen=(self)\n      bluetooth: ['none'], // bluetooth=(none)\n      payment: ['self', 'https://example.com'], // payment=(self \"https://example.com\")\n      syncXhr: [], // sync-xhr=()\n      camera: false, // camera=none\n      microphone: true, // microphone=*\n      geolocation: ['*'], // geolocation=*\n      usb: ['self', 'https://a.example.com', 'https://b.example.com'], // usb=(self \"https://a.example.com\" \"https://b.example.com\")\n      accelerometer: ['https://*.example.com'], // accelerometer=(\"https://*.example.com\")\n      gyroscope: ['src'], // gyroscope=(src)\n      magnetometer: [\n        'https://a.example.com',\n        'https://b.example.com',\n      ], // magnetometer=(\"https://a.example.com\" \"https://b.example.com\")\n    },\n  })\n)\n```\n```\n\nThis snippet shows you how to setting permission-policy example, which is an important aspect of secure headers middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/secure-headers", "title": "Secure Headers Middleware", "description": "Secure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:20:14", "type": "code_examples", "page_metadata": {"og:type": "website", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Secure Headers Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "2bed35a4-ffcb-4e8d-8a84-1011f3ebc846", "sourceURL": "https://hono.dev/docs/middleware/builtin/secure-headers", "url": "https://hono.dev/docs/middleware/builtin/secure-headers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Secure Headers Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe cautious about the order of specification when dealing with middleware that manipulates the same header.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/secure-headers", "title": "Secure Headers Middleware", "description": "Secure Headers Middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:20:14", "type": "best_practices", "page_metadata": {"og:type": "website", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Secure Headers Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "2bed35a4-ffcb-4e8d-8a84-1011f3ebc846", "sourceURL": "https://hono.dev/docs/middleware/builtin/secure-headers", "url": "https://hono.dev/docs/middleware/builtin/secure-headers", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Bearer Auth Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Bearer Auth Middleware in hono.\n\n# Bearer Auth Middleware\n\nThe Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\n```\n\n## Usage\n\nNOTE\n\nYour `token` must match the regex `/[A-Za-z0-9._~+/-]+=*/`, otherwise a 400 error will be returned. Notably, this regex accommodates both URL-safe Base64- and standard Base64-encoded JWTs. This middleware does not require the bearer token to be a JWT, just that it matches the above regex.\n\n```ts\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.use('/api/*', bearerAuth({ token }))\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'You are authorized' })\n})\n```\n\nTo restrict to a specific route + method:\n\n```ts\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'Read posts' })\n})\n\napp.post('/api/page', bearerAuth({ token }), (c) => {\n  return c.json({ message: 'Created post!' }, 201)\n})\n```\n\nTo implement multiple tokens (E.g., any valid token can read but create/update/delete are restricted to a privileged token):\n\n```ts\nconst app = new Hono()\n\nconst readToken = 'read'\nconst privilegedToken = 'read+write'\nconst privilegedMethods = ['POST', 'PUT', 'PATCH', 'DELETE']\n\napp.on('GET', '/api/page/*', async (c, next) => {\n  // List of valid tokens\n  const bearer = bearerAuth({ token: [readToken, privilegedToken] })\n  return bearer(c, next)\n})\napp.on(privilegedMethods, '/api/page/*', async (c, next) => {\n  // Single valid privileged token\n  const bearer = bearerAuth({ token: privilegedToken })\n  return bearer(c, next)\n})\n\n// Define handlers for GET, POST, etc.\n```\n\nIf you want to verify the value of the token yourself, specify the `verifyToken` option; returning `true` means it is accepted.\n\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth-verify-token/*',\n  bearerAuth({\n    verifyToken: async (token, c) => {\n      return token === 'dynamic-token'\n    },\n  })\n)\n```\n\n## Options\n\n### required token: `string` | `string[]`\nThe string to validate the incoming bearer token against.\n\n### optional realm: `string`\nThe domain name of the realm, as part of the returned WWW-Authenticate challenge header. The default is `\"\"`. See more: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives)\n\n### optional prefix: `string`\nThe prefix (or known as `schema`) for the Authorization header value. The default is `\"Bearer\"`.\n\n### optional headerName: `string`\nThe header name. The default value is `Authorization`.\n\n### optional hashFunction: `Function`\nA function to handle hashing for safe comparison of authentication tokens.\n\n### optional verifyToken: `(token: string, c: Context) => boolean | Promise<boolean>`\nThe function to verify the token.\n\n### optional noAuthenticationHeaderMessage: `string | object | MessageFunction`\n`MessageFunction` is `(c: Context) => string | object | Promise<string | object>`. The custom message if it does not have an authentication header.\n\n### optional invalidAuthenticationHeaderMessage: `string | object | MessageFunction`\nThe custom message if the authentication header is invalid.\n\n### optional invalidTokenMessage: `string | object | MessageFunction`\nThe custom message if the token is invalid.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "title": "Bearer Auth Middleware", "description": "The Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:21:57", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Bearer Auth Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "scrapeId": "3f9a3bee-2703-417a-8b94-6e40d2b2d57b", "sourceURL": "https://hono.dev/docs/middleware/builtin/bearer-auth", "url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "title": "Bearer Auth Middleware", "description": "The Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:21:57", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Bearer Auth Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "scrapeId": "3f9a3bee-2703-417a-8b94-6e40d2b2d57b", "sourceURL": "https://hono.dev/docs/middleware/builtin/bearer-auth", "url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nNOTE\n\nYour `token` must match the regex `/[A-Za-z0-9._~+/-]+=*/`, otherwise a 400 error will be returned. Notably, this regex accommodates both URL-safe Base64- and standard Base64-encoded JWTs. This middleware does not require the bearer token to be a JWT, just that it matches the above regex.\n\n```ts\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.use('/api/*', bearerAuth({ token }))\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'You are authorized' })\n})\n```\n\nTo restrict to a specific route + method:\n\n```ts\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'Read posts' })\n})\n\napp.post('/api/page', bearerAuth({ token }), (c) => {\n  return c.json({ message: 'Created post!' }, 201)\n})\n```\n\nTo implement multiple tokens (E.g., any valid token can read but create/update/delete are restricted to a privileged token):\n\n```ts\nconst app = new Hono()\n\nconst readToken = 'read'\nconst privilegedToken = 'read+write'\nconst privilegedMethods = ['POST', 'PUT', 'PATCH', 'DELETE']\n\napp.on('GET', '/api/page/*', async (c, next) => {\n  // List of valid tokens\n  const bearer = bearerAuth({ token: [readToken, privilegedToken] })\n  return bearer(c, next)\n})\napp.on(privilegedMethods, '/api/page/*', async (c, next) => {\n  // Single valid privileged token\n  const bearer = bearerAuth({ token: privilegedToken })\n  return bearer(c, next)\n})\n\n// Define handlers for GET, POST, etc.\n```\n\nIf you want to verify the value of the token yourself, specify the `verifyToken` option; returning `true` means it is accepted.\n\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth-verify-token/*',\n  bearerAuth({\n    verifyToken: async (token, c) => {\n      return token === 'dynamic-token'\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "title": "Bearer Auth Middleware", "description": "The Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:21:57", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Bearer Auth Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "scrapeId": "3f9a3bee-2703-417a-8b94-6e40d2b2d57b", "sourceURL": "https://hono.dev/docs/middleware/builtin/bearer-auth", "url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required token: `string` | `string[]`\nThe string to validate the incoming bearer token against.\n\n### optional realm: `string`\nThe domain name of the realm, as part of the returned WWW-Authenticate challenge header. The default is `\"\"`. See more: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives)\n\n### optional prefix: `string`\nThe prefix (or known as `schema`) for the Authorization header value. The default is `\"Bearer\"`.\n\n### optional headerName: `string`\nThe header name. The default value is `Authorization`.\n\n### optional hashFunction: `Function`\nA function to handle hashing for safe comparison of authentication tokens.\n\n### optional verifyToken: `(token: string, c: Context) => boolean | Promise<boolean>`\nThe function to verify the token.\n\n### optional noAuthenticationHeaderMessage: `string | object | MessageFunction`\n`MessageFunction` is `(c: Context) => string | object | Promise<string | object>`. The custom message if it does not have an authentication header.\n\n### optional invalidAuthenticationHeaderMessage: `string | object | MessageFunction`\nThe custom message if the authentication header is invalid.\n\n### optional invalidTokenMessage: `string | object | MessageFunction`\nThe custom message if the token is invalid..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "title": "Bearer Auth Middleware", "description": "The Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:21:57", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Bearer Auth Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "scrapeId": "3f9a3bee-2703-417a-8b94-6e40d2b2d57b", "sourceURL": "https://hono.dev/docs/middleware/builtin/bearer-auth", "url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Bearer Auth Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Curl Example**:\n\n```yaml\ncurl -H 'Authorization: Bearer honoiscool' http://localhost:8787/auth/page\n```\n\nThis snippet shows you how to curl example, which is an important aspect of bearer auth middleware.\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\n```\n\nThis snippet shows you how to import example, which is an important aspect of bearer auth middleware.\n\n**Basic Usage Example**:\n\n```yaml\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.use('/api/*', bearerAuth({ token }))\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'You are authorized' })\n})\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of bearer auth middleware.\n\n**Route Restriction Example**:\n\n```yaml\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'Read posts' })\n})\n\napp.post('/api/page', bearerAuth({ token }), (c) => {\n  return c.json({ message: 'Created post!' }, 201)\n})\n```\n\nThis snippet shows you how to route restriction example, which is an important aspect of bearer auth middleware.\n\n**Multiple Tokens Example**:\n\n```yaml\nconst app = new Hono()\n\nconst readToken = 'read'\nconst privilegedToken = 'read+write'\nconst privilegedMethods = ['POST', 'PUT', 'PATCH', 'DELETE']\n\napp.on('GET', '/api/page/*', async (c, next) => {\n  // List of valid tokens\n  const bearer = bearerAuth({ token: [readToken, privilegedToken] })\n  return bearer(c, next)\n})\napp.on(privilegedMethods, '/api/page/*', async (c, next) => {\n  // Single valid privileged token\n  const bearer = bearerAuth({ token: privilegedToken })\n  return bearer(c, next)\n})\n```\n\nThis snippet shows you how to multiple tokens example, which is an important aspect of bearer auth middleware.\n\n**Token Verification Example**:\n\n```yaml\nconst app = new Hono()\n\napp.use(\n  '/auth-verify-token/*',\n  bearerAuth({\n    verifyToken: async (token, c) => {\n      return token === 'dynamic-token'\n    },\n  })\n)\n```\n\nThis snippet shows you how to token verification example, which is an important aspect of bearer auth middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "title": "Bearer Auth Middleware", "description": "The Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:21:57", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Bearer Auth Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "scrapeId": "3f9a3bee-2703-417a-8b94-6e40d2b2d57b", "sourceURL": "https://hono.dev/docs/middleware/builtin/bearer-auth", "url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Bearer Auth Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure your token matches the required regex to avoid 400 errors.\n\nUse multiple tokens for different access levels (read vs. write).\n\nConsider implementing a custom token verification function for dynamic token validation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "title": "Bearer Auth Middleware", "description": "The Bearer Auth Middleware provides authentication by verifying an API token in the Request header. The HTTP clients accessing the endpoint will add the `Authorization` header with `Bearer {token}` as the header value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:21:57", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "title": "Bearer Auth Middleware - Hono", "twitter:domain": "hono.dev", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "scrapeId": "3f9a3bee-2703-417a-8b94-6e40d2b2d57b", "sourceURL": "https://hono.dev/docs/middleware/builtin/bearer-auth", "url": "https://hono.dev/docs/middleware/builtin/bearer-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Basic Auth Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Basic Auth Middleware in hono.\n\n# Basic Auth Middleware\n\nThis middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\nTo restrict to a specific route + method:\n\n```ts\nconst app = new Hono()\n\napp.get('/auth/page', (c) => {\n  return c.text('Viewing page')\n})\n\napp.delete(\n  '/auth/page',\n  basicAuth({ username: 'hono', password: 'acoolproject' }),\n  (c) => {\n    return c.text('Page deleted')\n  }\n)\n```\n\nIf you want to verify the user by yourself, specify the `verifyUser` option; returning `true` means it is accepted.\n\n```ts\nconst app = new Hono()\n\napp.use(\n  basicAuth({\n    verifyUser: (username, password, c) => {\n      return (\n        username === 'dynamic-user' && password === 'hono-password'\n      )\n    },\n  })\n)\n```\n\n## Options\n\n### required username: `string`\nThe username of the user who is authenticating.\n\n### required password: `string`\nThe password value for the provided username to authenticate against.\n\n### optional realm: `string`\nThe domain name of the realm, as part of the returned WWW-Authenticate challenge header. The default is `\"Secure Area\"`.\n\nSee more: [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives)\n\n### optional hashFunction: `Function`\nA function to handle hashing for safe comparison of passwords.\n\n### optional verifyUser: `(username: string, password: string, c: Context) => boolean | Promise<boolean>`\nThe function to verify the user.\n\n### optional invalidUserMessage: `string | object | MessageFunction`\n`MessageFunction` is `(c: Context) => string | object | Promise<string | object>`. The custom message if the user is invalid.\n\n## More Options\n\n### optional ...users: `{ username: string, password: string }[]`\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "overview", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "section_detail", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\nTo restrict to a specific route + method:\n\n```ts\nconst app = new Hono()\n\napp.get('/auth/page', (c) => {\n  return c.text('Viewing page')\n})\n\napp.delete(\n  '/auth/page',\n  basicAuth({ username: 'hono', password: 'acoolproject' }),\n  (c) => {\n    return c.text('Page deleted')\n  }\n)\n```\n\nIf you want to verify the user by yourself, specify the `verifyUser` option; returning `true` means it is accepted.\n\n```ts\nconst app = new Hono()\n\napp.use(\n  basicAuth({\n    verifyUser: (username, password, c) => {\n      return (\n        username === 'dynamic-user' && password === 'hono-password'\n      )\n    },\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "section_detail", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required username: `string`\nThe username of the user who is authenticating.\n\n### required password: `string`\nThe password value for the provided username to authenticate against.\n\n### optional realm: `string`\nThe domain name of the realm, as part of the returned WWW-Authenticate challenge header. The default is `\"Secure Area\"`.\n\nSee more: [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives)\n\n### optional hashFunction: `Function`\nA function to handle hashing for safe comparison of passwords.\n\n### optional verifyUser: `(username: string, password: string, c: Context) => boolean | Promise<boolean>`\nThe function to verify the user.\n\n### optional invalidUserMessage: `string | object | MessageFunction`\n`MessageFunction` is `(c: Context) => string | object | Promise<string | object>`. The custom message if the user is invalid..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "section_detail", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I more options in hono?\n\nAssistant: To more options in hono, here's what you do:\n### optional ...users: `{ username: string, password: string }[]`\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "section_detail", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Basic Auth Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\n```\n\nThis snippet shows you how to import example, which is an important aspect of basic auth middleware.\n\n**Basic Auth Usage Example**:\n\n```yaml\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\nThis snippet shows you how to basic auth usage example, which is an important aspect of basic auth middleware.\n\n**Restricting Route Example**:\n\n```yaml\nconst app = new Hono()\n\napp.get('/auth/page', (c) => {\n  return c.text('Viewing page')\n})\n\napp.delete(\n  '/auth/page',\n  basicAuth({ username: 'hono', password: 'acoolproject' }),\n  (c) => {\n    return c.text('Page deleted')\n  }\n)\n```\n\nThis snippet shows you how to restricting route example, which is an important aspect of basic auth middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "code_examples", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Basic Auth Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo verify the user by yourself, specify the `verifyUser` option; returning `true` means it is accepted.\n\nYou can define multiple users by passing arbitrary parameters containing objects defining more `username` and `password` pairs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/basic-auth", "title": "Basic Auth Middleware", "description": "This middleware can apply Basic authentication to a specified path. Implementing Basic authentication with Cloudflare Workers or other platforms is more complicated than it seems, but with this middleware, it's a breeze.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:23:15", "type": "best_practices", "page_metadata": {"title": "Basic Auth Middleware - Hono", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "twitter:domain": "hono.dev", "scrapeId": "6c55fa8a-cbdc-4f8f-8a05-ba0400efabf9", "sourceURL": "https://hono.dev/docs/middleware/builtin/basic-auth", "url": "https://hono.dev/docs/middleware/builtin/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Method Override Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Method Override Middleware in hono.\n\n# Method Override Middleware\n\nThis middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { methodOverride } from 'hono/method-override'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\n// If no options are specified, the value of `_method` in the form,\n// e.g. DELETE, is used as the method.\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', (c) => {\n  // ....\n})\n```\n\n## For example\n\nSince HTML forms cannot send a DELETE method, you can put the value `DELETE` in the property named `_method` and send it. And the handler for `app.delete()` will be executed.\n\nThe HTML form:\n\n```html\n<form action=\"/posts\" method=\"POST\">\n  <input type=\"hidden\" name=\"_method\" value=\"DELETE\" />\n  <input type=\"text\" name=\"id\" />\n</form>\n```\n\nThe application:\n\n```ts\nimport { methodOverride } from 'hono/method-override'\n\nconst app = new Hono()\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', () => {\n  // ...\n})\n```\n\nYou can change the default values or use the header value and query value:\n\n```ts\napp.use('/posts', methodOverride({ app, form: '_custom_name' }))\napp.use(\n  '/posts',\n  methodOverride({ app, header: 'X-METHOD-OVERRIDE' })\n)\napp.use('/posts', methodOverride({ app, query: '_method' }))\n```\n\n## Options\n\n### required app: `Hono`\nThe instance of `Hono` is used in your application.\n\n### optional form: `string`\nForm key with a value containing the method name. The default is `_method`.\n\n### optional header: `boolean`\nHeader name with a value containing the method name.\n\n### optional query: `boolean`\nQuery parameter key with a value containing the method name.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/method-override", "title": "Method Override Middleware", "description": "This middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:24:36", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Method Override Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "34b3fa40-38c3-40f2-b571-3024b79459d5", "sourceURL": "https://hono.dev/docs/middleware/builtin/method-override", "url": "https://hono.dev/docs/middleware/builtin/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { methodOverride } from 'hono/method-override'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/method-override", "title": "Method Override Middleware", "description": "This middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:24:36", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Method Override Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "34b3fa40-38c3-40f2-b571-3024b79459d5", "sourceURL": "https://hono.dev/docs/middleware/builtin/method-override", "url": "https://hono.dev/docs/middleware/builtin/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\n// If no options are specified, the value of `_method` in the form,\n// e.g. DELETE, is used as the method.\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', (c) => {\n  // ....\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/method-override", "title": "Method Override Middleware", "description": "This middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:24:36", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Method Override Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "34b3fa40-38c3-40f2-b571-3024b79459d5", "sourceURL": "https://hono.dev/docs/middleware/builtin/method-override", "url": "https://hono.dev/docs/middleware/builtin/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I for example in hono?\n\nAssistant: To for example in hono, here's what you do:\nSince HTML forms cannot send a DELETE method, you can put the value `DELETE` in the property named `_method` and send it. And the handler for `app.delete()` will be executed.\n\nThe HTML form:\n\n```html\n<form action=\"/posts\" method=\"POST\">\n  <input type=\"hidden\" name=\"_method\" value=\"DELETE\" />\n  <input type=\"text\" name=\"id\" />\n</form>\n```\n\nThe application:\n\n```ts\nimport { methodOverride } from 'hono/method-override'\n\nconst app = new Hono()\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', () => {\n  // ...\n})\n```\n\nYou can change the default values or use the header value and query value:\n\n```ts\napp.use('/posts', methodOverride({ app, form: '_custom_name' }))\napp.use(\n  '/posts',\n  methodOverride({ app, header: 'X-METHOD-OVERRIDE' })\n)\napp.use('/posts', methodOverride({ app, query: '_method' }))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/method-override", "title": "Method Override Middleware", "description": "This middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:24:36", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Method Override Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "34b3fa40-38c3-40f2-b571-3024b79459d5", "sourceURL": "https://hono.dev/docs/middleware/builtin/method-override", "url": "https://hono.dev/docs/middleware/builtin/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required app: `Hono`\nThe instance of `Hono` is used in your application.\n\n### optional form: `string`\nForm key with a value containing the method name. The default is `_method`.\n\n### optional header: `boolean`\nHeader name with a value containing the method name.\n\n### optional query: `boolean`\nQuery parameter key with a value containing the method name..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/method-override", "title": "Method Override Middleware", "description": "This middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:24:36", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Method Override Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "34b3fa40-38c3-40f2-b571-3024b79459d5", "sourceURL": "https://hono.dev/docs/middleware/builtin/method-override", "url": "https://hono.dev/docs/middleware/builtin/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Method Override Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { methodOverride } from 'hono/method-override'\n```\n\nThis snippet shows you how to import example, which is an important aspect of method override middleware.\n\n**Usage Example**:\n\n```yaml\nconst app = new Hono()\n\n// If no options are specified, the value of `_method` in the form,\n// e.g. DELETE, is used as the method.\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', (c) => {\n  // ....\n})\n```\n\nThis snippet shows you how to usage example, which is an important aspect of method override middleware.\n\n**HTML Form Example**:\n\n```yaml\n<form action=\"/posts\" method=\"POST\">\n  <input type=\"hidden\" name=\"_method\" value=\"DELETE\" />\n  <input type=\"text\" name=\"id\" />\n</form>\n```\n\nThis snippet shows you how to html form example, which is an important aspect of method override middleware.\n\n**Application Example**:\n\n```yaml\nimport { methodOverride } from 'hono/method-override'\n\nconst app = new Hono()\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', () => {\n  // ...\n})\n```\n\nThis snippet shows you how to application example, which is an important aspect of method override middleware.\n\n**Custom Options Example**:\n\n```yaml\napp.use('/posts', methodOverride({ app, form: '_custom_name' }))\napp.use(\n  '/posts',\n  methodOverride({ app, header: 'X-METHOD-OVERRIDE' })\n)\napp.use('/posts', methodOverride({ app, query: '_method' }))\n```\n\nThis snippet shows you how to custom options example, which is an important aspect of method override middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/method-override", "title": "Method Override Middleware", "description": "This middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:24:36", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "title": "Method Override Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "generator": "VitePress v1.6.3", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "34b3fa40-38c3-40f2-b571-3024b79459d5", "sourceURL": "https://hono.dev/docs/middleware/builtin/method-override", "url": "https://hono.dev/docs/middleware/builtin/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Azure Functions is in hono?\n\nAssistant: Sure, I'd be happy to explain Azure Functions in hono.\n\n# Azure Functions\n\nAzure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.Here's a quick rundown of what this is about:\n\n## 1. Install CLI\n\nTo create an Azure Function, you must first install [Azure Functions Core Tools](https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-typescript?pivots=nodejs-model-v4#install-the-azure-functions-core-tools).\n\nOn macOS\n\n```sh\nbrew tap azure/functions\nbrew install azure-functions-core-tools@4\n```\n\nFollow this link for other OS:\n\n- [Install the Azure Functions Core Tools | Microsoft Learn](https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-typescript?pivots=nodejs-model-v4#install-the-azure-functions-core-tools)\n\n## 2. Setup\n\nCreate a TypeScript Node.js V4 project in the current folder.\n\n```sh\nfunc init --typescript\n```\n\nChange the default route prefix of the host. Add this property to the root json object of `host.json`:\n\n```json\n\"extensions\": {\n    \"http\": {\n        \"routePrefix\": \"\"\n    }\n}\n```\n\nINFO\n\nThe default Azure Functions route prefix is `/api`. If you don't change it as shown above, be sure to start all your Hono routes with `/api`\n\nNow you are ready to install Hono and the Azure Functions Adapter with:\n\n```sh\nnpm i @marplex/hono-azurefunc-adapter hono\n```\n\n```sh\nyarn add @marplex/hono-azurefunc-adapter hono\n```\n\n```sh\npnpm add @marplex/hono-azurefunc-adapter hono\n```\n\n```sh\nbun add @marplex/hono-azurefunc-adapter hono\n```\n\n## 3. Hello World\n\nCreate `src/app.ts`:\n\n```ts\n// src/app.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Azure Functions!'))\n\nexport default app\n```\n\nCreate `src/functions/httpTrigger.ts`:\n\n```ts\n// src/functions/httpTrigger.ts\nimport { app } from '@azure/functions'\nimport { azureHonoHandler } from '@marplex/hono-azurefunc-adapter'\nimport honoApp from '../app'\n\napp.http('httpTrigger', {\n  methods: [\\\n    //Add all your supported HTTP methods here\\\n    'GET',\\\n    'POST',\\\n    'DELETE',\\\n    'PUT',\\\n  ],\n  authLevel: 'anonymous',\n  route: '{*proxy}',\n  handler: azureHonoHandler(honoApp.fetch),\n})\n```\n\n## 4. Run\n\nRun the development server locally. Then, access `http://localhost:7071` in your Web browser.\n\n```sh\nnpm run start\n```\n\n```sh\nyarn start\n```\n\n```sh\npnpm start\n```\n\n```sh\nbun run start\n```\n\n## 5. Deploy\n\nINFO\n\nBefore you can deploy to Azure, you need to create some resources in your cloud infrastructure. Please visit the Microsoft documentation on [Create supporting Azure resources for your function](https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-typescript?pivots=nodejs-model-v4&tabs=windows%2Cazure-cli%2Cbrowser#create-supporting-azure-resources-for-your-function)\n\nBuild the project for deployment:\n\n```sh\nnpm run build\n```\n\n```sh\nyarn build\n```\n\n```sh\npnpm build\n```\n\n```sh\nbun run build\n```\n\nDeploy your project to the function app in Azure Cloud. Replace `<YourFunctionAppName>` with the name of your app.\n\n```sh\nfunc azure functionapp publish <YourFunctionAppName>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. install cli in hono?\n\nAssistant: To 1. install cli in hono, here's what you do:\nTo create an Azure Function, you must first install [Azure Functions Core Tools](https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-typescript?pivots=nodejs-model-v4#install-the-azure-functions-core-tools).\n\nOn macOS\n\n```sh\nbrew tap azure/functions\nbrew install azure-functions-core-tools@4\n```\n\nFollow this link for other OS:\n\n- [Install the Azure Functions Core Tools | Microsoft Learn](https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-typescript?pivots=nodejs-model-v4#install-the-azure-functions-core-tools).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. setup in hono?\n\nAssistant: To 2. setup in hono, here's what you do:\nCreate a TypeScript Node.js V4 project in the current folder.\n\n```sh\nfunc init --typescript\n```\n\nChange the default route prefix of the host. Add this property to the root json object of `host.json`:\n\n```json\n\"extensions\": {\n    \"http\": {\n        \"routePrefix\": \"\"\n    }\n}\n```\n\nINFO\n\nThe default Azure Functions route prefix is `/api`. If you don't change it as shown above, be sure to start all your Hono routes with `/api`\n\nNow you are ready to install Hono and the Azure Functions Adapter with:\n\n```sh\nnpm i @marplex/hono-azurefunc-adapter hono\n```\n\n```sh\nyarn add @marplex/hono-azurefunc-adapter hono\n```\n\n```sh\npnpm add @marplex/hono-azurefunc-adapter hono\n```\n\n```sh\nbun add @marplex/hono-azurefunc-adapter hono\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. hello world in hono?\n\nAssistant: To 3. hello world in hono, here's what you do:\nCreate `src/app.ts`:\n\n```ts\n// src/app.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Azure Functions!'))\n\nexport default app\n```\n\nCreate `src/functions/httpTrigger.ts`:\n\n```ts\n// src/functions/httpTrigger.ts\nimport { app } from '@azure/functions'\nimport { azureHonoHandler } from '@marplex/hono-azurefunc-adapter'\nimport honoApp from '../app'\n\napp.http('httpTrigger', {\n  methods: [\\\n    //Add all your supported HTTP methods here\\\n    'GET',\\\n    'POST',\\\n    'DELETE',\\\n    'PUT',\\\n  ],\n  authLevel: 'anonymous',\n  route: '{*proxy}',\n  handler: azureHonoHandler(honoApp.fetch),\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. run in hono?\n\nAssistant: To 4. run in hono, here's what you do:\nRun the development server locally. Then, access `http://localhost:7071` in your Web browser.\n\n```sh\nnpm run start\n```\n\n```sh\nyarn start\n```\n\n```sh\npnpm start\n```\n\n```sh\nbun run start\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 5. deploy in hono?\n\nAssistant: To 5. deploy in hono, here's what you do:\nINFO\n\nBefore you can deploy to Azure, you need to create some resources in your cloud infrastructure. Please visit the Microsoft documentation on [Create supporting Azure resources for your function](https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-typescript?pivots=nodejs-model-v4&tabs=windows%2Cazure-cli%2Cbrowser#create-supporting-azure-resources-for-your-function)\n\nBuild the project for deployment:\n\n```sh\nnpm run build\n```\n\n```sh\nyarn build\n```\n\n```sh\npnpm build\n```\n\n```sh\nbun run build\n```\n\nDeploy your project to the function app in Azure Cloud. Replace `<YourFunctionAppName>` with the name of your app.\n\n```sh\nfunc azure functionapp publish <YourFunctionAppName>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Azure Functions in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install CLI on macOS**:\n\n```yaml\nbrew tap azure/functions\nbrew install azure-functions-core-tools@4\n```\n\nThis snippet shows you how to install cli on macos, which is an important aspect of azure functions.\n\n**Setup TypeScript Node.js V4 project**:\n\n```yaml\nfunc init --typescript\n```\n\nThis snippet shows you how to setup typescript node.js v4 project, which is an important aspect of azure functions.\n\n**Change default route prefix in host.json**:\n\n```yaml\n\"extensions\": {\n    \"http\": {\n        \"routePrefix\": \"\"\n    }\n}\n```\n\nThis snippet shows you how to change default route prefix in host.json, which is an important aspect of azure functions.\n\n**Hello World app in src/app.ts**:\n\n```yaml\n// src/app.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Azure Functions!'))\n\nexport default app\n```\n\nThis snippet shows you how to hello world app in src/app.ts, which is an important aspect of azure functions.\n\n**HTTP Trigger in src/functions/httpTrigger.ts**:\n\n```yaml\n// src/functions/httpTrigger.ts\nimport { app } from '@azure/functions'\nimport { azureHonoHandler } from '@marplex/hono-azurefunc-adapter'\nimport honoApp from '../app'\n\napp.http('httpTrigger', {\n  methods: [\\\n    'GET',\\\n    'POST',\\\n    'DELETE',\\\n    'PUT',\\\n  ],\n  authLevel: 'anonymous',\n  route: '{*proxy}',\n  handler: azureHonoHandler(honoApp.fetch),\n})\n```\n\nThis snippet shows you how to http trigger in src/functions/httptrigger.ts, which is an important aspect of azure functions.\n\n**Run the development server**:\n\n```yaml\nnpm run start\n```\n\nThis snippet shows you how to run the development server, which is an important aspect of azure functions.\n\n**Build the project for deployment**:\n\n```yaml\nnpm run build\n```\n\nThis snippet shows you how to build the project for deployment, which is an important aspect of azure functions.\n\n**Deploy to Azure Function App**:\n\n```yaml\nfunc azure functionapp publish <YourFunctionAppName>\n```\n\nThis snippet shows you how to deploy to azure function app, which is an important aspect of azure functions.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "code_examples", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Azure Functions in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe default Azure Functions route prefix is `/api`. If you don't change it, be sure to start all your Hono routes with `/api`.\n\nBefore deploying to Azure, create necessary resources in your cloud infrastructure.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/azure-functions", "title": "Azure Functions", "description": "Azure Functions is a serverless platform from Microsoft Azure. You can run your code in response to events, and it automatically manages the underlying compute resources for you.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:26:13", "type": "best_practices", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "title": "Azure Functions - Hono", "scrapeId": "10b67755-c2e9-4cb4-b0fb-e190445d2ff8", "sourceURL": "https://hono.dev/docs/getting-started/azure-functions", "url": "https://hono.dev/docs/getting-started/azure-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Service Worker is in hono?\n\nAssistant: Sure, I'd be happy to explain Service Worker in hono.\n\n# Service Worker\n\nService Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nFirst, create and move to your project directory:\n\n```\nmkdir my-app\ncd my-app\n```\n\nCreate the necessary files for the project. Make a `package.json` file with the following:\n\n```\n{\n  \"name\": \"my-app\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite dev\"\n  },\n  \"type\": \"module\"\n}\n```\n\nSimilarly, create a `tsconfig.json` file with the following:\n\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"WebWorker\"],\n    \"moduleResolution\": \"bundler\"\n  },\n  \"include\": [\"./\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\nNext, install the necessary modules.\n\n```\nnpm i hono\nnpm i -D vite\n```\n\n```\nyarn add hono\nyarn add -D vite\n```\n\n```\npnpm add hono\npnpm add -D vite\n```\n\n```\nbun add hono\nbun add -D vite\n```\n\n## 2. Hello World\n\nEdit `index.html`:\n\n```\n<!doctype html>\n<html>\n  <body>\n    <a href=\"/sw\">Hello World by Service Worker</a>\n    <script type=\"module\" src=\"/main.ts\"></script>\n  </body>\n</html>\n```\n\n`main.ts` is a script to register the Service Worker:\n\n```\nfunction register() {\n  navigator.serviceWorker\n    .register('/sw.ts', { scope: '/sw', type: 'module' })\n    .then(\n      function (_registration) {\n        console.log('Register Service Worker: Success')\n      },\n      function (_error) {\n        console.log('Register Service Worker: Error')\n      }\n    )\n}\nfunction start() {\n  navigator.serviceWorker\n    .getRegistrations()\n    .then(function (registrations) {\n      for (const registration of registrations) {\n        console.log('Unregister Service Worker')\n        registration.unregister()\n      }\n      register()\n    })\n}\nstart()\n```\n\nIn `sw.ts`, create an application using Hono and register it to the `fetch` event with the Service Worker adapter’s `handle` function. This allows the Hono application to intercept access to `/sw`.\n\n```\n// To support types\n// https://github.com/microsoft/TypeScript/issues/14877\ndeclare const self: ServiceWorkerGlobalScope\n\nimport { Hono } from 'hono'\nimport { handle } from 'hono/service-worker'\n\nconst app = new Hono().basePath('/sw')\napp.get('/', (c) => c.text('Hello World'))\n\nself.addEventListener('fetch', handle(app))\n```\n\n## 3. Run\n\nStart the development server.\n\n```\nnpm run dev\n```\n\n```\nyarn dev\n```\n\n```\npnpm run dev\n```\n\n```\nbun run dev\n```\n\nBy default, the development server will run on port `5173`. Access `http://localhost:5173/` in your browser to complete the Service Worker registration. Then, access `/sw` to see the response from the Hono application.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/service-worker", "title": "Service Worker", "description": "Service Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:28:57", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "title": "Service Worker - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "a3769141-c34b-4d31-af2e-329ca36af53c", "sourceURL": "https://hono.dev/docs/getting-started/service-worker", "url": "https://hono.dev/docs/getting-started/service-worker", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nFirst, create and move to your project directory:\n\n```\nmkdir my-app\ncd my-app\n```\n\nCreate the necessary files for the project. Make a `package.json` file with the following:\n\n```\n{\n  \"name\": \"my-app\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite dev\"\n  },\n  \"type\": \"module\"\n}\n```\n\nSimilarly, create a `tsconfig.json` file with the following:\n\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"WebWorker\"],\n    \"moduleResolution\": \"bundler\"\n  },\n  \"include\": [\"./\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\nNext, install the necessary modules.\n\n```\nnpm i hono\nnpm i -D vite\n```\n\n```\nyarn add hono\nyarn add -D vite\n```\n\n```\npnpm add hono\npnpm add -D vite\n```\n\n```\nbun add hono\nbun add -D vite\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/service-worker", "title": "Service Worker", "description": "Service Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:28:57", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "title": "Service Worker - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "a3769141-c34b-4d31-af2e-329ca36af53c", "sourceURL": "https://hono.dev/docs/getting-started/service-worker", "url": "https://hono.dev/docs/getting-started/service-worker", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `index.html`:\n\n```\n<!doctype html>\n<html>\n  <body>\n    <a href=\"/sw\">Hello World by Service Worker</a>\n    <script type=\"module\" src=\"/main.ts\"></script>\n  </body>\n</html>\n```\n\n`main.ts` is a script to register the Service Worker:\n\n```\nfunction register() {\n  navigator.serviceWorker\n    .register('/sw.ts', { scope: '/sw', type: 'module' })\n    .then(\n      function (_registration) {\n        console.log('Register Service Worker: Success')\n      },\n      function (_error) {\n        console.log('Register Service Worker: Error')\n      }\n    )\n}\nfunction start() {\n  navigator.serviceWorker\n    .getRegistrations()\n    .then(function (registrations) {\n      for (const registration of registrations) {\n        console.log('Unregister Service Worker')\n        registration.unregister()\n      }\n      register()\n    })\n}\nstart()\n```\n\nIn `sw.ts`, create an application using Hono and register it to the `fetch` event with the Service Worker adapter’s `handle` function. This allows the Hono application to intercept access to `/sw`.\n\n```\n// To support types\n// https://github.com/microsoft/TypeScript/issues/14877\ndeclare const self: ServiceWorkerGlobalScope\n\nimport { Hono } from 'hono'\nimport { handle } from 'hono/service-worker'\n\nconst app = new Hono().basePath('/sw')\napp.get('/', (c) => c.text('Hello World'))\n\nself.addEventListener('fetch', handle(app))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/service-worker", "title": "Service Worker", "description": "Service Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:28:57", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "title": "Service Worker - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "a3769141-c34b-4d31-af2e-329ca36af53c", "sourceURL": "https://hono.dev/docs/getting-started/service-worker", "url": "https://hono.dev/docs/getting-started/service-worker", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nStart the development server.\n\n```\nnpm run dev\n```\n\n```\nyarn dev\n```\n\n```\npnpm run dev\n```\n\n```\nbun run dev\n```\n\nBy default, the development server will run on port `5173`. Access `http://localhost:5173/` in your browser to complete the Service Worker registration. Then, access `/sw` to see the response from the Hono application..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/service-worker", "title": "Service Worker", "description": "Service Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:28:57", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "title": "Service Worker - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "a3769141-c34b-4d31-af2e-329ca36af53c", "sourceURL": "https://hono.dev/docs/getting-started/service-worker", "url": "https://hono.dev/docs/getting-started/service-worker", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Service Worker in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create package.json**:\n\n```yaml\n{\n  \"name\": \"my-app\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite dev\"\n  },\n  \"type\": \"module\"\n}\n```\n\nThis snippet shows you how to create package.json, which is an important aspect of service worker.\n\n**Create tsconfig.json**:\n\n```yaml\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"WebWorker\"],\n    \"moduleResolution\": \"bundler\"\n  },\n  \"include\": [\"./\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\nThis snippet shows you how to create tsconfig.json, which is an important aspect of service worker.\n\n**Register Service Worker in main.ts**:\n\n```yaml\nfunction register() {\n  navigator.serviceWorker\n    .register('/sw.ts', { scope: '/sw', type: 'module' })\n    .then(\n      function (_registration) {\n        console.log('Register Service Worker: Success')\n      },\n      function (_error) {\n        console.log('Register Service Worker: Error')\n      }\n    )\n}\nfunction start() {\n  navigator.serviceWorker\n    .getRegistrations()\n    .then(function (registrations) {\n      for (const registration of registrations) {\n        console.log('Unregister Service Worker')\n        registration.unregister()\n      }\n      register()\n    })\n}\nstart()\n```\n\nThis snippet shows you how to register service worker in main.ts, which is an important aspect of service worker.\n\n**Create Hono application in sw.ts**:\n\n```yaml\n// To support types\n// https://github.com/microsoft/TypeScript/issues/14877\ndeclare const self: ServiceWorkerGlobalScope\n\nimport { Hono } from 'hono'\nimport { handle } from 'hono/service-worker'\n\nconst app = new Hono().basePath('/sw')\napp.get('/', (c) => c.text('Hello World'))\n\nself.addEventListener('fetch', handle(app))\n```\n\nThis snippet shows you how to create hono application in sw.ts, which is an important aspect of service worker.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/service-worker", "title": "Service Worker", "description": "Service Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:28:57", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "title": "Service Worker - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "a3769141-c34b-4d31-af2e-329ca36af53c", "sourceURL": "https://hono.dev/docs/getting-started/service-worker", "url": "https://hono.dev/docs/getting-started/service-worker", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Service Worker in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBy default, the development server will run on port `5173`. Access `http://localhost:5173/` in your browser to complete the Service Worker registration.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/service-worker", "title": "Service Worker", "description": "Service Worker is a script that runs in the background of the browser to handle tasks like caching and push notifications. Using a Service Worker adapter, you can run applications made with Hono as FetchEvent handler within the browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:28:57", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "title": "Service Worker - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "a3769141-c34b-4d31-af2e-329ca36af53c", "sourceURL": "https://hono.dev/docs/getting-started/service-worker", "url": "https://hono.dev/docs/getting-started/service-worker", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Lambda@Edge is in hono?\n\nAssistant: Sure, I'd be happy to explain Lambda@Edge in hono.\n\n# Lambda@Edge\n\nLambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nWhen creating the application on Lambda@Edge, CDK is useful to setup the functions such as CloudFront, IAM Role, API Gateway, and others.\n\nInitialize your project with the `cdk` CLI.\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nyarn add hono\nmkdir lambda\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\npnpm add hono\nmkdir lambda\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nbun add hono\nmkdir lambda\n```\n\n## 2. Hello World\n\nEdit `lambda/index_edge.ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/lambda-edge'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono on Lambda@Edge!'))\n\nexport const handler = handle(app)\n```\n\n## 3. Deploy\n\nEdit `bin/my-app.ts`.\n\n```ts\n#!/usr/bin/env node\nimport 'source-map-support/register'\nimport * as cdk from 'aws-cdk-lib'\nimport { MyAppStack } from '../lib/my-app-stack'\n\nconst app = new cdk.App()\nnew MyAppStack(app, 'MyAppStack', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: 'us-east-1',\n  },\n})\n```\n\nEdit `lambda/cdk-stack.ts`.\n\n```ts\nimport { Construct } from 'constructs'\nimport * as cdk from 'aws-cdk-lib'\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront'\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\nimport * as s3 from 'aws-cdk-lib/aws-s3'\n\nexport class MyAppStack extends cdk.Stack {\n  public readonly edgeFn: lambda.Function\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n    const edgeFn = new NodejsFunction(this, 'edgeViewer', {\n      entry: 'lambda/index_edge.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n\n    // Upload any html\n    const originBucket = new s3.Bucket(this, 'originBucket')\n\n    new cloudfront.Distribution(this, 'Cdn', {\n      defaultBehavior: {\n        origin: new origins.S3Origin(originBucket),\n        edgeLambdas: [\n          {\n            functionVersion: edgeFn.currentVersion,\n            eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n          },\n        ],\n      },\n    })\n  }\n}\n```\n\nFinally, run the command to deploy:\n\n```sh\ncdk deploy\n```\n\n## Callback\n\nIf you want to add Basic Auth and continue with request processing after verification, you can use `c.env.callback()`\n\n```ts\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\nimport type { Callback, CloudFrontRequest } from 'hono/lambda-edge'\nimport { handle } from 'hono/lambda-edge'\n\ntype Bindings = {\n  callback: Callback\n  request: CloudFrontRequest\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get(\n  '*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/', async (c, next) => {\n  await next()\n  c.env.callback(null, c.env.request)\n})\n\nexport const handler = handle(app)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "overview", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nWhen creating the application on Lambda@Edge, CDK is useful to setup the functions such as CloudFront, IAM Role, API Gateway, and others.\n\nInitialize your project with the `cdk` CLI.\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nyarn add hono\nmkdir lambda\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\npnpm add hono\nmkdir lambda\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nbun add hono\nmkdir lambda\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `lambda/index_edge.ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/lambda-edge'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono on Lambda@Edge!'))\n\nexport const handler = handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. deploy in hono?\n\nAssistant: To 3. deploy in hono, here's what you do:\nEdit `bin/my-app.ts`.\n\n```ts\n#!/usr/bin/env node\nimport 'source-map-support/register'\nimport * as cdk from 'aws-cdk-lib'\nimport { MyAppStack } from '../lib/my-app-stack'\n\nconst app = new cdk.App()\nnew MyAppStack(app, 'MyAppStack', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: 'us-east-1',\n  },\n})\n```\n\nEdit `lambda/cdk-stack.ts`.\n\n```ts\nimport { Construct } from 'constructs'\nimport * as cdk from 'aws-cdk-lib'\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront'\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\nimport * as s3 from 'aws-cdk-lib/aws-s3'\n\nexport class MyAppStack extends cdk.Stack {\n  public readonly edgeFn: lambda.Function\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n    const edgeFn = new NodejsFunction(this, 'edgeViewer', {\n      entry: 'lambda/index_edge.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n\n    // Upload any html\n    const originBucket = new s3.Bucket(this, 'originBucket')\n\n    new cloudfront.Distribution(this, 'Cdn', {\n      defaultBehavior: {\n        origin: new origins.S3Origin(originBucket),\n        edgeLambdas: [\n          {\n            functionVersion: edgeFn.currentVersion,\n            eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n          },\n        ],\n      },\n    })\n  }\n}\n```\n\nFinally, run the command to deploy:\n\n```sh\ncdk deploy\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I callback in hono?\n\nAssistant: To callback in hono, here's what you do:\nIf you want to add Basic Auth and continue with request processing after verification, you can use `c.env.callback()`\n\n```ts\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\nimport type { Callback, CloudFrontRequest } from 'hono/lambda-edge'\nimport { handle } from 'hono/lambda-edge'\n\ntype Bindings = {\n  callback: Callback\n  request: CloudFrontRequest\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get(\n  '*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/', async (c, next) => {\n  await next()\n  c.env.callback(null, c.env.request)\n})\n\nexport const handler = handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "section_detail", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Lambda@Edge in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup Commands**:\n\n```yaml\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\n```\n\nThis snippet shows you how to setup commands, which is an important aspect of lambda@edge.\n\n**Hello World Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { handle } from 'hono/lambda-edge'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono on Lambda@Edge!'))\n\nexport const handler = handle(app)\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of lambda@edge.\n\n**Deploy Application**:\n\n```yaml\n#!/usr/bin/env node\nimport 'source-map-support/register'\nimport * as cdk from 'aws-cdk-lib'\nimport { MyAppStack } from '../lib/my-app-stack'\n\nconst app = new cdk.App()\nnew MyAppStack(app, 'MyAppStack', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: 'us-east-1',\n  },\n})\n```\n\nThis snippet shows you how to deploy application, which is an important aspect of lambda@edge.\n\n**CDK Stack Example**:\n\n```yaml\nimport { Construct } from 'constructs'\nimport * as cdk from 'aws-cdk-lib'\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront'\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\nimport * as s3 from 'aws-cdk-lib/aws-s3'\n\nexport class MyAppStack extends cdk.Stack {\n  public readonly edgeFn: lambda.Function\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n    const edgeFn = new NodejsFunction(this, 'edgeViewer', {\n      entry: 'lambda/index_edge.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n\n    // Upload any html\n    const originBucket = new s3.Bucket(this, 'originBucket')\n\n    new cloudfront.Distribution(this, 'Cdn', {\n      defaultBehavior: {\n        origin: new origins.S3Origin(originBucket),\n        edgeLambdas: [\n          {\n            functionVersion: edgeFn.currentVersion,\n            eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n          },\n        ],\n      },\n    })\n  }\n}\n```\n\nThis snippet shows you how to cdk stack example, which is an important aspect of lambda@edge.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "code_examples", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Lambda@Edge in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse CDK to set up your Lambda@Edge application for easier management of resources.\n\nEnsure you are using Node.js 18+ environment for Hono support.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/lambda-edge", "title": "Lambda@Edge", "description": "Lambda@Edge is a serverless platform by Amazon Web Services. It allows you to run Lambda functions at Amazon CloudFront's edge locations, enabling you to customize behaviors for HTTP requests/responses. Hono supports Lambda@Edge with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:22", "type": "best_practices", "page_metadata": {"twitter:image": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "favicon": "https://hono.dev/favicon.ico", "title": "Lambda@Edge - Hono", "scrapeId": "63429fc3-4cdd-4570-920b-1537ebbab02e", "sourceURL": "https://hono.dev/docs/getting-started/lambda-edge", "url": "https://hono.dev/docs/getting-started/lambda-edge", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Body Limit Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Body Limit Middleware in hono.\n\n# Body Limit Middleware\n\nThe Body Limit Middleware can limit the file size of the request body.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { bodyLimit } from 'hono/body-limit'\n```\n\n## Usage\n\n```ts\nconst app = new Hono()\n\napp.post(\n  '/upload',\n  bodyLimit({\n    maxSize: 50 * 1024, // 50kb\n    onError: (c) => {\n      return c.text('overflow :(', 413)\n    },\n  }),\n  async (c) => {\n    const body = await c.req.parseBody()\n    if (body['file'] instanceof File) {\n      console.log(`Got file sized: ${body['file'].size}`)\n    }\n    return c.text('pass :)')\n  }\n)\n```\n\n## Options\n\n### required maxSize: `number`\nThe maximum file size of the file you want to limit. The default is `100 * 1024` - `100kb`.\n\n### optional onError: `OnError`\nThe error handler to be invoked if the specified file size is exceeded.\n\n## Usage with Bun for large requests\n\nIf the Body Limit Middleware is used explicitly to allow a request body larger than the default, it might be necessary to make changes to your `Bun.serve` configuration accordingly. [At the time of writing](https://github.com/oven-sh/bun/blob/f2cfa15e4ef9d730fc6842ad8b79fb7ab4c71cb9/packages/bun-types/bun.d.ts#L2191), `Bun.serve`'s default request body limit is 128MiB. If you set Hono's Body Limit Middleware to a value bigger than that, your requests will still fail and, additionally, the `onError` handler specified in the middleware will not be called. This is because `Bun.serve()` will set the status code to `413` and terminate the connection before passing the request to Hono.\n\nIf you want to accept requests larger than 128MiB with Hono and Bun, you need to set the limit for Bun as well:\n\n```ts\nexport default {\n  port: process.env['PORT'] || 3000,\n  fetch: app.fetch,\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n}\n```\n\nor, depending on your setup:\n\n```ts\nBun.serve({\n  fetch(req, server) {\n    return app.fetch(req, { ip: server.requestIP(req) })\n  },\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { bodyLimit } from 'hono/body-limit'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\n```ts\nconst app = new Hono()\n\napp.post(\n  '/upload',\n  bodyLimit({\n    maxSize: 50 * 1024, // 50kb\n    onError: (c) => {\n      return c.text('overflow :(', 413)\n    },\n  }),\n  async (c) => {\n    const body = await c.req.parseBody()\n    if (body['file'] instanceof File) {\n      console.log(`Got file sized: ${body['file'].size}`)\n    }\n    return c.text('pass :)')\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### required maxSize: `number`\nThe maximum file size of the file you want to limit. The default is `100 * 1024` - `100kb`.\n\n### optional onError: `OnError`\nThe error handler to be invoked if the specified file size is exceeded..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage with bun for large requests in hono?\n\nAssistant: To usage with bun for large requests in hono, here's what you do:\nIf the Body Limit Middleware is used explicitly to allow a request body larger than the default, it might be necessary to make changes to your `Bun.serve` configuration accordingly. [At the time of writing](https://github.com/oven-sh/bun/blob/f2cfa15e4ef9d730fc6842ad8b79fb7ab4c71cb9/packages/bun-types/bun.d.ts#L2191), `Bun.serve`'s default request body limit is 128MiB. If you set Hono's Body Limit Middleware to a value bigger than that, your requests will still fail and, additionally, the `onError` handler specified in the middleware will not be called. This is because `Bun.serve()` will set the status code to `413` and terminate the connection before passing the request to Hono.\n\nIf you want to accept requests larger than 128MiB with Hono and Bun, you need to set the limit for Bun as well:\n\n```ts\nexport default {\n  port: process.env['PORT'] || 3000,\n  fetch: app.fetch,\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n}\n```\n\nor, depending on your setup:\n\n```ts\nBun.serve({\n  fetch(req, server) {\n    return app.fetch(req, { ip: server.requestIP(req) })\n  },\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Body Limit Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { bodyLimit } from 'hono/body-limit'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of body limit middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.post(\n  '/upload',\n  bodyLimit({\n    maxSize: 50 * 1024, // 50kb\n    onError: (c) => {\n      return c.text('overflow :(', 413)\n    },\n  }),\n  async (c) => {\n    const body = await c.req.parseBody()\n    if (body['file'] instanceof File) {\n      console.log(`Got file sized: ${body['file'].size}`)\n    }\n    return c.text('pass :)')\n  }\n)\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of body limit middleware.\n\n**Bun Configuration Example**:\n\n```yaml\n```ts\nexport default {\n  port: process.env['PORT'] || 3000,\n  fetch: app.fetch,\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n}\n```\n```\n\nThis snippet shows you how to bun configuration example, which is an important aspect of body limit middleware.\n\n**Bun Serve Example**:\n\n```yaml\n```ts\nBun.serve({\n  fetch(req, server) {\n    return app.fetch(req, { ip: server.requestIP(req) })\n  },\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n})\n```\n```\n\nThis snippet shows you how to bun serve example, which is an important aspect of body limit middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Body Limit Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure the `maxSize` is set according to your application's needs.\n\nIf using Bun, make sure to configure `maxRequestBodySize` accordingly to avoid request failures.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/body-limit", "title": "Body Limit Middleware", "description": "The Body Limit Middleware can limit the file size of the request body.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:50", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:domain": "hono.dev", "language": "en-US", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "title": "Body Limit Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1b82f40c-ea04-4e53-bec1-7ea7c7d55b8a", "sourceURL": "https://hono.dev/docs/middleware/builtin/body-limit", "url": "https://hono.dev/docs/middleware/builtin/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what IP Restriction Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain IP Restriction Middleware in hono.\n\n# IP Restriction Middleware\n\nIP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { ipRestriction } from 'hono/ip-restriction'\n```\n\n## Usage\n\nFor your application running on Bun, if you want to allow access only from local, you can write it as follows. Specify the rules you want to deny in the `denyList` and the rules you want to allow in the `allowList`.\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\nimport { ipRestriction } from 'hono/ip-restriction'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    denyList: [],\n    allowList: ['127.0.0.1', '::1'],\n  })\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\nPass the `getConninfo` from the [ConnInfo helper](https://hono.dev/docs/helpers/conninfo) appropriate for your environment as the first argument of `ipRestriction`. For example, for Deno, it would look like this:\n\n```ts\nimport { getConnInfo } from 'hono/deno'\nimport { ipRestriction } from 'hono/ip-restriction'\n\n//...\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    // ...\n  })\n)\n```\n\n## Rules\n\nFollow the instructions below for writing rules.\n\n### IPv4\n\n- `192.168.2.0` \\- Static IP Address\n- `192.168.2.0/24` \\- CIDR Notation\n- `*` \\- ALL Addresses\n\n### IPv6\n\n- `::1` \\- Static IP Address\n- `::1/10` \\- CIDR Notation\n- `*` \\- ALL Addresses\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "title": "IP Restriction Middleware", "description": "IP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:31:13", "type": "overview", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "title": "IP Restriction Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "4528cfa4-14de-4e7b-96fe-223845d75880", "sourceURL": "https://hono.dev/docs/middleware/builtin/ip-restriction", "url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { ipRestriction } from 'hono/ip-restriction'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "title": "IP Restriction Middleware", "description": "IP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:31:13", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "title": "IP Restriction Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "4528cfa4-14de-4e7b-96fe-223845d75880", "sourceURL": "https://hono.dev/docs/middleware/builtin/ip-restriction", "url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nFor your application running on Bun, if you want to allow access only from local, you can write it as follows. Specify the rules you want to deny in the `denyList` and the rules you want to allow in the `allowList`.\n\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\nimport { ipRestriction } from 'hono/ip-restriction'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    denyList: [],\n    allowList: ['127.0.0.1', '::1'],\n  })\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\nPass the `getConninfo` from the [ConnInfo helper](https://hono.dev/docs/helpers/conninfo) appropriate for your environment as the first argument of `ipRestriction`. For example, for Deno, it would look like this:\n\n```ts\nimport { getConnInfo } from 'hono/deno'\nimport { ipRestriction } from 'hono/ip-restriction'\n\n//...\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    // ...\n  })\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "title": "IP Restriction Middleware", "description": "IP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:31:13", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "title": "IP Restriction Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "4528cfa4-14de-4e7b-96fe-223845d75880", "sourceURL": "https://hono.dev/docs/middleware/builtin/ip-restriction", "url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I rules in hono?\n\nAssistant: To rules in hono, here's what you do:\nFollow the instructions below for writing rules.\n\n### IPv4\n\n- `192.168.2.0` \\- Static IP Address\n- `192.168.2.0/24` \\- CIDR Notation\n- `*` \\- ALL Addresses\n\n### IPv6\n\n- `::1` \\- Static IP Address\n- `::1/10` \\- CIDR Notation\n- `*` \\- ALL Addresses\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "title": "IP Restriction Middleware", "description": "IP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:31:13", "type": "section_detail", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "title": "IP Restriction Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "4528cfa4-14de-4e7b-96fe-223845d75880", "sourceURL": "https://hono.dev/docs/middleware/builtin/ip-restriction", "url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for IP Restriction Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { ipRestriction } from 'hono/ip-restriction'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of ip restriction middleware.\n\n**Usage Example for Bun**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\nimport { ipRestriction } from 'hono/ip-restriction'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    denyList: [],\n    allowList: ['127.0.0.1', '::1'],\n  })\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n```\n\nThis snippet shows you how to usage example for bun, which is an important aspect of ip restriction middleware.\n\n**Usage Example for Deno**:\n\n```yaml\n```ts\nimport { getConnInfo } from 'hono/deno'\nimport { ipRestriction } from 'hono/ip-restriction'\n\n//...\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    // ...\n  })\n)\n```\n```\n\nThis snippet shows you how to usage example for deno, which is an important aspect of ip restriction middleware.\n\n**Error Handling Example**:\n\n```yaml\n```ts\napp.use(\n  '*',\n  ipRestriction(\n    getConnInfo,\n    {\n      denyList: ['192.168.2.0/24'],\n    },\n    async (remote, c) => {\n      return c.text(`Blocking access from ${remote.addr}`, 403)\n    }\n  )\n)\n```\n```\n\nThis snippet shows you how to error handling example, which is an important aspect of ip restriction middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "title": "IP Restriction Middleware", "description": "IP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:31:13", "type": "code_examples", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "title": "IP Restriction Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "4528cfa4-14de-4e7b-96fe-223845d75880", "sourceURL": "https://hono.dev/docs/middleware/builtin/ip-restriction", "url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using IP Restriction Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSpecify the rules you want to deny in the `denyList` and the rules you want to allow in the `allowList`.\n\nUse the appropriate `getConnInfo` helper for your environment (Bun or Deno).\n\nCustomize error responses by returning a `Response` in the third argument of `ipRestriction`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "title": "IP Restriction Middleware", "description": "IP Restriction Middleware is middleware that limits access to resources based on the IP address of the user.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:31:13", "type": "best_practices", "page_metadata": {"og:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "og:type": "website", "title": "IP Restriction Middleware - Hono", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "scrapeId": "4528cfa4-14de-4e7b-96fe-223845d75880", "sourceURL": "https://hono.dev/docs/middleware/builtin/ip-restriction", "url": "https://hono.dev/docs/middleware/builtin/ip-restriction", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Request ID Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Request ID Middleware in hono.\n\n# Request ID Middleware\n\nRequest ID Middleware generates a unique ID for each request, which you can use in your handlers.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { requestId } from 'hono/request-id'\n```\n\n## Usage\n\nYou can access the Request ID through the `requestId` variable in the handlers and middleware to which the Request ID Middleware is applied.\n\n```ts\nconst app = new Hono()\n\napp.use('*', requestId())\n\napp.get('/', (c) => {\n  return c.text(`Your request id is ${c.get('requestId')}`)\n})\n```\n\nIf you want to explicitly specify the type, import `RequestIdVariables` and pass it in the generics of `new Hono()`. \n\n```ts\nimport type { RequestIdVariables } from 'hono/request-id'\n\nconst app = new Hono<{\n  Variables: RequestIdVariables\n}>()\n```\n\n## Options\n\n### optional limitLength: `number`\nThe maximum length of the request ID. The default is `255`.\n\n### optional headerName: `string`\nThe header name used for the request ID. The default is `X-Request-Id`.\n\n### optional generator: `(c: Context) => string`\nThe request ID generation function. By default, it uses `crypto.randomUUID()`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/request-id", "title": "Request ID Middleware", "description": "Request ID Middleware generates a unique ID for each request, which you can use in your handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:32:50", "type": "overview", "page_metadata": {"twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "title": "Request ID Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "9c8bc9cf-d99a-4e35-9773-5ea67cc5da62", "sourceURL": "https://hono.dev/docs/middleware/builtin/request-id", "url": "https://hono.dev/docs/middleware/builtin/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { requestId } from 'hono/request-id'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/request-id", "title": "Request ID Middleware", "description": "Request ID Middleware generates a unique ID for each request, which you can use in your handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:32:50", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "title": "Request ID Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "9c8bc9cf-d99a-4e35-9773-5ea67cc5da62", "sourceURL": "https://hono.dev/docs/middleware/builtin/request-id", "url": "https://hono.dev/docs/middleware/builtin/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nYou can access the Request ID through the `requestId` variable in the handlers and middleware to which the Request ID Middleware is applied.\n\n```ts\nconst app = new Hono()\n\napp.use('*', requestId())\n\napp.get('/', (c) => {\n  return c.text(`Your request id is ${c.get('requestId')}`)\n})\n```\n\nIf you want to explicitly specify the type, import `RequestIdVariables` and pass it in the generics of `new Hono()`. \n\n```ts\nimport type { RequestIdVariables } from 'hono/request-id'\n\nconst app = new Hono<{\n  Variables: RequestIdVariables\n}>()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/request-id", "title": "Request ID Middleware", "description": "Request ID Middleware generates a unique ID for each request, which you can use in your handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:32:50", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "title": "Request ID Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "9c8bc9cf-d99a-4e35-9773-5ea67cc5da62", "sourceURL": "https://hono.dev/docs/middleware/builtin/request-id", "url": "https://hono.dev/docs/middleware/builtin/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I options in hono?\n\nAssistant: To options in hono, here's what you do:\n### optional limitLength: `number`\nThe maximum length of the request ID. The default is `255`.\n\n### optional headerName: `string`\nThe header name used for the request ID. The default is `X-Request-Id`.\n\n### optional generator: `(c: Context) => string`\nThe request ID generation function. By default, it uses `crypto.randomUUID()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/request-id", "title": "Request ID Middleware", "description": "Request ID Middleware generates a unique ID for each request, which you can use in your handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:32:50", "type": "section_detail", "page_metadata": {"twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "title": "Request ID Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "9c8bc9cf-d99a-4e35-9773-5ea67cc5da62", "sourceURL": "https://hono.dev/docs/middleware/builtin/request-id", "url": "https://hono.dev/docs/middleware/builtin/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Request ID Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { requestId } from 'hono/request-id'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of request id middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\nconst app = new Hono()\n\napp.use('*', requestId())\n\napp.get('/', (c) => {\n  return c.text(`Your request id is ${c.get('requestId')}`)\n})\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of request id middleware.\n\n**Type Specification Example**:\n\n```yaml\n```ts\nimport type { RequestIdVariables } from 'hono/request-id'\n\nconst app = new Hono<{\n  Variables: RequestIdVariables\n}>()\n```\n```\n\nThis snippet shows you how to type specification example, which is an important aspect of request id middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/request-id", "title": "Request ID Middleware", "description": "Request ID Middleware generates a unique ID for each request, which you can use in your handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:32:50", "type": "code_examples", "page_metadata": {"twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "title": "Request ID Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "9c8bc9cf-d99a-4e35-9773-5ea67cc5da62", "sourceURL": "https://hono.dev/docs/middleware/builtin/request-id", "url": "https://hono.dev/docs/middleware/builtin/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Request ID Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe default maximum length of the request ID is 255 characters, which can be adjusted using the limitLength option.\n\nThe default header name for the request ID is X-Request-Id, which can be changed using the headerName option.\n\nFor custom request ID generation, provide a function to the generator option.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/request-id", "title": "Request ID Middleware", "description": "Request ID Middleware generates a unique ID for each request, which you can use in your handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:32:50", "type": "best_practices", "page_metadata": {"twitter:domain": "hono.dev", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "ogImage": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "language": "en-US", "title": "Request ID Middleware - Hono", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "9c8bc9cf-d99a-4e35-9773-5ea67cc5da62", "sourceURL": "https://hono.dev/docs/middleware/builtin/request-id", "url": "https://hono.dev/docs/middleware/builtin/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Context Storage Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Context Storage Middleware in hono.\n\n# Context Storage Middleware\n\nThe Context Storage Middleware stores the Hono `Context` in the `AsyncLocalStorage`, to make it globally accessible.Here's a quick rundown of what this is about:\n\n## Import\n\n```ts\nimport { Hono } from 'hono'\nimport { contextStorage, getContext } from 'hono/context-storage'\n```\n\n## Usage\n\nThe `getContext()` will return the current Context object if the `contextStorage()` is applied as a middleware.\n\n```ts\ntype Env = {\n  Variables: {\n    message: string\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\napp.use(async (c, next) => {\n  c.set('message', 'Hello!')\n  await next()\n})\n\n// You can access the variable outside the handler.\nconst getMessage = () => {\n  return getContext<Env>().var.message\n}\n\napp.get('/', (c) => {\n  return c.text(getMessage())\n})\n```\n\nOn Cloudflare Workers, you can access the bindings outside the handler.\n\n```ts\ntype Env = {\n  Bindings: {\n    KV: KVNamespace\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\nconst setKV = (value: string) => {\n  return getContext<Env>().env.KV.put('key', value)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/context-storage", "title": "Context Storage Middleware", "description": "The Context Storage Middleware stores the Hono `Context` in the `AsyncLocalStorage`, to make it globally accessible.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:28", "type": "overview", "page_metadata": {"language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "title": "Context Storage Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "6ecb98dc-c624-429f-a3ab-932f11115862", "sourceURL": "https://hono.dev/docs/middleware/builtin/context-storage", "url": "https://hono.dev/docs/middleware/builtin/context-storage", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\n```ts\nimport { Hono } from 'hono'\nimport { contextStorage, getContext } from 'hono/context-storage'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/context-storage", "title": "Context Storage Middleware", "description": "The Context Storage Middleware stores the Hono `Context` in the `AsyncLocalStorage`, to make it globally accessible.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:28", "type": "section_detail", "page_metadata": {"language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "title": "Context Storage Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "6ecb98dc-c624-429f-a3ab-932f11115862", "sourceURL": "https://hono.dev/docs/middleware/builtin/context-storage", "url": "https://hono.dev/docs/middleware/builtin/context-storage", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nThe `getContext()` will return the current Context object if the `contextStorage()` is applied as a middleware.\n\n```ts\ntype Env = {\n  Variables: {\n    message: string\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\napp.use(async (c, next) => {\n  c.set('message', 'Hello!')\n  await next()\n})\n\n// You can access the variable outside the handler.\nconst getMessage = () => {\n  return getContext<Env>().var.message\n}\n\napp.get('/', (c) => {\n  return c.text(getMessage())\n})\n```\n\nOn Cloudflare Workers, you can access the bindings outside the handler.\n\n```ts\ntype Env = {\n  Bindings: {\n    KV: KVNamespace\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\nconst setKV = (value: string) => {\n  return getContext<Env>().env.KV.put('key', value)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/context-storage", "title": "Context Storage Middleware", "description": "The Context Storage Middleware stores the Hono `Context` in the `AsyncLocalStorage`, to make it globally accessible.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:28", "type": "section_detail", "page_metadata": {"language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "title": "Context Storage Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "6ecb98dc-c624-429f-a3ab-932f11115862", "sourceURL": "https://hono.dev/docs/middleware/builtin/context-storage", "url": "https://hono.dev/docs/middleware/builtin/context-storage", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Context Storage Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\n```ts\nimport { Hono } from 'hono'\nimport { contextStorage, getContext } from 'hono/context-storage'\n```\n```\n\nThis snippet shows you how to import example, which is an important aspect of context storage middleware.\n\n**Usage Example**:\n\n```yaml\n```ts\ntype Env = {\n  Variables: {\n    message: string\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\napp.use(async (c, next) => {\n  c.set('message', 'Hello!')\n  await next()\n})\n\n// You can access the variable outside the handler.\nconst getMessage = () => {\n  return getContext<Env>().var.message\n}\n\napp.get('/', (c) => {\n  return c.text(getMessage())\n})\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of context storage middleware.\n\n**Cloudflare Workers Example**:\n\n```yaml\n```ts\ntype Env = {\n  Bindings: {\n    KV: KVNamespace\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\nconst setKV = (value: string) => {\n  return getContext<Env>().env.KV.put('key', value)\n}\n```\n```\n\nThis snippet shows you how to cloudflare workers example, which is an important aspect of context storage middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/context-storage", "title": "Context Storage Middleware", "description": "The Context Storage Middleware stores the Hono `Context` in the `AsyncLocalStorage`, to make it globally accessible.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:28", "type": "code_examples", "page_metadata": {"language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "title": "Context Storage Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "6ecb98dc-c624-429f-a3ab-932f11115862", "sourceURL": "https://hono.dev/docs/middleware/builtin/context-storage", "url": "https://hono.dev/docs/middleware/builtin/context-storage", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Context Storage Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis middleware uses `AsyncLocalStorage`. The runtime should support it.\n\nTo enable `AsyncLocalStorage` on Cloudflare Workers, add the `nodejs_compat` or `nodejs_als` flag to your `wrangler.toml` file.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/context-storage", "title": "Context Storage Middleware", "description": "The Context Storage Middleware stores the Hono `Context` in the `AsyncLocalStorage`, to make it globally accessible.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:28", "type": "best_practices", "page_metadata": {"language": "en-US", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "title": "Context Storage Middleware - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "6ecb98dc-c624-429f-a3ab-932f11115862", "sourceURL": "https://hono.dev/docs/middleware/builtin/context-storage", "url": "https://hono.dev/docs/middleware/builtin/context-storage", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Supabase Edge Functions is in hono?\n\nAssistant: Sure, I'd be happy to explain Supabase Edge Functions in hono.\n\n# Supabase Edge Functions\n\nSupabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\n### Prerequisites\nBefore you begin, make sure you have the Supabase CLI installed. If you haven't installed it yet, follow the instructions in the official documentation.\n\n### Creating a New Project\n1. Open your terminal or command prompt.\n2. Create a new Supabase project in a directory on your local machine by running:\n\n```bash\nsupabase init\n```\nThis command initializes a new Supabase project in the current directory.\n\n### Adding an Edge Function\n3. Inside your Supabase project, create a new Edge Function named `hello-world`:\n\n```bash\nsupabase functions new hello-world\n```\nThis command creates a new Edge Function with the specified name in your project.\n\n## 2. Hello World\n\nEdit the `hello-world` function by modifying the file `supabase/functions/hello-world/index.ts`:\n\n```ts\nimport { Hono } from 'jsr:@hono/hono'\n\n// change this to your function name\nconst functionName = 'hello-world'\nconst app = new Hono().basePath(`/${functionName}`)\n\napp.get('/hello', (c) => c.text('Hello from hono-server!'))\n\nDeno.serve(app.fetch)\n```\n\n## 3. Run\n\nTo run the function locally, use the following command:\n\n1. Use the following command to serve the function:\n\n```bash\nsupabase start # start the supabase stack\nsupabase functions serve --no-verify-jwt # start the Functions watcher\n```\nThe `--no-verify-jwt` flag allows you to bypass JWT verification during local development.\n\n2. Make a GET request using cURL or Postman to `http://127.0.0.1:54321/functions/v1/hello-world/hello`:\n\n```bash\ncurl  --location  'http://127.0.0.1:54321/functions/v1/hello-world/hello'\n```\nThis request should return the text \"Hello from hono-server!\".\n\n## 4. Deploy\n\nYou can deploy all of your Edge Functions in Supabase with a single command:\n\n```bash\nsupabase functions deploy\n```\nAlternatively, you can deploy individual Edge Functions by specifying the name of the function in the deploy command:\n\n```bash\nsupabase functions deploy hello-world\n```\nFor more deployment methods, visit the Supabase documentation on Deploying to Production.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "overview", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\n### Prerequisites\nBefore you begin, make sure you have the Supabase CLI installed. If you haven't installed it yet, follow the instructions in the official documentation.\n\n### Creating a New Project\n1. Open your terminal or command prompt.\n2. Create a new Supabase project in a directory on your local machine by running:\n\n```bash\nsupabase init\n```\nThis command initializes a new Supabase project in the current directory.\n\n### Adding an Edge Function\n3. Inside your Supabase project, create a new Edge Function named `hello-world`:\n\n```bash\nsupabase functions new hello-world\n```\nThis command creates a new Edge Function with the specified name in your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit the `hello-world` function by modifying the file `supabase/functions/hello-world/index.ts`:\n\n```ts\nimport { Hono } from 'jsr:@hono/hono'\n\n// change this to your function name\nconst functionName = 'hello-world'\nconst app = new Hono().basePath(`/${functionName}`)\n\napp.get('/hello', (c) => c.text('Hello from hono-server!'))\n\nDeno.serve(app.fetch)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. run in hono?\n\nAssistant: To 3. run in hono, here's what you do:\nTo run the function locally, use the following command:\n\n1. Use the following command to serve the function:\n\n```bash\nsupabase start # start the supabase stack\nsupabase functions serve --no-verify-jwt # start the Functions watcher\n```\nThe `--no-verify-jwt` flag allows you to bypass JWT verification during local development.\n\n2. Make a GET request using cURL or Postman to `http://127.0.0.1:54321/functions/v1/hello-world/hello`:\n\n```bash\ncurl  --location  'http://127.0.0.1:54321/functions/v1/hello-world/hello'\n```\nThis request should return the text \"Hello from hono-server!\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\nYou can deploy all of your Edge Functions in Supabase with a single command:\n\n```bash\nsupabase functions deploy\n```\nAlternatively, you can deploy individual Edge Functions by specifying the name of the function in the deploy command:\n\n```bash\nsupabase functions deploy hello-world\n```\nFor more deployment methods, visit the Supabase documentation on Deploying to Production..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Supabase Edge Functions in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a New Supabase Project**:\n\n```yaml\nsupabase init\n```\n\nThis snippet shows you how to creating a new supabase project, which is an important aspect of supabase edge functions.\n\n**Adding an Edge Function**:\n\n```yaml\nsupabase functions new hello-world\n```\n\nThis snippet shows you how to adding an edge function, which is an important aspect of supabase edge functions.\n\n**Hello World Function Code**:\n\n```yaml\nimport { Hono } from 'jsr:@hono/hono'\n\n// change this to your function name\nconst functionName = 'hello-world'\nconst app = new Hono().basePath(`/${functionName}`)\n\napp.get('/hello', (c) => c.text('Hello from hono-server!'))\n\nDeno.serve(app.fetch)\n```\n\nThis snippet shows you how to hello world function code, which is an important aspect of supabase edge functions.\n\n**Running the Function Locally**:\n\n```yaml\nsupabase start # start the supabase stack\nsupabase functions serve --no-verify-jwt # start the Functions watcher\n```\n\nThis snippet shows you how to running the function locally, which is an important aspect of supabase edge functions.\n\n**Making a GET Request**:\n\n```yaml\ncurl  --location  'http://127.0.0.1:54321/functions/v1/hello-world/hello'\n```\n\nThis snippet shows you how to making a get request, which is an important aspect of supabase edge functions.\n\n**Deploying Edge Functions**:\n\n```yaml\nsupabase functions deploy\n```\n\nThis snippet shows you how to deploying edge functions, which is an important aspect of supabase edge functions.\n\n**Deploying Individual Edge Function**:\n\n```yaml\nsupabase functions deploy hello-world\n```\n\nThis snippet shows you how to deploying individual edge function, which is an important aspect of supabase edge functions.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Supabase Edge Functions in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have the Supabase CLI installed before starting.\n\nUse the `--no-verify-jwt` flag during local development to bypass JWT verification.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/supabase-functions", "title": "Supabase Edge Functions", "description": "Supabase is an open-source alternative to Firebase, offering a suite of tools similar to Firebase's capabilities, including database, authentication, storage, and now, serverless functions. Supabase Edge Functions are server-side TypeScript functions that are distributed globally, running closer to your users for improved performance. These functions are developed using Deno, which brings several benefits, including improved security and a modern JavaScript/TypeScript runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:34:02", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "ogImage": "https://hono.dev/images/hono-title.png", "viewport": "width=device-width,initial-scale=1", "title": "Supabase Edge Functions - Hono", "twitter:domain": "hono.dev", "language": "en-US", "generator": "VitePress v1.6.3", "favicon": "https://hono.dev/favicon.ico", "og:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "scrapeId": "1ed316c3-0e60-4ff8-8503-b669124ba9df", "sourceURL": "https://hono.dev/docs/getting-started/supabase-functions", "url": "https://hono.dev/docs/getting-started/supabase-functions", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Trailing Slash Middleware is in hono?\n\nAssistant: Sure, I'd be happy to explain Trailing Slash Middleware in hono.\n\n# Trailing Slash Middleware\n\nThis middleware handles Trailing Slash in the URL on a GET request.Here's a quick rundown of what this is about:\n\n## Import\n\nts\n\n```\nimport { Hono } from 'hono'\nimport {\n  appendTrailingSlash,\n  trimTrailingSlash,\n} from 'hono/trailing-slash'\n```\n\n## Usage\n\nExample of redirecting a GET request of `/about/me` to `/about/me/`.\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { appendTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(appendTrailingSlash())\napp.get('/about/me/', (c) => c.text('With Trailing Slash'))\n```\n\nExample of redirecting a GET request of `/about/me/` to `/about/me`.\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { trimTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(trimTrailingSlash())\napp.get('/about/me', (c) => c.text('Without Trailing Slash'))\n```\n\n## Note\n\nIt will be enabled when the request method is `GET` and the response status is `404`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "title": "Trailing Slash Middleware", "description": "This middleware handles Trailing Slash in the URL on a GET request.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:35:57", "type": "overview", "page_metadata": {"title": "Trailing Slash Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "scrapeId": "c89a2e6d-e713-426f-ba16-b92fda14d3fd", "sourceURL": "https://hono.dev/docs/middleware/builtin/trailing-slash", "url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I import in hono?\n\nAssistant: To import in hono, here's what you do:\nts\n\n```\nimport { Hono } from 'hono'\nimport {\n  appendTrailingSlash,\n  trimTrailingSlash,\n} from 'hono/trailing-slash'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "title": "Trailing Slash Middleware", "description": "This middleware handles Trailing Slash in the URL on a GET request.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:35:57", "type": "section_detail", "page_metadata": {"title": "Trailing Slash Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "scrapeId": "c89a2e6d-e713-426f-ba16-b92fda14d3fd", "sourceURL": "https://hono.dev/docs/middleware/builtin/trailing-slash", "url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I usage in hono?\n\nAssistant: To usage in hono, here's what you do:\nExample of redirecting a GET request of `/about/me` to `/about/me/`.\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { appendTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(appendTrailingSlash())\napp.get('/about/me/', (c) => c.text('With Trailing Slash'))\n```\n\nExample of redirecting a GET request of `/about/me/` to `/about/me`.\n\nts\n\n```\nimport { Hono } from 'hono'\nimport { trimTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(trimTrailingSlash())\napp.get('/about/me', (c) => c.text('Without Trailing Slash'))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "title": "Trailing Slash Middleware", "description": "This middleware handles Trailing Slash in the URL on a GET request.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:35:57", "type": "section_detail", "page_metadata": {"title": "Trailing Slash Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "scrapeId": "c89a2e6d-e713-426f-ba16-b92fda14d3fd", "sourceURL": "https://hono.dev/docs/middleware/builtin/trailing-slash", "url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I note in hono?\n\nAssistant: To note in hono, here's what you do:\nIt will be enabled when the request method is `GET` and the response status is `404`..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "title": "Trailing Slash Middleware", "description": "This middleware handles Trailing Slash in the URL on a GET request.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:35:57", "type": "section_detail", "page_metadata": {"title": "Trailing Slash Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "scrapeId": "c89a2e6d-e713-426f-ba16-b92fda14d3fd", "sourceURL": "https://hono.dev/docs/middleware/builtin/trailing-slash", "url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Trailing Slash Middleware in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Import Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport {\n  appendTrailingSlash,\n  trimTrailingSlash,\n} from 'hono/trailing-slash'\n```\n\nThis snippet shows you how to import example, which is an important aspect of trailing slash middleware.\n\n**Redirect GET request to /about/me/**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { appendTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(appendTrailingSlash())\napp.get('/about/me/', (c) => c.text('With Trailing Slash'))\n```\n\nThis snippet shows you how to redirect get request to /about/me/, which is an important aspect of trailing slash middleware.\n\n**Redirect GET request to /about/me**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { trimTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(trimTrailingSlash())\napp.get('/about/me', (c) => c.text('Without Trailing Slash'))\n```\n\nThis snippet shows you how to redirect get request to /about/me, which is an important aspect of trailing slash middleware.\n\n", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "title": "Trailing Slash Middleware", "description": "This middleware handles Trailing Slash in the URL on a GET request.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:35:57", "type": "code_examples", "page_metadata": {"title": "Trailing Slash Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "scrapeId": "c89a2e6d-e713-426f-ba16-b92fda14d3fd", "sourceURL": "https://hono.dev/docs/middleware/builtin/trailing-slash", "url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Trailing Slash Middleware in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to use the middleware only for GET requests to avoid unnecessary redirects.\n\nCheck the response status to be 404 before applying the middleware.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "title": "Trailing Slash Middleware", "description": "This middleware handles Trailing Slash in the URL on a GET request.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:35:57", "type": "best_practices", "page_metadata": {"title": "Trailing Slash Middleware - Hono", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "favicon": "https://hono.dev/favicon.ico", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "language": "en-US", "scrapeId": "c89a2e6d-e713-426f-ba16-b92fda14d3fd", "sourceURL": "https://hono.dev/docs/middleware/builtin/trailing-slash", "url": "https://hono.dev/docs/middleware/builtin/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Alibaba Cloud Function Compute is in hono?\n\nAssistant: Sure, I'd be happy to explain Alibaba Cloud Function Compute in hono.\n\n# Alibaba Cloud Function Compute\n\nAlibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nTo set up your application, you can use npm, yarn, pnpm, or bun to install the necessary packages. Here are the commands for each package manager:\n\nUsing npm:\n```sh\nmkdir my-app\ncd my-app\nnpm i hono hono-alibaba-cloud-fc3-adapter\nnpm i -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nUsing yarn:\n```sh\nmkdir my-app\ncd my-app\nyarn add hono hono-alibaba-cloud-fc3-adapter\nyarn add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nUsing pnpm:\n```sh\nmkdir my-app\ncd my-app\npnpm add hono hono-alibaba-cloud-fc3-adapter\npnpm add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nUsing bun:\n```sh\nmkdir my-app\ncd my-app\nbun add hono hono-alibaba-cloud-fc3-adapter\nbun add -D esbuild @serverless-devs/s\nmkdir src\ntouch src/index.ts\n```\n\n## 2. Hello World\n\nTo create a simple Hello World application, edit `src/index.ts` with the following code:\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono-alibaba-cloud-fc3-adapter'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```\n\n## 3. Setup serverless-devs\n\n[serverless-devs](https://github.com/Serverless-Devs/Serverless-Devs) is an open source and open serverless developer platform dedicated to providing developers with a powerful tool chain system. Through this platform, developers can not only experience multi cloud serverless products with one click and rapidly deploy serverless projects, but also manage projects in the whole life cycle of serverless applications, and combine serverless devs with other tools / platforms very simply and quickly to further improve the efficiency of R & D, operation and maintenance.\n\nTo add the Alibaba Cloud AccessKeyID & AccessKeySecret, run:\n```sh\nnpx s config add\n# Please select a provider: Alibaba Cloud (alibaba)\n# Input your AccessKeyID & AccessKeySecret\n```\n\nEdit `s.yaml` with the following configuration:\n```yaml\nedition: 3.0.0\nname: my-app\naccess: 'default'\n\nvars:\n  region: 'us-west-1'\n\nresources:\n  my-app:\n    component: fc3\n    props:\n      region: ${vars.region}\n      functionName: 'my-app'\n      description: 'Hello World by Hono'\n      runtime: 'nodejs20'\n      code: ./dist\n      handler: index.handler\n      memorySize: 1024\n      timeout: 300\n```\n\nEdit the `scripts` section in `package.json`:\n```json\n{\n  \"scripts\": {\n    \"build\": \"esbuild --bundle --outfile=./dist/index.js --platform=node --target=node20 ./src/index.ts\",\n    \"deploy\": \"s deploy -y\"\n  }\n}\n```\n\n## 4. Deploy\n\nFinally, run the command to deploy your application:\n```sh\nnpm run build # Compile the TypeScript code to JavaScript\nnpm run deploy # Deploy the function to Alibaba Cloud Function Compute\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nTo set up your application, you can use npm, yarn, pnpm, or bun to install the necessary packages. Here are the commands for each package manager:\n\nUsing npm:\n```sh\nmkdir my-app\ncd my-app\nnpm i hono hono-alibaba-cloud-fc3-adapter\nnpm i -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nUsing yarn:\n```sh\nmkdir my-app\ncd my-app\nyarn add hono hono-alibaba-cloud-fc3-adapter\nyarn add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nUsing pnpm:\n```sh\nmkdir my-app\ncd my-app\npnpm add hono hono-alibaba-cloud-fc3-adapter\npnpm add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nUsing bun:\n```sh\nmkdir my-app\ncd my-app\nbun add hono hono-alibaba-cloud-fc3-adapter\nbun add -D esbuild @serverless-devs/s\nmkdir src\ntouch src/index.ts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nTo create a simple Hello World application, edit `src/index.ts` with the following code:\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono-alibaba-cloud-fc3-adapter'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. setup serverless-devs in hono?\n\nAssistant: To 3. setup serverless-devs in hono, here's what you do:\n[serverless-devs](https://github.com/Serverless-Devs/Serverless-Devs) is an open source and open serverless developer platform dedicated to providing developers with a powerful tool chain system. Through this platform, developers can not only experience multi cloud serverless products with one click and rapidly deploy serverless projects, but also manage projects in the whole life cycle of serverless applications, and combine serverless devs with other tools / platforms very simply and quickly to further improve the efficiency of R & D, operation and maintenance.\n\nTo add the Alibaba Cloud AccessKeyID & AccessKeySecret, run:\n```sh\nnpx s config add\n# Please select a provider: Alibaba Cloud (alibaba)\n# Input your AccessKeyID & AccessKeySecret\n```\n\nEdit `s.yaml` with the following configuration:\n```yaml\nedition: 3.0.0\nname: my-app\naccess: 'default'\n\nvars:\n  region: 'us-west-1'\n\nresources:\n  my-app:\n    component: fc3\n    props:\n      region: ${vars.region}\n      functionName: 'my-app'\n      description: 'Hello World by Hono'\n      runtime: 'nodejs20'\n      code: ./dist\n      handler: index.handler\n      memorySize: 1024\n      timeout: 300\n```\n\nEdit the `scripts` section in `package.json`:\n```json\n{\n  \"scripts\": {\n    \"build\": \"esbuild --bundle --outfile=./dist/index.js --platform=node --target=node20 ./src/index.ts\",\n    \"deploy\": \"s deploy -y\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 4. deploy in hono?\n\nAssistant: To 4. deploy in hono, here's what you do:\nFinally, run the command to deploy your application:\n```sh\nnpm run build # Compile the TypeScript code to JavaScript\nnpm run deploy # Deploy the function to Alibaba Cloud Function Compute\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Alibaba Cloud Function Compute in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup using npm**:\n\n```yaml\nmkdir my-app\ncd my-app\nnpm i hono hono-alibaba-cloud-fc3-adapter\nnpm i -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nThis snippet shows you how to setup using npm, which is an important aspect of alibaba cloud function compute.\n\n**Setup using yarn**:\n\n```yaml\nmkdir my-app\ncd my-app\nyarn add hono hono-alibaba-cloud-fc3-adapter\nyarn add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nThis snippet shows you how to setup using yarn, which is an important aspect of alibaba cloud function compute.\n\n**Setup using pnpm**:\n\n```yaml\nmkdir my-app\ncd my-app\npnpm add hono hono-alibaba-cloud-fc3-adapter\npnpm add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nThis snippet shows you how to setup using pnpm, which is an important aspect of alibaba cloud function compute.\n\n**Setup using bun**:\n\n```yaml\nmkdir my-app\ncd my-app\nbun add hono hono-alibaba-cloud-fc3-adapter\nbun add -D esbuild @serverless-devs/s\nmkdir src\ntouch src/index.ts\n```\n\nThis snippet shows you how to setup using bun, which is an important aspect of alibaba cloud function compute.\n\n**Hello World example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { handle } from 'hono-alibaba-cloud-fc3-adapter'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of alibaba cloud function compute.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Alibaba Cloud Function Compute in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have the correct AccessKeyID and AccessKeySecret for Alibaba Cloud.\n\nUse the appropriate package manager for your setup (npm, yarn, pnpm, bun).\n\nMake sure to edit the `s.yaml` file correctly to configure your function settings.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/ali-function-compute", "title": "Alibaba Cloud Function Compute", "description": "Alibaba Cloud Function Compute is a fully managed, event-driven compute service. Function Compute allows you to focus on writing and uploading code without having to manage infrastructure such as servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:36:22", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "twitter:card": "summary_large_image", "favicon": "https://hono.dev/favicon.ico", "viewport": "width=device-width,initial-scale=1", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Alibaba Cloud Function Compute - Hono", "og:type": "website", "twitter:image": "https://hono.dev/images/hono-title.png", "language": "en-US", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "og:image": "https://hono.dev/images/hono-title.png", "scrapeId": "62423e41-56bd-4cb4-bcf4-ae856badb132", "sourceURL": "https://hono.dev/docs/getting-started/ali-function-compute", "url": "https://hono.dev/docs/getting-started/ali-function-compute", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Validation is in hono?\n\nAssistant: Sure, I'd be happy to explain Validation in hono.\n\n# Validation\n\nHono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.Here's a quick rundown of what this is about:\n\n## Manual validator\n\nFirst, introduce a way to validate incoming values without using the third-party Validator.\n\nImport `validator` from `hono/validator`.\n\n```ts\nimport { validator } from 'hono/validator'\n```\n\nTo validate form data, specify `form` as the first argument and a callback as the second argument. In the callback, validates the value and return the validated values at the end. The `validator` can be used as middleware.\n\n```ts\napp.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const body = value['body']\n    if (!body || typeof body !== 'string') {\n      return c.text('Invalid!', 400)\n    }\n    return {\n      body: body,\n    }\n  }),\n  //...\n```\n\nWithin the handler you can get the validated value with `c.req.valid('form')`.\n\n```ts\n, (c) => {\n  const { body } = c.req.valid('form')\n  // ... do something\n  return c.json(\n    {\n      message: 'Created!',\n    },\n    201\n  )\n}\n```\n\nValidation targets include `json`, `query`, `header`, `param` and `cookie` in addition to `form`.\n\nWARNING\n\nWhen you validate `json`, the request _must_ contain a `Content-Type: application/json` header otherwise the request body will not be parsed and you will receive a warning.\n\nIt is important to set the `content-type` header when testing using [`app.request()`](https://hono.dev/docs/api/request).\n\nGiven an application like this.\n\n```ts\nconst app = new Hono()\napp.post(\n  '/testing',\n  validator('json', (value, c) => {\n    // pass-through validator\n    return value\n  }),\n  (c) => {\n    const body = c.req.valid('json')\n    return c.json(body)\n  }\n)\n```\n\nYour tests can be written like this.\n\n```ts\n// ❌ this will not work\nconst res = await app.request('/testing', {\n  method: 'POST',\n  body: JSON.stringify({ key: 'value' }),\n})\nconst data = await res.json()\nconsole.log(data) // undefined\n\n// ✅ this will work\nconst res = await app.request('/testing', {\n  method: 'POST',\n  body: JSON.stringify({ key: 'value' }),\n  headers: new Headers({ 'Content-Type': 'application/json' }),\n})\nconst data = await res.json()\nconsole.log(data) // { key: 'value' }\n```\n\nWARNING\n\nWhen you validate `header`, you need to use **lowercase** name as the key.\n\nIf you want to validate the `Idempotency-Key` header, you need to use `idempotency-key` as the key.\n\n```ts\n// ❌ this will not work\napp.post(\n  '/api',\n  validator('header', (value, c) => {\n    // idempotencyKey is always undefined\n    // so this middleware always return 400 as not expected\n    const idempotencyKey = value['Idempotency-Key']\n\n    if (idempotencyKey == undefined || idempotencyKey === '') {\n      throw HTTPException(400, {\n        message: 'Idempotency-Key is required',\n      })\n    }\n    return { idempotencyKey }\n  }),\n  (c) => {\n    const { idempotencyKey } = c.req.valid('header')\n    // ...\n  }\n)\n\n// ✅ this will work\napp.post(\n  '/api',\n  validator('header', (value, c) => {\n    // can retrieve the value of the header as expected\n    const idempotencyKey = value['idempotency-key']\n\n    if (idempotencyKey == undefined || idempotencyKey === '') {\n      throw HTTPException(400, {\n        message: 'Idempotency-Key is required',\n      })\n    }\n    return { idempotencyKey }\n  }),\n  (c) => {\n    const { idempotencyKey } = c.req.valid('header')\n    // ...\n  }\n)\n```\n\n## Multiple validators\n\nYou can also include multiple validators to validate different parts of request:\n\n```ts\napp.post(\n  '/posts/:id',\n  validator('param', ...),\n  validator('query', ...),\n  validator('json', ...),\n  (c) => {\n    //...\n  }\n)\n```\n\n## With Zod\n\nYou can use [Zod](https://zod.dev/), one of third-party validators. We recommend using a third-party validator.\n\nInstall from the Npm registry.\n\n```sh\nnpm i zod\n```\n\n```sh\nyarn add zod\n```\n\n```sh\npnpm add zod\n```\n\n```sh\nbun add zod\n```\n\nImport `z` from `zod`.\n\n```ts\nimport { z } from 'zod'\n```\n\nWrite your schema.\n\n```ts\nconst schema = z.object({\n  body: z.string(),\n})\n```\n\nYou can use the schema in the callback function for validation and return the validated value.\n\n```ts\nconst route = app.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const parsed = schema.safeParse(value)\n    if (!parsed.success) {\n      return c.text('Invalid!', 401)\n    }\n    return parsed.data\n  }),\n  (c) => {\n    const { body } = c.req.valid('form')\n    // ... do something\n    return c.json(\n      {\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```\n\n## Zod Validator Middleware\n\nYou can use the [Zod Validator Middleware](https://github.com/honojs/middleware/tree/main/packages/zod-validator) to make it even easier.\n\nInstall from the Npm registry.\n\n```sh\nnpm i @hono/zod-validator\n```\n\n```sh\nyarn add @hono/zod-validator\n```\n\n```sh\npnpm add @hono/zod-validator\n```\n\n```sh\nbun add @hono/zod-validator\n```\n\nAnd import `zValidator`.\n\n```ts\nimport { zValidator } from '@hono/zod-validator'\n```\n\nAnd write as follows.\n\n```ts\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    const validated = c.req.valid('form')\n    // ... use your validated data\n  }\n)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I manual validator in hono?\n\nAssistant: To manual validator in hono, here's what you do:\nFirst, introduce a way to validate incoming values without using the third-party Validator.\n\nImport `validator` from `hono/validator`.\n\n```ts\nimport { validator } from 'hono/validator'\n```\n\nTo validate form data, specify `form` as the first argument and a callback as the second argument. In the callback, validates the value and return the validated values at the end. The `validator` can be used as middleware.\n\n```ts\napp.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const body = value['body']\n    if (!body || typeof body !== 'string') {\n      return c.text('Invalid!', 400)\n    }\n    return {\n      body: body,\n    }\n  }),\n  //...\n```\n\nWithin the handler you can get the validated value with `c.req.valid('form')`.\n\n```ts\n, (c) => {\n  const { body } = c.req.valid('form')\n  // ... do something\n  return c.json(\n    {\n      message: 'Created!',\n    },\n    201\n  )\n}\n```\n\nValidation targets include `json`, `query`, `header`, `param` and `cookie` in addition to `form`.\n\nWARNING\n\nWhen you validate `json`, the request _must_ contain a `Content-Type: application/json` header otherwise the request body will not be parsed and you will receive a warning.\n\nIt is important to set the `content-type` header when testing using [`app.request()`](https://hono.dev/docs/api/request).\n\nGiven an application like this.\n\n```ts\nconst app = new Hono()\napp.post(\n  '/testing',\n  validator('json', (value, c) => {\n    // pass-through validator\n    return value\n  }),\n  (c) => {\n    const body = c.req.valid('json')\n    return c.json(body)\n  }\n)\n```\n\nYour tests can be written like this.\n\n```ts\n// ❌ this will not work\nconst res = await app.request('/testing', {\n  method: 'POST',\n  body: JSON.stringify({ key: 'value' }),\n})\nconst data = await res.json()\nconsole.log(data) // undefined\n\n// ✅ this will work\nconst res = await app.request('/testing', {\n  method: 'POST',\n  body: JSON.stringify({ key: 'value' }),\n  headers: new Headers({ 'Content-Type': 'application/json' }),\n})\nconst data = await res.json()\nconsole.log(data) // { key: 'value' }\n```\n\nWARNING\n\nWhen you validate `header`, you need to use **lowercase** name as the key.\n\nIf you want to validate the `Idempotency-Key` header, you need to use `idempotency-key` as the key.\n\n```ts\n// ❌ this will not work\napp.post(\n  '/api',\n  validator('header', (value, c) => {\n    // idempotencyKey is always undefined\n    // so this middleware always return 400 as not expected\n    const idempotencyKey = value['Idempotency-Key']\n\n    if (idempotencyKey == undefined || idempotencyKey === '') {\n      throw HTTPException(400, {\n        message: 'Idempotency-Key is required',\n      })\n    }\n    return { idempotencyKey }\n  }),\n  (c) => {\n    const { idempotencyKey } = c.req.valid('header')\n    // ...\n  }\n)\n\n// ✅ this will work\napp.post(\n  '/api',\n  validator('header', (value, c) => {\n    // can retrieve the value of the header as expected\n    const idempotencyKey = value['idempotency-key']\n\n    if (idempotencyKey == undefined || idempotencyKey === '') {\n      throw HTTPException(400, {\n        message: 'Idempotency-Key is required',\n      })\n    }\n    return { idempotencyKey }\n  }),\n  (c) => {\n    const { idempotencyKey } = c.req.valid('header')\n    // ...\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I multiple validators in hono?\n\nAssistant: To multiple validators in hono, here's what you do:\nYou can also include multiple validators to validate different parts of request:\n\n```ts\napp.post(\n  '/posts/:id',\n  validator('param', ...),\n  validator('query', ...),\n  validator('json', ...),\n  (c) => {\n    //...\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I with zod in hono?\n\nAssistant: To with zod in hono, here's what you do:\nYou can use [Zod](https://zod.dev/), one of third-party validators. We recommend using a third-party validator.\n\nInstall from the Npm registry.\n\n```sh\nnpm i zod\n```\n\n```sh\nyarn add zod\n```\n\n```sh\npnpm add zod\n```\n\n```sh\nbun add zod\n```\n\nImport `z` from `zod`.\n\n```ts\nimport { z } from 'zod'\n```\n\nWrite your schema.\n\n```ts\nconst schema = z.object({\n  body: z.string(),\n})\n```\n\nYou can use the schema in the callback function for validation and return the validated value.\n\n```ts\nconst route = app.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const parsed = schema.safeParse(value)\n    if (!parsed.success) {\n      return c.text('Invalid!', 401)\n    }\n    return parsed.data\n  }),\n  (c) => {\n    const { body } = c.req.valid('form')\n    // ... do something\n    return c.json(\n      {\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I zod validator middleware in hono?\n\nAssistant: To zod validator middleware in hono, here's what you do:\nYou can use the [Zod Validator Middleware](https://github.com/honojs/middleware/tree/main/packages/zod-validator) to make it even easier.\n\nInstall from the Npm registry.\n\n```sh\nnpm i @hono/zod-validator\n```\n\n```sh\nyarn add @hono/zod-validator\n```\n\n```sh\npnpm add @hono/zod-validator\n```\n\n```sh\nbun add @hono/zod-validator\n```\n\nAnd import `zValidator`.\n\n```ts\nimport { zValidator } from '@hono/zod-validator'\n```\n\nAnd write as follows.\n\n```ts\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    const validated = c.req.valid('form')\n    // ... use your validated data\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Validation in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Validator**:\n\n```yaml\nimport { validator } from 'hono/validator'\n```\n\nThis snippet shows you how to importing validator, which is an important aspect of validation.\n\n**Validating Form Data**:\n\n```yaml\napp.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const body = value['body']\n    if (!body || typeof body !== 'string') {\n      return c.text('Invalid!', 400)\n    }\n    return {\n      body: body,\n    }\n  }),\n  //...\n)\n```\n\nThis snippet shows you how to validating form data, which is an important aspect of validation.\n\n**Getting Validated Value**:\n\n```yaml\nconst { body } = c.req.valid('form')\n// ... do something\nreturn c.json(\n  {\n    message: 'Created!',\n  },\n  201\n)\n```\n\nThis snippet shows you how to getting validated value, which is an important aspect of validation.\n\n", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Validation in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen validating json, ensure the request contains a Content-Type: application/json header.\n\nUse lowercase names for header validation keys, e.g., use idempotency-key instead of Idempotency-Key.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/guides/validation", "title": "Validation", "description": "Hono provides only a very thin Validator. But, it can be powerful when combined with a third-party Validator. In addition, the RPC feature allows you to share API specifications with your clients through types.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:37:17", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogImage": "https://hono.dev/images/hono-title.png", "favicon": "https://hono.dev/favicon.ico", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "og:image": "https://hono.dev/images/hono-title.png", "og:type": "website", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "title": "Validation - Hono", "language": "en-US", "generator": "VitePress v1.6.3", "twitter:image": "https://hono.dev/images/hono-title.png", "scrapeId": "047e4c69-ca7f-478d-84e3-c8690af4a424", "sourceURL": "https://hono.dev/docs/guides/validation", "url": "https://hono.dev/docs/guides/validation", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Remix is in hono?\n\nAssistant: Sure, I'd be happy to explain Remix in hono.\n\n# Remix\n\nRemix is a Web Standards-based full-stack framework. Now, Remix and Hono can be used together through the fetch API.Here's a quick rundown of what this is about:\n\n## Remix + Hono\n\nYou can use Remix as Hono middleware using Remix + Hono, like this:\n\n```ts\nimport * as build from '@remix-run/dev/server-build'\nimport { remix } from 'remix-hono/handler'\n\napp.use('*', remix({ build, mode: process.env.NODE_ENV }))\n```\n\n## See also\n\n- [Remix](https://remix.run/)\n- [Remix Hono](https://github.com/sergiodxa/remix-hono)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/examples/with-remix", "title": "Remix", "description": "Remix is a Web Standards-based full-stack framework. Now, Remix and Hono can be used together through the fetch API.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:37:25", "type": "overview", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Remix - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1545a210-bd06-446b-8837-1af58c90eb08", "sourceURL": "https://hono.dev/examples/with-remix", "url": "https://hono.dev/examples/with-remix", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I remix + hono in hono?\n\nAssistant: To remix + hono in hono, here's what you do:\nYou can use Remix as Hono middleware using Remix + Hono, like this:\n\n```ts\nimport * as build from '@remix-run/dev/server-build'\nimport { remix } from 'remix-hono/handler'\n\napp.use('*', remix({ build, mode: process.env.NODE_ENV }))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/with-remix", "title": "Remix", "description": "Remix is a Web Standards-based full-stack framework. Now, Remix and Hono can be used together through the fetch API.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:37:25", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Remix - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1545a210-bd06-446b-8837-1af58c90eb08", "sourceURL": "https://hono.dev/examples/with-remix", "url": "https://hono.dev/examples/with-remix", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I see also in hono?\n\nAssistant: To see also in hono, here's what you do:\n- [Remix](https://remix.run/)\n- [Remix Hono](https://github.com/sergiodxa/remix-hono).\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/examples/with-remix", "title": "Remix", "description": "Remix is a Web Standards-based full-stack framework. Now, Remix and Hono can be used together through the fetch API.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:37:25", "type": "section_detail", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Remix - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1545a210-bd06-446b-8837-1af58c90eb08", "sourceURL": "https://hono.dev/examples/with-remix", "url": "https://hono.dev/examples/with-remix", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Remix in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using Remix with Hono**:\n\n```yaml\nimport * as build from '@remix-run/dev/server-build'\nimport { remix } from 'remix-hono/handler'\n\napp.use('*', remix({ build, mode: process.env.NODE_ENV }))\n```\n\nThis snippet shows you how to using remix with hono, which is an important aspect of remix.\n\n", "metadata": {"source_url": "https://hono.dev/examples/with-remix", "title": "Remix", "description": "Remix is a Web Standards-based full-stack framework. Now, Remix and Hono can be used together through the fetch API.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:37:25", "type": "code_examples", "page_metadata": {"description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "title": "Remix - Hono", "favicon": "https://hono.dev/favicon.ico", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "twitter:domain": "hono.dev", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:card": "summary_large_image", "og:image": "https://hono.dev/images/hono-title.png", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "1545a210-bd06-446b-8837-1af58c90eb08", "sourceURL": "https://hono.dev/examples/with-remix", "url": "https://hono.dev/examples/with-remix", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what Web Standards is in hono?\n\nAssistant: Sure, I'd be happy to explain Web Standards in hono.\n\n# Web Standards\n\nHono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.Here's a quick rundown of what this is about:\n\n## Overview\n\nHono uses only **Web Standards** like Fetch. They were originally used in the `fetch` function and consist of basic objects that handle HTTP requests and responses. In addition to `Requests` and `Responses`, there are `URL`, `URLSearchParam`, `Headers` and others.\n\n## Supported Runtimes\n\nHono can run on any runtime that supports Web Standards. In addition, we have a Node.js adapter. Hono runs on these runtimes:\n- Cloudflare Workers ( `workerd`)\n- Deno\n- Bun\n- Fastly Compute\n- AWS Lambda\n- Node.js\n- Vercel (edge-light)\nIt also works on Netlify and other platforms. The same code runs on all platforms.\n\n## Example Code\n\nFor example, a server that returns \"Hello World\" could be written as below. This could run on Cloudflare Workers and Bun.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/concepts/web-standard", "title": "Web Standards", "description": "Hono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:37:54", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "title": "Web Standards - Hono", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "4bf0e8e4-9358-4da4-a0df-2df35d79e4b9", "sourceURL": "https://hono.dev/docs/concepts/web-standard", "url": "https://hono.dev/docs/concepts/web-standard", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I overview in hono?\n\nAssistant: To overview in hono, here's what you do:\nHono uses only **Web Standards** like Fetch. They were originally used in the `fetch` function and consist of basic objects that handle HTTP requests and responses. In addition to `Requests` and `Responses`, there are `URL`, `URLSearchParam`, `Headers` and others..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/web-standard", "title": "Web Standards", "description": "Hono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:37:54", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "title": "Web Standards - Hono", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "4bf0e8e4-9358-4da4-a0df-2df35d79e4b9", "sourceURL": "https://hono.dev/docs/concepts/web-standard", "url": "https://hono.dev/docs/concepts/web-standard", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I supported runtimes in hono?\n\nAssistant: To supported runtimes in hono, here's what you do:\nHono can run on any runtime that supports Web Standards. In addition, we have a Node.js adapter. Hono runs on these runtimes:\n- Cloudflare Workers ( `workerd`)\n- Deno\n- Bun\n- Fastly Compute\n- AWS Lambda\n- Node.js\n- Vercel (edge-light)\nIt also works on Netlify and other platforms. The same code runs on all platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/web-standard", "title": "Web Standards", "description": "Hono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:37:54", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "title": "Web Standards - Hono", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "4bf0e8e4-9358-4da4-a0df-2df35d79e4b9", "sourceURL": "https://hono.dev/docs/concepts/web-standard", "url": "https://hono.dev/docs/concepts/web-standard", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I example code in hono?\n\nAssistant: To example code in hono, here's what you do:\nFor example, a server that returns \"Hello World\" could be written as below. This could run on Cloudflare Workers and Bun..\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/concepts/web-standard", "title": "Web Standards", "description": "Hono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:37:54", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "title": "Web Standards - Hono", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "4bf0e8e4-9358-4da4-a0df-2df35d79e4b9", "sourceURL": "https://hono.dev/docs/concepts/web-standard", "url": "https://hono.dev/docs/concepts/web-standard", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for Web Standards in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Hello World Example**:\n\n```yaml\nexport default {\n  async fetch() {\n    return new Response('Hello World')\n  },\n}\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of web standards.\n\n", "metadata": {"source_url": "https://hono.dev/docs/concepts/web-standard", "title": "Web Standards", "description": "Hono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:37:54", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "title": "Web Standards - Hono", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "4bf0e8e4-9358-4da4-a0df-2df35d79e4b9", "sourceURL": "https://hono.dev/docs/concepts/web-standard", "url": "https://hono.dev/docs/concepts/web-standard", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using Web Standards in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHono follows the steps of WinterCG to enable web-interoperability using Web Standards.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/concepts/web-standard", "title": "Web Standards", "description": "Hono uses only Web Standards like Fetch, which consist of basic objects that handle HTTP requests and responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:37:54", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "title": "Web Standards - Hono", "favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "ogImage": "https://hono.dev/images/hono-title.png", "twitter:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "scrapeId": "4bf0e8e4-9358-4da4-a0df-2df35d79e4b9", "sourceURL": "https://hono.dev/docs/concepts/web-standard", "url": "https://hono.dev/docs/concepts/web-standard", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you explain what AWS Lambda is in hono?\n\nAssistant: Sure, I'd be happy to explain AWS Lambda in hono.\n\n# AWS Lambda\n\nAWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.Here's a quick rundown of what this is about:\n\n## 1. Setup\n\nWhen creating the application on AWS Lambda, CDK is useful to setup the functions such as IAM Role, API Gateway, and others.\n\nInitialize your project with the `cdk` CLI.\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nyarn add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\npnpm add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nbun add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n## 2. Hello World\n\nEdit `lambda/index.ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```\n\n## 3. Deploy\n\nEdit `lib/cdk-stack.ts`.\n\n```ts\nimport * as cdk from 'aws-cdk-lib'\nimport { Construct } from 'constructs'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport * as apigw from 'aws-cdk-lib/aws-apigateway'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\n\nexport class MyAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n\n    const fn = new NodejsFunction(this, 'lambda', {\n      entry: 'lambda/index.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n    fn.addFunctionUrl({\n      authType: lambda.FunctionUrlAuthType.NONE,\n    })\n    new apigw.LambdaRestApi(this, 'myapi', {\n      handler: fn,\n    })\n  }\n}\n```\n\nFinally, run the command to deploy:\n\n```sh\ncdk deploy\n```\n\n## Serve Binary data\n\nHono supports binary data as a response. In Lambda, base64 encoding is required to return binary data. Once binary type is set to `Content-Type` header, Hono automatically encodes data to base64.\n\n```ts\napp.get('/binary', async (c) => {\n  // ...\n  c.status(200)\n  c.header('Content-Type', 'image/png') // means binary data\n  return c.body(buffer) // supports `ArrayBufferLike` type, encoded to base64.\n})\n```\n\n## Access AWS Lambda Object\n\nIn Hono, you can access the AWS Lambda Events and Context by binding the `LambdaEvent`, `LambdaContext` type and using `c.env`\n\n```ts\nimport { Hono } from 'hono'\nimport type { LambdaEvent, LambdaContext } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  event: LambdaEvent\n  lambdaContext: LambdaContext\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/aws-lambda-info/', (c) => {\n  return c.json({\n    isBase64Encoded: c.env.event.isBase64Encoded,\n    awsRequestId: c.env.lambdaContext.awsRequestId,\n  })\n})\n\nexport const handler = handle(app)\n```\n\n## Access RequestContext\n\nIn Hono, you can access the AWS Lambda request context by binding the `LambdaEvent` type and using `c.env.event.requestContext`.\n\n```ts\nimport { Hono } from 'hono'\nimport type { LambdaEvent } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  event: LambdaEvent\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/custom-context/', (c) => {\n  const lambdaContext = c.env.event.requestContext\n  return c.json(lambdaContext)\n})\n\nexport const handler = handle(app)\n```\n\n### Before v3.10.0 (deprecated)\n\nyou can access the AWS Lambda request context by binding the `ApiGatewayRequestContext` type and using `c.env.`\n\n```ts\nimport { Hono } from 'hono'\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  requestContext: ApiGatewayRequestContext\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/custom-context/', (c) => {\n  const lambdaContext = c.env.requestContext\n  return c.json(lambdaContext)\n})\n\nexport const handler = handle(app)\n```\n\n## Lambda response streaming\n\nBy changing the invocation mode of AWS Lambda, you can achieve [Streaming Response](https://aws.amazon.com/blogs/compute/introducing-aws-lambda-response-streaming/).\n\n```diff\nfn.addFunctionUrl({\n  authType: lambda.FunctionUrlAuthType.NONE,\n+  invokeMode: lambda.InvokeMode.RESPONSE_STREAM,\n})\n```\n\nTypically, the implementation requires writing chunks to NodeJS.WritableStream using awslambda.streamifyResponse, but with the AWS Lambda Adaptor, you can achieve the traditional streaming response of Hono by using streamHandle instead of handle.\n\n```ts\nimport { Hono } from 'hono'\nimport { streamHandle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/stream', async (c) => {\n  return streamText(c, async (stream) => {\n    for (let i = 0; i < 3; i++) {\n      await stream.writeln(`${i}`)\n      await stream.sleep(1)\n    }\n  })\n})\n\nconst handler = streamHandle(app)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "overview", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 1. setup in hono?\n\nAssistant: To 1. setup in hono, here's what you do:\nWhen creating the application on AWS Lambda, CDK is useful to setup the functions such as IAM Role, API Gateway, and others.\n\nInitialize your project with the `cdk` CLI.\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nyarn add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\npnpm add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n```sh\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nbun add hono\nmkdir lambda\ntouch lambda/index.ts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 2. hello world in hono?\n\nAssistant: To 2. hello world in hono, here's what you do:\nEdit `lambda/index.ts`.\n\n```ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I 3. deploy in hono?\n\nAssistant: To 3. deploy in hono, here's what you do:\nEdit `lib/cdk-stack.ts`.\n\n```ts\nimport * as cdk from 'aws-cdk-lib'\nimport { Construct } from 'constructs'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport * as apigw from 'aws-cdk-lib/aws-apigateway'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\n\nexport class MyAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n\n    const fn = new NodejsFunction(this, 'lambda', {\n      entry: 'lambda/index.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n    fn.addFunctionUrl({\n      authType: lambda.FunctionUrlAuthType.NONE,\n    })\n    new apigw.LambdaRestApi(this, 'myapi', {\n      handler: fn,\n    })\n  }\n}\n```\n\nFinally, run the command to deploy:\n\n```sh\ncdk deploy\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I serve binary data in hono?\n\nAssistant: To serve binary data in hono, here's what you do:\nHono supports binary data as a response. In Lambda, base64 encoding is required to return binary data. Once binary type is set to `Content-Type` header, Hono automatically encodes data to base64.\n\n```ts\napp.get('/binary', async (c) => {\n  // ...\n  c.status(200)\n  c.header('Content-Type', 'image/png') // means binary data\n  return c.body(buffer) // supports `ArrayBufferLike` type, encoded to base64.\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I access aws lambda object in hono?\n\nAssistant: To access aws lambda object in hono, here's what you do:\nIn Hono, you can access the AWS Lambda Events and Context by binding the `LambdaEvent`, `LambdaContext` type and using `c.env`\n\n```ts\nimport { Hono } from 'hono'\nimport type { LambdaEvent, LambdaContext } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  event: LambdaEvent\n  lambdaContext: LambdaContext\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/aws-lambda-info/', (c) => {\n  return c.json({\n    isBase64Encoded: c.env.event.isBase64Encoded,\n    awsRequestId: c.env.lambdaContext.awsRequestId,\n  })\n})\n\nexport const handler = handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I access requestcontext in hono?\n\nAssistant: To access requestcontext in hono, here's what you do:\nIn Hono, you can access the AWS Lambda request context by binding the `LambdaEvent` type and using `c.env.event.requestContext`.\n\n```ts\nimport { Hono } from 'hono'\nimport type { LambdaEvent } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  event: LambdaEvent\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/custom-context/', (c) => {\n  const lambdaContext = c.env.event.requestContext\n  return c.json(lambdaContext)\n})\n\nexport const handler = handle(app)\n```\n\n### Before v3.10.0 (deprecated)\n\nyou can access the AWS Lambda request context by binding the `ApiGatewayRequestContext` type and using `c.env.`\n\n```ts\nimport { Hono } from 'hono'\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  requestContext: ApiGatewayRequestContext\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/custom-context/', (c) => {\n  const lambdaContext = c.env.requestContext\n  return c.json(lambdaContext)\n})\n\nexport const handler = handle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: How do I lambda response streaming in hono?\n\nAssistant: To lambda response streaming in hono, here's what you do:\nBy changing the invocation mode of AWS Lambda, you can achieve [Streaming Response](https://aws.amazon.com/blogs/compute/introducing-aws-lambda-response-streaming/).\n\n```diff\nfn.addFunctionUrl({\n  authType: lambda.FunctionUrlAuthType.NONE,\n+  invokeMode: lambda.InvokeMode.RESPONSE_STREAM,\n})\n```\n\nTypically, the implementation requires writing chunks to NodeJS.WritableStream using awslambda.streamifyResponse, but with the AWS Lambda Adaptor, you can achieve the traditional streaming response of Hono by using streamHandle instead of handle.\n\n```ts\nimport { Hono } from 'hono'\nimport { streamHandle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/stream', async (c) => {\n  return streamText(c, async (stream) => {\n    for (let i = 0; i < 3; i++) {\n      await stream.writeln(`${i}`)\n      await stream.sleep(1)\n    }\n  })\n})\n\nconst handler = streamHandle(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "section_detail", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: Can you give me some code examples for AWS Lambda in hono?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup Commands**:\n\n```yaml\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\nThis snippet shows you how to setup commands, which is an important aspect of aws lambda.\n\n**Setup Commands (Yarn)**:\n\n```yaml\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nyarn add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\nThis snippet shows you how to setup commands (yarn), which is an important aspect of aws lambda.\n\n**Setup Commands (pnpm)**:\n\n```yaml\nmkdir my-app\ncd my-app\ncdk init app -l typescript\npnpm add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\nThis snippet shows you how to setup commands (pnpm), which is an important aspect of aws lambda.\n\n**Setup Commands (bun)**:\n\n```yaml\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nbun add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\nThis snippet shows you how to setup commands (bun), which is an important aspect of aws lambda.\n\n**Hello World Example**:\n\n```yaml\nimport { Hono } from 'hono'\nimport { handle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```\n\nThis snippet shows you how to hello world example, which is an important aspect of aws lambda.\n\n", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "code_examples", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
{"text": "System: You are a helpful hono expert.\n\nUser: What are some tips for using AWS Lambda in hono effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHono supports binary data as a response. In Lambda, base64 encoding is required to return binary data. Once binary type is set to `Content-Type` header, Hono automatically encodes data to base64.\n\nBy changing the invocation mode of AWS Lambda, you can achieve Streaming Response.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://hono.dev/docs/getting-started/aws-lambda", "title": "AWS Lambda", "description": "AWS Lambda is a serverless platform by Amazon Web Services. You can run your code in response to events and automatically manages the underlying compute resources for you. Hono works on AWS Lambda with the Node.js 18+ environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:39:30", "type": "best_practices", "page_metadata": {"favicon": "https://hono.dev/favicon.ico", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://hono.dev/images/hono-title.png", "twitter:domain": "hono.dev", "twitter:card": "summary_large_image", "twitter:image": "https://hono.dev/images/hono-title.png", "description": "Web framework built on Web Standards for Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Node.js, and others. Fast, but not only fast.", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "title": "AWS Lambda - Hono", "ogImage": "https://hono.dev/images/hono-title.png", "scrapeId": "51b0a0bf-99ab-4655-9464-c00d0512671e", "sourceURL": "https://hono.dev/docs/getting-started/aws-lambda", "url": "https://hono.dev/docs/getting-started/aws-lambda", "statusCode": 200}}}
