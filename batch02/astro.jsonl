{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build your first Astro Blog is in astro?\n\nAssistant: Sure, I'd be happy to explain Build your first Astro Blog in astro.\n\n# Build your first Astro Blog\n\nIn this tutorial, you‚Äôll learn Astro‚Äôs key features by building a fully-functioning blog, from zero to full launch! üöÄHere's a quick rundown of what this is about:\n\n## Checklist\n\n- Looks great! I‚Äôm ready to get started!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction", "title": "Build your first Astro Blog", "description": "In this tutorial, you‚Äôll learn Astro‚Äôs key features by building a fully-functioning blog, from zero to full launch! üöÄ", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:22", "type": "overview", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "og:site_name": "Docs", "ogSiteName": "Docs", "og:title": "Build your first Astro Blog", "og:description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "twitter:card": "summary_large_image", "title": "Build your first Astro Blog | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/", "description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "ogTitle": "Build your first Astro Blog", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "docsearch:language": "en", "ogDescription": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "scrapeId": "85f2c128-21c3-4d21-bb97-d5725fcf326f", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction", "url": "https://docs.astro.build/en/tutorial/0-introduction/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- Looks great! I‚Äôm ready to get started!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction", "title": "Build your first Astro Blog", "description": "In this tutorial, you‚Äôll learn Astro‚Äôs key features by building a fully-functioning blog, from zero to full launch! üöÄ", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:22", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "og:site_name": "Docs", "ogSiteName": "Docs", "og:title": "Build your first Astro Blog", "og:description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "twitter:card": "summary_large_image", "title": "Build your first Astro Blog | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/", "description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "ogTitle": "Build your first Astro Blog", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "docsearch:language": "en", "ogDescription": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "scrapeId": "85f2c128-21c3-4d21-bb97-d5725fcf326f", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction", "url": "https://docs.astro.build/en/tutorial/0-introduction/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build your first Astro Blog in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSet up your development environment\n\nCreate pages and blog posts for your website\n\nBuild with Astro components\n\nQuery and work with local files\n\nAdd interactivity to your site\n\nDeploy your site to the web\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction", "title": "Build your first Astro Blog", "description": "In this tutorial, you‚Äôll learn Astro‚Äôs key features by building a fully-functioning blog, from zero to full launch! üöÄ", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:22", "type": "best_practices", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "og:site_name": "Docs", "ogSiteName": "Docs", "og:title": "Build your first Astro Blog", "og:description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "twitter:card": "summary_large_image", "title": "Build your first Astro Blog | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/", "description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "ogTitle": "Build your first Astro Blog", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp", "docsearch:language": "en", "ogDescription": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", "scrapeId": "85f2c128-21c3-4d21-bb97-d5725fcf326f", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction", "url": "https://docs.astro.build/en/tutorial/0-introduction/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site in astro.\n\n# Deploy your Astro Site\n\nReady to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.Here's a quick rundown of what this is about:\n\n## Deployment Guides\n\n- Netlify: SSRStatic\n- Vercel: SSRStatic\n- Deno Deploy: SSRStatic\n- GitHub Pages: Static\n- GitLab Pages: Static\n- Cloudflare Pages: SSRStatic\n- AWS: Static\n- AWS via Flightcontrol: SSRStatic\n- AWS via SST: SSRStatic\n- Clever Cloud: SSRStatic\n- Azion: SSRStatic\n- Google Cloud: SSRStatic\n- Google Firebase: SSRStatic\n- Heroku: Static\n- Microsoft Azure: Static\n- Buddy: Static\n- Edgio: SSRStatic\n- Fleek: Static\n- Fly.io: SSRStatic\n- Render: Static\n- Stormkit: Static\n- Surge: Static\n- Cleavr: SSRStatic\n- Kinsta: SSRStatic\n- Zeabur: SSRStatic\n- Zerops: SSRStatic\n\n## Quick Deploy Options\n\nYou can build and deploy an Astro site to a number of hosts quickly using either their website‚Äôs dashboard UI or a CLI.\n\n## Website UI\n\nA quick way to deploy your website is to connect your Astro project‚Äôs online Git repository (e.g. GitHub, GitLab, Bitbucket) to a host provider and take advantage of continuous deployment using Git. These host platforms automatically detect pushes to your Astro project‚Äôs source repository, build your site and deploy it to the web at a custom URL or your personal domain. Often, setting up a deployment on these platforms will follow steps something like the following:\n\n1. Add your repository to an online Git provider (e.g. in GitHub, GitLab, Bitbucket)\n2. Choose a host that supports continuous deployment (e.g. Netlify or Vercel) and import your Git repository as a new site/project.\n3. Click ‚ÄúDeploy‚Äù and your new website will be created at a unique URL for that host (e.g. new-astro-site.netlify.app). The host will be automatically configured to watch your Git provider‚Äôs main branch for changes, and to rebuild and republish your site at each new commit. These settings can typically be configured in your host provider‚Äôs dashboard UI.\n\n## CLI Deployment\n\nSome hosts will have their own command line interface (CLI) you can install globally to your machine using npm. Often, using a CLI to deploy looks something like the following:\n\n1. Install your host‚Äôs CLI globally, for example:\n\n```\nnpm install --global netlify-cli\n```\n```\npnpm add --global netlify-cli\n```\n```\nyarn global add netlify-cli\n```\n\n2. Run the CLI and follow any instructions for authorization, setup etc.\n3. Build your site and deploy to your host. Many common hosts will build and deploy your site for you. They will usually recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy as shown below. (If not, these settings can be changed.) Other hosts will require you to build your site locally and deploy using the command line.\n\n## Building Your Site Locally\n\nMany hosts like Netlify and Vercel will build your site for you and then publish that build output to the web. But, some sites will require you to build locally and then run a deploy command or upload your build output. You may also wish to build locally to preview your site, or to catch any potential errors and warnings in your own environment. Run the command `npm run build` to build your Astro site.\n\n```\nnpm run build\n```\n```\npnpm run build\n```\n```\nyarn run build\n```\n\nBy default, the build output will be placed at `dist/`. This location can be changed using the `outDir` configuration option.\n\n## Adding an Adapter for on-demand rendering\n\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "overview", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I deployment guides in astro?\n\nAssistant: To deployment guides in astro, here's what you do:\n- Netlify: SSRStatic\n- Vercel: SSRStatic\n- Deno Deploy: SSRStatic\n- GitHub Pages: Static\n- GitLab Pages: Static\n- Cloudflare Pages: SSRStatic\n- AWS: Static\n- AWS via Flightcontrol: SSRStatic\n- AWS via SST: SSRStatic\n- Clever Cloud: SSRStatic\n- Azion: SSRStatic\n- Google Cloud: SSRStatic\n- Google Firebase: SSRStatic\n- Heroku: Static\n- Microsoft Azure: Static\n- Buddy: Static\n- Edgio: SSRStatic\n- Fleek: Static\n- Fly.io: SSRStatic\n- Render: Static\n- Stormkit: Static\n- Surge: Static\n- Cleavr: SSRStatic\n- Kinsta: SSRStatic\n- Zeabur: SSRStatic\n- Zerops: SSRStatic.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "section_detail", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I quick deploy options in astro?\n\nAssistant: To quick deploy options in astro, here's what you do:\nYou can build and deploy an Astro site to a number of hosts quickly using either their website‚Äôs dashboard UI or a CLI..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "section_detail", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I website ui in astro?\n\nAssistant: To website ui in astro, here's what you do:\nA quick way to deploy your website is to connect your Astro project‚Äôs online Git repository (e.g. GitHub, GitLab, Bitbucket) to a host provider and take advantage of continuous deployment using Git. These host platforms automatically detect pushes to your Astro project‚Äôs source repository, build your site and deploy it to the web at a custom URL or your personal domain. Often, setting up a deployment on these platforms will follow steps something like the following:\n\n1. Add your repository to an online Git provider (e.g. in GitHub, GitLab, Bitbucket)\n2. Choose a host that supports continuous deployment (e.g. Netlify or Vercel) and import your Git repository as a new site/project.\n3. Click ‚ÄúDeploy‚Äù and your new website will be created at a unique URL for that host (e.g. new-astro-site.netlify.app). The host will be automatically configured to watch your Git provider‚Äôs main branch for changes, and to rebuild and republish your site at each new commit. These settings can typically be configured in your host provider‚Äôs dashboard UI..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "section_detail", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cli deployment in astro?\n\nAssistant: To cli deployment in astro, here's what you do:\nSome hosts will have their own command line interface (CLI) you can install globally to your machine using npm. Often, using a CLI to deploy looks something like the following:\n\n1. Install your host‚Äôs CLI globally, for example:\n\n```\nnpm install --global netlify-cli\n```\n```\npnpm add --global netlify-cli\n```\n```\nyarn global add netlify-cli\n```\n\n2. Run the CLI and follow any instructions for authorization, setup etc.\n3. Build your site and deploy to your host. Many common hosts will build and deploy your site for you. They will usually recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy as shown below. (If not, these settings can be changed.) Other hosts will require you to build your site locally and deploy using the command line..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "section_detail", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I building your site locally in astro?\n\nAssistant: To building your site locally in astro, here's what you do:\nMany hosts like Netlify and Vercel will build your site for you and then publish that build output to the web. But, some sites will require you to build locally and then run a deploy command or upload your build output. You may also wish to build locally to preview your site, or to catch any potential errors and warnings in your own environment. Run the command `npm run build` to build your Astro site.\n\n```\nnpm run build\n```\n```\npnpm run build\n```\n```\nyarn run build\n```\n\nBy default, the build output will be placed at `dist/`. This location can be changed using the `outDir` configuration option..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "section_detail", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding an adapter for on-demand rendering in astro?\n\nAssistant: To adding an adapter for on-demand rendering in astro, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "section_detail", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Netlify CLI**:\n\n```yaml\nnpm install --global netlify-cli\n```\n\nThis snippet shows you how to install netlify cli, which is an important aspect of deploy your astro site.\n\n**Install Netlify CLI with pnpm**:\n\n```yaml\npnpm add --global netlify-cli\n```\n\nThis snippet shows you how to install netlify cli with pnpm, which is an important aspect of deploy your astro site.\n\n**Install Netlify CLI with Yarn**:\n\n```yaml\nyarn global add netlify-cli\n```\n\nThis snippet shows you how to install netlify cli with yarn, which is an important aspect of deploy your astro site.\n\n**Build Astro Site**:\n\n```yaml\nnpm run build\n```\n\nThis snippet shows you how to build astro site, which is an important aspect of deploy your astro site.\n\n**Build Astro Site with pnpm**:\n\n```yaml\npnpm run build\n```\n\nThis snippet shows you how to build astro site with pnpm, which is an important aspect of deploy your astro site.\n\n**Build Astro Site with Yarn**:\n\n```yaml\nyarn run build\n```\n\nThis snippet shows you how to build astro site with yarn, which is an important aspect of deploy your astro site.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "code_examples", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nChoose a host that supports continuous deployment for easier management.\n\nUtilize the CLI for hosts that provide it for streamlined deployment processes.\n\nAlways build your site locally to catch potential errors before deploying.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy", "title": "Deploy your Astro Site", "description": "Ready to build and deploy your Astro site? Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:02:59", "type": "best_practices", "page_metadata": {"title": "Deploy your Astro Site | Docs", "ogLocale": "en", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/", "ogTitle": "Deploy your Astro Site", "og:title": "Deploy your Astro Site", "ogUrl": "https://docs.astro.build/en/guides/deploy/", "ogDescription": "How to deploy your Astro site to the web.", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "og:locale": "en", "description": "How to deploy your Astro site to the web.", "og:description": "How to deploy your Astro site to the web.", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy.webp", "scrapeId": "004dc465-af13-44f0-b4e2-8461c0cf36ff", "sourceURL": "https://docs.astro.build/en/guides/deploy", "url": "https://docs.astro.build/en/guides/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Scripts and event handling is in astro?\n\nAssistant: Sure, I'd be happy to explain Scripts and event handling in astro.\n\n# Scripts and event handling\n\nYou can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.Here's a quick rundown of what this is about:\n\n## Client-Side Scripts\n\nScripts can be used to add event listeners, send analytics data, play animations, and everything else JavaScript can do on the web.\n\n```\n<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from 'canvas-confetti';\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>\n```\n\nBy default, Astro processes and bundles `<script>` tags, adding support for importing npm modules, writing TypeScript, and more.\n\n## Using <script> in Astro\n\nIn `.astro` files, you can add client-side JavaScript by adding one (or more) `<script>` tags.\n\nIn this example, adding the `<Hello />` component to a page will log a message to the browser console.\n\n```\n<h1>Welcome, world!</h1>\n<script>\n  console.log('Welcome, browser console!');\n</script>\n```\n\n## Script processing\n\nBy default, `<script>` tags are processed by Astro.\n\n- Any imports will be bundled, allowing you to import local files or Node modules.\n- The processed script will be injected at where it‚Äôs declared with [`type=\"module\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n- TypeScript is fully supported, including importing TypeScript files.\n- If your component is used several times on a page, the script will only be included once.\n\n```\n<script>\n  // Processed! Bundled! TypeScript-supported!\n  // Importing local scripts and Node modules works.\n</script>\n```\n\nThe `type=\"module\"` attribute makes the browser treat the script as a JavaScript module. This has several performance benefits:\n\n- Rendering is not blocked. The browser continues to process the rest of the HTML while the module script and its dependencies load.\n- The browser waits for HTML to be processed before executing module scripts. You do not need to listen for the ‚Äúload‚Äù event.\n- `async` and `defer` attributes are unnecessary. Module scripts are always deferred.\n\n## Opting out of processing\n\nTo prevent Astro from processing a script, add the `is:inline` directive.\n\n```\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // Local imports are not resolved and will not work.\n  // If in a component, repeats each time the component is used.\n</script>\n```\n\nSee our [directives reference](https://docs.astro.build/en/reference/directives-reference/#script--style-directives) page for more information about the directives available on `<script>` tags.\n\n## Include JavaScript files on your page\n\nYou may want to write your scripts as separate `.js`/ `.ts` files or need to reference an external script on another server. You can do this by referencing these in a `<script>` tag‚Äôs `src` attribute.\n\n## Import local scripts\n\n**When to use this:** when your script lives inside of `src/`.\n\nAstro will build, optimize, and add these scripts to the page for you, following its [script processing rules](https://docs.astro.build/en/guides/client-side-scripts/#script-processing).\n\n```\n<!-- relative path to script at `src/scripts/local.js` -->\n<script src=\"../scripts/local.js\"></script>\n<!-- also works for local TypeScript files -->\n<script src=\"./script-with-types.ts\"></script>\n```\n\n## Load external scripts\n\n**When to use this:** when your JavaScript file lives inside of `public/` or on a CDN.\n\nTo load scripts outside of your project‚Äôs `src/` folder, include the `is:inline` directive. This approach skips the JavaScript processing, bundling, and optimizations that are provided by Astro when you import scripts as described above.\n\n```\n<!-- absolute path to a script at `public/my-script.js` -->\n<script is:inline src=\"/my-script.js\"></script>\n<!-- full URL to a script on a remote server -->\n<script is:inline src=\"https://my-analytics.com/script.js\"></script>\n```\n\n## Common script patterns\n\n### Handle `onclick` and other events\nSome UI frameworks use custom syntax for event handling like `onClick={...}` (React/Preact) or `@click=\"...\"` (Vue). Astro follows standard HTML more closely and does not use custom syntax for events.\nInstead, you can use [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) in a `<script>` tag to handle user interactions.\n\n```\n<button class=\"alert\">Click me!</button>\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll('button.alert');\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => {\n      alert('Button was clicked!');\n    });\n  });\n</script>\n```\n\n### Web components with custom elements\nYou can create your own HTML elements with custom behavior using the Web Components standard. Defining a [custom element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) in a `.astro` component allows you to build interactive components without needing a UI framework library.\nIn this example, we define a new `<astro-heart>` HTML element that tracks how many times you click the heart button and updates the `<span>` with the latest count.\n\n```\n<!-- Wrap the component elements in our custom element ‚Äúastro-heart‚Äù. -->\n<astro-heart>\n  <button aria-label=\"Heart\">üíú</button> √ó <span>0</span>\n</astro-heart>\n<script>\n  // Define the behaviour for our new type of HTML element.\n  class AstroHeart extends HTMLElement {\n    connectedCallback() {\n      let count = 0;\n      const heartButton = this.querySelector('button');\n      const countSpan = this.querySelector('span');\n      // Each time the button is clicked, update the count.\n      heartButton.addEventListener('click', () => {\n        count++;\n        countSpan.textContent = count.toString();\n      });\n    }\n  }\n  // Tell the browser to use our AstroHeart class for <astro-heart> elements.\n  customElements.define('astro-heart', AstroHeart);\n</script>\n```\n\nThere are two advantages to using a custom element here:\n1. Instead of searching the whole page using `document.querySelector()`, you can use `this.querySelector()`, which only searches within the current custom element instance. This makes it easier to work with only the children of one component instance at a time.\n2. Although a `<script>` only runs once, the browser will run our custom element‚Äôs `constructor()` method each time it finds `<astro-heart>` on the page. This means you can safely write code for one component at a time, even if you intend to use this component multiple times on a page.\n\nYou can learn more about custom elements in [web.dev‚Äôs Reusable Web Components guide](https://web.dev/custom-elements-v1/) and [MDN‚Äôs introduction to custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements).\n\n## Pass frontmatter variables to scripts\n\nIn Astro components, the code in [the frontmatter](https://docs.astro.build/en/basics/astro-components/#the-component-script) between the `---` fences runs on the server and is not available in the browser. To send variables from the server to the client, we need a way to store our variables and then read them when JavaScript runs in the browser.\nOne way to do this is to use [`data-*` attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes) to store the value of variables in your HTML output. Scripts, including custom elements, can then read these attributes using an element‚Äôs `dataset` property once your HTML loads in the browser.\nIn this example component, a `message` prop is stored in a `data-message` attribute, so the custom element can read `this.dataset.message` and get the value of the prop in the browser.\n\n```\n---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n<!-- Store the message prop as a data attribute. -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      // Read the message from the data attribute.\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n    }\n  }\n  customElements.define('astro-greet', AstroGreet);\n</script>\n```\n\nNow we can use our component multiple times and be greeted by a different message for each one.\n\n```\n---\nimport AstroGreet from '../components/AstroGreet.astro';\n---\n<!-- Use the default message: ‚ÄúWelcome, world!‚Äù -->\n<AstroGreet />\n<!-- Use custom messages passed as a props. -->\n<AstroGreet message=\"Lovely day to build components!\" />\n<AstroGreet message=\"Glad you made it! üëã\" />\n```\n\n## Combining scripts and UI Frameworks\n\nElements rendered by a UI framework may not be available yet when a `<script>` tag executes. If your script also needs to handle [UI framework components](https://docs.astro.build/en/guides/framework-components/), using a custom element is recommended.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "overview", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I client-side scripts in astro?\n\nAssistant: To client-side scripts in astro, here's what you do:\nScripts can be used to add event listeners, send analytics data, play animations, and everything else JavaScript can do on the web.\n\n```\n<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from 'canvas-confetti';\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>\n```\n\nBy default, Astro processes and bundles `<script>` tags, adding support for importing npm modules, writing TypeScript, and more..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using <script> in astro in astro?\n\nAssistant: To using <script> in astro in astro, here's what you do:\nIn `.astro` files, you can add client-side JavaScript by adding one (or more) `<script>` tags.\n\nIn this example, adding the `<Hello />` component to a page will log a message to the browser console.\n\n```\n<h1>Welcome, world!</h1>\n<script>\n  console.log('Welcome, browser console!');\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I script processing in astro?\n\nAssistant: To script processing in astro, here's what you do:\nBy default, `<script>` tags are processed by Astro.\n\n- Any imports will be bundled, allowing you to import local files or Node modules.\n- The processed script will be injected at where it‚Äôs declared with [`type=\"module\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n- TypeScript is fully supported, including importing TypeScript files.\n- If your component is used several times on a page, the script will only be included once.\n\n```\n<script>\n  // Processed! Bundled! TypeScript-supported!\n  // Importing local scripts and Node modules works.\n</script>\n```\n\nThe `type=\"module\"` attribute makes the browser treat the script as a JavaScript module. This has several performance benefits:\n\n- Rendering is not blocked. The browser continues to process the rest of the HTML while the module script and its dependencies load.\n- The browser waits for HTML to be processed before executing module scripts. You do not need to listen for the ‚Äúload‚Äù event.\n- `async` and `defer` attributes are unnecessary. Module scripts are always deferred..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I opting out of processing in astro?\n\nAssistant: To opting out of processing in astro, here's what you do:\nTo prevent Astro from processing a script, add the `is:inline` directive.\n\n```\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // Local imports are not resolved and will not work.\n  // If in a component, repeats each time the component is used.\n</script>\n```\n\nSee our [directives reference](https://docs.astro.build/en/reference/directives-reference/#script--style-directives) page for more information about the directives available on `<script>` tags..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I include javascript files on your page in astro?\n\nAssistant: To include javascript files on your page in astro, here's what you do:\nYou may want to write your scripts as separate `.js`/ `.ts` files or need to reference an external script on another server. You can do this by referencing these in a `<script>` tag‚Äôs `src` attribute..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I import local scripts in astro?\n\nAssistant: To import local scripts in astro, here's what you do:\n**When to use this:** when your script lives inside of `src/`.\n\nAstro will build, optimize, and add these scripts to the page for you, following its [script processing rules](https://docs.astro.build/en/guides/client-side-scripts/#script-processing).\n\n```\n<!-- relative path to script at `src/scripts/local.js` -->\n<script src=\"../scripts/local.js\"></script>\n<!-- also works for local TypeScript files -->\n<script src=\"./script-with-types.ts\"></script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I load external scripts in astro?\n\nAssistant: To load external scripts in astro, here's what you do:\n**When to use this:** when your JavaScript file lives inside of `public/` or on a CDN.\n\nTo load scripts outside of your project‚Äôs `src/` folder, include the `is:inline` directive. This approach skips the JavaScript processing, bundling, and optimizations that are provided by Astro when you import scripts as described above.\n\n```\n<!-- absolute path to a script at `public/my-script.js` -->\n<script is:inline src=\"/my-script.js\"></script>\n<!-- full URL to a script on a remote server -->\n<script is:inline src=\"https://my-analytics.com/script.js\"></script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I common script patterns in astro?\n\nAssistant: To common script patterns in astro, here's what you do:\n### Handle `onclick` and other events\nSome UI frameworks use custom syntax for event handling like `onClick={...}` (React/Preact) or `@click=\"...\"` (Vue). Astro follows standard HTML more closely and does not use custom syntax for events.\nInstead, you can use [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) in a `<script>` tag to handle user interactions.\n\n```\n<button class=\"alert\">Click me!</button>\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll('button.alert');\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => {\n      alert('Button was clicked!');\n    });\n  });\n</script>\n```\n\n### Web components with custom elements\nYou can create your own HTML elements with custom behavior using the Web Components standard. Defining a [custom element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) in a `.astro` component allows you to build interactive components without needing a UI framework library.\nIn this example, we define a new `<astro-heart>` HTML element that tracks how many times you click the heart button and updates the `<span>` with the latest count.\n\n```\n<!-- Wrap the component elements in our custom element ‚Äúastro-heart‚Äù. -->\n<astro-heart>\n  <button aria-label=\"Heart\">üíú</button> √ó <span>0</span>\n</astro-heart>\n<script>\n  // Define the behaviour for our new type of HTML element.\n  class AstroHeart extends HTMLElement {\n    connectedCallback() {\n      let count = 0;\n      const heartButton = this.querySelector('button');\n      const countSpan = this.querySelector('span');\n      // Each time the button is clicked, update the count.\n      heartButton.addEventListener('click', () => {\n        count++;\n        countSpan.textContent = count.toString();\n      });\n    }\n  }\n  // Tell the browser to use our AstroHeart class for <astro-heart> elements.\n  customElements.define('astro-heart', AstroHeart);\n</script>\n```\n\nThere are two advantages to using a custom element here:\n1. Instead of searching the whole page using `document.querySelector()`, you can use `this.querySelector()`, which only searches within the current custom element instance. This makes it easier to work with only the children of one component instance at a time.\n2. Although a `<script>` only runs once, the browser will run our custom element‚Äôs `constructor()` method each time it finds `<astro-heart>` on the page. This means you can safely write code for one component at a time, even if you intend to use this component multiple times on a page.\n\nYou can learn more about custom elements in [web.dev‚Äôs Reusable Web Components guide](https://web.dev/custom-elements-v1/) and [MDN‚Äôs introduction to custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I pass frontmatter variables to scripts in astro?\n\nAssistant: To pass frontmatter variables to scripts in astro, here's what you do:\nIn Astro components, the code in [the frontmatter](https://docs.astro.build/en/basics/astro-components/#the-component-script) between the `---` fences runs on the server and is not available in the browser. To send variables from the server to the client, we need a way to store our variables and then read them when JavaScript runs in the browser.\nOne way to do this is to use [`data-*` attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes) to store the value of variables in your HTML output. Scripts, including custom elements, can then read these attributes using an element‚Äôs `dataset` property once your HTML loads in the browser.\nIn this example component, a `message` prop is stored in a `data-message` attribute, so the custom element can read `this.dataset.message` and get the value of the prop in the browser.\n\n```\n---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n<!-- Store the message prop as a data attribute. -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      // Read the message from the data attribute.\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n    }\n  }\n  customElements.define('astro-greet', AstroGreet);\n</script>\n```\n\nNow we can use our component multiple times and be greeted by a different message for each one.\n\n```\n---\nimport AstroGreet from '../components/AstroGreet.astro';\n---\n<!-- Use the default message: ‚ÄúWelcome, world!‚Äù -->\n<AstroGreet />\n<!-- Use custom messages passed as a props. -->\n<AstroGreet message=\"Lovely day to build components!\" />\n<AstroGreet message=\"Glad you made it! üëã\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I combining scripts and ui frameworks in astro?\n\nAssistant: To combining scripts and ui frameworks in astro, here's what you do:\nElements rendered by a UI framework may not be available yet when a `<script>` tag executes. If your script also needs to handle [UI framework components](https://docs.astro.build/en/guides/framework-components/), using a custom element is recommended..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Scripts and event handling in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Client-Side Scripts Example**:\n\n```yaml\n<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from 'canvas-confetti';\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>\n```\n\nThis snippet shows you how to client-side scripts example, which is an important aspect of scripts and event handling.\n\n**Using <script> in Astro Example**:\n\n```yaml\n<h1>Welcome, world!</h1>\n<script>\n  console.log('Welcome, browser console!');\n</script>\n```\n\nThis snippet shows you how to using <script> in astro example, which is an important aspect of scripts and event handling.\n\n**Script processing Example**:\n\n```yaml\n<script>\n  // Processed! Bundled! TypeScript-supported!\n  // Importing local scripts and Node modules works.\n</script>\n```\n\nThis snippet shows you how to script processing example, which is an important aspect of scripts and event handling.\n\n**Opting out of processing Example**:\n\n```yaml\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // Local imports are not resolved and will not work.\n  // If in a component, repeats each time the component is used.\n</script>\n```\n\nThis snippet shows you how to opting out of processing example, which is an important aspect of scripts and event handling.\n\n**Import local scripts Example**:\n\n```yaml\n<!-- relative path to script at `src/scripts/local.js` -->\n<script src=\"../scripts/local.js\"></script>\n<!-- also works for local TypeScript files -->\n<script src=\"./script-with-types.ts\"></script>\n```\n\nThis snippet shows you how to import local scripts example, which is an important aspect of scripts and event handling.\n\n**Load external scripts Example**:\n\n```yaml\n<!-- absolute path to a script at `public/my-script.js` -->\n<script is:inline src=\"/my-script.js\"></script>\n<!-- full URL to a script on a remote server -->\n<script is:inline src=\"https://my-analytics.com/script.js\"></script>\n```\n\nThis snippet shows you how to load external scripts example, which is an important aspect of scripts and event handling.\n\n**Handle onclick and other events Example**:\n\n```yaml\n<button class=\"alert\">Click me!</button>\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll('button.alert');\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => {\n      alert('Button was clicked!');\n    });\n  });\n</script>\n```\n\nThis snippet shows you how to handle onclick and other events example, which is an important aspect of scripts and event handling.\n\n**Web components with custom elements Example**:\n\n```yaml\n<astro-heart>\n  <button aria-label=\"Heart\">üíú</button> √ó <span>0</span>\n</astro-heart>\n<script>\n  class AstroHeart extends HTMLElement {\n    connectedCallback() {\n      let count = 0;\n      const heartButton = this.querySelector('button');\n      const countSpan = this.querySelector('span');\n      heartButton.addEventListener('click', () => {\n        count++;\n        countSpan.textContent = count.toString();\n      });\n    }\n  }\n  customElements.define('astro-heart', AstroHeart);\n</script>\n```\n\nThis snippet shows you how to web components with custom elements example, which is an important aspect of scripts and event handling.\n\n**Pass frontmatter variables to scripts Example**:\n\n```yaml\n---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n    }\n  }\n  customElements.define('astro-greet', AstroGreet);\n</script>\n```\n\nThis snippet shows you how to pass frontmatter variables to scripts example, which is an important aspect of scripts and event handling.\n\n**Combining scripts and UI Frameworks Example**:\n\n```yaml\nElements rendered by a UI framework may not be available yet when a `<script>` tag executes. If your script also needs to handle UI framework components, using a custom element is recommended.\n```\n\nThis snippet shows you how to combining scripts and ui frameworks example, which is an important aspect of scripts and event handling.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "code_examples", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Scripts and event handling in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse standard HTML <script> tags for interactivity without a UI framework.\n\nUtilize the is:inline directive to prevent Astro from processing a script.\n\nWhen using custom elements, use this.querySelector() for scoped searches.\n\nStore server-side variables in data-* attributes for client-side access.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/client-side-scripts", "title": "Scripts and event handling", "description": "You can add interactivity to your Astro components without using a UI framework like React, Svelte, Vue, etc. using standard HTML <script> tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:03:51", "type": "best_practices", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogLocale": "en", "og:title": "Scripts and event handling", "og:type": "article", "docsearch:language": "en", "ogDescription": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "ogTitle": "Scripts and event handling", "title": "Scripts and event handling | Docs", "ogUrl": "https://docs.astro.build/en/guides/client-side-scripts/", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/client-side-scripts/", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/client-side-scripts.webp", "og:description": "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", "scrapeId": "1cf403a8-0020-49da-b831-20dd2df929f9", "sourceURL": "https://docs.astro.build/en/guides/client-side-scripts", "url": "https://docs.astro.build/en/guides/client-side-scripts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Components is in astro?\n\nAssistant: Sure, I'd be happy to explain Components in astro.\n\n# Components\n\nAstro components are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the .astro file extension.Here's a quick rundown of what this is about:\n\n## Component Structure\n\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n```\n---\n\n// Component Script (JavaScript)\n\n---\n\n<!-- Component Template (HTML + JS Expressions) -->\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-components", "title": "Components", "description": "Astro components are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the .astro file extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:05:15", "type": "overview", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogDescription": "An introduction to Astro components.", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "description": "An introduction to Astro components.", "viewport": "width=device-width, initial-scale=1", "docsearch:language": "en", "og:title": "Components", "og:locale": "en", "og:type": "article", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogUrl": "https://docs.astro.build/en/basics/astro-components/", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "title": "Components | Docs", "ogTitle": "Components", "twitter:card": "summary_large_image", "og:description": "An introduction to Astro components.", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/basics/astro-components/", "twitter:site": "astrodotbuild", "scrapeId": "31ef2a8f-c9fd-4e42-b35f-0eaaa15651da", "sourceURL": "https://docs.astro.build/en/basics/astro-components", "url": "https://docs.astro.build/en/basics/astro-components/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I component structure in astro?\n\nAssistant: To component structure in astro, here's what you do:\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n```\n---\n\n// Component Script (JavaScript)\n\n---\n\n<!-- Component Template (HTML + JS Expressions) -->\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-components", "title": "Components", "description": "Astro components are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the .astro file extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:05:15", "type": "section_detail", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogDescription": "An introduction to Astro components.", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "description": "An introduction to Astro components.", "viewport": "width=device-width, initial-scale=1", "docsearch:language": "en", "og:title": "Components", "og:locale": "en", "og:type": "article", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogUrl": "https://docs.astro.build/en/basics/astro-components/", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "title": "Components | Docs", "ogTitle": "Components", "twitter:card": "summary_large_image", "og:description": "An introduction to Astro components.", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/basics/astro-components/", "twitter:site": "astrodotbuild", "scrapeId": "31ef2a8f-c9fd-4e42-b35f-0eaaa15651da", "sourceURL": "https://docs.astro.build/en/basics/astro-components", "url": "https://docs.astro.build/en/basics/astro-components/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Components in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**The Component Script**:\n\n```yaml\n---\n\nimport SomeAstroComponent from '../components/SomeAstroComponent.astro';\n\nimport SomeReactComponent from '../components/SomeReactComponent.jsx';\n\nimport someData from '../data/pokemon.json';\n\n// Access passed-in component props, like `<X title=\"Hello, World\" />`\n\nconst { title } = Astro.props;\n\n// Fetch external data, even from a private API or database\n\nconst data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());\n\n---\n\n<!-- Your template here! -->\n```\n\nThis snippet shows you how to the component script, which is an important aspect of components.\n\n**The Component Template**:\n\n```yaml\n---\n\n// Your component script here!\n\nimport Banner from '../components/Banner.astro';\n\nimport Avatar from '../components/Avatar.astro';\n\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\n\nconst myFavoritePokemon = [/* ... */];\n\nconst { title } = Astro.props;\n\n---\n\n<!-- HTML comments supported! -->\n\n{/* JS comment syntax is also valid! */}\n\n<Banner />\n\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n\n<p>{title}</p>\n\n<!-- Delay component rendering and provide fallback loading content: -->\n\n<Avatar server:defer>\n\n  <svg slot=\"fallback\" class=\"generic-avatar\" transition:name=\"avatar\">...</svg>\n\n</Avatar>\n\n<!-- Include other UI framework components with a `client:` directive to hydrate: -->\n\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n\n<ul>\n\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n\n</ul>\n\n<!-- Use a template directive to build class names from multiple strings or even objects! -->\n\n<p class:list={['add', 'dynamic', { classNames: true }]} />\n```\n\nThis snippet shows you how to the component template, which is an important aspect of components.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-components", "title": "Components", "description": "Astro components are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the .astro file extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:05:15", "type": "code_examples", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogDescription": "An introduction to Astro components.", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "description": "An introduction to Astro components.", "viewport": "width=device-width, initial-scale=1", "docsearch:language": "en", "og:title": "Components", "og:locale": "en", "og:type": "article", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogUrl": "https://docs.astro.build/en/basics/astro-components/", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "title": "Components | Docs", "ogTitle": "Components", "twitter:card": "summary_large_image", "og:description": "An introduction to Astro components.", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/basics/astro-components/", "twitter:site": "astrodotbuild", "scrapeId": "31ef2a8f-c9fd-4e42-b35f-0eaaa15651da", "sourceURL": "https://docs.astro.build/en/basics/astro-components", "url": "https://docs.astro.build/en/basics/astro-components/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Components in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAstro components are designed to be reusable and composable.\n\nUse the component script to write any JavaScript code that you need to render your template.\n\nProps can be given default values to use when none are provided.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-components", "title": "Components", "description": "Astro components are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the .astro file extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:05:15", "type": "best_practices", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogDescription": "An introduction to Astro components.", "ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "description": "An introduction to Astro components.", "viewport": "width=device-width, initial-scale=1", "docsearch:language": "en", "og:title": "Components", "og:locale": "en", "og:type": "article", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "ogUrl": "https://docs.astro.build/en/basics/astro-components/", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-components.webp", "title": "Components | Docs", "ogTitle": "Components", "twitter:card": "summary_large_image", "og:description": "An introduction to Astro components.", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/basics/astro-components/", "twitter:site": "astrodotbuild", "scrapeId": "31ef2a8f-c9fd-4e42-b35f-0eaaa15651da", "sourceURL": "https://docs.astro.build/en/basics/astro-components", "url": "https://docs.astro.build/en/basics/astro-components/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to GitLab Pages is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to GitLab Pages in astro.\n\n# Deploy your Astro Site to GitLab Pages\n\nYou can use GitLab Pages to host an Astro site for your GitLab projects, groups, or user account.Here's a quick rundown of what this is about:\n\n## How to deploy\n\nYou can deploy an Astro site to GitLab Pages by using GitLab CI/CD to automatically build and deploy your site. To do this, your source code must be hosted on GitLab and you need to make the following changes to your Astro project:\n\n1. Set up `site` and `base` options in `astro.config.mjs`.\n\n   ```\n   import { defineConfig } from 'astro/config';\n   \n   export default defineConfig({\n        site: 'https://<username>.gitlab.io',\n        base: '/<my-repo>',\n        outDir: 'public',\n        publicDir: 'static',\n   });\n   ```\n\n   `site`\n   The value for `site` must be one of the following:\n   - The following URL based on your username: `https://<username>.gitlab.io`\n   - The following URL based on your group name: `https://<groupname>.gitlab.io`\n   - Your custom domain if you have it configured in your GitLab project‚Äôs settings: `https://example.com`\n\n   For GitLab self-managed instances, replace `gitlab.io` with your instance‚Äôs Pages domain.\n\n   `base`\n   A value for `base` may be required so that Astro will treat your repository name (e.g. `/my-repo`) as the root of your website.\n   The value for `base` should be your repository‚Äôs name starting with a forward slash, for example `/my-blog`. This is so that Astro understands your website‚Äôs root is `/my-repo`, rather than the default `/`.\n\n2. Rename the `public/` directory to `static/`.\n\n3. Set `outDir: 'public'` in `astro.config.mjs`. This setting instructs Astro to put the static build output in a folder called `public`, which is the folder required by GitLab Pages for exposed files.\n\n   If you were using the `public/` directory as a source of static files in your Astro project, rename it and use that new folder name in `astro.config.mjs` for the value of `publicDir`.\n\n   For example, here are the correct `astro.config.mjs` settings when the `public/` directory is renamed to `static/`:\n\n   ```\n   import { defineConfig } from 'astro/config';\n   \n   export default defineConfig({\n        outDir: 'public',\n        publicDir: 'static',\n   });\n   ```\n\n4. Change the build output in `.gitignore`. In our example we need to change `dist/` to `public/`:\n\n   ```\n   # build output\n   dist/\n   public/\n   ```\n\n5. Create a file called `.gitlab-ci.yml` in the root of your project with the content below. This will build and deploy your site whenever you make changes to your content:\n\n   ```\n   pages:\n        # The Docker image that will be used to build your app\n        image: node:lts\n   \n        before_script:\n       - npm ci\n   script:\n       # Specify the steps involved to build your app here\n       - npm run build\n   artifacts:\n       paths:\n         # The folder that contains the built files to be published.\n         # This must be called \"public\".\n         - public\n   only:\n       # Trigger a new build and deploy only when there is a push to the\n       # branch(es) below\n       - main\n   ```\n\n6. Commit your changes and push them to GitLab.\n\n7. On GitLab, go to your repository‚Äôs **Deploy** menu and select **Pages**. Here you will see the full URL of your GitLab Pages website. To make sure you are using the URL format `https://username.gitlab.io/my-repo`, uncheck the **Use unique domain** setting on this page.\n\nYour site should now be published! When you push changes to your Astro project‚Äôs repository, the GitLab CI/CD pipeline will automatically deploy them for you.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/gitlab", "title": "Deploy your Astro Site to GitLab Pages", "description": "You can use GitLab Pages to host an Astro site for your GitLab projects, groups, or user account.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:23", "type": "overview", "page_metadata": {"docsearch:language": "en", "ogSiteName": "Docs", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/deploy/gitlab/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/deploy/gitlab/", "description": "How to deploy your Astro site to the web using GitLab Pages.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogTitle": "Deploy your Astro Site to GitLab Pages", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "title": "Deploy your Astro Site to GitLab Pages | Docs", "ogDescription": "How to deploy your Astro site to the web using GitLab Pages.", "og:description": "How to deploy your Astro site to the web using GitLab Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:title": "Deploy your Astro Site to GitLab Pages", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "7722c5b1-2a0f-489c-a949-0c8de0d99a39", "sourceURL": "https://docs.astro.build/en/guides/deploy/gitlab", "url": "https://docs.astro.build/en/guides/deploy/gitlab/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\nYou can deploy an Astro site to GitLab Pages by using GitLab CI/CD to automatically build and deploy your site. To do this, your source code must be hosted on GitLab and you need to make the following changes to your Astro project:\n\n1. Set up `site` and `base` options in `astro.config.mjs`.\n\n   ```\n   import { defineConfig } from 'astro/config';\n   \n   export default defineConfig({\n        site: 'https://<username>.gitlab.io',\n        base: '/<my-repo>',\n        outDir: 'public',\n        publicDir: 'static',\n   });\n   ```\n\n   `site`\n   The value for `site` must be one of the following:\n   - The following URL based on your username: `https://<username>.gitlab.io`\n   - The following URL based on your group name: `https://<groupname>.gitlab.io`\n   - Your custom domain if you have it configured in your GitLab project‚Äôs settings: `https://example.com`\n\n   For GitLab self-managed instances, replace `gitlab.io` with your instance‚Äôs Pages domain.\n\n   `base`\n   A value for `base` may be required so that Astro will treat your repository name (e.g. `/my-repo`) as the root of your website.\n   The value for `base` should be your repository‚Äôs name starting with a forward slash, for example `/my-blog`. This is so that Astro understands your website‚Äôs root is `/my-repo`, rather than the default `/`.\n\n2. Rename the `public/` directory to `static/`.\n\n3. Set `outDir: 'public'` in `astro.config.mjs`. This setting instructs Astro to put the static build output in a folder called `public`, which is the folder required by GitLab Pages for exposed files.\n\n   If you were using the `public/` directory as a source of static files in your Astro project, rename it and use that new folder name in `astro.config.mjs` for the value of `publicDir`.\n\n   For example, here are the correct `astro.config.mjs` settings when the `public/` directory is renamed to `static/`:\n\n   ```\n   import { defineConfig } from 'astro/config';\n   \n   export default defineConfig({\n        outDir: 'public',\n        publicDir: 'static',\n   });\n   ```\n\n4. Change the build output in `.gitignore`. In our example we need to change `dist/` to `public/`:\n\n   ```\n   # build output\n   dist/\n   public/\n   ```\n\n5. Create a file called `.gitlab-ci.yml` in the root of your project with the content below. This will build and deploy your site whenever you make changes to your content:\n\n   ```\n   pages:\n        # The Docker image that will be used to build your app\n        image: node:lts\n   \n        before_script:\n       - npm ci\n   script:\n       # Specify the steps involved to build your app here\n       - npm run build\n   artifacts:\n       paths:\n         # The folder that contains the built files to be published.\n         # This must be called \"public\".\n         - public\n   only:\n       # Trigger a new build and deploy only when there is a push to the\n       # branch(es) below\n       - main\n   ```\n\n6. Commit your changes and push them to GitLab.\n\n7. On GitLab, go to your repository‚Äôs **Deploy** menu and select **Pages**. Here you will see the full URL of your GitLab Pages website. To make sure you are using the URL format `https://username.gitlab.io/my-repo`, uncheck the **Use unique domain** setting on this page.\n\nYour site should now be published! When you push changes to your Astro project‚Äôs repository, the GitLab CI/CD pipeline will automatically deploy them for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/gitlab", "title": "Deploy your Astro Site to GitLab Pages", "description": "You can use GitLab Pages to host an Astro site for your GitLab projects, groups, or user account.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:23", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogSiteName": "Docs", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/deploy/gitlab/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/deploy/gitlab/", "description": "How to deploy your Astro site to the web using GitLab Pages.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogTitle": "Deploy your Astro Site to GitLab Pages", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "title": "Deploy your Astro Site to GitLab Pages | Docs", "ogDescription": "How to deploy your Astro site to the web using GitLab Pages.", "og:description": "How to deploy your Astro site to the web using GitLab Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:title": "Deploy your Astro Site to GitLab Pages", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "7722c5b1-2a0f-489c-a949-0c8de0d99a39", "sourceURL": "https://docs.astro.build/en/guides/deploy/gitlab", "url": "https://docs.astro.build/en/guides/deploy/gitlab/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to GitLab Pages in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**astro.config.mjs settings for GitLab Pages**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n     site: 'https://<username>.gitlab.io',\n     base: '/<my-repo>',\n     outDir: 'public',\n     publicDir: 'static',\n});\n```\n\nThis snippet shows you how to astro.config.mjs settings for gitlab pages, which is an important aspect of deploy your astro site to gitlab pages.\n\n**astro.config.mjs settings after renaming public to static**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n     outDir: 'public',\n     publicDir: 'static',\n});\n```\n\nThis snippet shows you how to astro.config.mjs settings after renaming public to static, which is an important aspect of deploy your astro site to gitlab pages.\n\n**.gitignore changes**:\n\n```yaml\n# build output\ndist/\npublic/ \n\n```\n\nThis snippet shows you how to .gitignore changes, which is an important aspect of deploy your astro site to gitlab pages.\n\n**.gitlab-ci.yml configuration**:\n\n```yaml\npages:\n     # The Docker image that will be used to build your app\n     image: node:lts\n\n     before_script:\n    - npm ci\nscript:\n    # Specify the steps involved to build your app here\n    - npm run build\nartifacts:\n    paths:\n      # The folder that contains the built files to be published.\n      # This must be called \"public\".\n      - public\nonly:\n    # Trigger a new build and deploy only when there is a push to the\n    # branch(es) below\n    - main\n```\n\nThis snippet shows you how to .gitlab-ci.yml configuration, which is an important aspect of deploy your astro site to gitlab pages.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/gitlab", "title": "Deploy your Astro Site to GitLab Pages", "description": "You can use GitLab Pages to host an Astro site for your GitLab projects, groups, or user account.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:23", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "ogSiteName": "Docs", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/deploy/gitlab/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/deploy/gitlab/", "description": "How to deploy your Astro site to the web using GitLab Pages.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogTitle": "Deploy your Astro Site to GitLab Pages", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "title": "Deploy your Astro Site to GitLab Pages | Docs", "ogDescription": "How to deploy your Astro site to the web using GitLab Pages.", "og:description": "How to deploy your Astro site to the web using GitLab Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:title": "Deploy your Astro Site to GitLab Pages", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "7722c5b1-2a0f-489c-a949-0c8de0d99a39", "sourceURL": "https://docs.astro.build/en/guides/deploy/gitlab", "url": "https://docs.astro.build/en/guides/deploy/gitlab/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to GitLab Pages in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure your source code is hosted on GitLab before deploying.\n\nMake sure to set the correct `site` and `base` options in `astro.config.mjs`.\n\nRename the `public/` directory to `static/` and update `publicDir` accordingly.\n\nUpdate your `.gitignore` to reflect the new build output directory.\n\nCreate a `.gitlab-ci.yml` file to automate the build and deployment process.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/gitlab", "title": "Deploy your Astro Site to GitLab Pages", "description": "You can use GitLab Pages to host an Astro site for your GitLab projects, groups, or user account.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:23", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "ogSiteName": "Docs", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/deploy/gitlab/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/deploy/gitlab/", "description": "How to deploy your Astro site to the web using GitLab Pages.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogTitle": "Deploy your Astro Site to GitLab Pages", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "title": "Deploy your Astro Site to GitLab Pages | Docs", "ogDescription": "How to deploy your Astro site to the web using GitLab Pages.", "og:description": "How to deploy your Astro site to the web using GitLab Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/gitlab.webp", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:title": "Deploy your Astro Site to GitLab Pages", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "7722c5b1-2a0f-489c-a949-0c8de0d99a39", "sourceURL": "https://docs.astro.build/en/guides/deploy/gitlab", "url": "https://docs.astro.build/en/guides/deploy/gitlab/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Cloudflare Pages is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Cloudflare Pages in astro.\n\n# Deploy your Astro Site to Cloudflare Pages\n\nYou can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nTo get started, you will need:\n\n- A Cloudflare account. If you don‚Äôt already have one, you can create a free Cloudflare account during the process.\n- Your app code pushed to a GitHub or a GitLab repository.\n\n## How to deploy a site with Git\n\n1. Push your code to your git repository (GitHub, GitLab).\n\n2. Set up a new project on Cloudflare Pages. Use the following build settings:\n   - **Framework preset**: `Astro`\n   - **Build command:** `npm run build`\n   - **Build output directory:** `dist`\n3. Click the **Save and Deploy** button.\n\n## How to deploy a site using Wrangler\n\n1. Install Wrangler CLI.\n\n2. Authenticate Wrangler with your Cloudflare account using `wrangler login`.\n\n3. Run your build command.\n\n4. Deploy using `npx wrangler pages deploy dist`.\n\n## Enabling Preview locally with Wrangler\n\nFor the preview to work, you must install `wrangler`\n\n```\npnpm add wrangler --save-dev\n```\n\nIt‚Äôs then possible to update the preview script to run `wrangler` instead of Astro‚Äôs built-in preview command:\n\n```\n\"preview\": \"wrangler pages dev ./dist\"\n```\n\n## How to deploy an SSR site\n\nYou can build an Astro SSR site for deployment to Cloudflare Pages using the `@astrojs/cloudflare` adapter.\n\nFollow the steps below to set up the adapter. You can then deploy using either of the approaches documented above.\n\n## Quick install\n\nAdd the Cloudflare adapter to enable SSR in your Astro project with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n```\nnpx astro add cloudflare\n```\n\n## Manual install\n\nIf you prefer to install the adapter manually instead, complete the following two steps:\n\n1. Add the `@astrojs/cloudflare` adapter to your project‚Äôs dependencies using your preferred package manager. If you‚Äôre using npm or aren‚Äôt sure, run this in the terminal:\n\n```\nnpm install @astrojs/cloudflare\n```\n\n2. Add the following to your `astro.config.mjs` file:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport cloudflare from '@astrojs/cloudflare';\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: cloudflare()\n\n});\n```\n\n## Troubleshooting\n\n### Client-side hydration\n\nClient-side hydration may fail as a result of Cloudflare‚Äôs Auto Minify setting. If you see `Hydration completed but contains mismatches` in the console, make sure to disable Auto Minify under Cloudflare settings.\n\n### Node.js runtime APIs\n\nIf you are building a project that is using on-demand rendering with the Cloudflare SSR adapter and the server fails to build with an error message such as `[Error] Could not resolve \"XXXX. The package \"XXXX\" wasn't found on the file system but is built into node.`:\n\n- This means that a package or import you are using in the server-side environment is not compatible with the Cloudflare runtime APIs.\n\n- If you are directly importing a Node.js runtime API, please refer to the Astro documentation on Cloudflare‚Äôs Node.js compatibility for further steps on how to resolve this.\n\n- If you are importing a package that imports a Node.js runtime API, check with the author of the package to see if they support the `node:*` import syntax. If they do not, you may need to find an alternative package.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "overview", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nTo get started, you will need:\n\n- A Cloudflare account. If you don‚Äôt already have one, you can create a free Cloudflare account during the process.\n- Your app code pushed to a GitHub or a GitLab repository..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy a site with git in astro?\n\nAssistant: To how to deploy a site with git in astro, here's what you do:\n1. Push your code to your git repository (GitHub, GitLab).\n\n2. Set up a new project on Cloudflare Pages. Use the following build settings:\n   - **Framework preset**: `Astro`\n   - **Build command:** `npm run build`\n   - **Build output directory:** `dist`\n3. Click the **Save and Deploy** button..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy a site using wrangler in astro?\n\nAssistant: To how to deploy a site using wrangler in astro, here's what you do:\n1. Install Wrangler CLI.\n\n2. Authenticate Wrangler with your Cloudflare account using `wrangler login`.\n\n3. Run your build command.\n\n4. Deploy using `npx wrangler pages deploy dist`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I enabling preview locally with wrangler in astro?\n\nAssistant: To enabling preview locally with wrangler in astro, here's what you do:\nFor the preview to work, you must install `wrangler`\n\n```\npnpm add wrangler --save-dev\n```\n\nIt‚Äôs then possible to update the preview script to run `wrangler` instead of Astro‚Äôs built-in preview command:\n\n```\n\"preview\": \"wrangler pages dev ./dist\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy an ssr site in astro?\n\nAssistant: To how to deploy an ssr site in astro, here's what you do:\nYou can build an Astro SSR site for deployment to Cloudflare Pages using the `@astrojs/cloudflare` adapter.\n\nFollow the steps below to set up the adapter. You can then deploy using either of the approaches documented above..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I quick install in astro?\n\nAssistant: To quick install in astro, here's what you do:\nAdd the Cloudflare adapter to enable SSR in your Astro project with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n```\nnpx astro add cloudflare\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nIf you prefer to install the adapter manually instead, complete the following two steps:\n\n1. Add the `@astrojs/cloudflare` adapter to your project‚Äôs dependencies using your preferred package manager. If you‚Äôre using npm or aren‚Äôt sure, run this in the terminal:\n\n```\nnpm install @astrojs/cloudflare\n```\n\n2. Add the following to your `astro.config.mjs` file:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport cloudflare from '@astrojs/cloudflare';\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: cloudflare()\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I troubleshooting in astro?\n\nAssistant: To troubleshooting in astro, here's what you do:\n### Client-side hydration\n\nClient-side hydration may fail as a result of Cloudflare‚Äôs Auto Minify setting. If you see `Hydration completed but contains mismatches` in the console, make sure to disable Auto Minify under Cloudflare settings.\n\n### Node.js runtime APIs\n\nIf you are building a project that is using on-demand rendering with the Cloudflare SSR adapter and the server fails to build with an error message such as `[Error] Could not resolve \"XXXX. The package \"XXXX\" wasn't found on the file system but is built into node.`:\n\n- This means that a package or import you are using in the server-side environment is not compatible with the Cloudflare runtime APIs.\n\n- If you are directly importing a Node.js runtime API, please refer to the Astro documentation on Cloudflare‚Äôs Node.js compatibility for further steps on how to resolve this.\n\n- If you are importing a package that imports a Node.js runtime API, check with the author of the package to see if they support the `node:*` import syntax. If they do not, you may need to find an alternative package..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Cloudflare Pages in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Wrangler CLI**:\n\n```yaml\nnpm install -g wrangler\n```\n\nThis snippet shows you how to install wrangler cli, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**Login to Cloudflare account from CLI**:\n\n```yaml\nwrangler login\n```\n\nThis snippet shows you how to login to cloudflare account from cli, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**Run your build command**:\n\n```yaml\nnpm run build\n```\n\nThis snippet shows you how to run your build command, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**Create new deployment**:\n\n```yaml\nnpx wrangler pages deploy dist\n```\n\nThis snippet shows you how to create new deployment, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**Update preview script**:\n\n```yaml\n\"preview\": \"wrangler pages dev ./dist\"\n```\n\nThis snippet shows you how to update preview script, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**Quick install of Cloudflare adapter**:\n\n```yaml\nnpx astro add cloudflare\n```\n\nThis snippet shows you how to quick install of cloudflare adapter, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**Manual install of Cloudflare adapter**:\n\n```yaml\nnpm install @astrojs/cloudflare\n```\n\nThis snippet shows you how to manual install of cloudflare adapter, which is an important aspect of deploy your astro site to cloudflare pages.\n\n**astro.config.mjs configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport cloudflare from '@astrojs/cloudflare';\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: cloudflare()\n\n});\n```\n\nThis snippet shows you how to astro.config.mjs configuration, which is an important aspect of deploy your astro site to cloudflare pages.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to Cloudflare Pages in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to disable Auto Minify under Cloudflare settings if you encounter hydration mismatches.\n\nRefer to the Astro documentation on Cloudflare‚Äôs Node.js compatibility for resolving issues with Node.js runtime APIs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cloudflare", "title": "Deploy your Astro Site to Cloudflare Pages", "description": "You can deploy your Astro project on Cloudflare Pages, a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:56", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "ogLocale": "en", "og:description": "How to deploy your Astro site to the web using Cloudflare Pages.", "description": "How to deploy your Astro site to the web using Cloudflare Pages.", "ogDescription": "How to deploy your Astro site to the web using Cloudflare Pages.", "title": "Deploy your Astro Site to Cloudflare Pages | Docs", "language": "en", "og:title": "Deploy your Astro Site to Cloudflare Pages", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cloudflare.webp", "ogTitle": "Deploy your Astro Site to Cloudflare Pages", "ogUrl": "https://docs.astro.build/en/guides/deploy/cloudflare/", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "scrapeId": "482872ff-8f76-4f0a-9371-fb9a7ed7e7fa", "sourceURL": "https://docs.astro.build/en/guides/deploy/cloudflare", "url": "https://docs.astro.build/en/guides/deploy/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Check in: Unit 4 - Layouts is in astro?\n\nAssistant: Sure, I'd be happy to explain Check in: Unit 4 - Layouts in astro.\n\n# Check in: Unit 4 - Layouts\n\nNow that you can build with components, it‚Äôs time to create some custom layouts!Here's a quick rundown of what this is about:\n\n## Looking ahead\n\nIn this unit, you‚Äôll build layouts to share common elements and styles across your pages and blog posts.\n\nTo do this, you will:\n\n- Create reusable layout components\n- Pass content to your layouts with `<slot />`\n- Pass data from Markdown frontmatter to your layouts\n- Nest multiple layouts\n\n## Checklist\n\n- I am ready to take my page design to the next level with layouts!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts", "title": "Check in: Unit 4 - Layouts", "description": "Now that you can build with components, it‚Äôs time to create some custom layouts!", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:15:06", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Check in: Unit 4 - Layouts", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "docsearch:language": "en", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "title": "Check in: Unit 4 - Layouts | Docs", "ogTitle": "Check in: Unit 4 - Layouts", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/", "og:locale": "en", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/", "scrapeId": "8563ab09-2bf0-48f5-83d7-d9e38c9656e1", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts", "url": "https://docs.astro.build/en/tutorial/4-layouts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I looking ahead in astro?\n\nAssistant: To looking ahead in astro, here's what you do:\nIn this unit, you‚Äôll build layouts to share common elements and styles across your pages and blog posts.\n\nTo do this, you will:\n\n- Create reusable layout components\n- Pass content to your layouts with `<slot />`\n- Pass data from Markdown frontmatter to your layouts\n- Nest multiple layouts.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts", "title": "Check in: Unit 4 - Layouts", "description": "Now that you can build with components, it‚Äôs time to create some custom layouts!", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:15:06", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Check in: Unit 4 - Layouts", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "docsearch:language": "en", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "title": "Check in: Unit 4 - Layouts | Docs", "ogTitle": "Check in: Unit 4 - Layouts", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/", "og:locale": "en", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/", "scrapeId": "8563ab09-2bf0-48f5-83d7-d9e38c9656e1", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts", "url": "https://docs.astro.build/en/tutorial/4-layouts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I am ready to take my page design to the next level with layouts!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts", "title": "Check in: Unit 4 - Layouts", "description": "Now that you can build with components, it‚Äôs time to create some custom layouts!", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:15:06", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Check in: Unit 4 - Layouts", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "docsearch:language": "en", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "title": "Check in: Unit 4 - Layouts | Docs", "ogTitle": "Check in: Unit 4 - Layouts", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse Astro layouts to share common elements and styles across your pages and posts", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts.webp", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/", "og:locale": "en", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/", "scrapeId": "8563ab09-2bf0-48f5-83d7-d9e38c9656e1", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts", "url": "https://docs.astro.build/en/tutorial/4-layouts/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Render is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Render in astro.\n\n# Deploy your Astro Site to Render\n\nYou can deploy your Astro project to Render, a service to build websites with free TLS certificates, a global CDN, DDoS protection, private networks, and auto deploys from Git.Here's a quick rundown of what this is about:\n\n## How to deploy\n\n1. Create a [render.com account](https://dashboard.render.com/) and sign in\n\n2. Click the **New +** button from your dashboard and select **Static Site**\n\n3. Connect your [GitHub](https://github.com/) or [GitLab](https://about.gitlab.com/) repository or alternatively enter the public URL of a public repository\n\n4. Give your website a name, select the branch and specify the build command and publish directory\n   - **Build Command:** `npm run build`\n   - **Publish Directory:** `dist`, for static sites; `dist/client` if you have any pages rendered on demand.\n5. Click the **Create Static Site** button\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/render", "title": "Deploy your Astro Site to Render", "description": "You can deploy your Astro project to Render, a service to build websites with free TLS certificates, a global CDN, DDoS protection, private networks, and auto deploys from Git.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:15:13", "type": "overview", "page_metadata": {"ogLocale": "en", "ogSiteName": "Docs", "description": "How to deploy your Astro site to the web using Render.", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web using Render.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Render | Docs", "docsearch:language": "en", "og:title": "Deploy your Astro Site to Render", "ogDescription": "How to deploy your Astro site to the web using Render.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "og:url": "https://docs.astro.build/en/guides/deploy/render/", "ogTitle": "Deploy your Astro Site to Render", "language": "en", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/render/", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "scrapeId": "4ec88131-aa87-47c7-ba2c-7732abb0207a", "sourceURL": "https://docs.astro.build/en/guides/deploy/render", "url": "https://docs.astro.build/en/guides/deploy/render/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\n1. Create a [render.com account](https://dashboard.render.com/) and sign in\n\n2. Click the **New +** button from your dashboard and select **Static Site**\n\n3. Connect your [GitHub](https://github.com/) or [GitLab](https://about.gitlab.com/) repository or alternatively enter the public URL of a public repository\n\n4. Give your website a name, select the branch and specify the build command and publish directory\n   - **Build Command:** `npm run build`\n   - **Publish Directory:** `dist`, for static sites; `dist/client` if you have any pages rendered on demand.\n5. Click the **Create Static Site** button.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/render", "title": "Deploy your Astro Site to Render", "description": "You can deploy your Astro project to Render, a service to build websites with free TLS certificates, a global CDN, DDoS protection, private networks, and auto deploys from Git.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:15:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogSiteName": "Docs", "description": "How to deploy your Astro site to the web using Render.", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web using Render.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Render | Docs", "docsearch:language": "en", "og:title": "Deploy your Astro Site to Render", "ogDescription": "How to deploy your Astro site to the web using Render.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "og:url": "https://docs.astro.build/en/guides/deploy/render/", "ogTitle": "Deploy your Astro Site to Render", "language": "en", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/render/", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "scrapeId": "4ec88131-aa87-47c7-ba2c-7732abb0207a", "sourceURL": "https://docs.astro.build/en/guides/deploy/render", "url": "https://docs.astro.build/en/guides/deploy/render/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Render in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Build Command and Publish Directory**:\n\n```yaml\n- **Build Command:** `npm run build`\n- **Publish Directory:** `dist`, for static sites; `dist/client` if you have any pages rendered on demand.\n```\n\nThis snippet shows you how to build command and publish directory, which is an important aspect of deploy your astro site to render.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/render", "title": "Deploy your Astro Site to Render", "description": "You can deploy your Astro project to Render, a service to build websites with free TLS certificates, a global CDN, DDoS protection, private networks, and auto deploys from Git.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:15:13", "type": "code_examples", "page_metadata": {"ogLocale": "en", "ogSiteName": "Docs", "description": "How to deploy your Astro site to the web using Render.", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web using Render.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Render | Docs", "docsearch:language": "en", "og:title": "Deploy your Astro Site to Render", "ogDescription": "How to deploy your Astro site to the web using Render.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "og:url": "https://docs.astro.build/en/guides/deploy/render/", "ogTitle": "Deploy your Astro Site to Render", "language": "en", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/render/", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/render.webp", "scrapeId": "4ec88131-aa87-47c7-ba2c-7732abb0207a", "sourceURL": "https://docs.astro.build/en/guides/deploy/render", "url": "https://docs.astro.build/en/guides/deploy/render/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Install Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Install Astro in astro.\n\n# Install Astro\n\nThis page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\n- **Node.js** - `v18.17.1` or `v20.3.0`, `v22.0.0` or higher. ( `v19` and `v21` are not supported.)\n- **Text editor** - We recommend [VS Code](https://code.visualstudio.com/) with our [Official Astro extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode).\n- **Terminal** - Astro is accessed through its command-line interface (CLI).\n\n## Browser compatibility\n\nAstro is built with Vite which targets browsers with modern JavaScript support by default. For a complete reference, you can see the [list of currently supported browser versions in Vite](https://vite.dev/guide/build.html#browser-compatibility).\n\n## Install from the CLI wizard\n\nYou can run `create astro` anywhere on your machine, so there‚Äôs no need to create a new empty directory for your project before you begin. If you don‚Äôt have an empty directory yet for your new project, the wizard will help create one for you automatically.\n\n1. Run the following command in your terminal to start the install wizard:\n\nIf all goes well, you will see a success message followed by some recommended next steps.\n\n2. Now that your project has been created, you can `cd` into your new project directory to begin using Astro.\n\n3. If you skipped the ‚ÄúInstall dependencies?‚Äù step during the CLI wizard, then be sure to install your dependencies before continuing.\n\n4. You can now [start the Astro dev server](https://docs.astro.build/en/develop-and-build/#start-the-astro-dev-server) and see a live preview of your project while you build!\n\n## CLI installation flags\n\nYou can run the `create astro` command with additional flags to customize the setup process (e.g. answering ‚Äúyes‚Äù to all questions, skipping the Houston animation) or your new project (e.g. install git or not, add integrations).\n\n## Add integrations\n\nYou can start a new Astro project and install any [official integrations](https://docs.astro.build/en/guides/integrations-guide/) or community integrations that support the `astro add` command at the same time by passing the `--add` argument to the `create astro` command.\n\n## Use a theme or starter template\n\nYou can start a new Astro project based on an [official example](https://github.com/withastro/astro/tree/main/examples) or the `main` branch of any GitHub repository by passing a `--template` argument to the `create astro` command.\n\n## Manual Setup\n\nThis guide will walk you through the steps to manually install and configure a new Astro project.\n\n1. Create your directory\n\n2. Install Astro\n\n3. Create your first page\n\n4. Create your first static asset\n\n5. Create `astro.config.mjs`\n\n6. Add TypeScript support\n\n7. Next Steps\n\n8. You can now [start the Astro dev server](https://docs.astro.build/en/develop-and-build/#start-the-astro-dev-server) and see a live preview of your project while you build!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "overview", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\n- **Node.js** - `v18.17.1` or `v20.3.0`, `v22.0.0` or higher. ( `v19` and `v21` are not supported.)\n- **Text editor** - We recommend [VS Code](https://code.visualstudio.com/) with our [Official Astro extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode).\n- **Terminal** - Astro is accessed through its command-line interface (CLI)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I browser compatibility in astro?\n\nAssistant: To browser compatibility in astro, here's what you do:\nAstro is built with Vite which targets browsers with modern JavaScript support by default. For a complete reference, you can see the [list of currently supported browser versions in Vite](https://vite.dev/guide/build.html#browser-compatibility)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I install from the cli wizard in astro?\n\nAssistant: To install from the cli wizard in astro, here's what you do:\nYou can run `create astro` anywhere on your machine, so there‚Äôs no need to create a new empty directory for your project before you begin. If you don‚Äôt have an empty directory yet for your new project, the wizard will help create one for you automatically.\n\n1. Run the following command in your terminal to start the install wizard:\n\nIf all goes well, you will see a success message followed by some recommended next steps.\n\n2. Now that your project has been created, you can `cd` into your new project directory to begin using Astro.\n\n3. If you skipped the ‚ÄúInstall dependencies?‚Äù step during the CLI wizard, then be sure to install your dependencies before continuing.\n\n4. You can now [start the Astro dev server](https://docs.astro.build/en/develop-and-build/#start-the-astro-dev-server) and see a live preview of your project while you build!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cli installation flags in astro?\n\nAssistant: To cli installation flags in astro, here's what you do:\nYou can run the `create astro` command with additional flags to customize the setup process (e.g. answering ‚Äúyes‚Äù to all questions, skipping the Houston animation) or your new project (e.g. install git or not, add integrations)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add integrations in astro?\n\nAssistant: To add integrations in astro, here's what you do:\nYou can start a new Astro project and install any [official integrations](https://docs.astro.build/en/guides/integrations-guide/) or community integrations that support the `astro add` command at the same time by passing the `--add` argument to the `create astro` command..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use a theme or starter template in astro?\n\nAssistant: To use a theme or starter template in astro, here's what you do:\nYou can start a new Astro project based on an [official example](https://github.com/withastro/astro/tree/main/examples) or the `main` branch of any GitHub repository by passing a `--template` argument to the `create astro` command..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual setup in astro?\n\nAssistant: To manual setup in astro, here's what you do:\nThis guide will walk you through the steps to manually install and configure a new Astro project.\n\n1. Create your directory\n\n2. Install Astro\n\n3. Create your first page\n\n4. Create your first static asset\n\n5. Create `astro.config.mjs`\n\n6. Add TypeScript support\n\n7. Next Steps\n\n8. You can now [start the Astro dev server](https://docs.astro.build/en/develop-and-build/#start-the-astro-dev-server) and see a live preview of your project while you build!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "section_detail", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Install Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a new project with npm**:\n\n```yaml\nnpm create astro@latest\n```\n\nThis snippet shows you how to create a new project with npm, which is an important aspect of install astro.\n\n**Create a new project with pnpm**:\n\n```yaml\npnpm create astro@latest\n```\n\nThis snippet shows you how to create a new project with pnpm, which is an important aspect of install astro.\n\n**Create a new project with yarn**:\n\n```yaml\nyarn create astro\n```\n\nThis snippet shows you how to create a new project with yarn, which is an important aspect of install astro.\n\n**Install dependencies with npm**:\n\n```yaml\nnpm install\n```\n\nThis snippet shows you how to install dependencies with npm, which is an important aspect of install astro.\n\n**Install dependencies with pnpm**:\n\n```yaml\npnpm install\n```\n\nThis snippet shows you how to install dependencies with pnpm, which is an important aspect of install astro.\n\n**Install dependencies with yarn**:\n\n```yaml\nyarn install\n```\n\nThis snippet shows you how to install dependencies with yarn, which is an important aspect of install astro.\n\n**Create a new project with React and Tailwind CSS using npm**:\n\n```yaml\nnpm create astro@latest -- --add react --add tailwind\n```\n\nThis snippet shows you how to create a new project with react and tailwind css using npm, which is an important aspect of install astro.\n\n**Create a new project with React and Tailwind CSS using pnpm**:\n\n```yaml\npnpm create astro@latest --add react --add tailwind\n```\n\nThis snippet shows you how to create a new project with react and tailwind css using pnpm, which is an important aspect of install astro.\n\n**Create a new project with React and Tailwind CSS using yarn**:\n\n```yaml\nyarn create astro --add react --add tailwind\n```\n\nThis snippet shows you how to create a new project with react and tailwind css using yarn, which is an important aspect of install astro.\n\n**Create a new project with an official example using npm**:\n\n```yaml\nnpm create astro@latest -- --template <example-name>\n```\n\nThis snippet shows you how to create a new project with an official example using npm, which is an important aspect of install astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "code_examples", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Install Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the latest version of Node.js for compatibility.\n\nConsider using VS Code with the Official Astro extension for a better development experience.\n\nAlways check the browser compatibility list to ensure your project works across different browsers.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/install-and-setup", "title": "Install Astro", "description": "This page covers the installation process for Astro, including using the CLI command, prerequisites, and manual setup instructions.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:41", "type": "best_practices", "page_metadata": {"language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/install-and-setup/", "og:description": "How to install Astro and start a new project.", "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "description": "How to install Astro and start a new project.", "og:title": "Install Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "title": "Install Astro | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/install-and-setup/", "ogLocale": "en", "ogDescription": "How to install Astro and start a new project.", "og:locale": "en", "ogTitle": "Install Astro", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "twitter:image": "https://docs.astro.build/open-graph/en/install-and-setup.webp", "docsearch:language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "4cb72efe-be2d-4eda-9856-66c24caff69f", "sourceURL": "https://docs.astro.build/en/install-and-setup", "url": "https://docs.astro.build/en/install-and-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to GitHub Pages is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to GitHub Pages in astro.\n\n# Deploy your Astro Site to GitHub Pages\n\nYou can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.Here's a quick rundown of what this is about:\n\n## How to deploy\n\nYou can deploy an Astro site to GitHub Pages by using GitHub Actions to automatically build and deploy your site. To do this, your source code must be hosted on GitHub.\n\nAstro maintains the official `withastro/action` to deploy your project with very little configuration. Follow the instructions below to deploy your Astro site to GitHub pages, and see the package README if you need more information.\n\n## Configure Astro for GitHub Pages\n\n### Deploying to a `github.io` URL\n\nSet the `site` and `base` options in `astro.config.mjs`.\n\n```\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n\n  site: 'https://astronaut.github.io',\n\n  base: 'my-repo',\n\n})\n```\n\n#### `site`\n\nThe value for `site` must be one of the following:\n\n- The following URL based on your username: `https://<username>.github.io`\n- The random URL autogenerated for a GitHub Organization‚Äôs private page: `https://<random-string>.pages.github.io/`\n\n#### `base`\n\nA value for `base` may be required so that Astro will treat your repository name (e.g. `/my-repo`) as the root of your website.\n\nThe value for `base` should be your repository‚Äôs name starting with a forward slash, for example `/my-blog`. This is so that Astro understands your website‚Äôs root is `/my-repo`, rather than the default `/`.\n\n## Using GitHub pages with a custom domain\n\nTo configure Astro for using GitHub pages with a custom domain, set your domain as the value for `site`. Do not set a value for `base`:\n\n```\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n\n  site: 'https://example.com',\n\n})\n```\n\n## Configure a GitHub Action\n\n1. Create a new file in your project at `.github/workflows/deploy.yml` and paste in the YAML below.\n\n```\nname: Deploy to GitHub Pages\n\non:\n\n     # Trigger the workflow every time you push to the `main` branch\n\n     # Using a different branch name? Replace `main` with your branch‚Äôs name\n     push:\n       branches: [ main ]\n\n     # Allows you to run this workflow manually from the Actions tab on GitHub.\n     workflow_dispatch:\n\n\n# Allow this job to clone the repo and create a page deployment\npermissions:\n     contents: read\n     pages: write\n     id-token: write\n\n\njobs:\n     build:\n       runs-on: ubuntu-latest\n       steps:\n      - name: Checkout your repository using git\n        uses: actions/checkout@v4\n      - name: Install, build, and upload your site\n        uses: withastro/action@v3\n        # with:\n          # path: . # The root location of your Astro project inside the repository. (optional)\n          # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)\n          # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)\n\ndeploy:\n    needs: build\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n2. On GitHub, go to your repository‚Äôs **Settings** tab and find the **Pages** section of the settings.\n\n3. Choose **GitHub Actions** as the **Source** of your site.\n\n4. Commit the new workflow file and push it to GitHub.\n\nYour site should now be published! When you push changes to your Astro project‚Äôs repository, the GitHub Action will automatically deploy them for you.\n\n## Examples\n\n- [Github Pages Deployment](https://github.com/hkbertoson/github-pages)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "overview", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\nYou can deploy an Astro site to GitHub Pages by using GitHub Actions to automatically build and deploy your site. To do this, your source code must be hosted on GitHub.\n\nAstro maintains the official `withastro/action` to deploy your project with very little configuration. Follow the instructions below to deploy your Astro site to GitHub pages, and see the package README if you need more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "section_detail", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configure astro for github pages in astro?\n\nAssistant: To configure astro for github pages in astro, here's what you do:\n### Deploying to a `github.io` URL\n\nSet the `site` and `base` options in `astro.config.mjs`.\n\n```\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n\n  site: 'https://astronaut.github.io',\n\n  base: 'my-repo',\n\n})\n```\n\n#### `site`\n\nThe value for `site` must be one of the following:\n\n- The following URL based on your username: `https://<username>.github.io`\n- The random URL autogenerated for a GitHub Organization‚Äôs private page: `https://<random-string>.pages.github.io/`\n\n#### `base`\n\nA value for `base` may be required so that Astro will treat your repository name (e.g. `/my-repo`) as the root of your website.\n\nThe value for `base` should be your repository‚Äôs name starting with a forward slash, for example `/my-blog`. This is so that Astro understands your website‚Äôs root is `/my-repo`, rather than the default `/`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "section_detail", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using github pages with a custom domain in astro?\n\nAssistant: To using github pages with a custom domain in astro, here's what you do:\nTo configure Astro for using GitHub pages with a custom domain, set your domain as the value for `site`. Do not set a value for `base`:\n\n```\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n\n  site: 'https://example.com',\n\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "section_detail", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configure a github action in astro?\n\nAssistant: To configure a github action in astro, here's what you do:\n1. Create a new file in your project at `.github/workflows/deploy.yml` and paste in the YAML below.\n\n```\nname: Deploy to GitHub Pages\n\non:\n\n     # Trigger the workflow every time you push to the `main` branch\n\n     # Using a different branch name? Replace `main` with your branch‚Äôs name\n     push:\n       branches: [ main ]\n\n     # Allows you to run this workflow manually from the Actions tab on GitHub.\n     workflow_dispatch:\n\n\n# Allow this job to clone the repo and create a page deployment\npermissions:\n     contents: read\n     pages: write\n     id-token: write\n\n\njobs:\n     build:\n       runs-on: ubuntu-latest\n       steps:\n      - name: Checkout your repository using git\n        uses: actions/checkout@v4\n      - name: Install, build, and upload your site\n        uses: withastro/action@v3\n        # with:\n          # path: . # The root location of your Astro project inside the repository. (optional)\n          # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)\n          # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)\n\ndeploy:\n    needs: build\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n2. On GitHub, go to your repository‚Äôs **Settings** tab and find the **Pages** section of the settings.\n\n3. Choose **GitHub Actions** as the **Source** of your site.\n\n4. Commit the new workflow file and push it to GitHub.\n\nYour site should now be published! When you push changes to your Astro project‚Äôs repository, the GitHub Action will automatically deploy them for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "section_detail", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\n- [Github Pages Deployment](https://github.com/hkbertoson/github-pages).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "section_detail", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to GitHub Pages in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Astro Configuration for GitHub Pages**:\n\n```yaml\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n\n  site: 'https://astronaut.github.io',\n\n  base: 'my-repo',\n\n})\n```\n\nThis snippet shows you how to astro configuration for github pages, which is an important aspect of deploy your astro site to github pages.\n\n**Astro Configuration for Custom Domain**:\n\n```yaml\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n\n  site: 'https://example.com',\n\n})\n```\n\nThis snippet shows you how to astro configuration for custom domain, which is an important aspect of deploy your astro site to github pages.\n\n**GitHub Action Configuration**:\n\n```yaml\nname: Deploy to GitHub Pages\n\non:\n\n     push:\n       branches: [ main ]\n\n     workflow_dispatch:\n\npermissions:\n     contents: read\n     pages: write\n     id-token: write\n\njobs:\n     build:\n       runs-on: ubuntu-latest\n       steps:\n      - name: Checkout your repository using git\n        uses: actions/checkout@v4\n      - name: Install, build, and upload your site\n        uses: withastro/action@v3\n\ndeploy:\n    needs: build\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\nThis snippet shows you how to github action configuration, which is an important aspect of deploy your astro site to github pages.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "code_examples", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to GitHub Pages in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure your source code is hosted on GitHub to use GitHub Actions for deployment.\n\nSet the `site` and `base` options correctly in `astro.config.mjs` for proper deployment.\n\nUse the official `withastro/action` for minimal configuration during deployment.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/github", "title": "Deploy your Astro Site to GitHub Pages", "description": "You can use GitHub Pages to host an Astro website directly from a repository on GitHub.com.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:17:43", "type": "best_practices", "page_metadata": {"ogDescription": "How to deploy your Astro site to the web using GitHub Pages.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "title": "Deploy your Astro Site to GitHub Pages | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/deploy/github/", "og:description": "How to deploy your Astro site to the web using GitHub Pages.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/deploy/github/", "og:locale": "en", "og:title": "Deploy your Astro Site to GitHub Pages", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "ogTitle": "Deploy your Astro Site to GitHub Pages", "ogSiteName": "Docs", "og:type": "article", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "description": "How to deploy your Astro site to the web using GitHub Pages.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/github.webp", "viewport": "width=device-width, initial-scale=1", "scrapeId": "0c0621a0-4527-42a5-a0dd-8d5d63d7c138", "sourceURL": "https://docs.astro.build/en/guides/deploy/github", "url": "https://docs.astro.build/en/guides/deploy/github/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Turso & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Turso & Astro in astro.\n\n# Turso & Astro\n\nTurso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.Here's a quick rundown of what this is about:\n\n## Initializing Turso in Astro\n\nThis section covers the steps to initialize Turso in an Astro project.\n\n## Prerequisites\n\n- The Turso CLI installed and signed in\n- A Turso Database with schema\n- Your Database URL\n- An Access Token\n\n## Configure environment variables\n\nObtain your database URL using the following command:\n\nturso db show <database-name> --url\n\nCreate an auth token for the database:\n\nturso db tokens create <database-name>\n\nAdd the output from both commands above into your `.env` file at the root of your project. If this file does not exist, create one.\n\nTURSO_DATABASE_URL=libsql://...\n\nTURSO_AUTH_TOKEN=\n\n## Install LibSQL Client\n\nInstall the `@libsql/client` to connect Turso to Astro:\n- npm\n- pnpm\n- Yarn\n\nnpm install @libsql/client\n\npnpm add @libsql/client\n\nyarn add @libsql/client\n\n## Initialize a new client\n\nCreate a file `turso.ts` in the `src` folder and invoke `createClient`, passing it `TURSO_DATABASE_URL` and `TURSO_AUTH_TOKEN`:\n\nimport { createClient } from \"@libsql/client/web\";\n\nexport const turso = createClient({\n\n  url: import.meta.env.TURSO_DATABASE_URL,\n\n  authToken: import.meta.env.TURSO_AUTH_TOKEN,\n\n});\n\n## Querying your database\n\nTo access information from your database, import `turso` and execute a SQL query inside any `.astro` component.\n\nThe following example fetches all `posts` from your table, then displays a list of titles in a `<BlogIndex />` component:\n\n---\n\nimport { turso } from '../turso'\n\nconst { rows } = await turso.execute('SELECT * FROM posts')\n\n---\n\n<ul>\n\n  {rows.map((post) => (\n\n    <li>{post.title}</li>\n\n  ))}\n\n</ul>\n\n## SQL Placeholders\n\nThe `execute()` method can take an object to pass variables to the SQL statement, such as `slug`, or pagination.\n\nThe following example fetches a single entry from the `posts` table `WHERE` the `slug` is the retrieved value from `Astro.params`, then displays the title of the post.\n\n---\n\nimport { turso } from '../turso'\n\nconst { slug } = Astro.params\n\nconst { rows } = await turso.execute({\n\n  sql: 'SELECT * FROM posts WHERE slug = ?',\n\n  args: [slug!]\n\n})\n\n---\n\n<h1>{rows[0].title}</h1>\n\n## Turso Resources\n\n- Turso Docs\n- Turso on GitHub\n- Using Turso to serve a Server-side Rendered Astro blog‚Äôs content\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "overview", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I initializing turso in astro in astro?\n\nAssistant: To initializing turso in astro in astro, here's what you do:\nThis section covers the steps to initialize Turso in an Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\n- The Turso CLI installed and signed in\n- A Turso Database with schema\n- Your Database URL\n- An Access Token.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configure environment variables in astro?\n\nAssistant: To configure environment variables in astro, here's what you do:\nObtain your database URL using the following command:\n\nturso db show <database-name> --url\n\nCreate an auth token for the database:\n\nturso db tokens create <database-name>\n\nAdd the output from both commands above into your `.env` file at the root of your project. If this file does not exist, create one.\n\nTURSO_DATABASE_URL=libsql://...\n\nTURSO_AUTH_TOKEN=.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I install libsql client in astro?\n\nAssistant: To install libsql client in astro, here's what you do:\nInstall the `@libsql/client` to connect Turso to Astro:\n- npm\n- pnpm\n- Yarn\n\nnpm install @libsql/client\n\npnpm add @libsql/client\n\nyarn add @libsql/client.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I initialize a new client in astro?\n\nAssistant: To initialize a new client in astro, here's what you do:\nCreate a file `turso.ts` in the `src` folder and invoke `createClient`, passing it `TURSO_DATABASE_URL` and `TURSO_AUTH_TOKEN`:\n\nimport { createClient } from \"@libsql/client/web\";\n\nexport const turso = createClient({\n\n  url: import.meta.env.TURSO_DATABASE_URL,\n\n  authToken: import.meta.env.TURSO_AUTH_TOKEN,\n\n});.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I querying your database in astro?\n\nAssistant: To querying your database in astro, here's what you do:\nTo access information from your database, import `turso` and execute a SQL query inside any `.astro` component.\n\nThe following example fetches all `posts` from your table, then displays a list of titles in a `<BlogIndex />` component:\n\n---\n\nimport { turso } from '../turso'\n\nconst { rows } = await turso.execute('SELECT * FROM posts')\n\n---\n\n<ul>\n\n  {rows.map((post) => (\n\n    <li>{post.title}</li>\n\n  ))}\n\n</ul>.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I sql placeholders in astro?\n\nAssistant: To sql placeholders in astro, here's what you do:\nThe `execute()` method can take an object to pass variables to the SQL statement, such as `slug`, or pagination.\n\nThe following example fetches a single entry from the `posts` table `WHERE` the `slug` is the retrieved value from `Astro.params`, then displays the title of the post.\n\n---\n\nimport { turso } from '../turso'\n\nconst { slug } = Astro.params\n\nconst { rows } = await turso.execute({\n\n  sql: 'SELECT * FROM posts WHERE slug = ?',\n\n  args: [slug!]\n\n})\n\n---\n\n<h1>{rows[0].title}</h1>.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I turso resources in astro?\n\nAssistant: To turso resources in astro, here's what you do:\n- Turso Docs\n- Turso on GitHub\n- Using Turso to serve a Server-side Rendered Astro blog‚Äôs content.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Turso & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure environment variables**:\n\n```yaml\nturso db show <database-name> --url\n```\n\nThis snippet shows you how to configure environment variables, which is an important aspect of turso & astro.\n\n**Create auth token**:\n\n```yaml\nturso db tokens create <database-name>\n```\n\nThis snippet shows you how to create auth token, which is an important aspect of turso & astro.\n\n**Install LibSQL Client (npm)**:\n\n```yaml\nnpm install @libsql/client\n```\n\nThis snippet shows you how to install libsql client (npm), which is an important aspect of turso & astro.\n\n**Install LibSQL Client (pnpm)**:\n\n```yaml\npnpm add @libsql/client\n```\n\nThis snippet shows you how to install libsql client (pnpm), which is an important aspect of turso & astro.\n\n**Install LibSQL Client (Yarn)**:\n\n```yaml\nyarn add @libsql/client\n```\n\nThis snippet shows you how to install libsql client (yarn), which is an important aspect of turso & astro.\n\n**Initialize a new client**:\n\n```yaml\nimport { createClient } from \"@libsql/client/web\";\n\nexport const turso = createClient({\n\n  url: import.meta.env.TURSO_DATABASE_URL,\n\n  authToken: import.meta.env.TURSO_AUTH_TOKEN,\n\n});\n```\n\nThis snippet shows you how to initialize a new client, which is an important aspect of turso & astro.\n\n**Querying your database**:\n\n```yaml\nconst { rows } = await turso.execute('SELECT * FROM posts')\n```\n\nThis snippet shows you how to querying your database, which is an important aspect of turso & astro.\n\n**SQL Placeholders**:\n\n```yaml\nconst { rows } = await turso.execute({\n\n  sql: 'SELECT * FROM posts WHERE slug = ?',\n\n  args: [slug!]\n\n})\n```\n\nThis snippet shows you how to sql placeholders, which is an important aspect of turso & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "code_examples", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Turso & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have the Turso CLI installed and signed in before starting.\n\nKeep your `.env` file secure and do not expose it in public repositories.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/turso", "title": "Turso & Astro", "description": "Turso is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:21:27", "type": "best_practices", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/backend/turso/", "ogTitle": "Turso & Astro", "description": "Build locally with a SQLite file and deploy globally using Turso.", "ogLocale": "en", "og:type": "article", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/turso.webp", "ogDescription": "Build locally with a SQLite file and deploy globally using Turso.", "og:url": "https://docs.astro.build/en/guides/backend/turso/", "og:site_name": "Docs", "og:description": "Build locally with a SQLite file and deploy globally using Turso.", "og:title": "Turso & Astro", "title": "Turso & Astro | Docs", "twitter:site": "astrodotbuild", "scrapeId": "79929a07-39a5-47ed-a836-f13c438463ec", "sourceURL": "https://docs.astro.build/en/guides/backend/turso", "url": "https://docs.astro.build/en/guides/backend/turso/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Spinal & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Spinal & Astro in astro.\n\n# Spinal & Astro\n\nSpinal is a commercial, SaaS-focused, Git-based CMS.Here's a quick rundown of what this is about:\n\n## Getting started\n\n1. Create a Spinal account.\n\n2. Connect your GitHub account to Spinal.\n\n3. Select your Astro repository when prompted.\n\nAll Markdown content from the selected folder will be imported into your Spinal account and is ready to be edited.\n\n## Official Resources\n\n- Documentation theme built for Astro with Tailwind CSS\n\n## Production Sites\n\nThe following sites use Astro + Spinal in production:\n\n- spinalcms.com (all blog articles, documentation, changelog, feature pages, etc.)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/spinal", "title": "Spinal & Astro", "description": "Spinal is a commercial, SaaS-focused, Git-based CMS.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:21:45", "type": "overview", "page_metadata": {"ogLocale": "en", "og:description": "Add content to your project using Spinal as your CMS.", "description": "Add content to your project using Spinal as your CMS.", "ogTitle": "Spinal & Astro", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:title": "Spinal & Astro", "title": "Spinal & Astro | Docs", "ogDescription": "Add content to your project using Spinal as your CMS.", "ogUrl": "https://docs.astro.build/en/guides/cms/spinal/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/cms/spinal/", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "3a73a6d1-a761-438e-9763-3265f71018dd", "sourceURL": "https://docs.astro.build/en/guides/cms/spinal", "url": "https://docs.astro.build/en/guides/cms/spinal/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\n1. Create a Spinal account.\n\n2. Connect your GitHub account to Spinal.\n\n3. Select your Astro repository when prompted.\n\nAll Markdown content from the selected folder will be imported into your Spinal account and is ready to be edited..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/spinal", "title": "Spinal & Astro", "description": "Spinal is a commercial, SaaS-focused, Git-based CMS.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:21:45", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:description": "Add content to your project using Spinal as your CMS.", "description": "Add content to your project using Spinal as your CMS.", "ogTitle": "Spinal & Astro", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:title": "Spinal & Astro", "title": "Spinal & Astro | Docs", "ogDescription": "Add content to your project using Spinal as your CMS.", "ogUrl": "https://docs.astro.build/en/guides/cms/spinal/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/cms/spinal/", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "3a73a6d1-a761-438e-9763-3265f71018dd", "sourceURL": "https://docs.astro.build/en/guides/cms/spinal", "url": "https://docs.astro.build/en/guides/cms/spinal/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- Documentation theme built for Astro with Tailwind CSS.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/spinal", "title": "Spinal & Astro", "description": "Spinal is a commercial, SaaS-focused, Git-based CMS.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:21:45", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:description": "Add content to your project using Spinal as your CMS.", "description": "Add content to your project using Spinal as your CMS.", "ogTitle": "Spinal & Astro", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:title": "Spinal & Astro", "title": "Spinal & Astro | Docs", "ogDescription": "Add content to your project using Spinal as your CMS.", "ogUrl": "https://docs.astro.build/en/guides/cms/spinal/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/cms/spinal/", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "3a73a6d1-a761-438e-9763-3265f71018dd", "sourceURL": "https://docs.astro.build/en/guides/cms/spinal", "url": "https://docs.astro.build/en/guides/cms/spinal/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I production sites in astro?\n\nAssistant: To production sites in astro, here's what you do:\nThe following sites use Astro + Spinal in production:\n\n- spinalcms.com (all blog articles, documentation, changelog, feature pages, etc.).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/spinal", "title": "Spinal & Astro", "description": "Spinal is a commercial, SaaS-focused, Git-based CMS.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:21:45", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:description": "Add content to your project using Spinal as your CMS.", "description": "Add content to your project using Spinal as your CMS.", "ogTitle": "Spinal & Astro", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:title": "Spinal & Astro", "title": "Spinal & Astro | Docs", "ogDescription": "Add content to your project using Spinal as your CMS.", "ogUrl": "https://docs.astro.build/en/guides/cms/spinal/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/cms/spinal/", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/spinal.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "astrodotbuild", "scrapeId": "3a73a6d1-a761-438e-9763-3265f71018dd", "sourceURL": "https://docs.astro.build/en/guides/cms/spinal", "url": "https://docs.astro.build/en/guides/cms/spinal/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site with Buddy is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site with Buddy in astro.\n\n# Deploy your Astro Site with Buddy\n\nYou can deploy your Astro project using Buddy, a CI/CD solution that can build your site and push it to many different deploy targets including FTP servers and cloud hosting providers.Here's a quick rundown of what this is about:\n\n## How to deploy\n\n1. Create a **Buddy** account.\n\n2. Create a new project and connect it with a git repository (GitHub, GitLab, BitBucket, any private Git Repository or you can use Buddy Git Hosting).\n\n3. Add a new pipeline.\n\n4. In the newly created pipeline add a **Node.js** action.\n\n5. In this action add:\n\n```\n\nnpm install\n\nnpm run build\n```\n\n6. Add a deployment action ‚Äî there are many to choose from, you can browse them in Buddy‚Äôs actions catalog. Although their settings can differ, remember to set the **Source path** to `dist`.\n\n7. Press the **Run** button.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/buddy", "title": "Deploy your Astro Site with Buddy", "description": "You can deploy your Astro project using Buddy, a CI/CD solution that can build your site and push it to many different deploy targets including FTP servers and cloud hosting providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:29", "type": "overview", "page_metadata": {"description": "How to deploy your Astro site to the web using Buddy.", "ogUrl": "https://docs.astro.build/en/guides/deploy/buddy/", "og:locale": "en", "og:title": "Deploy your Astro Site with Buddy", "ogTitle": "Deploy your Astro Site with Buddy", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/buddy/", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "How to deploy your Astro site to the web using Buddy.", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "docsearch:language": "en", "og:type": "article", "title": "Deploy your Astro Site with Buddy | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:description": "How to deploy your Astro site to the web using Buddy.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "og:site_name": "Docs", "scrapeId": "009cba24-a1da-43d6-acb0-b82e5c468798", "sourceURL": "https://docs.astro.build/en/guides/deploy/buddy", "url": "https://docs.astro.build/en/guides/deploy/buddy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\n1. Create a **Buddy** account.\n\n2. Create a new project and connect it with a git repository (GitHub, GitLab, BitBucket, any private Git Repository or you can use Buddy Git Hosting).\n\n3. Add a new pipeline.\n\n4. In the newly created pipeline add a **Node.js** action.\n\n5. In this action add:\n\n```\n\nnpm install\n\nnpm run build\n```\n\n6. Add a deployment action ‚Äî there are many to choose from, you can browse them in Buddy‚Äôs actions catalog. Although their settings can differ, remember to set the **Source path** to `dist`.\n\n7. Press the **Run** button..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/buddy", "title": "Deploy your Astro Site with Buddy", "description": "You can deploy your Astro project using Buddy, a CI/CD solution that can build your site and push it to many different deploy targets including FTP servers and cloud hosting providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:29", "type": "section_detail", "page_metadata": {"description": "How to deploy your Astro site to the web using Buddy.", "ogUrl": "https://docs.astro.build/en/guides/deploy/buddy/", "og:locale": "en", "og:title": "Deploy your Astro Site with Buddy", "ogTitle": "Deploy your Astro Site with Buddy", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/buddy/", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "How to deploy your Astro site to the web using Buddy.", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "docsearch:language": "en", "og:type": "article", "title": "Deploy your Astro Site with Buddy | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:description": "How to deploy your Astro site to the web using Buddy.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "og:site_name": "Docs", "scrapeId": "009cba24-a1da-43d6-acb0-b82e5c468798", "sourceURL": "https://docs.astro.build/en/guides/deploy/buddy", "url": "https://docs.astro.build/en/guides/deploy/buddy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site with Buddy in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Node.js Action Commands**:\n\n```yaml\nnpm install\nnpm run build\n```\n\nThis snippet shows you how to node.js action commands, which is an important aspect of deploy your astro site with buddy.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/buddy", "title": "Deploy your Astro Site with Buddy", "description": "You can deploy your Astro project using Buddy, a CI/CD solution that can build your site and push it to many different deploy targets including FTP servers and cloud hosting providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:29", "type": "code_examples", "page_metadata": {"description": "How to deploy your Astro site to the web using Buddy.", "ogUrl": "https://docs.astro.build/en/guides/deploy/buddy/", "og:locale": "en", "og:title": "Deploy your Astro Site with Buddy", "ogTitle": "Deploy your Astro Site with Buddy", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/buddy/", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "How to deploy your Astro site to the web using Buddy.", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "docsearch:language": "en", "og:type": "article", "title": "Deploy your Astro Site with Buddy | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:description": "How to deploy your Astro site to the web using Buddy.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "og:site_name": "Docs", "scrapeId": "009cba24-a1da-43d6-acb0-b82e5c468798", "sourceURL": "https://docs.astro.build/en/guides/deploy/buddy", "url": "https://docs.astro.build/en/guides/deploy/buddy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site with Buddy in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRemember to set the Source path to `dist` when adding a deployment action.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/buddy", "title": "Deploy your Astro Site with Buddy", "description": "You can deploy your Astro project using Buddy, a CI/CD solution that can build your site and push it to many different deploy targets including FTP servers and cloud hosting providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:29", "type": "best_practices", "page_metadata": {"description": "How to deploy your Astro site to the web using Buddy.", "ogUrl": "https://docs.astro.build/en/guides/deploy/buddy/", "og:locale": "en", "og:title": "Deploy your Astro Site with Buddy", "ogTitle": "Deploy your Astro Site with Buddy", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/buddy/", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "How to deploy your Astro site to the web using Buddy.", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "docsearch:language": "en", "og:type": "article", "title": "Deploy your Astro Site with Buddy | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "og:description": "How to deploy your Astro site to the web using Buddy.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/buddy.webp", "og:site_name": "Docs", "scrapeId": "009cba24-a1da-43d6-acb0-b82e5c468798", "sourceURL": "https://docs.astro.build/en/guides/deploy/buddy", "url": "https://docs.astro.build/en/guides/deploy/buddy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what DatoCMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain DatoCMS & Astro in astro.\n\n# DatoCMS & Astro\n\nDatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.Here's a quick rundown of what this is about:\n\n## Integrating with Astro\n\nIn this guide, you will fetch content data from DatoCMS in your Astro project, then display it on a page.\n\n## Prerequisites\n\nTo get started, you will need to have the following:\n\n- **An Astro project** - If you don‚Äôt have an Astro project yet, you can follow the instructions in our [Installation guide](https://docs.astro.build/en/install-and-setup/).\n- **A DatoCMS account and project** - If you don‚Äôt have an account, you can [sign up for a free account](https://dashboard.datocms.com/signup).\n- **The read-only API Key for your DatoCMS project** - You can find it in the admin dashboard of your project, under ‚ÄúSettings‚Äù > ‚ÄúAPI Tokens.‚Äù\n\n## Setting up the credentials\n\nCreate a new file (if one does not already exist) named `.env` in the root of your Astro project. Add a new environment variable as follows, using the API key found in your DatoCMS admin dashboard:\n\n```\n\nDATOCMS_API_KEY=YOUR_API_KEY\n```\n\nFor TypeScript support, declare the typing of this environment variable in the `env.d.ts` file in the `src/` folder. If this file does not exist, you can create it and add the following:\n\n```\ninterface ImportMetaEnv {\n\n  readonly DATOCMS_API_KEY: string;\n\n}\n```\n\nYour root directory should now include these files:\n\n- Directorysrc/\n\n- **env.d.ts**\n\n- **.env**\n- astro.config.mjs\n- package.json\n\n## Create a Model in DatoCMS\n\nIn the DatoCMS admin dashboard of your project, navigate to ‚ÄúSettings‚Äù > ‚ÄúModels‚Äù and create a new Model called ‚ÄúHome‚Äù with the ‚ÄúSingle Instance‚Äù toggle selected. This will create a home page for your project. In this model, add a new text field for the page title.\n\nNavigate to the ‚ÄúContent‚Äù tab in your project and click on your newly-created home page. You can now add a title. Save the page, and continue.\n\n## Fetching data\n\nIn your Astro project, navigate to the page that will fetch and display your CMS content. Add the following query to fetch the content for `home` using the DatoCMS GraphQL API.\n\nThis example displays the page title from DatoCMS on `src/pages/index.astro`:\n\n```\n---\nconst response = await fetch('https://graphql.datocms.com/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n  },\n  body: JSON.stringify({\n    query: `query Homepage {\n          home {\n            title\n          }\n        }\n      `,\n  }),\n});\nconst json = await response.json();\nconst data = json.data.home;\n---\n<h1>{data.title}</h1>\n```\n\nThis GraphQL query will fetch the `title` field in the `home` page from your DatoCMS Project. When you refresh your browser, you should see the title on your page.\n\n## Adding Dynamic modular content blocks\n\nIf your DatosCMS project includes [modular content](https://www.datocms.com/docs/content-modelling/modular-content), then you will need to build a corresponding `.astro` component for each block of content (e.g. a text section, a video, a quotation block, etc.) that the modular field allows in your project.\n\nThe example below is a `<Text />` Astro component for displaying a ‚ÄúMultiple-paragraph text‚Äù block from DatoCMS.\n\n```\n---\nexport interface TextProps {\n  text: string\n}\nexport interface Props {\n  item: TextProps\n}\nconst { item } = Astro.props;\n---\n<div set:html={item.text} />\n```\n\nTo fetch these blocks, edit your GraphQL query to include the modular content block you created in DatoCMS.\n\nIn this example, the modular content block is named **content** in DatoCMS. This query also includes the unique `_modelApiKey` of each item to check which block should be displayed in the modular field, based on which block was chosen by the content author in the DatoCMS editor. Use a switch statement in the Astro template to allow for dynamic rendering based on the data received from the query.\n\nThe following example represents a DatoCMS modular content block that allows an author to choose between a text field ( `<Text />`) and an image ( `<Image />`) rendered on the home page:\n\n```\n---\nimport Image from '../components/Image.astro';\nimport Text from '../components/Text.astro';\nconst response = await fetch('https://graphql.datocms.com/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n  },\n  body: JSON.stringify({\n    query: `query Homepage {\n          home {\n            title\n            content {\n              ... on ImageRecord {\n                _modelApiKey\n               image{\n                url\n               }\n              }\n              ... on TextRecord {\n                _modelApiKey\n                text(markdown: true)\n              }\n            }\n          }\n        }\n      `,\n  }),\n});\nconst json = await response.json();\nconst data = json.data.home;\n---\n<h1>{data.title}</h1>\n{\n  data.content.map((item: any) => {\n    switch (item._modelApiKey) {\n      case 'image':\n        return <Image item={item} />;\n      case 'text':\n        return <Text item={item} />;\n      default:\n        return null;\n    }\n  })\n}\n```\n\n\n## Publishing your site\n\nTo deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Publish on DatoCMS content changes\n\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build when you change content in DatoCMS.\n\n## Netlify\n\nTo set up a webhook in Netlify:\n\n1. Go to your site dashboard and click on **Build & deploy**.\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n\n## Vercel\n\nTo set up a webhook in Vercel:\n\n1. Go to your project dashboard and click on **Settings**.\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n\n## Adding a webhook to DatoCMS\n\nIn your DatoCMS project admin dashboard, navigate to the **Settings** tab and click **Webhooks**. Click the plus icon to create a new webhook and give it a name. In the URL field, paste the URL generated by your preferred hosting service. As Trigger, select whichever option suits your needs. (For example: build every time a new record is published.)\n\n## Starter project\n\nYou can also check out the [Astro blog template](https://www.datocms.com/marketplace/starters/astro-template-blog) on the DatoCMS marketplace to learn how to create a blog with Astro and DatoCMS.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "overview", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrating with astro in astro?\n\nAssistant: To integrating with astro in astro, here's what you do:\nIn this guide, you will fetch content data from DatoCMS in your Astro project, then display it on a page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nTo get started, you will need to have the following:\n\n- **An Astro project** - If you don‚Äôt have an Astro project yet, you can follow the instructions in our [Installation guide](https://docs.astro.build/en/install-and-setup/).\n- **A DatoCMS account and project** - If you don‚Äôt have an account, you can [sign up for a free account](https://dashboard.datocms.com/signup).\n- **The read-only API Key for your DatoCMS project** - You can find it in the admin dashboard of your project, under ‚ÄúSettings‚Äù > ‚ÄúAPI Tokens.‚Äù.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I setting up the credentials in astro?\n\nAssistant: To setting up the credentials in astro, here's what you do:\nCreate a new file (if one does not already exist) named `.env` in the root of your Astro project. Add a new environment variable as follows, using the API key found in your DatoCMS admin dashboard:\n\n```\n\nDATOCMS_API_KEY=YOUR_API_KEY\n```\n\nFor TypeScript support, declare the typing of this environment variable in the `env.d.ts` file in the `src/` folder. If this file does not exist, you can create it and add the following:\n\n```\ninterface ImportMetaEnv {\n\n  readonly DATOCMS_API_KEY: string;\n\n}\n```\n\nYour root directory should now include these files:\n\n- Directorysrc/\n\n- **env.d.ts**\n\n- **.env**\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a model in datocms in astro?\n\nAssistant: To create a model in datocms in astro, here's what you do:\nIn the DatoCMS admin dashboard of your project, navigate to ‚ÄúSettings‚Äù > ‚ÄúModels‚Äù and create a new Model called ‚ÄúHome‚Äù with the ‚ÄúSingle Instance‚Äù toggle selected. This will create a home page for your project. In this model, add a new text field for the page title.\n\nNavigate to the ‚ÄúContent‚Äù tab in your project and click on your newly-created home page. You can now add a title. Save the page, and continue..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I fetching data in astro?\n\nAssistant: To fetching data in astro, here's what you do:\nIn your Astro project, navigate to the page that will fetch and display your CMS content. Add the following query to fetch the content for `home` using the DatoCMS GraphQL API.\n\nThis example displays the page title from DatoCMS on `src/pages/index.astro`:\n\n```\n---\nconst response = await fetch('https://graphql.datocms.com/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n  },\n  body: JSON.stringify({\n    query: `query Homepage {\n          home {\n            title\n          }\n        }\n      `,\n  }),\n});\nconst json = await response.json();\nconst data = json.data.home;\n---\n<h1>{data.title}</h1>\n```\n\nThis GraphQL query will fetch the `title` field in the `home` page from your DatoCMS Project. When you refresh your browser, you should see the title on your page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding dynamic modular content blocks in astro?\n\nAssistant: To adding dynamic modular content blocks in astro, here's what you do:\nIf your DatosCMS project includes [modular content](https://www.datocms.com/docs/content-modelling/modular-content), then you will need to build a corresponding `.astro` component for each block of content (e.g. a text section, a video, a quotation block, etc.) that the modular field allows in your project.\n\nThe example below is a `<Text />` Astro component for displaying a ‚ÄúMultiple-paragraph text‚Äù block from DatoCMS.\n\n```\n---\nexport interface TextProps {\n  text: string\n}\nexport interface Props {\n  item: TextProps\n}\nconst { item } = Astro.props;\n---\n<div set:html={item.text} />\n```\n\nTo fetch these blocks, edit your GraphQL query to include the modular content block you created in DatoCMS.\n\nIn this example, the modular content block is named **content** in DatoCMS. This query also includes the unique `_modelApiKey` of each item to check which block should be displayed in the modular field, based on which block was chosen by the content author in the DatoCMS editor. Use a switch statement in the Astro template to allow for dynamic rendering based on the data received from the query.\n\nThe following example represents a DatoCMS modular content block that allows an author to choose between a text field ( `<Text />`) and an image ( `<Image />`) rendered on the home page:\n\n```\n---\nimport Image from '../components/Image.astro';\nimport Text from '../components/Text.astro';\nconst response = await fetch('https://graphql.datocms.com/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n  },\n  body: JSON.stringify({\n    query: `query Homepage {\n          home {\n            title\n            content {\n              ... on ImageRecord {\n                _modelApiKey\n               image{\n                url\n               }\n              }\n              ... on TextRecord {\n                _modelApiKey\n                text(markdown: true)\n              }\n            }\n          }\n        }\n      `,\n  }),\n});\nconst json = await response.json();\nconst data = json.data.home;\n---\n<h1>{data.title}</h1>\n{\n  data.content.map((item: any) => {\n    switch (item._modelApiKey) {\n      case 'image':\n        return <Image item={item} />;\n      case 'text':\n        return <Text item={item} />;\n      default:\n        return null;\n    }\n  })\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publishing your site in astro?\n\nAssistant: To publishing your site in astro, here's what you do:\nTo deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publish on datocms content changes in astro?\n\nAssistant: To publish on datocms content changes in astro, here's what you do:\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build when you change content in DatoCMS..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I netlify in astro?\n\nAssistant: To netlify in astro, here's what you do:\nTo set up a webhook in Netlify:\n\n1. Go to your site dashboard and click on **Build & deploy**.\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I vercel in astro?\n\nAssistant: To vercel in astro, here's what you do:\nTo set up a webhook in Vercel:\n\n1. Go to your project dashboard and click on **Settings**.\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding a webhook to datocms in astro?\n\nAssistant: To adding a webhook to datocms in astro, here's what you do:\nIn your DatoCMS project admin dashboard, navigate to the **Settings** tab and click **Webhooks**. Click the plus icon to create a new webhook and give it a name. In the URL field, paste the URL generated by your preferred hosting service. As Trigger, select whichever option suits your needs. (For example: build every time a new record is published.).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I starter project in astro?\n\nAssistant: To starter project in astro, here's what you do:\nYou can also check out the [Astro blog template](https://www.datocms.com/marketplace/starters/astro-template-blog) on the DatoCMS marketplace to learn how to create a blog with Astro and DatoCMS..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "section_detail", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for DatoCMS & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setting up the credentials**:\n\n```yaml\nDATOCMS_API_KEY=YOUR_API_KEY\n```\n\nThis snippet shows you how to setting up the credentials, which is an important aspect of datocms & astro.\n\n**TypeScript support for environment variable**:\n\n```yaml\ninterface ImportMetaEnv {\n  readonly DATOCMS_API_KEY: string;\n}\n```\n\nThis snippet shows you how to typescript support for environment variable, which is an important aspect of datocms & astro.\n\n**Fetching data example**:\n\n```yaml\nconst response = await fetch('https://graphql.datocms.com/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n  },\n  body: JSON.stringify({\n    query: `query Homepage {\n          home {\n            title\n          }\n        }\n      `,\n  }),\n});\nconst json = await response.json();\nconst data = json.data.home;\n```\n\nThis snippet shows you how to fetching data example, which is an important aspect of datocms & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "code_examples", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using DatoCMS & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have an Astro project and a DatoCMS account before starting.\n\nUse the correct API key from your DatoCMS admin dashboard.\n\nSet up webhooks for automatic builds when content changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/datocms", "title": "DatoCMS & Astro", "description": "DatoCMS is a web-based, headless CMS to manage digital content for your sites and apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:24:05", "type": "best_practices", "page_metadata": {"description": "Add content to your Astro project using DatoCMS", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "DatoCMS & Astro", "ogTitle": "DatoCMS & Astro", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/datocms/", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "docsearch:language": "en", "title": "DatoCMS & Astro | Docs", "ogDescription": "Add content to your Astro project using DatoCMS", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/datocms/", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/datocms.webp", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Add content to your Astro project using DatoCMS", "twitter:card": "summary_large_image", "scrapeId": "06045aef-80ae-4eb9-8598-60ee98f6e236", "sourceURL": "https://docs.astro.build/en/guides/cms/datocms", "url": "https://docs.astro.build/en/guides/cms/datocms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Caisy & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Caisy & Astro in astro.\n\n# Caisy & Astro\n\nCaisy is a headless CMS that exposes a GraphQL API to access content.Here's a quick rundown of what this is about:\n\n## Using Caisy CMS with Astro\n\nUse `graphql-request` and Caisy‚Äôs rich text renderer for Astro to fetch your CMS data and display your content on an Astro page:\n\n```\nimport RichTextRenderer from '@caisy/rich-text-astro-renderer';\n\nimport { gql, GraphQLClient } from 'graphql-request';\n\nconst params = Astro.params;\n\nconst client = new GraphQLClient(\n\n  `https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,\n\n  {\n    headers: {\n      'x-caisy-apikey': import.meta.env.CAISY_API_KEY\n    }\n  }\n);\n\nconst gqlResponse = await client.request(\n\n  gql`\n    query allBlogArticle($slug: String) {\n      allBlogArticle(where: { slug: { eq: $slug } }) {\n        edges {\n          node {\n            text {\n              json\n            }\n            title\n            slug\n            id\n          }\n        }\n      }\n    }\n  `,\n  { slug: params.slug }\n);\n\nconst post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;\n\n<h1>{post.title}</h1>\n\n<RichTextRenderer node={post.text.json} />\n```\n\n## Official Resources\n\n- Check out the Caisy + Astro example on [GitHub](https://github.com/caisy-io/caisy-example-astro) or [StackBlitz](https://stackblitz.com/github/caisy-io/caisy-example-astro?file=src%2Fpages%2Fblog%2F%5B...slug%5D.astro)\n- Query your documents in [draft mode](https://caisy.io/developer/docs/external-api/localization-and-preview#preview-mode-15) and multiple [locales](https://caisy.io/developer/docs/external-api/localization-and-preview#localization-in-a-graphql-query-8).\n- Use [pagination](https://caisy.io/developer/docs/external-api/queries-pagination) to query large numbers of documents.\n- Use [filter](https://caisy.io/developer/docs/external-api/external-filter-and-sorting) in your queries and [order](https://caisy.io/developer/docs/external-api/external-filter-and-sorting#sorting-8) the results.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/caisy", "title": "Caisy & Astro", "description": "Caisy is a headless CMS that exposes a GraphQL API to access content.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:24:30", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/caisy/", "ogSiteName": "Docs", "ogTitle": "Caisy & Astro", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Caisy & Astro", "ogLocale": "en", "description": "Add content to your Astro project using Caisy as a CMS", "og:description": "Add content to your Astro project using Caisy as a CMS", "title": "Caisy & Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:url": "https://docs.astro.build/en/guides/cms/caisy/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "ogDescription": "Add content to your Astro project using Caisy as a CMS", "scrapeId": "6c8c7546-8f70-4558-b594-1f7d55924459", "sourceURL": "https://docs.astro.build/en/guides/cms/caisy", "url": "https://docs.astro.build/en/guides/cms/caisy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using caisy cms with astro in astro?\n\nAssistant: To using caisy cms with astro in astro, here's what you do:\nUse `graphql-request` and Caisy‚Äôs rich text renderer for Astro to fetch your CMS data and display your content on an Astro page:\n\n```\nimport RichTextRenderer from '@caisy/rich-text-astro-renderer';\n\nimport { gql, GraphQLClient } from 'graphql-request';\n\nconst params = Astro.params;\n\nconst client = new GraphQLClient(\n\n  `https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,\n\n  {\n    headers: {\n      'x-caisy-apikey': import.meta.env.CAISY_API_KEY\n    }\n  }\n);\n\nconst gqlResponse = await client.request(\n\n  gql`\n    query allBlogArticle($slug: String) {\n      allBlogArticle(where: { slug: { eq: $slug } }) {\n        edges {\n          node {\n            text {\n              json\n            }\n            title\n            slug\n            id\n          }\n        }\n      }\n    }\n  `,\n  { slug: params.slug }\n);\n\nconst post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;\n\n<h1>{post.title}</h1>\n\n<RichTextRenderer node={post.text.json} />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/caisy", "title": "Caisy & Astro", "description": "Caisy is a headless CMS that exposes a GraphQL API to access content.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/caisy/", "ogSiteName": "Docs", "ogTitle": "Caisy & Astro", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Caisy & Astro", "ogLocale": "en", "description": "Add content to your Astro project using Caisy as a CMS", "og:description": "Add content to your Astro project using Caisy as a CMS", "title": "Caisy & Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:url": "https://docs.astro.build/en/guides/cms/caisy/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "ogDescription": "Add content to your Astro project using Caisy as a CMS", "scrapeId": "6c8c7546-8f70-4558-b594-1f7d55924459", "sourceURL": "https://docs.astro.build/en/guides/cms/caisy", "url": "https://docs.astro.build/en/guides/cms/caisy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- Check out the Caisy + Astro example on [GitHub](https://github.com/caisy-io/caisy-example-astro) or [StackBlitz](https://stackblitz.com/github/caisy-io/caisy-example-astro?file=src%2Fpages%2Fblog%2F%5B...slug%5D.astro)\n- Query your documents in [draft mode](https://caisy.io/developer/docs/external-api/localization-and-preview#preview-mode-15) and multiple [locales](https://caisy.io/developer/docs/external-api/localization-and-preview#localization-in-a-graphql-query-8).\n- Use [pagination](https://caisy.io/developer/docs/external-api/queries-pagination) to query large numbers of documents.\n- Use [filter](https://caisy.io/developer/docs/external-api/external-filter-and-sorting) in your queries and [order](https://caisy.io/developer/docs/external-api/external-filter-and-sorting#sorting-8) the results..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/caisy", "title": "Caisy & Astro", "description": "Caisy is a headless CMS that exposes a GraphQL API to access content.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/caisy/", "ogSiteName": "Docs", "ogTitle": "Caisy & Astro", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Caisy & Astro", "ogLocale": "en", "description": "Add content to your Astro project using Caisy as a CMS", "og:description": "Add content to your Astro project using Caisy as a CMS", "title": "Caisy & Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:url": "https://docs.astro.build/en/guides/cms/caisy/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "ogDescription": "Add content to your Astro project using Caisy as a CMS", "scrapeId": "6c8c7546-8f70-4558-b594-1f7d55924459", "sourceURL": "https://docs.astro.build/en/guides/cms/caisy", "url": "https://docs.astro.build/en/guides/cms/caisy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Caisy & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using Caisy CMS with Astro**:\n\n```yaml\nimport RichTextRenderer from '@caisy/rich-text-astro-renderer';\n\nimport { gql, GraphQLClient } from 'graphql-request';\n\nconst params = Astro.params;\n\nconst client = new GraphQLClient(\n\n  `https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,\n\n  {\n    headers: {\n      'x-caisy-apikey': import.meta.env.CAISY_API_KEY\n    }\n  }\n);\n\nconst gqlResponse = await client.request(\n\n  gql`\n    query allBlogArticle($slug: String) {\n      allBlogArticle(where: { slug: { eq: $slug } }) {\n        edges {\n          node {\n            text {\n              json\n            }\n            title\n            slug\n            id\n          }\n        }\n      }\n    }\n  `,\n  { slug: params.slug }\n);\n\nconst post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;\n\n<h1>{post.title}</h1>\n\n<RichTextRenderer node={post.text.json} />\n```\n\nThis snippet shows you how to using caisy cms with astro, which is an important aspect of caisy & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/caisy", "title": "Caisy & Astro", "description": "Caisy is a headless CMS that exposes a GraphQL API to access content.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:24:30", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/caisy/", "ogSiteName": "Docs", "ogTitle": "Caisy & Astro", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Caisy & Astro", "ogLocale": "en", "description": "Add content to your Astro project using Caisy as a CMS", "og:description": "Add content to your Astro project using Caisy as a CMS", "title": "Caisy & Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:url": "https://docs.astro.build/en/guides/cms/caisy/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "ogDescription": "Add content to your Astro project using Caisy as a CMS", "scrapeId": "6c8c7546-8f70-4558-b594-1f7d55924459", "sourceURL": "https://docs.astro.build/en/guides/cms/caisy", "url": "https://docs.astro.build/en/guides/cms/caisy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Caisy & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck out the Caisy + Astro example on GitHub or StackBlitz.\n\nQuery your documents in draft mode and multiple locales.\n\nUse pagination to query large numbers of documents.\n\nUse filter in your queries and order the results.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/caisy", "title": "Caisy & Astro", "description": "Caisy is a headless CMS that exposes a GraphQL API to access content.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:24:30", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/caisy/", "ogSiteName": "Docs", "ogTitle": "Caisy & Astro", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Caisy & Astro", "ogLocale": "en", "description": "Add content to your Astro project using Caisy as a CMS", "og:description": "Add content to your Astro project using Caisy as a CMS", "title": "Caisy & Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/caisy.webp", "og:url": "https://docs.astro.build/en/guides/cms/caisy/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:type": "article", "ogDescription": "Add content to your Astro project using Caisy as a CMS", "scrapeId": "6c8c7546-8f70-4558-b594-1f7d55924459", "sourceURL": "https://docs.astro.build/en/guides/cms/caisy", "url": "https://docs.astro.build/en/guides/cms/caisy/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Server islands is in astro?\n\nAssistant: Sure, I'd be happy to explain Server islands in astro.\n\n# Server islands\n\nServer islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.Here's a quick rundown of what this is about:\n\n## Server island components\n\nA server island is a normal server-rendered [Astro component](https://docs.astro.build/en/basics/astro-components/) that is instructed to delay rendering until its contents are available.\n\nYour page will be rendered immediately with any specified [fallback content as a placeholder](https://docs.astro.build/en/guides/server-islands/#server-island-fallback-content). Then, the component‚Äôs own contents are fetched on the client and displayed when available.\n\nWith [an adapter installed](https://docs.astro.build/en/guides/on-demand-rendering/#server-adapters) to perform the delayed rendering, add the [`server:defer` directive](https://docs.astro.build/en/reference/directives-reference/#server-directives) to any component on your page to turn it into its own island:\n\n```\n---\nimport Avatar from '../components/Avatar.astro';\n---\n<Avatar server:defer />\n```\n\nThese components can do [anything you normally would in an on-demand rendered page](https://docs.astro.build/en/guides/on-demand-rendering/#on-demand-rendering-features) using an adapter, such as fetch content, and access cookies:\n\n```\n---\nimport { getUserAvatar } from '../sessions';\nconst userSession = Astro.cookies.get('session');\nconst avatarURL = await getUserAvatar(userSession);\n---\n<img alt=\"User avatar\" src={avatarURL} />\n```\n\n## Server island fallback content\n\nWhen using the `server:defer` attribute on a component to delay its rendering, you can ‚Äúslot‚Äù in default loading content using the included named \"fallback\" slot.\n\nYour fallback content will be rendered along with the rest of the page initially on page load and will be replaced with your component‚Äôs content when available.\n\nTo add fallback content, add `slot=\"fallback\"` on a child (other components or HTML elements) passed to your server island component:\n\n```\n---\nimport Avatar from '../components/Avatar.astro';\nimport GenericAvatar from '../components/GenericAvatar.astro';\n---\n<Avatar server:defer>\n  <GenericAvatar slot=\"fallback\" />\n</Avatar>\n```\n\nThis fallback content can be things like:\n- A generic avatar instead of the user‚Äôs own.\n- Placeholder UI such as custom messages.\n- Loading indicators such as spinners.\n\n## How it works\n\nServer island implementation happens mostly at build-time where component content is swapped out for a small script.\n\nEach of the islands marked with `server:defer` is split off into its own special route which the script fetches at run time. When Astro builds your site it will omit the component and inject a script in its place, and any content you‚Äôve marked with `slot=\"fallback\"`.\n\nWhen the page loads in the browser, these components will be requested to a special endpoint that renders them and returns the HTML. This means that users will see the most critical parts of the page instantly. Fallback content will be visible for a short amount of time before the dynamic islands are then loaded.\n\nEach island is loaded independently from the rest. This means a slower island won‚Äôt delay the rest of your personalized content from being available.\n\nThis rendering pattern was built to be portable. It does not depend on any server infrastructure so it will work with any host you have, from a Node.js server in a Docker container to the serverless provider of your choice.\n\n## Caching\n\nThe data for server islands is retrieved via a `GET` request, passing props as an encrypted string in the URL query. This allows caching data with the [`Cache-Control` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) using standard `Cache-Control` directives.\n\nHowever, [the browser limits URLs to a maximum length of 2048 bytes](https://chromium.googlesource.com/chromium/src/+/master/docs/security/url_display_guidelines/url_display_guidelines.md#url-length) for practical reasons and to avoid causing denial-of-service problems. If your query string causes your URL to exceed this limit, Astro will instead send a `POST` request that contains all props in the body.\n\n`POST` requests are not cached by browsers because they are used to submit data, and could cause data integrity or security issues. Therefore, any existing caching logic in your project will break. Whenever possible, pass only necessary props to your server islands and avoid sending entire data objects and arrays to keep your query small.\n\n## Accessing the page URL in a server island\n\nIn most cases you, your server island component can get information about the page rendering it by [passing props](https://docs.astro.build/en/basics/astro-components/#component-props) like in normal components.\n\nHowever, server islands run in their own isolated context outside of the page request. `Astro.url` and `Astro.request.url` in a server island component both return a URL that looks like `/_server-islands/Avatar` instead of the current page‚Äôs URL in the browser. Additionally, if you are prerendering the page you will not have access to information such as query parameters in order to pass as props.\n\nTo access information from the page‚Äôs URL, you can check the [Referer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) header, which will contain the address of the page that is loading the island in the browser:\n\n```\n---\nconst referer = Astro.request.headers.get('Referer');\nconst url = new URL(referer);\nconst productId = url.searchParams.get('product');\n---\n```\n\n## Reusing the encryption key\n\nAstro uses [cryptography](https://developer.mozilla.org/en-US/docs/Glossary/Cryptography) to encrypt props passed to server islands to prevent accidentally leaking secrets. The props are encrypted using a key that is generated during the build.\n\nFor most hosts, this happens transparently and there is nothing that you as a developer need to do. If you are using rolling deployments in an environment such as Kubernetes, you may run into issues where the frontend and backend are temporarily out of sync and the keys don‚Äôt match.\n\nTo solve this, you can create a key with the Astro CLI and then reuse it for all of your deployments. This ensures that each user‚Äôs frontend is talking to a backend that has the right key.\n\nGenerate a key using `astro create-key`:\n\n```\nastro create-key\n```\n\nThis will create a key that you can set as the `ASTRO_KEY` environment variable wherever your hosting environment requires, such as in a `.env` file:\n\n```\nASTRO_KEY=zyM5c0qec+1Sgi4K+AejFX9ufbig7/7wIZjxOjti9Po=\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "overview", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server island components in astro?\n\nAssistant: To server island components in astro, here's what you do:\nA server island is a normal server-rendered [Astro component](https://docs.astro.build/en/basics/astro-components/) that is instructed to delay rendering until its contents are available.\n\nYour page will be rendered immediately with any specified [fallback content as a placeholder](https://docs.astro.build/en/guides/server-islands/#server-island-fallback-content). Then, the component‚Äôs own contents are fetched on the client and displayed when available.\n\nWith [an adapter installed](https://docs.astro.build/en/guides/on-demand-rendering/#server-adapters) to perform the delayed rendering, add the [`server:defer` directive](https://docs.astro.build/en/reference/directives-reference/#server-directives) to any component on your page to turn it into its own island:\n\n```\n---\nimport Avatar from '../components/Avatar.astro';\n---\n<Avatar server:defer />\n```\n\nThese components can do [anything you normally would in an on-demand rendered page](https://docs.astro.build/en/guides/on-demand-rendering/#on-demand-rendering-features) using an adapter, such as fetch content, and access cookies:\n\n```\n---\nimport { getUserAvatar } from '../sessions';\nconst userSession = Astro.cookies.get('session');\nconst avatarURL = await getUserAvatar(userSession);\n---\n<img alt=\"User avatar\" src={avatarURL} />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server island fallback content in astro?\n\nAssistant: To server island fallback content in astro, here's what you do:\nWhen using the `server:defer` attribute on a component to delay its rendering, you can ‚Äúslot‚Äù in default loading content using the included named \"fallback\" slot.\n\nYour fallback content will be rendered along with the rest of the page initially on page load and will be replaced with your component‚Äôs content when available.\n\nTo add fallback content, add `slot=\"fallback\"` on a child (other components or HTML elements) passed to your server island component:\n\n```\n---\nimport Avatar from '../components/Avatar.astro';\nimport GenericAvatar from '../components/GenericAvatar.astro';\n---\n<Avatar server:defer>\n  <GenericAvatar slot=\"fallback\" />\n</Avatar>\n```\n\nThis fallback content can be things like:\n- A generic avatar instead of the user‚Äôs own.\n- Placeholder UI such as custom messages.\n- Loading indicators such as spinners..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how it works in astro?\n\nAssistant: To how it works in astro, here's what you do:\nServer island implementation happens mostly at build-time where component content is swapped out for a small script.\n\nEach of the islands marked with `server:defer` is split off into its own special route which the script fetches at run time. When Astro builds your site it will omit the component and inject a script in its place, and any content you‚Äôve marked with `slot=\"fallback\"`.\n\nWhen the page loads in the browser, these components will be requested to a special endpoint that renders them and returns the HTML. This means that users will see the most critical parts of the page instantly. Fallback content will be visible for a short amount of time before the dynamic islands are then loaded.\n\nEach island is loaded independently from the rest. This means a slower island won‚Äôt delay the rest of your personalized content from being available.\n\nThis rendering pattern was built to be portable. It does not depend on any server infrastructure so it will work with any host you have, from a Node.js server in a Docker container to the serverless provider of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I caching in astro?\n\nAssistant: To caching in astro, here's what you do:\nThe data for server islands is retrieved via a `GET` request, passing props as an encrypted string in the URL query. This allows caching data with the [`Cache-Control` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) using standard `Cache-Control` directives.\n\nHowever, [the browser limits URLs to a maximum length of 2048 bytes](https://chromium.googlesource.com/chromium/src/+/master/docs/security/url_display_guidelines/url_display_guidelines.md#url-length) for practical reasons and to avoid causing denial-of-service problems. If your query string causes your URL to exceed this limit, Astro will instead send a `POST` request that contains all props in the body.\n\n`POST` requests are not cached by browsers because they are used to submit data, and could cause data integrity or security issues. Therefore, any existing caching logic in your project will break. Whenever possible, pass only necessary props to your server islands and avoid sending entire data objects and arrays to keep your query small..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I accessing the page url in a server island in astro?\n\nAssistant: To accessing the page url in a server island in astro, here's what you do:\nIn most cases you, your server island component can get information about the page rendering it by [passing props](https://docs.astro.build/en/basics/astro-components/#component-props) like in normal components.\n\nHowever, server islands run in their own isolated context outside of the page request. `Astro.url` and `Astro.request.url` in a server island component both return a URL that looks like `/_server-islands/Avatar` instead of the current page‚Äôs URL in the browser. Additionally, if you are prerendering the page you will not have access to information such as query parameters in order to pass as props.\n\nTo access information from the page‚Äôs URL, you can check the [Referer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) header, which will contain the address of the page that is loading the island in the browser:\n\n```\n---\nconst referer = Astro.request.headers.get('Referer');\nconst url = new URL(referer);\nconst productId = url.searchParams.get('product');\n---\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I reusing the encryption key in astro?\n\nAssistant: To reusing the encryption key in astro, here's what you do:\nAstro uses [cryptography](https://developer.mozilla.org/en-US/docs/Glossary/Cryptography) to encrypt props passed to server islands to prevent accidentally leaking secrets. The props are encrypted using a key that is generated during the build.\n\nFor most hosts, this happens transparently and there is nothing that you as a developer need to do. If you are using rolling deployments in an environment such as Kubernetes, you may run into issues where the frontend and backend are temporarily out of sync and the keys don‚Äôt match.\n\nTo solve this, you can create a key with the Astro CLI and then reuse it for all of your deployments. This ensures that each user‚Äôs frontend is talking to a backend that has the right key.\n\nGenerate a key using `astro create-key`:\n\n```\nastro create-key\n```\n\nThis will create a key that you can set as the `ASTRO_KEY` environment variable wherever your hosting environment requires, such as in a `.env` file:\n\n```\nASTRO_KEY=zyM5c0qec+1Sgi4K+AejFX9ufbig7/7wIZjxOjti9Po=\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Server islands in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server island component example**:\n\n```yaml\n---\nimport Avatar from '../components/Avatar.astro';\n---\n<Avatar server:defer />\n```\n\nThis snippet shows you how to server island component example, which is an important aspect of server islands.\n\n**Fetching user avatar example**:\n\n```yaml\n---\nimport { getUserAvatar } from '../sessions';\nconst userSession = Astro.cookies.get('session');\nconst avatarURL = await getUserAvatar(userSession);\n---\n<img alt=\"User avatar\" src={avatarURL} />\n```\n\nThis snippet shows you how to fetching user avatar example, which is an important aspect of server islands.\n\n**Fallback content example**:\n\n```yaml\n---\nimport Avatar from '../components/Avatar.astro';\nimport GenericAvatar from '../components/GenericAvatar.astro';\n---\n<Avatar server:defer>\n  <GenericAvatar slot=\"fallback\" />\n</Avatar>\n\n```\n\nThis snippet shows you how to fallback content example, which is an important aspect of server islands.\n\n**Accessing the Referer header example**:\n\n```yaml\n---\nconst referer = Astro.request.headers.get('Referer');\nconst url = new URL(referer);\nconst productId = url.searchParams.get('product');\n---\n\n```\n\nThis snippet shows you how to accessing the referer header example, which is an important aspect of server islands.\n\n**Generating an encryption key example**:\n\n```yaml\nastro create-key\n\n```\n\nThis snippet shows you how to generating an encryption key example, which is an important aspect of server islands.\n\n**Setting the ASTRO_KEY environment variable example**:\n\n```yaml\nASTRO_KEY=zyM5c0qec+1Sgi4K+AejFX9ufbig7/7wIZjxOjti9Po=\n```\n\nThis snippet shows you how to setting the astro_key environment variable example, which is an important aspect of server islands.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "code_examples", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Server islands in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhenever possible, pass only necessary props to your server islands and avoid sending entire data objects and arrays to keep your query small.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/server-islands", "title": "Server islands", "description": "Server islands allow you to on-demand render dynamic or personalized ‚Äúislands‚Äù individually, without sacrificing the performance of the rest of the page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:28:11", "type": "best_practices", "page_metadata": {"ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "description": "Combine high performance static HTML with dynamic server-rendered content.", "og:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/server-islands/", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Combine high performance static HTML with dynamic server-rendered content.", "og:title": "Server islands", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogTitle": "Server islands", "title": "Server islands | Docs", "og:type": "article", "ogLocale": "en", "og:description": "Combine high performance static HTML with dynamic server-rendered content.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/server-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/server-islands.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "2566395c-1220-4947-bc19-e5c4317312e5", "sourceURL": "https://docs.astro.build/en/guides/server-islands", "url": "https://docs.astro.build/en/guides/server-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what microCMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain microCMS & Astro in astro.\n\n# microCMS & Astro\n\nmicroCMS is an API-based headless CMS that lets you define content using schemas, and manage it using the dashboard.Here's a quick rundown of what this is about:\n\n## Official Resources\n\n- Check out [the official microCMS document](https://document.microcms.io/tutorial/astro/astro-top)\n- Blog: [Build a blog with microCMS](https://blog.microcms.io/astro-microcms-introduction/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/microcms", "title": "microCMS & Astro", "description": "microCMS is an API-based headless CMS that lets you define content using schemas, and manage it using the dashboard.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:29:32", "type": "overview", "page_metadata": {"ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "language": "en", "og:title": "microCMS & Astro", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/cms/microcms/", "og:locale": "en", "ogDescription": "Add content to your Astro project using microCMS", "og:description": "Add content to your Astro project using microCMS", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "description": "Add content to your Astro project using microCMS", "og:url": "https://docs.astro.build/en/guides/cms/microcms/", "favicon": "https://docs.astro.build/favicon.ico", "title": "microCMS & Astro | Docs", "ogTitle": "microCMS & Astro", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/microcms.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/microcms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/microcms.webp", "scrapeId": "45900dc1-19bc-4f18-b20d-81158af9d1af", "sourceURL": "https://docs.astro.build/en/guides/cms/microcms", "url": "https://docs.astro.build/en/guides/cms/microcms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- Check out [the official microCMS document](https://document.microcms.io/tutorial/astro/astro-top)\n- Blog: [Build a blog with microCMS](https://blog.microcms.io/astro-microcms-introduction/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/microcms", "title": "microCMS & Astro", "description": "microCMS is an API-based headless CMS that lets you define content using schemas, and manage it using the dashboard.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:29:32", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "language": "en", "og:title": "microCMS & Astro", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/cms/microcms/", "og:locale": "en", "ogDescription": "Add content to your Astro project using microCMS", "og:description": "Add content to your Astro project using microCMS", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "description": "Add content to your Astro project using microCMS", "og:url": "https://docs.astro.build/en/guides/cms/microcms/", "favicon": "https://docs.astro.build/favicon.ico", "title": "microCMS & Astro | Docs", "ogTitle": "microCMS & Astro", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/microcms.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/microcms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/microcms.webp", "scrapeId": "45900dc1-19bc-4f18-b20d-81158af9d1af", "sourceURL": "https://docs.astro.build/en/guides/cms/microcms", "url": "https://docs.astro.build/en/guides/cms/microcms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Payload CMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Payload CMS & Astro in astro.\n\n# Payload CMS & Astro\n\nPayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.Here's a quick rundown of what this is about:\n\n## Integrating with Astro\n\nPrerequisites\n\n1. **An Astro project** - If you don‚Äôt have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.\n2. **A MongoDB database** - PayloadCMS will ask you for a MongoDB connection string when creating a new project. You can set one up locally or use [MongoDBAtlas](https://www.mongodb.com/) to host a database on the web for free.\n3. **A PayloadCMS REST API** - Create a [PayloadCMS](https://payloadcms.com/docs/getting-started/installation) project and connect it to your MongoDB database during the setup.\n\n## Configuring Astro for your PayloadCMS collection\n\nYour Payload project template will contain a file called Posts.ts in `src/collections/`. If you did not choose a template during installation that created a content collection for you, you can create a new Payload CMS Collection by adding this configuration file manually. The example below shows this file for a collection called `posts` that requires `title`, `content`, and `slug` fields:\n\n```typescript\nimport { CollectionConfig } from \"payload/types\";\n\nconst Posts: CollectionConfig = {\n  slug: \"posts\",\n  admin: {\n    useAsTitle: \"title\",\n  },\n  access: {\n    read: () => true,\n  },\n  fields: [\n    {\n      name: \"title\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"content\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"slug\",\n      type: \"text\",\n      required: true,\n    },\n  ],\n};\n\nexport default Posts;\n```\n\n1. Import and add both `Users` (available in all PayloadCMS projects) and any other collections (e.g. `Posts`) to the available collections in the `payload.config.ts` file.\n\n```typescript\nimport { buildConfig } from \"payload/config\";\nimport path from \"path\";\nimport Users from \"./collections/Users\";\nimport Posts from \"./collections/Posts\";\n\nexport default buildConfig({\n     serverURL: \"http://localhost:4321\",\n     admin: {\n       user: Users.slug,\n     },\n     collections: [Users, Posts],\n     typescript: {\n       outputFile: path.resolve(__dirname, \"payload-types.ts\"),\n     },\n     graphQL: {\n       schemaOutputFile: path.resolve(__dirname, \"generated-schema.graphql\"),\n     },\n});\n```\n\nThis will make a new collection called ‚ÄúPosts‚Äù appear in your PayloadCMS Dashboard next to the ‚ÄúUsers‚Äù collection.\n\n2. Enter the ‚ÄúPosts‚Äù collection and create a new post. After saving it, you will notice the API URL appear in the bottom right corner.\n\n3. With the dev server running, open `http://localhost:4321/api/posts` in your browser. You should see a JSON file containing the post you have created as an object.\n\n```json\n{\n     \"docs\":[\n         {\n           \"id\":\"64098b16483b0f06a7e20ed4\",\n           \"title\":\"Astro & PayloadCMS Title üöÄ\",\n           \"content\":\"Astro & PayloadCMS Content\",\n           \"slug\":\"astro-payloadcms-slug\",\n           \"createdAt\":\"2023-03-09T07:30:30.837Z\",\n           \"updatedAt\":\"2023-03-09T07:30:30.837Z\"\n         }\n     ],\n     \"totalDocs\":1,\n     \"limit\":10,\n     \"totalPages\":1,\n     \"page\":1,\n     \"pagingCounter\":1,\n     \"hasPrevPage\":false,\n     \"hasNextPage\":false,\n     \"prevPage\":null,\n     \"nextPage\":null\n}\n```\n\n## Fetching Data\n\nFetch your PayloadCMS data through your site‚Äôs unique REST API URL and the route for your content. (By default, PayloadCMS will mount all routes through `/api`.) Then, you can render your data properties using Astro‚Äôs `set:html=\"\"` directive.\n\nTogether with your post, PayloadCMS will return some top-level metadata. The actual documents are nested within the `docs` array.\n\nFor example, to display a list of post titles and their content:\n\n```astro\n---\nimport HomeLayout from \"../layouts/HomeLayout.astro\";\nconst res = await fetch(\"http://localhost:5000/api/posts\") // http://localhost:4321/api/posts by default\nconst posts = await res.json()\n---\n<HomeLayout title='Astro Blog'>\n  {\n    posts.docs.map((post) => (\n        <h2 set:html={post.title} />\n        <p set:html={post.content} />\n    ))\n  }\n</HomeLayout>\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/payload", "title": "Payload CMS & Astro", "description": "PayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:32:22", "type": "overview", "page_metadata": {"og:title": "Payload CMS & Astro", "og:description": "Add content to your Astro project using Payload as a CMS", "ogDescription": "Add content to your Astro project using Payload as a CMS", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/payload/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "og:type": "article", "ogTitle": "Payload CMS & Astro", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/payload/", "title": "Payload CMS & Astro | Docs", "og:site_name": "Docs", "description": "Add content to your Astro project using Payload as a CMS", "docsearch:language": "en", "twitter:site": "astrodotbuild", "language": "en", "scrapeId": "09c320f4-3d07-4feb-a89f-7496f20b9ba8", "sourceURL": "https://docs.astro.build/en/guides/cms/payload", "url": "https://docs.astro.build/en/guides/cms/payload/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrating with astro in astro?\n\nAssistant: To integrating with astro in astro, here's what you do:\nPrerequisites\n\n1. **An Astro project** - If you don‚Äôt have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.\n2. **A MongoDB database** - PayloadCMS will ask you for a MongoDB connection string when creating a new project. You can set one up locally or use [MongoDBAtlas](https://www.mongodb.com/) to host a database on the web for free.\n3. **A PayloadCMS REST API** - Create a [PayloadCMS](https://payloadcms.com/docs/getting-started/installation) project and connect it to your MongoDB database during the setup..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/payload", "title": "Payload CMS & Astro", "description": "PayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:32:22", "type": "section_detail", "page_metadata": {"og:title": "Payload CMS & Astro", "og:description": "Add content to your Astro project using Payload as a CMS", "ogDescription": "Add content to your Astro project using Payload as a CMS", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/payload/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "og:type": "article", "ogTitle": "Payload CMS & Astro", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/payload/", "title": "Payload CMS & Astro | Docs", "og:site_name": "Docs", "description": "Add content to your Astro project using Payload as a CMS", "docsearch:language": "en", "twitter:site": "astrodotbuild", "language": "en", "scrapeId": "09c320f4-3d07-4feb-a89f-7496f20b9ba8", "sourceURL": "https://docs.astro.build/en/guides/cms/payload", "url": "https://docs.astro.build/en/guides/cms/payload/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuring astro for your payloadcms collection in astro?\n\nAssistant: To configuring astro for your payloadcms collection in astro, here's what you do:\nYour Payload project template will contain a file called Posts.ts in `src/collections/`. If you did not choose a template during installation that created a content collection for you, you can create a new Payload CMS Collection by adding this configuration file manually. The example below shows this file for a collection called `posts` that requires `title`, `content`, and `slug` fields:\n\n```typescript\nimport { CollectionConfig } from \"payload/types\";\n\nconst Posts: CollectionConfig = {\n  slug: \"posts\",\n  admin: {\n    useAsTitle: \"title\",\n  },\n  access: {\n    read: () => true,\n  },\n  fields: [\n    {\n      name: \"title\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"content\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"slug\",\n      type: \"text\",\n      required: true,\n    },\n  ],\n};\n\nexport default Posts;\n```\n\n1. Import and add both `Users` (available in all PayloadCMS projects) and any other collections (e.g. `Posts`) to the available collections in the `payload.config.ts` file.\n\n```typescript\nimport { buildConfig } from \"payload/config\";\nimport path from \"path\";\nimport Users from \"./collections/Users\";\nimport Posts from \"./collections/Posts\";\n\nexport default buildConfig({\n     serverURL: \"http://localhost:4321\",\n     admin: {\n       user: Users.slug,\n     },\n     collections: [Users, Posts],\n     typescript: {\n       outputFile: path.resolve(__dirname, \"payload-types.ts\"),\n     },\n     graphQL: {\n       schemaOutputFile: path.resolve(__dirname, \"generated-schema.graphql\"),\n     },\n});\n```\n\nThis will make a new collection called ‚ÄúPosts‚Äù appear in your PayloadCMS Dashboard next to the ‚ÄúUsers‚Äù collection.\n\n2. Enter the ‚ÄúPosts‚Äù collection and create a new post. After saving it, you will notice the API URL appear in the bottom right corner.\n\n3. With the dev server running, open `http://localhost:4321/api/posts` in your browser. You should see a JSON file containing the post you have created as an object.\n\n```json\n{\n     \"docs\":[\n         {\n           \"id\":\"64098b16483b0f06a7e20ed4\",\n           \"title\":\"Astro & PayloadCMS Title üöÄ\",\n           \"content\":\"Astro & PayloadCMS Content\",\n           \"slug\":\"astro-payloadcms-slug\",\n           \"createdAt\":\"2023-03-09T07:30:30.837Z\",\n           \"updatedAt\":\"2023-03-09T07:30:30.837Z\"\n         }\n     ],\n     \"totalDocs\":1,\n     \"limit\":10,\n     \"totalPages\":1,\n     \"page\":1,\n     \"pagingCounter\":1,\n     \"hasPrevPage\":false,\n     \"hasNextPage\":false,\n     \"prevPage\":null,\n     \"nextPage\":null\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/payload", "title": "Payload CMS & Astro", "description": "PayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:32:22", "type": "section_detail", "page_metadata": {"og:title": "Payload CMS & Astro", "og:description": "Add content to your Astro project using Payload as a CMS", "ogDescription": "Add content to your Astro project using Payload as a CMS", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/payload/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "og:type": "article", "ogTitle": "Payload CMS & Astro", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/payload/", "title": "Payload CMS & Astro | Docs", "og:site_name": "Docs", "description": "Add content to your Astro project using Payload as a CMS", "docsearch:language": "en", "twitter:site": "astrodotbuild", "language": "en", "scrapeId": "09c320f4-3d07-4feb-a89f-7496f20b9ba8", "sourceURL": "https://docs.astro.build/en/guides/cms/payload", "url": "https://docs.astro.build/en/guides/cms/payload/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I fetching data in astro?\n\nAssistant: To fetching data in astro, here's what you do:\nFetch your PayloadCMS data through your site‚Äôs unique REST API URL and the route for your content. (By default, PayloadCMS will mount all routes through `/api`.) Then, you can render your data properties using Astro‚Äôs `set:html=\"\"` directive.\n\nTogether with your post, PayloadCMS will return some top-level metadata. The actual documents are nested within the `docs` array.\n\nFor example, to display a list of post titles and their content:\n\n```astro\n---\nimport HomeLayout from \"../layouts/HomeLayout.astro\";\nconst res = await fetch(\"http://localhost:5000/api/posts\") // http://localhost:4321/api/posts by default\nconst posts = await res.json()\n---\n<HomeLayout title='Astro Blog'>\n  {\n    posts.docs.map((post) => (\n        <h2 set:html={post.title} />\n        <p set:html={post.content} />\n    ))\n  }\n</HomeLayout>\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/payload", "title": "Payload CMS & Astro", "description": "PayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:32:22", "type": "section_detail", "page_metadata": {"og:title": "Payload CMS & Astro", "og:description": "Add content to your Astro project using Payload as a CMS", "ogDescription": "Add content to your Astro project using Payload as a CMS", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/payload/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "og:type": "article", "ogTitle": "Payload CMS & Astro", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/payload/", "title": "Payload CMS & Astro | Docs", "og:site_name": "Docs", "description": "Add content to your Astro project using Payload as a CMS", "docsearch:language": "en", "twitter:site": "astrodotbuild", "language": "en", "scrapeId": "09c320f4-3d07-4feb-a89f-7496f20b9ba8", "sourceURL": "https://docs.astro.build/en/guides/cms/payload", "url": "https://docs.astro.build/en/guides/cms/payload/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Payload CMS & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configuring Posts Collection**:\n\n```yaml\nimport { CollectionConfig } from \"payload/types\";\n\nconst Posts: CollectionConfig = {\n  slug: \"posts\",\n  admin: {\n    useAsTitle: \"title\",\n  },\n  access: {\n    read: () => true,\n  },\n  fields: [\n    {\n      name: \"title\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"content\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"slug\",\n      type: \"text\",\n      required: true,\n    },\n  ],\n};\n\nexport default Posts;\n```\n\nThis snippet shows you how to configuring posts collection, which is an important aspect of payload cms & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/payload", "title": "Payload CMS & Astro", "description": "PayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:32:22", "type": "code_examples", "page_metadata": {"og:title": "Payload CMS & Astro", "og:description": "Add content to your Astro project using Payload as a CMS", "ogDescription": "Add content to your Astro project using Payload as a CMS", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/payload/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "og:type": "article", "ogTitle": "Payload CMS & Astro", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/payload/", "title": "Payload CMS & Astro | Docs", "og:site_name": "Docs", "description": "Add content to your Astro project using Payload as a CMS", "docsearch:language": "en", "twitter:site": "astrodotbuild", "language": "en", "scrapeId": "09c320f4-3d07-4feb-a89f-7496f20b9ba8", "sourceURL": "https://docs.astro.build/en/guides/cms/payload", "url": "https://docs.astro.build/en/guides/cms/payload/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Payload CMS & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have an Astro project and a MongoDB database set up before starting the integration.\n\nUse the provided configuration examples to set up your PayloadCMS collections correctly.\n\nAlways check the API URL after creating a new post to ensure it is accessible.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/payload", "title": "Payload CMS & Astro", "description": "PayloadCMS is a headless open-source content management system that can be used to provide content for your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:32:22", "type": "best_practices", "page_metadata": {"og:title": "Payload CMS & Astro", "og:description": "Add content to your Astro project using Payload as a CMS", "ogDescription": "Add content to your Astro project using Payload as a CMS", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/payload/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/payload.webp", "og:type": "article", "ogTitle": "Payload CMS & Astro", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/payload/", "title": "Payload CMS & Astro | Docs", "og:site_name": "Docs", "description": "Add content to your Astro project using Payload as a CMS", "docsearch:language": "en", "twitter:site": "astrodotbuild", "language": "en", "scrapeId": "09c320f4-3d07-4feb-a89f-7496f20b9ba8", "sourceURL": "https://docs.astro.build/en/guides/cms/payload", "url": "https://docs.astro.build/en/guides/cms/payload/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Netlify is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Netlify in astro.\n\n# Deploy your Astro Site to Netlify\n\nThis guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.Here's a quick rundown of what this is about:\n\n## Project Configuration\n\nYour Astro project can be deployed to Netlify in three different ways: as a static site, a server-rendered site, or an edge-rendered site.\n\n## Static Site\n\nYour Astro project is a static site by default. You don‚Äôt need any extra configuration to deploy a static Astro site to Netlify.\n\n## Adapter for SSR\n\nAdd the Netlify adapter to enable SSR in your Astro project and deploy to Netlify with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n```\n\nnpx astro add netlify\n```\n\nIf you prefer to install the adapter manually instead, complete the following two steps:\n\n1. Install the `@astrojs/netlify` adapter to your project‚Äôs dependencies using your preferred package manager. If you‚Äôre using npm or aren‚Äôt sure, run this in the terminal:\n\n```\n\nnpm install @astrojs/netlify\n```\n\n2. Add two new lines to your `astro.config.mjs` project configuration file.\n\n```\n\nimport { defineConfig } from 'astro/config';\n\nimport netlify from '@astrojs/netlify';\n\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: netlify(),\n\n});\n```\n\nYou can also deploy your project‚Äôs Astro middleware using Netlify‚Äôs Edge Functions by adding `edgeMiddleware: true` to the Netlify adapter‚Äôs configuration:\n\n```\n\nimport { defineConfig } from 'astro/config';\n\nimport netlify from '@astrojs/netlify/functions';\n\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: netlify({\n\n       edgeMiddleware: true\n\n     }),\n\n});\n```\n\nTo run middleware for pre-rendered pages, set `edgeMiddleware: true`. This allows you to use middleware to implement authentication, redirects, or similar things, while still using static HTML output.\n\n## How to deploy\n\nYou can deploy to Netlify through the website UI or using Netlify‚Äôs CLI (command line interface). The process is the same for both static and SSR Astro sites.\n\n## Website UI Deployment\n\nIf your project is stored in GitHub, GitLab, BitBucket, or Azure DevOps, you can use the Netlify website UI to deploy your Astro site.\n\n1. Click `Add a new site` in your Netlify dashboard\n\n2. Choose `Import an existing project`\n\nWhen you import your Astro repository from your Git provider, Netlify should automatically detect and pre-fill the correct configuration settings for you.\n\n3. Make sure that the following settings are entered, then press the `Deploy` button:\n\n   - **Build Command:** `astro build` or `npm run build`\n   - **Publish directory:** `dist`\n\nAfter deploying, you will be redirected to the site overview page. There, you can edit the details of your site.\n\nAny future changes to your source repository will trigger preview and production deploys based on your deployment configuration.\n\n## netlify.toml file\n\nYou can optionally create a new `netlify.toml` file at the top level of your project repository to configure your build command and publish directory, as well as other project settings including environment variables and redirects. Netlify will read this file and automatically configure your deployment.\n\nTo configure the default settings, create a `netlify.toml` file with the following contents:\n\n```\n\n[build]\n\n  command = \"npm run build\"\n\n  publish = \"dist\"\n```\n\nMore info at ‚ÄúDeploying an existing Astro Git repository‚Äù on Netlify‚Äôs blog.\n\n## CLI Deployment\n\nYou can also create a new site on Netlify and link up your Git repository by installing and using the Netlify CLI.\n\n1. Install Netlify‚Äôs CLI globally\n\n```\n\nnpm install --global netlify-cli\n```\n\n2. Run `netlify login` and follow the instructions to log in and authorize Netlify\n\n3. Run `netlify init` and follow the instructions\n\n4. Confirm your build command ( `astro build`)\n\nThe CLI will automatically detect the build settings ( `astro build`) and deploy directory ( `dist`), and will offer to automatically generate a `netlify.toml` file with those settings.\n\n5. Build and deploy by pushing to Git\n\nThe CLI will add a deploy key to the repository, which means your site will be automatically rebuilt on Netlify every time you `git push`.\n\n## Set a Node.js Version\n\nIf you are using a legacy build image on Netlify, make sure that your Node.js version is set. Astro requires `v18.17.1` or `v20.3.0` or higher.\n\nYou can specify your Node.js version in Netlify using:\n\n- a `.nvmrc` file in your base directory.\n- a `NODE_VERSION` environment variable in your site‚Äôs settings using the Netlify project dashboard.\n\n## Using Netlify Functions\n\nNo special configuration is required to use Netlify Functions with Astro. Add a `netlify/functions` directory to your project root and follow the Netlify Functions documentation to get started!\n\n## Examples\n\n- Deploy An Astro site with Forms, Serverless Functions, and Redirects ‚Äî Netlify Blog\n- Deployment Walkthrough Video ‚Äî Netlify YouTube channel\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "overview", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I project configuration in astro?\n\nAssistant: To project configuration in astro, here's what you do:\nYour Astro project can be deployed to Netlify in three different ways: as a static site, a server-rendered site, or an edge-rendered site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I static site in astro?\n\nAssistant: To static site in astro, here's what you do:\nYour Astro project is a static site by default. You don‚Äôt need any extra configuration to deploy a static Astro site to Netlify..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adapter for ssr in astro?\n\nAssistant: To adapter for ssr in astro, here's what you do:\nAdd the Netlify adapter to enable SSR in your Astro project and deploy to Netlify with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n```\n\nnpx astro add netlify\n```\n\nIf you prefer to install the adapter manually instead, complete the following two steps:\n\n1. Install the `@astrojs/netlify` adapter to your project‚Äôs dependencies using your preferred package manager. If you‚Äôre using npm or aren‚Äôt sure, run this in the terminal:\n\n```\n\nnpm install @astrojs/netlify\n```\n\n2. Add two new lines to your `astro.config.mjs` project configuration file.\n\n```\n\nimport { defineConfig } from 'astro/config';\n\nimport netlify from '@astrojs/netlify';\n\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: netlify(),\n\n});\n```\n\nYou can also deploy your project‚Äôs Astro middleware using Netlify‚Äôs Edge Functions by adding `edgeMiddleware: true` to the Netlify adapter‚Äôs configuration:\n\n```\n\nimport { defineConfig } from 'astro/config';\n\nimport netlify from '@astrojs/netlify/functions';\n\n\n\nexport default defineConfig({\n\n     output: 'server',\n\n     adapter: netlify({\n\n       edgeMiddleware: true\n\n     }),\n\n});\n```\n\nTo run middleware for pre-rendered pages, set `edgeMiddleware: true`. This allows you to use middleware to implement authentication, redirects, or similar things, while still using static HTML output..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\nYou can deploy to Netlify through the website UI or using Netlify‚Äôs CLI (command line interface). The process is the same for both static and SSR Astro sites..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I website ui deployment in astro?\n\nAssistant: To website ui deployment in astro, here's what you do:\nIf your project is stored in GitHub, GitLab, BitBucket, or Azure DevOps, you can use the Netlify website UI to deploy your Astro site.\n\n1. Click `Add a new site` in your Netlify dashboard\n\n2. Choose `Import an existing project`\n\nWhen you import your Astro repository from your Git provider, Netlify should automatically detect and pre-fill the correct configuration settings for you.\n\n3. Make sure that the following settings are entered, then press the `Deploy` button:\n\n   - **Build Command:** `astro build` or `npm run build`\n   - **Publish directory:** `dist`\n\nAfter deploying, you will be redirected to the site overview page. There, you can edit the details of your site.\n\nAny future changes to your source repository will trigger preview and production deploys based on your deployment configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I netlify.toml file in astro?\n\nAssistant: To netlify.toml file in astro, here's what you do:\nYou can optionally create a new `netlify.toml` file at the top level of your project repository to configure your build command and publish directory, as well as other project settings including environment variables and redirects. Netlify will read this file and automatically configure your deployment.\n\nTo configure the default settings, create a `netlify.toml` file with the following contents:\n\n```\n\n[build]\n\n  command = \"npm run build\"\n\n  publish = \"dist\"\n```\n\nMore info at ‚ÄúDeploying an existing Astro Git repository‚Äù on Netlify‚Äôs blog..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cli deployment in astro?\n\nAssistant: To cli deployment in astro, here's what you do:\nYou can also create a new site on Netlify and link up your Git repository by installing and using the Netlify CLI.\n\n1. Install Netlify‚Äôs CLI globally\n\n```\n\nnpm install --global netlify-cli\n```\n\n2. Run `netlify login` and follow the instructions to log in and authorize Netlify\n\n3. Run `netlify init` and follow the instructions\n\n4. Confirm your build command ( `astro build`)\n\nThe CLI will automatically detect the build settings ( `astro build`) and deploy directory ( `dist`), and will offer to automatically generate a `netlify.toml` file with those settings.\n\n5. Build and deploy by pushing to Git\n\nThe CLI will add a deploy key to the repository, which means your site will be automatically rebuilt on Netlify every time you `git push`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I set a node.js version in astro?\n\nAssistant: To set a node.js version in astro, here's what you do:\nIf you are using a legacy build image on Netlify, make sure that your Node.js version is set. Astro requires `v18.17.1` or `v20.3.0` or higher.\n\nYou can specify your Node.js version in Netlify using:\n\n- a `.nvmrc` file in your base directory.\n- a `NODE_VERSION` environment variable in your site‚Äôs settings using the Netlify project dashboard..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using netlify functions in astro?\n\nAssistant: To using netlify functions in astro, here's what you do:\nNo special configuration is required to use Netlify Functions with Astro. Add a `netlify/functions` directory to your project root and follow the Netlify Functions documentation to get started!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\n- Deploy An Astro site with Forms, Serverless Functions, and Redirects ‚Äî Netlify Blog\n- Deployment Walkthrough Video ‚Äî Netlify YouTube channel.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "section_detail", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Netlify in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Netlify Adapter**:\n\n```yaml\nnpx astro add netlify\n```\n\nThis snippet shows you how to install netlify adapter, which is an important aspect of deploy your astro site to netlify.\n\n**Install Netlify Adapter Manually**:\n\n```yaml\nnpm install @astrojs/netlify\n```\n\nThis snippet shows you how to install netlify adapter manually, which is an important aspect of deploy your astro site to netlify.\n\n**Astro Configuration for SSR**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n     output: 'server',\n     adapter: netlify(),\n});\n```\n\nThis snippet shows you how to astro configuration for ssr, which is an important aspect of deploy your astro site to netlify.\n\n**Astro Configuration for Edge Functions**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify/functions';\n\nexport default defineConfig({\n     output: 'server',\n     adapter: netlify({\n       edgeMiddleware: true\n     }),\n});\n```\n\nThis snippet shows you how to astro configuration for edge functions, which is an important aspect of deploy your astro site to netlify.\n\n**netlify.toml Configuration**:\n\n```yaml\n[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n```\n\nThis snippet shows you how to netlify.toml configuration, which is an important aspect of deploy your astro site to netlify.\n\n**Install Netlify CLI**:\n\n```yaml\nnpm install --global netlify-cli\n```\n\nThis snippet shows you how to install netlify cli, which is an important aspect of deploy your astro site to netlify.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "code_examples", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to Netlify in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to set the correct build command and publish directory in the Netlify settings.\n\nConsider using a `netlify.toml` file for easier configuration management.\n\nEnsure your Node.js version is compatible with Astro when using legacy build images.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/netlify", "title": "Deploy your Astro Site to Netlify", "description": "This guide includes instructions for deploying to Netlify through the website UI or Netlify‚Äôs CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:32:58", "type": "best_practices", "page_metadata": {"ogLocale": "en", "description": "How to deploy your Astro site to the web on Netlify.", "og:url": "https://docs.astro.build/en/guides/deploy/netlify/", "og:title": "Deploy your Astro Site to Netlify", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Netlify", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "title": "Deploy your Astro Site to Netlify | Docs", "ogDescription": "How to deploy your Astro site to the web on Netlify.", "og:description": "How to deploy your Astro site to the web on Netlify.", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:locale": "en", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/netlify.webp", "ogUrl": "https://docs.astro.build/en/guides/deploy/netlify/", "ogSiteName": "Docs", "scrapeId": "33b2da8b-d980-4b1c-8acb-3d3d38f02fce", "sourceURL": "https://docs.astro.build/en/guides/deploy/netlify", "url": "https://docs.astro.build/en/guides/deploy/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site with Cleavr is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site with Cleavr in astro.\n\n# Deploy your Astro Site with Cleavr\n\nYou can deploy your Astro project to your own Virtual Private Server (VPS) using Cleavr, a server and app deployment management tool.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nTo get started, you will need:\n\n- A Cleavr account\n- A server on your VPS provider using Cleavr\n\n## Add your site\n\n1. In Cleavr, navigate to the server you want to add your Astro project to.\n\n2. Select **Add Site** and fill in the details for your application, such as domain name.\n\n3. For **App Type**, select ‚ÄòNodeJS Static‚Äô or ‚ÄòNodeJS SSR‚Äô according to how you are setting up your Astro app.\n\n4. For Static apps, set **Artifact Folder** to `dist`.\n\n5. For SSR apps:\n   - Set **Entry Point** to `entry.mjs`.\n   - Set **Artifact Folder** to `dist/server`.\n6. Select **Add** to add the site to your server.\n\n## Setup and deploy\n\n1. Once your new site is added, click **Setup and deploy**.\n\n2. Select the **VC Profile**, **Repo**, and **Branch** for your Astro Project.\n\n3. Make any additional configurations necessary for your project.\n\n4. Click on the **Deployments** tab and then click on **Deploy**.\n\nCongratulations, you‚Äôve just deployed your Astro app!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cleavr", "title": "Deploy your Astro Site with Cleavr", "description": "You can deploy your Astro project to your own Virtual Private Server (VPS) using Cleavr, a server and app deployment management tool.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:33:15", "type": "overview", "page_metadata": {"og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "How to deploy your Astro site to your VPS server using Cleavr.", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/cleavr/", "ogUrl": "https://docs.astro.build/en/guides/deploy/cleavr/", "og:locale": "en", "og:title": "Deploy your Astro Site with Cleavr", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to your VPS server using Cleavr.", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "title": "Deploy your Astro Site with Cleavr | Docs", "og:type": "article", "docsearch:language": "en", "ogSiteName": "Docs", "ogDescription": "How to deploy your Astro site to your VPS server using Cleavr.", "ogTitle": "Deploy your Astro Site with Cleavr", "ogLocale": "en", "scrapeId": "20088364-fae8-43aa-b8c3-edb6084e59a1", "sourceURL": "https://docs.astro.build/en/guides/deploy/cleavr", "url": "https://docs.astro.build/en/guides/deploy/cleavr/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nTo get started, you will need:\n\n- A Cleavr account\n- A server on your VPS provider using Cleavr.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cleavr", "title": "Deploy your Astro Site with Cleavr", "description": "You can deploy your Astro project to your own Virtual Private Server (VPS) using Cleavr, a server and app deployment management tool.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:33:15", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "How to deploy your Astro site to your VPS server using Cleavr.", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/cleavr/", "ogUrl": "https://docs.astro.build/en/guides/deploy/cleavr/", "og:locale": "en", "og:title": "Deploy your Astro Site with Cleavr", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to your VPS server using Cleavr.", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "title": "Deploy your Astro Site with Cleavr | Docs", "og:type": "article", "docsearch:language": "en", "ogSiteName": "Docs", "ogDescription": "How to deploy your Astro site to your VPS server using Cleavr.", "ogTitle": "Deploy your Astro Site with Cleavr", "ogLocale": "en", "scrapeId": "20088364-fae8-43aa-b8c3-edb6084e59a1", "sourceURL": "https://docs.astro.build/en/guides/deploy/cleavr", "url": "https://docs.astro.build/en/guides/deploy/cleavr/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add your site in astro?\n\nAssistant: To add your site in astro, here's what you do:\n1. In Cleavr, navigate to the server you want to add your Astro project to.\n\n2. Select **Add Site** and fill in the details for your application, such as domain name.\n\n3. For **App Type**, select ‚ÄòNodeJS Static‚Äô or ‚ÄòNodeJS SSR‚Äô according to how you are setting up your Astro app.\n\n4. For Static apps, set **Artifact Folder** to `dist`.\n\n5. For SSR apps:\n   - Set **Entry Point** to `entry.mjs`.\n   - Set **Artifact Folder** to `dist/server`.\n6. Select **Add** to add the site to your server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cleavr", "title": "Deploy your Astro Site with Cleavr", "description": "You can deploy your Astro project to your own Virtual Private Server (VPS) using Cleavr, a server and app deployment management tool.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:33:15", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "How to deploy your Astro site to your VPS server using Cleavr.", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/cleavr/", "ogUrl": "https://docs.astro.build/en/guides/deploy/cleavr/", "og:locale": "en", "og:title": "Deploy your Astro Site with Cleavr", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to your VPS server using Cleavr.", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "title": "Deploy your Astro Site with Cleavr | Docs", "og:type": "article", "docsearch:language": "en", "ogSiteName": "Docs", "ogDescription": "How to deploy your Astro site to your VPS server using Cleavr.", "ogTitle": "Deploy your Astro Site with Cleavr", "ogLocale": "en", "scrapeId": "20088364-fae8-43aa-b8c3-edb6084e59a1", "sourceURL": "https://docs.astro.build/en/guides/deploy/cleavr", "url": "https://docs.astro.build/en/guides/deploy/cleavr/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I setup and deploy in astro?\n\nAssistant: To setup and deploy in astro, here's what you do:\n1. Once your new site is added, click **Setup and deploy**.\n\n2. Select the **VC Profile**, **Repo**, and **Branch** for your Astro Project.\n\n3. Make any additional configurations necessary for your project.\n\n4. Click on the **Deployments** tab and then click on **Deploy**.\n\nCongratulations, you‚Äôve just deployed your Astro app!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/cleavr", "title": "Deploy your Astro Site with Cleavr", "description": "You can deploy your Astro project to your own Virtual Private Server (VPS) using Cleavr, a server and app deployment management tool.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 01:33:15", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "How to deploy your Astro site to your VPS server using Cleavr.", "language": "en", "og:url": "https://docs.astro.build/en/guides/deploy/cleavr/", "ogUrl": "https://docs.astro.build/en/guides/deploy/cleavr/", "og:locale": "en", "og:title": "Deploy your Astro Site with Cleavr", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to your VPS server using Cleavr.", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/cleavr.webp", "title": "Deploy your Astro Site with Cleavr | Docs", "og:type": "article", "docsearch:language": "en", "ogSiteName": "Docs", "ogDescription": "How to deploy your Astro site to your VPS server using Cleavr.", "ogTitle": "Deploy your Astro Site with Cleavr", "ogLocale": "en", "scrapeId": "20088364-fae8-43aa-b8c3-edb6084e59a1", "sourceURL": "https://docs.astro.build/en/guides/deploy/cleavr", "url": "https://docs.astro.build/en/guides/deploy/cleavr/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Data fetching is in astro?\n\nAssistant: Sure, I'd be happy to explain Data fetching in astro.\n\n# Data fetching\n\n.astro files can fetch remote data to help you generate your pages.Here's a quick rundown of what this is about:\n\n## `fetch()` in Astro\n\nAll [Astro components](https://docs.astro.build/en/basics/astro-components/) have access to the [global `fetch()` function](https://developer.mozilla.org/en-US/docs/Web/API/fetch) in their component script to make HTTP requests to APIs using the full URL (e.g. [https://example.com/api](https://example.com/api)). Additionally, you can construct a URL to your project‚Äôs pages and endpoints that are rendered on demand on the server using `new URL(\"/api\", Astro.url)`. This fetch call will be executed at build time, and the data will be available to the component template for generating dynamic HTML. If [SSR](https://docs.astro.build/en/guides/on-demand-rendering/) mode is enabled, any fetch calls will be executed at runtime.\n\nüí° Take advantage of [**top-level await**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await) inside of your Astro component script.\n\nüí° Pass fetched data to both Astro and framework components, as props.\n\n## `fetch()` in Framework Components\n\nThe `fetch()` function is also globally available to any [framework components](https://docs.astro.build/en/guides/framework-components/):\n\n## GraphQL queries\n\nAstro can also use `fetch()` to query a GraphQL server with any valid GraphQL query.\n\n## Fetch from a Headless CMS\n\nAstro components can fetch data from your favorite CMS and then render it as your page content. Using [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes), components can even generate pages based on your CMS content. See our [CMS Guides](https://docs.astro.build/en/guides/cms/) for full details on integrating Astro with headless CMSes including Storyblok, Contentful, and WordPress.\n\n## Community resources\n\n- [Creating a fullstack app with Astro + GraphQL](https://robkendal.co.uk/blog/how-to-build-astro-site-with-graphql/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "overview", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I `fetch()` in astro in astro?\n\nAssistant: To `fetch()` in astro in astro, here's what you do:\nAll [Astro components](https://docs.astro.build/en/basics/astro-components/) have access to the [global `fetch()` function](https://developer.mozilla.org/en-US/docs/Web/API/fetch) in their component script to make HTTP requests to APIs using the full URL (e.g. [https://example.com/api](https://example.com/api)). Additionally, you can construct a URL to your project‚Äôs pages and endpoints that are rendered on demand on the server using `new URL(\"/api\", Astro.url)`. This fetch call will be executed at build time, and the data will be available to the component template for generating dynamic HTML. If [SSR](https://docs.astro.build/en/guides/on-demand-rendering/) mode is enabled, any fetch calls will be executed at runtime.\n\nüí° Take advantage of [**top-level await**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await) inside of your Astro component script.\n\nüí° Pass fetched data to both Astro and framework components, as props..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I `fetch()` in framework components in astro?\n\nAssistant: To `fetch()` in framework components in astro, here's what you do:\nThe `fetch()` function is also globally available to any [framework components](https://docs.astro.build/en/guides/framework-components/):.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I graphql queries in astro?\n\nAssistant: To graphql queries in astro, here's what you do:\nAstro can also use `fetch()` to query a GraphQL server with any valid GraphQL query..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I fetch from a headless cms in astro?\n\nAssistant: To fetch from a headless cms in astro, here's what you do:\nAstro components can fetch data from your favorite CMS and then render it as your page content. Using [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes), components can even generate pages based on your CMS content. See our [CMS Guides](https://docs.astro.build/en/guides/cms/) for full details on integrating Astro with headless CMSes including Storyblok, Contentful, and WordPress..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community resources in astro?\n\nAssistant: To community resources in astro, here's what you do:\n- [Creating a fullstack app with Astro + GraphQL](https://robkendal.co.uk/blog/how-to-build-astro-site-with-graphql/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Data fetching in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Fetch Example in Astro**:\n\n```yaml\nimport Contact from '../components/Contact.jsx';\n\nimport Location from '../components/Location.astro';\n\nconst response = await fetch('https://randomuser.me/api/');\n\nconst data = await response.json();\n\nconst randomUser = data.results[0];\n\n<h1>User</h1>\n\n<h2>{randomUser.name.first} {randomUser.name.last}</h2>\n\n<Contact client:load email={randomUser.email} />\n\n<Location city={randomUser.location.city} />\n```\n\nThis snippet shows you how to fetch example in astro, which is an important aspect of data fetching.\n\n**Fetch Example in Framework Components**:\n\n```yaml\nimport type { FunctionalComponent } from 'preact';\n\nconst data = await fetch('https://example.com/movies.json').then((response) =>\n\n  response.json()\n);\n\nconsole.log(data);\n\nconst Movies: FunctionalComponent = () => {\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default Movies;\n```\n\nThis snippet shows you how to fetch example in framework components, which is an important aspect of data fetching.\n\n**GraphQL Fetch Example**:\n\n```yaml\nconst response = await fetch(\"https://swapi-graphql.netlify.app/.netlify/functions/index\",\n  {\n    method: 'POST',\n    headers: {'Content-Type':'application/json'},\n    body: JSON.stringify({\n      query: `\n        query getFilm ($id:ID!) {\n          film(id: $id) {\n            title\n            releaseDate\n          }\n        }\n      `,\n      variables: {\n        id: \"ZmlsbXM6MQ==\",\n      },\n    }),\n  });\nconst json = await response.json();\nconst { film } = json.data;\n\n<h1>Fetching information about Star Wars: A New Hope</h1>\n<h2>Title: {film.title}</h2>\n<p>Year: {film.releaseDate}</p>\n```\n\nThis snippet shows you how to graphql fetch example, which is an important aspect of data fetching.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "code_examples", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Data fetching in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTake advantage of top-level await inside of your Astro component script.\n\nPass fetched data to both Astro and framework components, as props.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/data-fetching", "title": "Data fetching", "description": ".astro files can fetch remote data to help you generate your pages.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:33:40", "type": "best_practices", "page_metadata": {"og:url": "https://docs.astro.build/en/guides/data-fetching/", "ogTitle": "Data fetching", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogDescription": "Learn how to fetch remote data with Astro using the fetch API.", "ogSiteName": "Docs", "og:type": "article", "og:locale": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "title": "Data fetching | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/data-fetching/", "og:title": "Data fetching", "og:description": "Learn how to fetch remote data with Astro using the fetch API.", "description": "Learn how to fetch remote data with Astro using the fetch API.", "og:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/data-fetching.webp", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "99845b6c-3ec3-4a21-afde-fa14962a9d7b", "sourceURL": "https://docs.astro.build/en/guides/data-fetching", "url": "https://docs.astro.build/en/guides/data-fetching/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/netlify is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/netlify in astro.\n\n# @astrojs/netlify\n\nThis adapter allows Astro to deploy your on-demand rendered routes to Netlify.Here's a quick rundown of what this is about:\n\n## Why Astro Netlify\n\nNetlify is a deployment platform that allows you to host your site by connecting directly to your GitHub repository. This adapter enhances the Astro build process to prepare your project for deployment through Netlify.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Netlify adapter to enable SSR in your Astro project with the `astro add` command. This will install `@astrojs/netlify` and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n## Manual Install\n\nFirst, install the Netlify adapter to your project‚Äôs dependencies using your preferred package manager:\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.*` file.\n\n## Usage\n\nFollow the instructions to build your site locally. After building, you will have a `.netlify/` folder containing both Netlify Functions in the `.netlify/functions-internal/` folder and Netlify Edge Functions in the `.netlify/edge-functions/` folder.\n\nTo deploy your site, install the Netlify CLI and run `netlify deploy`.\n\n## Accessing edge context from your site\n\nNetlify Edge Functions provide a context object that includes metadata about the request such as a user‚Äôs IP, geolocation data, and cookies. This can be accessed through the `Astro.locals.netlify.context` object.\n\n## Running Astro middleware on Netlify Edge Functions\n\nAny Astro middleware is applied to pre-rendered pages at build-time, and to on-demand-rendered pages at runtime. To implement redirects, access control or custom response headers for pre-rendered pages, run your middleware on Netlify Edge Functions by enabling the `edgeMiddleware` option.\n\n## Netlify Image CDN support\n\nThis adapter by default uses the Netlify Image CDN to transform images on-the-fly without impacting build times. To opt out of Netlify‚Äôs Image CDN remote image optimization, use the `imageCDN` option.\n\n## Static sites with the Netlify Adapter\n\nFor static sites ( `output: 'static'`) hosted on Netlify, you usually don‚Äôt need an adapter. However, some deployment features are only available through an adapter.\n\n## Caching Pages\n\nOn-demand rendered pages without any dynamic content can be cached to improve performance and lower resource usage. Enabling the `cacheOnDemandPages` option in the adapter will cache all server-rendered pages for up to one year.\n\n## Including or excluding files from Netlify Functions\n\nWhen deploying an Astro site with on-demand rendering to Netlify, the generated functions automatically trace and include server dependencies. However, you may need to customize which files are included in your Netlify Functions.\n\n## Examples\n\nThe Astro Netlify Edge Starter provides an example and a guide in the README.\n\n## More integrations\n\nVarious integrations are available for front-end frameworks and SSR adapters.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "overview", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why astro netlify in astro?\n\nAssistant: To why astro netlify in astro, here's what you do:\nNetlify is a deployment platform that allows you to host your site by connecting directly to your GitHub repository. This adapter enhances the Astro build process to prepare your project for deployment through Netlify..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Netlify adapter to enable SSR in your Astro project with the `astro add` command. This will install `@astrojs/netlify` and make the appropriate changes to your `astro.config.mjs` file in one step..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the Netlify adapter to your project‚Äôs dependencies using your preferred package manager:\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.*` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nFollow the instructions to build your site locally. After building, you will have a `.netlify/` folder containing both Netlify Functions in the `.netlify/functions-internal/` folder and Netlify Edge Functions in the `.netlify/edge-functions/` folder.\n\nTo deploy your site, install the Netlify CLI and run `netlify deploy`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I accessing edge context from your site in astro?\n\nAssistant: To accessing edge context from your site in astro, here's what you do:\nNetlify Edge Functions provide a context object that includes metadata about the request such as a user‚Äôs IP, geolocation data, and cookies. This can be accessed through the `Astro.locals.netlify.context` object..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I running astro middleware on netlify edge functions in astro?\n\nAssistant: To running astro middleware on netlify edge functions in astro, here's what you do:\nAny Astro middleware is applied to pre-rendered pages at build-time, and to on-demand-rendered pages at runtime. To implement redirects, access control or custom response headers for pre-rendered pages, run your middleware on Netlify Edge Functions by enabling the `edgeMiddleware` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I netlify image cdn support in astro?\n\nAssistant: To netlify image cdn support in astro, here's what you do:\nThis adapter by default uses the Netlify Image CDN to transform images on-the-fly without impacting build times. To opt out of Netlify‚Äôs Image CDN remote image optimization, use the `imageCDN` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I static sites with the netlify adapter in astro?\n\nAssistant: To static sites with the netlify adapter in astro, here's what you do:\nFor static sites ( `output: 'static'`) hosted on Netlify, you usually don‚Äôt need an adapter. However, some deployment features are only available through an adapter..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I caching pages in astro?\n\nAssistant: To caching pages in astro, here's what you do:\nOn-demand rendered pages without any dynamic content can be cached to improve performance and lower resource usage. Enabling the `cacheOnDemandPages` option in the adapter will cache all server-rendered pages for up to one year..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I including or excluding files from netlify functions in astro?\n\nAssistant: To including or excluding files from netlify functions in astro, here's what you do:\nWhen deploying an Astro site with on-demand rendering to Netlify, the generated functions automatically trace and include server dependencies. However, you may need to customize which files are included in your Netlify Functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\nThe Astro Netlify Edge Starter provides an example and a guide in the README..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I more integrations in astro?\n\nAssistant: To more integrations in astro, here's what you do:\nVarious integrations are available for front-end frameworks and SSR adapters..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/netlify in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add netlify\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/netlify.\n\n**Manual Install Command (npm)**:\n\n```yaml\nnpm install @astrojs/netlify\n```\n\nThis snippet shows you how to manual install command (npm), which is an important aspect of @astrojs/netlify.\n\n**Manual Install Command (pnpm)**:\n\n```yaml\npnpm add @astrojs/netlify\n```\n\nThis snippet shows you how to manual install command (pnpm), which is an important aspect of @astrojs/netlify.\n\n**Manual Install Command (Yarn)**:\n\n```yaml\nyarn add @astrojs/netlify\n```\n\nThis snippet shows you how to manual install command (yarn), which is an important aspect of @astrojs/netlify.\n\n**Astro Config Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n    // ...\n    output: 'server',\n    adapter: netlify(),\n});\n```\n\nThis snippet shows you how to astro config example, which is an important aspect of @astrojs/netlify.\n\n**Accessing Edge Context Example**:\n\n```yaml\nconst {\n  geo: { city },\n} = Astro.locals.netlify.context;\n\n<h1>Hello there, friendly visitor from {city}!</h1>\n```\n\nThis snippet shows you how to accessing edge context example, which is an important aspect of @astrojs/netlify.\n\n**Running Middleware Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: netlify({\n    edgeMiddleware: true,\n  }),\n});\n```\n\nThis snippet shows you how to running middleware example, which is an important aspect of @astrojs/netlify.\n\n**Netlify Image CDN Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: netlify({\n    imageCDN: false,\n  }),\n});\n```\n\nThis snippet shows you how to netlify image cdn example, which is an important aspect of @astrojs/netlify.\n\n**Static Sites Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify(),\n  redirects: {\n    '/blog/old-post': '/blog/new-post',\n  },\n});\n```\n\nThis snippet shows you how to static sites example, which is an important aspect of @astrojs/netlify.\n\n**Caching Pages Example**:\n\n```yaml\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: netlify({\n    cacheOnDemandPages: true,\n  }),\n});\n```\n\nThis snippet shows you how to caching pages example, which is an important aspect of @astrojs/netlify.\n\n**Including Files Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: netlify({\n    includeFiles: ['./my-data.json'], // relative to `root`\n  }),\n});\n```\n\nThis snippet shows you how to including files example, which is an important aspect of @astrojs/netlify.\n\n**Excluding Files Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: netlify({\n    excludeFiles: ['./src/some_big_file.jpg'], // relative to `root`\n  }),\n});\n```\n\nThis snippet shows you how to excluding files example, which is an important aspect of @astrojs/netlify.\n\n**Using Glob Patterns Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  output: 'server',\n  adapter: netlify({\n    includeFiles: ['./data/**/*.json'],\n    excludeFiles: ['./node_modules/package/**/*', './src/**/*.test.js']\n  }),\n});\n```\n\nThis snippet shows you how to using glob patterns example, which is an important aspect of @astrojs/netlify.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "code_examples", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/netlify in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `astro add` command for easy integration setup.\n\nFor static sites, consider using the adapter for additional deployment features.\n\nEnable caching for on-demand rendered pages to improve performance.\n\nUse `includeFiles` and `excludeFiles` to manage dependencies in Netlify Functions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/netlify", "title": "@astrojs/netlify", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Netlify.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:34:38", "type": "best_practices", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "title": "@astrojs/netlify | Docs", "ogLocale": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "twitter:card": "summary_large_image", "og:description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "og:locale": "en", "description": "Learn how to use the @astrojs/netlify SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "language": "en", "ogTitle": "@astrojs/netlify", "ogSiteName": "Docs", "og:title": "@astrojs/netlify", "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/netlify.webp", "scrapeId": "723acb48-77f4-41b5-bbb4-f2adf34b5438", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/netlify", "url": "https://docs.astro.build/en/guides/integrations-guide/netlify/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Migrate an existing project to Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Migrate an existing project to Astro in astro.\n\n# Migrate an existing project to Astro\n\nReady to convert your site to Astro? See one of our guides for migration tips.Here's a quick rundown of what this is about:\n\n## Migration Guides\n\n- [Create React App](https://docs.astro.build/en/guides/migrate-to-astro/from-create-react-app/)\n- [Docusaurus](https://docs.astro.build/en/guides/migrate-to-astro/from-docusaurus/)\n- [Eleventy](https://docs.astro.build/en/guides/migrate-to-astro/from-eleventy/)\n- [Gatsby](https://docs.astro.build/en/guides/migrate-to-astro/from-gatsby/)\n- [GitBook](https://docs.astro.build/en/guides/migrate-to-astro/from-gitbook/)\n- [Gridsome](https://docs.astro.build/en/guides/migrate-to-astro/from-gridsome/)\n- [Hugo](https://docs.astro.build/en/guides/migrate-to-astro/from-hugo/)\n- [Jekyll](https://docs.astro.build/en/guides/migrate-to-astro/from-jekyll/)\n- [Next.js](https://docs.astro.build/en/guides/migrate-to-astro/from-nextjs/)\n- [NuxtJS](https://docs.astro.build/en/guides/migrate-to-astro/from-nuxtjs/)\n- [Pelican](https://docs.astro.build/en/guides/migrate-to-astro/from-pelican/)\n- [SvelteKit](https://docs.astro.build/en/guides/migrate-to-astro/from-sveltekit/)\n- [VuePress](https://docs.astro.build/en/guides/migrate-to-astro/from-vuepress/)\n- [WordPress](https://docs.astro.build/en/guides/migrate-to-astro/from-wordpress/) \n\nNote that many of these pages are **stubs**: they‚Äôre collections of resources waiting for your contribution!\n\n## Why migrate your site to Astro?\n\nAstro provides many benefits: performance, simplicity, and many of the features you want built right into the framework. When you do need to extend your site, Astro provides several [official and 3rd-party community integrations](https://astro.build/integrations).\n\nMigrating may be less work than you think!\n\nDepending on your existing project, you may be able to use your existing:\n\n- [UI framework components](https://docs.astro.build/en/guides/framework-components/) directly in Astro.\n- [CSS stylesheets or libraries](https://docs.astro.build/en/guides/styling/) including Tailwind.\n- [Markdown/MDX files](https://docs.astro.build/en/guides/markdown-content/), configured using your existing [remark and rehype plugins](https://docs.astro.build/en/guides/markdown-content/#markdown-plugins).\n- [Content from a CMS](https://docs.astro.build/en/guides/cms/) through an integration or API.\n\n## Which projects can I convert to Astro?\n\n[Many existing sites can be built with Astro](https://docs.astro.build/en/concepts/why-astro/). Astro is ideally suited for your existing content-based sites like blogs, landing pages, marketing sites and portfolios. Astro integrates with several popular headless CMSes, and allows you to connect eCommerce shop carts.\n\nAstro allows you have a fully statically-generated website, a dynamic app with routes rendered on demand, or a combination of both with [complete control over your project rendering](https://docs.astro.build/en/guides/on-demand-rendering/), making it a great replacement for SSGs or for sites that need to fetch some page data on the fly.\n\n## How will my project design change?\n\nDepending on your existing project, you may need to think differently about:\n\n- Designing in [Astro Islands](https://docs.astro.build/en/concepts/islands/#what-is-an-island) to avoid sending unnecessary JavaScript to the browser.\n- Providing client-side interactivity with [client-side `<script>` tags](https://docs.astro.build/en/guides/client-side-scripts/) or [UI framework components](https://docs.astro.build/en/guides/framework-components/).\n- Managing [shared state](https://docs.astro.build/en/recipes/sharing-state-islands/) with Nano Stores or local storage instead of app-wide hooks or wrappers.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/migrate-to-astro", "title": "Migrate an existing project to Astro", "description": "Ready to convert your site to Astro? See one of our guides for migration tips.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:37:02", "type": "overview", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Some tips and tricks for converting your site to Astro.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:locale": "en", "language": "en", "ogTitle": "Migrate an existing project to Astro", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "Some tips and tricks for converting your site to Astro.", "twitter:card": "summary_large_image", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/migrate-to-astro/", "og:description": "Some tips and tricks for converting your site to Astro.", "title": "Migrate an existing project to Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Migrate an existing project to Astro", "scrapeId": "37b2ca41-d9d0-4c0d-aa47-c2fe3322fc38", "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro", "url": "https://docs.astro.build/en/guides/migrate-to-astro/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I migration guides in astro?\n\nAssistant: To migration guides in astro, here's what you do:\n- [Create React App](https://docs.astro.build/en/guides/migrate-to-astro/from-create-react-app/)\n- [Docusaurus](https://docs.astro.build/en/guides/migrate-to-astro/from-docusaurus/)\n- [Eleventy](https://docs.astro.build/en/guides/migrate-to-astro/from-eleventy/)\n- [Gatsby](https://docs.astro.build/en/guides/migrate-to-astro/from-gatsby/)\n- [GitBook](https://docs.astro.build/en/guides/migrate-to-astro/from-gitbook/)\n- [Gridsome](https://docs.astro.build/en/guides/migrate-to-astro/from-gridsome/)\n- [Hugo](https://docs.astro.build/en/guides/migrate-to-astro/from-hugo/)\n- [Jekyll](https://docs.astro.build/en/guides/migrate-to-astro/from-jekyll/)\n- [Next.js](https://docs.astro.build/en/guides/migrate-to-astro/from-nextjs/)\n- [NuxtJS](https://docs.astro.build/en/guides/migrate-to-astro/from-nuxtjs/)\n- [Pelican](https://docs.astro.build/en/guides/migrate-to-astro/from-pelican/)\n- [SvelteKit](https://docs.astro.build/en/guides/migrate-to-astro/from-sveltekit/)\n- [VuePress](https://docs.astro.build/en/guides/migrate-to-astro/from-vuepress/)\n- [WordPress](https://docs.astro.build/en/guides/migrate-to-astro/from-wordpress/) \n\nNote that many of these pages are **stubs**: they‚Äôre collections of resources waiting for your contribution!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/migrate-to-astro", "title": "Migrate an existing project to Astro", "description": "Ready to convert your site to Astro? See one of our guides for migration tips.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:37:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Some tips and tricks for converting your site to Astro.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:locale": "en", "language": "en", "ogTitle": "Migrate an existing project to Astro", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "Some tips and tricks for converting your site to Astro.", "twitter:card": "summary_large_image", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/migrate-to-astro/", "og:description": "Some tips and tricks for converting your site to Astro.", "title": "Migrate an existing project to Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Migrate an existing project to Astro", "scrapeId": "37b2ca41-d9d0-4c0d-aa47-c2fe3322fc38", "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro", "url": "https://docs.astro.build/en/guides/migrate-to-astro/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why migrate your site to astro? in astro?\n\nAssistant: To why migrate your site to astro? in astro, here's what you do:\nAstro provides many benefits: performance, simplicity, and many of the features you want built right into the framework. When you do need to extend your site, Astro provides several [official and 3rd-party community integrations](https://astro.build/integrations).\n\nMigrating may be less work than you think!\n\nDepending on your existing project, you may be able to use your existing:\n\n- [UI framework components](https://docs.astro.build/en/guides/framework-components/) directly in Astro.\n- [CSS stylesheets or libraries](https://docs.astro.build/en/guides/styling/) including Tailwind.\n- [Markdown/MDX files](https://docs.astro.build/en/guides/markdown-content/), configured using your existing [remark and rehype plugins](https://docs.astro.build/en/guides/markdown-content/#markdown-plugins).\n- [Content from a CMS](https://docs.astro.build/en/guides/cms/) through an integration or API..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/migrate-to-astro", "title": "Migrate an existing project to Astro", "description": "Ready to convert your site to Astro? See one of our guides for migration tips.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:37:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Some tips and tricks for converting your site to Astro.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:locale": "en", "language": "en", "ogTitle": "Migrate an existing project to Astro", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "Some tips and tricks for converting your site to Astro.", "twitter:card": "summary_large_image", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/migrate-to-astro/", "og:description": "Some tips and tricks for converting your site to Astro.", "title": "Migrate an existing project to Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Migrate an existing project to Astro", "scrapeId": "37b2ca41-d9d0-4c0d-aa47-c2fe3322fc38", "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro", "url": "https://docs.astro.build/en/guides/migrate-to-astro/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I which projects can i convert to astro? in astro?\n\nAssistant: To which projects can i convert to astro? in astro, here's what you do:\n[Many existing sites can be built with Astro](https://docs.astro.build/en/concepts/why-astro/). Astro is ideally suited for your existing content-based sites like blogs, landing pages, marketing sites and portfolios. Astro integrates with several popular headless CMSes, and allows you to connect eCommerce shop carts.\n\nAstro allows you have a fully statically-generated website, a dynamic app with routes rendered on demand, or a combination of both with [complete control over your project rendering](https://docs.astro.build/en/guides/on-demand-rendering/), making it a great replacement for SSGs or for sites that need to fetch some page data on the fly..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/migrate-to-astro", "title": "Migrate an existing project to Astro", "description": "Ready to convert your site to Astro? See one of our guides for migration tips.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:37:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Some tips and tricks for converting your site to Astro.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:locale": "en", "language": "en", "ogTitle": "Migrate an existing project to Astro", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "Some tips and tricks for converting your site to Astro.", "twitter:card": "summary_large_image", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/migrate-to-astro/", "og:description": "Some tips and tricks for converting your site to Astro.", "title": "Migrate an existing project to Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Migrate an existing project to Astro", "scrapeId": "37b2ca41-d9d0-4c0d-aa47-c2fe3322fc38", "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro", "url": "https://docs.astro.build/en/guides/migrate-to-astro/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how will my project design change? in astro?\n\nAssistant: To how will my project design change? in astro, here's what you do:\nDepending on your existing project, you may need to think differently about:\n\n- Designing in [Astro Islands](https://docs.astro.build/en/concepts/islands/#what-is-an-island) to avoid sending unnecessary JavaScript to the browser.\n- Providing client-side interactivity with [client-side `<script>` tags](https://docs.astro.build/en/guides/client-side-scripts/) or [UI framework components](https://docs.astro.build/en/guides/framework-components/).\n- Managing [shared state](https://docs.astro.build/en/recipes/sharing-state-islands/) with Nano Stores or local storage instead of app-wide hooks or wrappers..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/migrate-to-astro", "title": "Migrate an existing project to Astro", "description": "Ready to convert your site to Astro? See one of our guides for migration tips.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:37:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Some tips and tricks for converting your site to Astro.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:locale": "en", "language": "en", "ogTitle": "Migrate an existing project to Astro", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "Some tips and tricks for converting your site to Astro.", "twitter:card": "summary_large_image", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/migrate-to-astro/", "og:description": "Some tips and tricks for converting your site to Astro.", "title": "Migrate an existing project to Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Migrate an existing project to Astro", "scrapeId": "37b2ca41-d9d0-4c0d-aa47-c2fe3322fc38", "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro", "url": "https://docs.astro.build/en/guides/migrate-to-astro/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Migrate an existing project to Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMigrating may be less work than you think!\n\nYou may be able to use your existing UI framework components directly in Astro.\n\nYou may be able to use your existing CSS stylesheets or libraries including Tailwind.\n\nYou may be able to use your existing Markdown/MDX files configured using your existing remark and rehype plugins.\n\nYou may be able to use content from a CMS through an integration or API.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/migrate-to-astro", "title": "Migrate an existing project to Astro", "description": "Ready to convert your site to Astro? See one of our guides for migration tips.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:37:02", "type": "best_practices", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Some tips and tricks for converting your site to Astro.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:locale": "en", "language": "en", "ogTitle": "Migrate an existing project to Astro", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/", "ogLocale": "en", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "Some tips and tricks for converting your site to Astro.", "twitter:card": "summary_large_image", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/migrate-to-astro/", "og:description": "Some tips and tricks for converting your site to Astro.", "title": "Migrate an existing project to Astro | Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Migrate an existing project to Astro", "scrapeId": "37b2ca41-d9d0-4c0d-aa47-c2fe3322fc38", "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro", "url": "https://docs.astro.build/en/guides/migrate-to-astro/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/vue is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/vue in astro.\n\n# @astrojs/vue\n\nThis Astro integration enables rendering and client-side hydration for your Vue 3 components.Here's a quick rundown of what this is about:\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/vue`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add vue\n```\n\n```\n\npnpm astro add vue\n```\n\n```\n\nyarn astro add vue\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/vue` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/vue\n```\n\n```\n\npnpm add @astrojs/vue\n```\n\n```\n\nyarn add @astrojs/vue\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'vue'` (or similar) warning when you start up Astro, you‚Äôll need to install Vue:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install vue\n```\n\n```\n\npnpm add vue\n```\n\n```\n\nyarn add vue\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue()],\n\n});\n```\n\n## Getting started\n\nTo use your first Vue component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together.\n\n## Troubleshooting\n\nFor help, check out the `#support` channel on Discord. Our friendly Support Squad members are here to help!\n\nYou can also check our Astro Integration Documentation for more on integrations.\n\n## Contributing\n\nThis package is maintained by Astro‚Äôs Core team. You‚Äôre welcome to submit an issue or PR!\n\n## Options\n\nThis integration is powered by `@vitejs/plugin-vue`. To customize the Vue compiler, options can be provided to the integration. See the `@vitejs/plugin-vue` docs for more details.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      template: {\n\n        compilerOptions: {\n\n          // treat any tag that starts with ion- as custom elements\n\n          isCustomElement: (tag) => tag.startsWith('ion-'),\n\n        },\n\n      },\n\n      // ...\n\n    }),\n\n  ],\n\n});\n```\n\n## appEntrypoint\n\nYou can extend the Vue `app` instance setting the `appEntrypoint` option to a root-relative import specifier (for example, `appEntrypoint: \"/src/pages/_app\"`).\n\nThe default export of this file should be a function that accepts a Vue `App` instance prior to rendering, allowing the use of custom Vue plugins, `app.use`, and other customizations for advanced use cases.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ appEntrypoint: '/src/pages/_app' })],\n\n});\n```\n\n```\nimport type { App } from 'vue';\n\nimport i18nPlugin from 'my-vue-i18n-plugin';\n\nexport default (app: App) => {\n\n  app.use(i18nPlugin);\n\n};\n```\n\n## jsx\n\nYou can use Vue JSX by setting `jsx: true`.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ jsx: true })],\n\n});\n```\n\nThis will enable rendering for both Vue and Vue JSX components. To customize the Vue JSX compiler, pass an options object instead of a boolean. See the `@vitejs/plugin-vue-jsx` docs for more details.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      jsx: {\n\n        // treat any tag that starts with ion- as custom elements\n\n        isCustomElement: (tag) => tag.startsWith('ion-'),\n\n      },\n\n    }),\n\n  ],\n\n});\n```\n\n## devtools\n\n**Added in:** `@astrojs/vue@4.2.0`\n\nYou can enable Vue DevTools in development by passing an object with `devtools: true` to your `vue()` integration config:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ devtools: true })],\n\n});\n```\n\n## Customizing Vue DevTools\n\n**Added in:** `@astrojs/vue@4.3.0`\n\nFor more customization, you can instead pass options that the Vue DevTools Vite Plugin supports. (Note: `appendTo` is not supported.)\n\nFor example, you can set `launchEditor` to your preferred editor if you are not using Visual Studio Code:\n\n```\nimport { defineConfig } from \"astro/config\";\n\nimport vue from \"@astrojs/vue\";\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      devtools: { launchEditor: \"webstorm\" },\n\n    }),\n\n  ],\n\n});\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "overview", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/vue`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add vue\n```\n\n```\n\npnpm astro add vue\n```\n\n```\n\nyarn astro add vue\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/vue` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/vue\n```\n\n```\n\npnpm add @astrojs/vue\n```\n\n```\n\nyarn add @astrojs/vue\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'vue'` (or similar) warning when you start up Astro, you‚Äôll need to install Vue:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install vue\n```\n\n```\n\npnpm add vue\n```\n\n```\n\nyarn add vue\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue()],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\nTo use your first Vue component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I troubleshooting in astro?\n\nAssistant: To troubleshooting in astro, here's what you do:\nFor help, check out the `#support` channel on Discord. Our friendly Support Squad members are here to help!\n\nYou can also check our Astro Integration Documentation for more on integrations..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I contributing in astro?\n\nAssistant: To contributing in astro, here's what you do:\nThis package is maintained by Astro‚Äôs Core team. You‚Äôre welcome to submit an issue or PR!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options in astro?\n\nAssistant: To options in astro, here's what you do:\nThis integration is powered by `@vitejs/plugin-vue`. To customize the Vue compiler, options can be provided to the integration. See the `@vitejs/plugin-vue` docs for more details.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      template: {\n\n        compilerOptions: {\n\n          // treat any tag that starts with ion- as custom elements\n\n          isCustomElement: (tag) => tag.startsWith('ion-'),\n\n        },\n\n      },\n\n      // ...\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I appentrypoint in astro?\n\nAssistant: To appentrypoint in astro, here's what you do:\nYou can extend the Vue `app` instance setting the `appEntrypoint` option to a root-relative import specifier (for example, `appEntrypoint: \"/src/pages/_app\"`).\n\nThe default export of this file should be a function that accepts a Vue `App` instance prior to rendering, allowing the use of custom Vue plugins, `app.use`, and other customizations for advanced use cases.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ appEntrypoint: '/src/pages/_app' })],\n\n});\n```\n\n```\nimport type { App } from 'vue';\n\nimport i18nPlugin from 'my-vue-i18n-plugin';\n\nexport default (app: App) => {\n\n  app.use(i18nPlugin);\n\n};\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I jsx in astro?\n\nAssistant: To jsx in astro, here's what you do:\nYou can use Vue JSX by setting `jsx: true`.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ jsx: true })],\n\n});\n```\n\nThis will enable rendering for both Vue and Vue JSX components. To customize the Vue JSX compiler, pass an options object instead of a boolean. See the `@vitejs/plugin-vue-jsx` docs for more details.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      jsx: {\n\n        // treat any tag that starts with ion- as custom elements\n\n        isCustomElement: (tag) => tag.startsWith('ion-'),\n\n      },\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I devtools in astro?\n\nAssistant: To devtools in astro, here's what you do:\n**Added in:** `@astrojs/vue@4.2.0`\n\nYou can enable Vue DevTools in development by passing an object with `devtools: true` to your `vue()` integration config:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ devtools: true })],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I customizing vue devtools in astro?\n\nAssistant: To customizing vue devtools in astro, here's what you do:\n**Added in:** `@astrojs/vue@4.3.0`\n\nFor more customization, you can instead pass options that the Vue DevTools Vite Plugin supports. (Note: `appendTo` is not supported.)\n\nFor example, you can set `launchEditor` to your preferred editor if you are not using Visual Studio Code:\n\n```\nimport { defineConfig } from \"astro/config\";\n\nimport vue from \"@astrojs/vue\";\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      devtools: { launchEditor: \"webstorm\" },\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/vue in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add vue\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/vue.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/vue\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/vue.\n\n**Vue Installation Command**:\n\n```yaml\nnpm install vue\n```\n\nThis snippet shows you how to vue installation command, which is an important aspect of @astrojs/vue.\n\n**astro.config.js Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue()],\n\n});\n```\n\nThis snippet shows you how to astro.config.js example, which is an important aspect of @astrojs/vue.\n\n**Options Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      template: {\n\n        compilerOptions: {\n\n          isCustomElement: (tag) => tag.startsWith('ion-'),\n\n        },\n\n      },\n\n    }),\n\n  ],\n\n});\n```\n\nThis snippet shows you how to options example, which is an important aspect of @astrojs/vue.\n\n**appEntrypoint Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ appEntrypoint: '/src/pages/_app' })],\n\n});\n```\n\nThis snippet shows you how to appentrypoint example, which is an important aspect of @astrojs/vue.\n\n**Vue JSX Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ jsx: true })],\n\n});\n```\n\nThis snippet shows you how to vue jsx example, which is an important aspect of @astrojs/vue.\n\n**DevTools Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport vue from '@astrojs/vue';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [vue({ devtools: true })],\n\n});\n```\n\nThis snippet shows you how to devtools example, which is an important aspect of @astrojs/vue.\n\n**Customizing DevTools Example**:\n\n```yaml\nimport { defineConfig } from \"astro/config\";\n\nimport vue from \"@astrojs/vue\";\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    vue({\n\n      devtools: { launchEditor: \"webstorm\" },\n\n    }),\n\n  ],\n\n});\n```\n\nThis snippet shows you how to customizing devtools example, which is an important aspect of @astrojs/vue.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "code_examples", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/vue in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps.\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'vue'` warning, you‚Äôll need to install Vue.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vue", "title": "@astrojs/vue", "description": "This Astro integration enables rendering and client-side hydration for your Vue 3 components.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:38:54", "type": "best_practices", "page_metadata": {"og:description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/vue", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "language": "en", "ogDescription": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vue/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "title": "@astrojs/vue | Docs", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "og:title": "@astrojs/vue", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vue.webp", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "description": "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "scrapeId": "4b061cd2-6fdb-46ea-8851-a8eec4f87a00", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vue", "url": "https://docs.astro.build/en/guides/integrations-guide/vue/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/cloudflare is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/cloudflare in astro.\n\n# @astrojs/cloudflare\n\nThis adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.Here's a quick rundown of what this is about:\n\n## Why Astro Cloudflare\n\nCloudflare provides CDNs, web security, and other services. This adapter enhances the Astro build process to prepare your project for deployment through Cloudflare.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Cloudflare adapter to enable SSR in your Astro project with the `astro add` command. This will install `@astrojs/cloudflare` and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n## Manual Install\n\nFirst, add the `@astrojs/cloudflare` adapter to your project‚Äôs dependencies using your preferred package manager.\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.mjs` file.\n\n## Options\n\nVarious options can be configured for the Cloudflare adapter, including imageService, platformProxy, routes.extend, and cloudflareModules.\n\n## Cloudflare runtime\n\nThe Cloudflare runtime gives you access to environment variables and Cloudflare bindings.\n\n## Usage\n\nYou can access the bindings by using Astro locals or from API endpoints.\n\n## Typing\n\n`wrangler` provides a `types` command to generate TypeScript types for the bindings.\n\n## Cloudflare Platform\n\nYou can attach custom headers, manage assets, declare redirects, and specify routes.\n\n## Cloudflare Module Imports\n\nThe Cloudflare worker runtime supports imports of some non-standard module types.\n\n## Node.js compatibility\n\nCloudflare does not support the Node.js runtime APIs out of the box, but with some configuration, it can support a subset.\n\n## Preview with Wrangler\n\nTo use `wrangler` to run your application locally, update the preview script.\n\n## Meaningful error messages\n\nFor better debugging, you can add `vite.build.minify = false` setting to your `astro.config.mjs`.\n\n## More integrations\n\nVarious integrations are available for front-end frameworks and SSR adapters.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why astro cloudflare in astro?\n\nAssistant: To why astro cloudflare in astro, here's what you do:\nCloudflare provides CDNs, web security, and other services. This adapter enhances the Astro build process to prepare your project for deployment through Cloudflare..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Cloudflare adapter to enable SSR in your Astro project with the `astro add` command. This will install `@astrojs/cloudflare` and make the appropriate changes to your `astro.config.mjs` file in one step..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, add the `@astrojs/cloudflare` adapter to your project‚Äôs dependencies using your preferred package manager.\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.mjs` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options in astro?\n\nAssistant: To options in astro, here's what you do:\nVarious options can be configured for the Cloudflare adapter, including imageService, platformProxy, routes.extend, and cloudflareModules..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cloudflare runtime in astro?\n\nAssistant: To cloudflare runtime in astro, here's what you do:\nThe Cloudflare runtime gives you access to environment variables and Cloudflare bindings..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nYou can access the bindings by using Astro locals or from API endpoints..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I typing in astro?\n\nAssistant: To typing in astro, here's what you do:\n`wrangler` provides a `types` command to generate TypeScript types for the bindings..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cloudflare platform in astro?\n\nAssistant: To cloudflare platform in astro, here's what you do:\nYou can attach custom headers, manage assets, declare redirects, and specify routes..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cloudflare module imports in astro?\n\nAssistant: To cloudflare module imports in astro, here's what you do:\nThe Cloudflare worker runtime supports imports of some non-standard module types..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I node.js compatibility in astro?\n\nAssistant: To node.js compatibility in astro, here's what you do:\nCloudflare does not support the Node.js runtime APIs out of the box, but with some configuration, it can support a subset..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I preview with wrangler in astro?\n\nAssistant: To preview with wrangler in astro, here's what you do:\nTo use `wrangler` to run your application locally, update the preview script..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I meaningful error messages in astro?\n\nAssistant: To meaningful error messages in astro, here's what you do:\nFor better debugging, you can add `vite.build.minify = false` setting to your `astro.config.mjs`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I more integrations in astro?\n\nAssistant: To more integrations in astro, here's what you do:\nVarious integrations are available for front-end frameworks and SSR adapters..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/cloudflare in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add cloudflare\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/cloudflare.\n\n**Manual Install Command (npm)**:\n\n```yaml\nnpm install @astrojs/cloudflare\n```\n\nThis snippet shows you how to manual install command (npm), which is an important aspect of @astrojs/cloudflare.\n\n**Manual Install Command (pnpm)**:\n\n```yaml\npnpm add @astrojs/cloudflare\n```\n\nThis snippet shows you how to manual install command (pnpm), which is an important aspect of @astrojs/cloudflare.\n\n**Manual Install Command (Yarn)**:\n\n```yaml\nyarn add @astrojs/cloudflare\n```\n\nThis snippet shows you how to manual install command (yarn), which is an important aspect of @astrojs/cloudflare.\n\n**astro.config.mjs Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport cloudflare from '@astrojs/cloudflare';\n\nexport default defineConfig({\n  output: 'server',\n  adapter: cloudflare(),\n});\n```\n\nThis snippet shows you how to astro.config.mjs example, which is an important aspect of @astrojs/cloudflare.\n\n**platformProxy Example**:\n\n```yaml\nexport default defineConfig({\n  adapter: cloudflare({\n    platformProxy: {\n      enabled: true,\n      configPath: 'wrangler.json',\n      experimentalJsonConfig: true,\n      persist: {\n        path: './.cache/wrangler/v3'\n      },\n    },\n  }),\n});\n```\n\nThis snippet shows you how to platformproxy example, which is an important aspect of @astrojs/cloudflare.\n\n**routes.extend Example**:\n\n```yaml\nexport default defineConfig({\n  adapter: cloudflare({\n    routes: {\n      extend: {\n        include: [{ pattern: '/static' }],\n        exclude: [{ pattern: '/pagefind/*' }],\n      }\n    },\n  }),\n});\n```\n\nThis snippet shows you how to routes.extend example, which is an important aspect of @astrojs/cloudflare.\n\n**Wasm Module Example**:\n\n```yaml\n// Import the WebAssembly module\nimport mod from '../util/add.wasm';\n\n// Instantiate first in order to use it\nconst addModule: any = new WebAssembly.Instance(mod);\n\nexport async function GET(context) {\n  const a = Number.parseInt(context.params.a);\n  const b = Number.parseInt(context.params.b);\n  return new Response(`${addModule.exports.add(a, b)}`);\n}\n```\n\nThis snippet shows you how to wasm module example, which is an important aspect of @astrojs/cloudflare.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/cloudflare in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `astro add` command for easy integration setup.\n\nConsider using `vite.build.minify = false` for better debugging during development.\n\nRefer to Cloudflare's documentation for detailed guidance on specific features.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "title": "@astrojs/cloudflare", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Cloudflare.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 01:42:32", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "ogDescription": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "docsearch:language": "en", "og:title": "@astrojs/cloudflare", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/cloudflare SSR adapter to deploy your Astro project.", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogTitle": "@astrojs/cloudflare", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "title": "@astrojs/cloudflare | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/cloudflare.webp", "scrapeId": "7a7380db-73cc-4846-9b07-aefc81b5e633", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/cloudflare", "url": "https://docs.astro.build/en/guides/integrations-guide/cloudflare/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/vercel is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/vercel in astro.\n\n# @astrojs/vercel\n\nThis adapter allows Astro to deploy your on-demand rendered routes to Vercel.Here's a quick rundown of what this is about:\n\n## Why Astro Vercel\n\nVercel is a deployment platform that allows you to host your site by connecting directly to your GitHub repository. This adapter enhances the Astro build process to prepare your project for deployment through Vercel.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Vercel adapter to enable SSR in your Astro project with the following `astro add` command. This will install `@astrojs/vercel` and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n## Manual Install\n\nFirst, add the `@astrojs/vercel` adapter to your project‚Äôs dependencies using your preferred package manager:\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.*` file.\n\n## Usage\n\nFind out more about deploying your project to Vercel.\n\nYou can deploy by CLI ( `vercel deploy`) or by connecting your new repo in the Vercel Dashboard. Alternatively, you can create a production build locally.\n\n## Configuration\n\nTo configure this adapter, pass an object to the `vercel()` function call in `astro.config.mjs`.\n\n## webAnalytics\n\nWith `@vercel/analytics@1.3.x` or earlier, you can set `webAnalytics: { enabled: true }` in your Astro config to inject Vercel‚Äôs tracking scripts into all of your pages.\n\n## imagesConfig\n\nConfiguration options for Vercel‚Äôs Image Optimization API. See Vercel‚Äôs image configuration documentation for a complete list of supported parameters.\n\n## imageService\n\nWhen enabled, an Image Service powered by the Vercel Image Optimization API will be automatically configured and used in production.\n\n## devImageService\n\nAllows you to configure which image service to use in development when imageService is enabled.\n\n## isr\n\nAllows your project to be deployed as an ISR (Incremental Static Regeneration) function, which caches your on-demand rendered pages in the same way as prerendered pages after first request.\n\n## ISR cache invalidation\n\nBy default, an ISR function caches for the duration of your deployment. You can further control caching by setting an expiration time, or by excluding particular routes from caching entirely.\n\n## includeFiles\n\nUse this property to force files to be bundled with your function. This is helpful when you notice missing files.\n\n## excludeFiles\n\nUse this property to exclude any files from the bundling process that would otherwise be included.\n\n## maxDuration\n\nUse this property to extend or limit the maximum duration (in seconds) that Serverless Functions can run before timing out.\n\n## skewProtection\n\nUse this property to enable Vercel Skew protection (available with Vercel Pro and Enterprise accounts).\n\n## Running Astro middleware on Vercel Edge Functions\n\nThe `@astrojs/vercel` adapter can create an edge function from an Astro middleware in your code base.\n\n## Node.js Version Support\n\nThe `@astrojs/vercel` adapter supports specific Node.js versions for deploying your Astro project on Vercel.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "overview", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why astro vercel in astro?\n\nAssistant: To why astro vercel in astro, here's what you do:\nVercel is a deployment platform that allows you to host your site by connecting directly to your GitHub repository. This adapter enhances the Astro build process to prepare your project for deployment through Vercel..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Vercel adapter to enable SSR in your Astro project with the following `astro add` command. This will install `@astrojs/vercel` and make the appropriate changes to your `astro.config.mjs` file in one step..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, add the `@astrojs/vercel` adapter to your project‚Äôs dependencies using your preferred package manager:\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.*` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nFind out more about deploying your project to Vercel.\n\nYou can deploy by CLI ( `vercel deploy`) or by connecting your new repo in the Vercel Dashboard. Alternatively, you can create a production build locally..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\nTo configure this adapter, pass an object to the `vercel()` function call in `astro.config.mjs`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I webanalytics in astro?\n\nAssistant: To webanalytics in astro, here's what you do:\nWith `@vercel/analytics@1.3.x` or earlier, you can set `webAnalytics: { enabled: true }` in your Astro config to inject Vercel‚Äôs tracking scripts into all of your pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I imagesconfig in astro?\n\nAssistant: To imagesconfig in astro, here's what you do:\nConfiguration options for Vercel‚Äôs Image Optimization API. See Vercel‚Äôs image configuration documentation for a complete list of supported parameters..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I imageservice in astro?\n\nAssistant: To imageservice in astro, here's what you do:\nWhen enabled, an Image Service powered by the Vercel Image Optimization API will be automatically configured and used in production..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I devimageservice in astro?\n\nAssistant: To devimageservice in astro, here's what you do:\nAllows you to configure which image service to use in development when imageService is enabled..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I isr in astro?\n\nAssistant: To isr in astro, here's what you do:\nAllows your project to be deployed as an ISR (Incremental Static Regeneration) function, which caches your on-demand rendered pages in the same way as prerendered pages after first request..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I isr cache invalidation in astro?\n\nAssistant: To isr cache invalidation in astro, here's what you do:\nBy default, an ISR function caches for the duration of your deployment. You can further control caching by setting an expiration time, or by excluding particular routes from caching entirely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I includefiles in astro?\n\nAssistant: To includefiles in astro, here's what you do:\nUse this property to force files to be bundled with your function. This is helpful when you notice missing files..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I excludefiles in astro?\n\nAssistant: To excludefiles in astro, here's what you do:\nUse this property to exclude any files from the bundling process that would otherwise be included..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I maxduration in astro?\n\nAssistant: To maxduration in astro, here's what you do:\nUse this property to extend or limit the maximum duration (in seconds) that Serverless Functions can run before timing out..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I skewprotection in astro?\n\nAssistant: To skewprotection in astro, here's what you do:\nUse this property to enable Vercel Skew protection (available with Vercel Pro and Enterprise accounts)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I running astro middleware on vercel edge functions in astro?\n\nAssistant: To running astro middleware on vercel edge functions in astro, here's what you do:\nThe `@astrojs/vercel` adapter can create an edge function from an Astro middleware in your code base..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I node.js version support in astro?\n\nAssistant: To node.js version support in astro, here's what you do:\nThe `@astrojs/vercel` adapter supports specific Node.js versions for deploying your Astro project on Vercel..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "section_detail", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/vercel in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Vercel Adapter via npx**:\n\n```yaml\nnpx astro add vercel\n```\n\nThis snippet shows you how to install vercel adapter via npx, which is an important aspect of @astrojs/vercel.\n\n**Install Vercel Adapter via pnpm**:\n\n```yaml\npnpm astro add vercel\n```\n\nThis snippet shows you how to install vercel adapter via pnpm, which is an important aspect of @astrojs/vercel.\n\n**Install Vercel Adapter via Yarn**:\n\n```yaml\nyarn astro add vercel\n```\n\nThis snippet shows you how to install vercel adapter via yarn, which is an important aspect of @astrojs/vercel.\n\n**Manual Install with npm**:\n\n```yaml\nnpm install @astrojs/vercel\n```\n\nThis snippet shows you how to manual install with npm, which is an important aspect of @astrojs/vercel.\n\n**Manual Install with pnpm**:\n\n```yaml\npnpm add @astrojs/vercel\n```\n\nThis snippet shows you how to manual install with pnpm, which is an important aspect of @astrojs/vercel.\n\n**Manual Install with Yarn**:\n\n```yaml\nyarn add @astrojs/vercel\n```\n\nThis snippet shows you how to manual install with yarn, which is an important aspect of @astrojs/vercel.\n\n**Astro Config with Vercel Adapter**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel(),\n});\n```\n\nThis snippet shows you how to astro config with vercel adapter, which is an important aspect of @astrojs/vercel.\n\n**Deploying with CLI**:\n\n```yaml\nastro build\nvercel deploy --prebuilt\n```\n\nThis snippet shows you how to deploying with cli, which is an important aspect of @astrojs/vercel.\n\n**Web Analytics Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    webAnalytics: {\n      enabled: true,\n    },\n  }),\n});\n```\n\nThis snippet shows you how to web analytics configuration, which is an important aspect of @astrojs/vercel.\n\n**Images Config Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'static',\n  adapter: vercel({\n    imagesConfig: {\n      sizes: [320, 640, 1280],\n    },\n  }),\n});\n```\n\nThis snippet shows you how to images config example, which is an important aspect of @astrojs/vercel.\n\n**Image Service Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'static',\n  adapter: vercel({\n    imageService: true,\n  }),\n});\n```\n\nThis snippet shows you how to image service configuration, which is an important aspect of @astrojs/vercel.\n\n**ISR Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    isr: true,\n  }),\n});\n```\n\nThis snippet shows you how to isr configuration, which is an important aspect of @astrojs/vercel.\n\n**Time-based Invalidation**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    isr: {\n      expiration: 60 * 60 * 24,\n    },\n  }),\n});\n```\n\nThis snippet shows you how to time-based invalidation, which is an important aspect of @astrojs/vercel.\n\n**Excluding Paths from Caching**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n    output: \"server\",\n    adapter: vercel({\n        isr: {\n            bypassToken: \"005556d774a8\",\n            exclude: [\n              '/preview',\n              '/auth/[page]',\n              /^\\/api\\/.+/\n            ]\n        }\n    })\n})\n```\n\nThis snippet shows you how to excluding paths from caching, which is an important aspect of @astrojs/vercel.\n\n**Including Files in Bundling**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    includeFiles: ['./my-data.json'],\n  }),\n});\n```\n\nThis snippet shows you how to including files in bundling, which is an important aspect of @astrojs/vercel.\n\n**Excluding Files from Bundling**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    excludeFiles: ['./src/some_big_file.jpg'],\n  }),\n});\n```\n\nThis snippet shows you how to excluding files from bundling, which is an important aspect of @astrojs/vercel.\n\n**Max Duration Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: \"server\",\n  adapter: vercel({\n    maxDuration: 60\n  }),\n});\n```\n\nThis snippet shows you how to max duration configuration, which is an important aspect of @astrojs/vercel.\n\n**Skew Protection Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: \"server\",\n  adapter: vercel({\n    skewProtection: true\n  }),\n});\n```\n\nThis snippet shows you how to skew protection configuration, which is an important aspect of @astrojs/vercel.\n\n**Edge Middleware Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    edgeMiddleware: true,\n  }),\n});\n```\n\nThis snippet shows you how to edge middleware configuration, which is an important aspect of @astrojs/vercel.\n\n**Node.js Version Support**:\n\n```yaml\nCheck out the Vercel documentation to learn more.\n```\n\nThis snippet shows you how to node.js version support, which is an important aspect of @astrojs/vercel.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "code_examples", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/vercel in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `astro add` command for easy integration setup.\n\nConsider using manual installation if you need more control over the integration process.\n\nAlways check the Vercel documentation for the latest features and configurations.\n\nUtilize the `isr` feature for caching on-demand rendered pages effectively.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/vercel", "title": "@astrojs/vercel", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Vercel.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 01:46:38", "type": "best_practices", "page_metadata": {"og:description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/vercel", "title": "@astrojs/vercel | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "description": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "og:title": "@astrojs/vercel", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/vercel.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "twitter:site": "astrodotbuild", "og:type": "article", "ogDescription": "Learn how to use the @astrojs/vercel SSR adapter to deploy your Astro project.", "viewport": "width=device-width, initial-scale=1", "scrapeId": "42d51b39-8236-4191-8457-919b99719e8c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/vercel", "url": "https://docs.astro.build/en/guides/integrations-guide/vercel/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Dynamically import images is in astro?\n\nAssistant: Sure, I'd be happy to explain Dynamically import images in astro.\n\n# Dynamically import images\n\nLearn how to dynamically import your images using Vite‚Äôs import.meta.glob function to build a card component that displays the name, age, and photo of a person.Here's a quick rundown of what this is about:\n\n## Recipe\n\n1. Create a new `assets` folder under the `src` directory and add your images inside that new folder.\n\n- Directorysrc/\n\n- Directoryassets/\n\n- avatar-1.jpg\n- avatar-2.png\n- avatar-3.jpeg\n\n2. Create a new Astro component for your card and import the `<Image />` component.\n\n```javascript\n---\nimport { Image } from 'astro:assets';\n---\n```\n\n3. Specify the `props` that your component will receive in order to display the necessary information on each card. You can optionally define their types, if you are using TypeScript in your project.\n\n```javascript\n---\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\n---\n```\n\n4. Create a new `images` variable and use the `import.meta.glob` function which returns an object of all of the image paths inside the `assets` folder. You will also need to import `ImageMetadata` type to help define the type of the `images` variable.\n\n```javascript\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')\n---\n```\n\n5. Use the props to create the markup for your card component.\n\n```javascript\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\n---\n<div class=\"card\">\n       <h2>{name}</h2>\n       <p>Age: {age}</p>\n       <Image src={} alt={altText} />\n</div>\n```\n\n6. Inside the `src` attribute, pass in the `images` object and use bracket notation for the image path. Then make sure to invoke the glob function.\n\nSince you are accessing the `images` object which has an unknown type, you should also `throw` an error in case an invalid file path is passed as a prop.\n\n```javascript\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\nif (!images[imagePath]) throw new Error(`\"${imagePath}\" does not exist in glob: \"src/assets/*.{jpeg,jpg,png,gif}\"`);\n---\n<div class=\"card\">\n       <h2>{name}</h2>\n       <p>Age: {age}</p>\n       <Image src={images[imagePath]()} alt={altText} />\n</div>\n```\n\n7. Import and use the card component inside an Astro page, passing in the values for the `props`.\n\n```javascript\n---\nimport MyCustomCardComponent from '../components/MyCustomCardComponent.astro';\n---\n<MyCustomCardComponent\n       imagePath=\"/src/assets/avatar-1.jpg\"\n       altText=\"A headshot of Priya against a brick wall background.\"\n       name=\"Priya\"\n       age={25}\n/>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/dynamically-importing-images", "title": "Dynamically import images", "description": "Learn how to dynamically import your images using Vite‚Äôs import.meta.glob function to build a card component that displays the name, age, and photo of a person.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:48:24", "type": "overview", "page_metadata": {"ogTitle": "Dynamically import images", "ogImage": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogLocale": "en", "ogSiteName": "Docs", "title": "Dynamically import images | Docs", "docsearch:language": "en", "og:title": "Dynamically import images", "ogDescription": "Learn how to dynamically import images using Vite's import.meta.glob function.", "twitter:card": "summary_large_image", "og:description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "scrapeId": "48c728ca-ef98-4853-8206-b693bd5aa079", "sourceURL": "https://docs.astro.build/en/recipes/dynamically-importing-images", "url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recipe in astro?\n\nAssistant: To recipe in astro, here's what you do:\n1. Create a new `assets` folder under the `src` directory and add your images inside that new folder.\n\n- Directorysrc/\n\n- Directoryassets/\n\n- avatar-1.jpg\n- avatar-2.png\n- avatar-3.jpeg\n\n2. Create a new Astro component for your card and import the `<Image />` component.\n\n```javascript\n---\nimport { Image } from 'astro:assets';\n---\n```\n\n3. Specify the `props` that your component will receive in order to display the necessary information on each card. You can optionally define their types, if you are using TypeScript in your project.\n\n```javascript\n---\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\n---\n```\n\n4. Create a new `images` variable and use the `import.meta.glob` function which returns an object of all of the image paths inside the `assets` folder. You will also need to import `ImageMetadata` type to help define the type of the `images` variable.\n\n```javascript\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')\n---\n```\n\n5. Use the props to create the markup for your card component.\n\n```javascript\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\n---\n<div class=\"card\">\n       <h2>{name}</h2>\n       <p>Age: {age}</p>\n       <Image src={} alt={altText} />\n</div>\n```\n\n6. Inside the `src` attribute, pass in the `images` object and use bracket notation for the image path. Then make sure to invoke the glob function.\n\nSince you are accessing the `images` object which has an unknown type, you should also `throw` an error in case an invalid file path is passed as a prop.\n\n```javascript\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\nif (!images[imagePath]) throw new Error(`\"${imagePath}\" does not exist in glob: \"src/assets/*.{jpeg,jpg,png,gif}\"`);\n---\n<div class=\"card\">\n       <h2>{name}</h2>\n       <p>Age: {age}</p>\n       <Image src={images[imagePath]()} alt={altText} />\n</div>\n```\n\n7. Import and use the card component inside an Astro page, passing in the values for the `props`.\n\n```javascript\n---\nimport MyCustomCardComponent from '../components/MyCustomCardComponent.astro';\n---\n<MyCustomCardComponent\n       imagePath=\"/src/assets/avatar-1.jpg\"\n       altText=\"A headshot of Priya against a brick wall background.\"\n       name=\"Priya\"\n       age={25}\n/>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/dynamically-importing-images", "title": "Dynamically import images", "description": "Learn how to dynamically import your images using Vite‚Äôs import.meta.glob function to build a card component that displays the name, age, and photo of a person.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:48:24", "type": "section_detail", "page_metadata": {"ogTitle": "Dynamically import images", "ogImage": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogLocale": "en", "ogSiteName": "Docs", "title": "Dynamically import images | Docs", "docsearch:language": "en", "og:title": "Dynamically import images", "ogDescription": "Learn how to dynamically import images using Vite's import.meta.glob function.", "twitter:card": "summary_large_image", "og:description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "scrapeId": "48c728ca-ef98-4853-8206-b693bd5aa079", "sourceURL": "https://docs.astro.build/en/recipes/dynamically-importing-images", "url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Dynamically import images in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing Image Component**:\n\n```yaml\n---\nimport { Image } from 'astro:assets';\n---\n```\n\nThis snippet shows you how to importing image component, which is an important aspect of dynamically import images.\n\n**Defining Props Interface**:\n\n```yaml\n---\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\n---\n```\n\nThis snippet shows you how to defining props interface, which is an important aspect of dynamically import images.\n\n**Using import.meta.glob**:\n\n```yaml\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')\n---\n```\n\nThis snippet shows you how to using import.meta.glob, which is an important aspect of dynamically import images.\n\n**Creating Card Markup**:\n\n```yaml\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\n---\n<div class=\"card\">\n       <h2>{name}</h2>\n       <p>Age: {age}</p>\n       <Image src={} alt={altText} />\n</div>\n---\n```\n\nThis snippet shows you how to creating card markup, which is an important aspect of dynamically import images.\n\n**Error Handling for Invalid Image Path**:\n\n```yaml\n---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n      imagePath: string;\n      altText: string;\n      name: string;\n      age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\nif (!images[imagePath]) throw new Error(`\"${imagePath}\" does not exist in glob: \"src/assets/*.{jpeg,jpg,png,gif}\"`);\n---\n<div class=\"card\">\n       <h2>{name}</h2>\n       <p>Age: {age}</p>\n       <Image src={images[imagePath]()} alt={altText} />\n</div>\n---\n```\n\nThis snippet shows you how to error handling for invalid image path, which is an important aspect of dynamically import images.\n\n**Using the Card Component**:\n\n```yaml\n---\nimport MyCustomCardComponent from '../components/MyCustomCardComponent.astro';\n---\n<MyCustomCardComponent\n       imagePath=\"/src/assets/avatar-1.jpg\"\n       altText=\"A headshot of Priya against a brick wall background.\"\n       name=\"Priya\"\n       age={25}\n/>\n```\n\nThis snippet shows you how to using the card component, which is an important aspect of dynamically import images.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/dynamically-importing-images", "title": "Dynamically import images", "description": "Learn how to dynamically import your images using Vite‚Äôs import.meta.glob function to build a card component that displays the name, age, and photo of a person.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:48:24", "type": "code_examples", "page_metadata": {"ogTitle": "Dynamically import images", "ogImage": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogLocale": "en", "ogSiteName": "Docs", "title": "Dynamically import images | Docs", "docsearch:language": "en", "og:title": "Dynamically import images", "ogDescription": "Learn how to dynamically import images using Vite's import.meta.glob function.", "twitter:card": "summary_large_image", "og:description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "scrapeId": "48c728ca-ef98-4853-8206-b693bd5aa079", "sourceURL": "https://docs.astro.build/en/recipes/dynamically-importing-images", "url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Dynamically import images in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that images are placed in the correct directory structure for proper importing.\n\nUse TypeScript for better type safety when defining props for components.\n\nAlways handle potential errors when dynamically importing images to avoid runtime issues.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/dynamically-importing-images", "title": "Dynamically import images", "description": "Learn how to dynamically import your images using Vite‚Äôs import.meta.glob function to build a card component that displays the name, age, and photo of a person.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:48:24", "type": "best_practices", "page_metadata": {"ogTitle": "Dynamically import images", "ogImage": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogLocale": "en", "ogSiteName": "Docs", "title": "Dynamically import images | Docs", "docsearch:language": "en", "og:title": "Dynamically import images", "ogDescription": "Learn how to dynamically import images using Vite's import.meta.glob function.", "twitter:card": "summary_large_image", "og:description": "Learn how to dynamically import images using Vite's import.meta.glob function.", "og:image": "https://docs.astro.build/open-graph/en/recipes/dynamically-importing-images.webp", "scrapeId": "48c728ca-ef98-4853-8206-b693bd5aa079", "sourceURL": "https://docs.astro.build/en/recipes/dynamically-importing-images", "url": "https://docs.astro.build/en/recipes/dynamically-importing-images/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Add dynamic content about you is in astro?\n\nAssistant: Sure, I'd be happy to explain Add dynamic content about you in astro.\n\n# Add dynamic content about you\n\nThis page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.Here's a quick rundown of what this is about:\n\n## Define and use a variable\n\nOpen `about.astro`, which should look like this:\n\n```\n---\n---\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Astro</title>\n  </head>\n  <body>\n    <a href=\"/\">Home</a>\n    <a href=\"/about/\">About</a>\n    <a href=\"/blog/\">Blog</a>\n    <h1>About Me</h1>\n    <h2>... and my new Astro site!</h2>\n    <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n    <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n  </body>\n</html>\n```\n\n1. Add the following line of JavaScript in the frontmatter script, between the **code fences**:\n\n```\n---\nconst pageTitle = \"About Me\";\n---\n```\n\n2. Replace both the static ‚ÄúAstro‚Äù title and ‚ÄúAbout Me‚Äù heading in your HTML with the dynamic variable `{pageTitle}`.\n\n```\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n       <title>{pageTitle}</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n       <h1>About Me</h1>\n       <h1>{pageTitle}</h1>\n       <h2>... and my new Astro site!</h2>\n       <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n       <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n     </body>\n</html>\n```\n\n3. Refresh the live preview of your `/about` page.\n\nYour page text should look the same, and your page title displayed in your browser tab should now read ‚ÄúAbout Me‚Äù instead of ‚ÄúAstro.‚Äù\n\nInstead of typing text directly into HTML tags, you just **defined and then used a variable** in the two sections of your `.astro` file, respectively.\n\n4. Use the same pattern to create a `pageTitle` value to use in `index.astro` (‚ÄúHome Page‚Äù) and `blog.astro` (‚ÄúMy Astro Learning Blog‚Äù). Update the HTML of these pages in both places so that your page title matches the heading displayed on each page.\n\n## Write JavaScript expressions in Astro\n\n1. Add the following JavaScript to your frontmatter, between the **code fences**:\n\n(You can customize the code for yourself, but this tutorial will use the following example.)\n\n```\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n---\n```\n\n2. Then, add the following code to your HTML template, below your existing content:\n\n```\n<p>Here are a few facts about me:</p>\n<ul>\n     <li>My name is {identity.firstName}.</li>\n     <li>I live in {identity.country} and I work as a {identity.occupation}.</li>\n     {identity.hobbies.length >= 2 &&\n       <li>Two of my hobbies are: {identity.hobbies[0]} and {identity.hobbies[1]}</li>\n     }\n</ul>\n<p>My skills are:</p>\n<ul>\n     {skills.map((skill) => <li>{skill}</li>)}\n</ul>\n```\n\n## Test your knowledge\n\n1. A `.astro` file‚Äôs frontmatter is written in:\n   1. HTML\n   2. YAML\n   3. JavaScript\n\n2. In addition to HTML, Astro syntax allows you to include:\n   1. JavaScript logical operators, expressions and functions\n   2. YAML\n   3. Markdown\n\n3. When do you need to write your JavaScript inside curly braces?\n   1. When you‚Äôre not sure whether it‚Äôs correct.\n   2. When inside the HTML template section of an Astro component.\n   3. Between the code fences in an Astro component.\n\n## Conditionally render elements\n\nYou can also use your script variables to choose **whether or not** to render individual elements of your HTML `<body>` content.\n\n1. Add the following lines to your frontmatter script to **define variables**:\n\n```\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\n---\n```\n\n2. Add the following lines below your existing paragraphs.\nThen, check the live preview in your browser tab to see what is displayed on the page:\n\n```\n{happy && <p>I am happy to be learning Astro!</p>}\n{finished && <p>I finished this tutorial!</p>}\n{goal === 3 ? <p>My goal is to finish in 3 days.</p> : <p>My goal is not 3 days.</p>}\n```\n\n3. Commit your changes to GitHub before moving on. Do this any time you want to save your work and update your live website.\n\n## Analyze the Pattern\n\nGiven the following `.astro` script:\n```\n---\nconst operatingSystem = \"Linux\";\nconst quantity = 3;\nconst footwear = \"boots\";\nconst student = false;\n---\n```\nFor each Astro template expression, can you predict the HTML (if any!) that will be sent to the browser? Click to reveal if you‚Äôre right!\n\n1. `<p>{operatingSystem}</p>`\n   `<p>Linux</p>`\n2. `{student && <p>I am still in school.</p>}`\n   Nothing will display because `student` evaluates to false.\n3. `<p>I have {quantity + 8} pairs of {footwear}</p>`\n   `<p>I have 11 pairs of boots</p>`\n4. `{operatingSystem === \"MacOS\" ? <p>I am using a Mac.</p> : <p>I am not using a Mac.</p>}`\n   `<p>I am not using a Mac.</p>`\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "overview", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I define and use a variable in astro?\n\nAssistant: To define and use a variable in astro, here's what you do:\nOpen `about.astro`, which should look like this:\n\n```\n---\n---\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Astro</title>\n  </head>\n  <body>\n    <a href=\"/\">Home</a>\n    <a href=\"/about/\">About</a>\n    <a href=\"/blog/\">Blog</a>\n    <h1>About Me</h1>\n    <h2>... and my new Astro site!</h2>\n    <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n    <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n  </body>\n</html>\n```\n\n1. Add the following line of JavaScript in the frontmatter script, between the **code fences**:\n\n```\n---\nconst pageTitle = \"About Me\";\n---\n```\n\n2. Replace both the static ‚ÄúAstro‚Äù title and ‚ÄúAbout Me‚Äù heading in your HTML with the dynamic variable `{pageTitle}`.\n\n```\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n       <title>{pageTitle}</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n       <h1>About Me</h1>\n       <h1>{pageTitle}</h1>\n       <h2>... and my new Astro site!</h2>\n       <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n       <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n     </body>\n</html>\n```\n\n3. Refresh the live preview of your `/about` page.\n\nYour page text should look the same, and your page title displayed in your browser tab should now read ‚ÄúAbout Me‚Äù instead of ‚ÄúAstro.‚Äù\n\nInstead of typing text directly into HTML tags, you just **defined and then used a variable** in the two sections of your `.astro` file, respectively.\n\n4. Use the same pattern to create a `pageTitle` value to use in `index.astro` (‚ÄúHome Page‚Äù) and `blog.astro` (‚ÄúMy Astro Learning Blog‚Äù). Update the HTML of these pages in both places so that your page title matches the heading displayed on each page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I write javascript expressions in astro in astro?\n\nAssistant: To write javascript expressions in astro in astro, here's what you do:\n1. Add the following JavaScript to your frontmatter, between the **code fences**:\n\n(You can customize the code for yourself, but this tutorial will use the following example.)\n\n```\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n---\n```\n\n2. Then, add the following code to your HTML template, below your existing content:\n\n```\n<p>Here are a few facts about me:</p>\n<ul>\n     <li>My name is {identity.firstName}.</li>\n     <li>I live in {identity.country} and I work as a {identity.occupation}.</li>\n     {identity.hobbies.length >= 2 &&\n       <li>Two of my hobbies are: {identity.hobbies[0]} and {identity.hobbies[1]}</li>\n     }\n</ul>\n<p>My skills are:</p>\n<ul>\n     {skills.map((skill) => <li>{skill}</li>)}\n</ul>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. A `.astro` file‚Äôs frontmatter is written in:\n   1. HTML\n   2. YAML\n   3. JavaScript\n\n2. In addition to HTML, Astro syntax allows you to include:\n   1. JavaScript logical operators, expressions and functions\n   2. YAML\n   3. Markdown\n\n3. When do you need to write your JavaScript inside curly braces?\n   1. When you‚Äôre not sure whether it‚Äôs correct.\n   2. When inside the HTML template section of an Astro component.\n   3. Between the code fences in an Astro component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I conditionally render elements in astro?\n\nAssistant: To conditionally render elements in astro, here's what you do:\nYou can also use your script variables to choose **whether or not** to render individual elements of your HTML `<body>` content.\n\n1. Add the following lines to your frontmatter script to **define variables**:\n\n```\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\n---\n```\n\n2. Add the following lines below your existing paragraphs.\nThen, check the live preview in your browser tab to see what is displayed on the page:\n\n```\n{happy && <p>I am happy to be learning Astro!</p>}\n{finished && <p>I finished this tutorial!</p>}\n{goal === 3 ? <p>My goal is to finish in 3 days.</p> : <p>My goal is not 3 days.</p>}\n```\n\n3. Commit your changes to GitHub before moving on. Do this any time you want to save your work and update your live website..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I analyze the pattern in astro?\n\nAssistant: To analyze the pattern in astro, here's what you do:\nGiven the following `.astro` script:\n```\n---\nconst operatingSystem = \"Linux\";\nconst quantity = 3;\nconst footwear = \"boots\";\nconst student = false;\n---\n```\nFor each Astro template expression, can you predict the HTML (if any!) that will be sent to the browser? Click to reveal if you‚Äôre right!\n\n1. `<p>{operatingSystem}</p>`\n   `<p>Linux</p>`\n2. `{student && <p>I am still in school.</p>}`\n   Nothing will display because `student` evaluates to false.\n3. `<p>I have {quantity + 8} pairs of {footwear}</p>`\n   `<p>I have 11 pairs of boots</p>`\n4. `{operatingSystem === \"MacOS\" ? <p>I am using a Mac.</p> : <p>I am not using a Mac.</p>}`\n   `<p>I am not using a Mac.</p>`.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Add dynamic content about you in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Define and use a variable**:\n\n```yaml\n---\nconst pageTitle = \"About Me\";\n---\n```\n\nThis snippet shows you how to define and use a variable, which is an important aspect of add dynamic content about you.\n\n**HTML structure with dynamic title**:\n\n```yaml\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>{pageTitle}</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n       <h1>{pageTitle}</h1>\n       <h2>... and my new Astro site!</h2>\n       <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n       <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n     </body>\n</html>\n```\n\nThis snippet shows you how to html structure with dynamic title, which is an important aspect of add dynamic content about you.\n\n**JavaScript expressions in frontmatter**:\n\n```yaml\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n---\n```\n\nThis snippet shows you how to javascript expressions in frontmatter, which is an important aspect of add dynamic content about you.\n\n**Conditional rendering example**:\n\n```yaml\n{happy && <p>I am happy to be learning Astro!</p>}\n{finished && <p>I finished this tutorial!</p>}\n{goal === 3 ? <p>My goal is to finish in 3 days.</p> : <p>My goal is not 3 days.</p>}\n```\n\nThis snippet shows you how to conditional rendering example, which is an important aspect of add dynamic content about you.\n\n**Analyze the Pattern**:\n\n```yaml\n---\nconst operatingSystem = \"Linux\";\nconst quantity = 3;\nconst footwear = \"boots\";\nconst student = false;\n---\n```\n\nThis snippet shows you how to analyze the pattern, which is an important aspect of add dynamic content about you.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "code_examples", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Add dynamic content about you in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse frontmatter to define variables for dynamic content.\n\nConditionally render elements based on variable values.\n\nUtilize JavaScript expressions within Astro templates.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/3", "title": "Add dynamic content about you", "description": "This page covers how to add dynamic HTML content to your Astro website, including defining variables, conditionally rendering elements, and using JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:49:02", "type": "best_practices", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "ogSiteName": "Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:url": "https://docs.astro.build/en/tutorial/2-pages/3/", "docsearch:language": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "ogTitle": "Add dynamic content about you", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "twitter:site": "astrodotbuild", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/3/", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/3.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse variables and conditional rendering on your Astro pages", "og:title": "Add dynamic content about you", "title": "Add dynamic content about you | Docs", "scrapeId": "4a7bca5a-d706-4606-bef4-9e5ebcf3180a", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/3", "url": "https://docs.astro.build/en/tutorial/2-pages/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/preact is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/preact in astro.\n\n# @astrojs/preact\n\nThis Astro integration enables rendering and client-side hydration for your Preact components.Here's a quick rundown of what this is about:\n\n## Why Preact?\n\nPreact is a library that lets you build interactive UI components for the web. If you want to build interactive features on your site using JavaScript, you may prefer using its component format instead of using browser APIs directly.\n\nPreact is also a great choice if you have previously used React. Preact provides the same API as React, but in a much smaller 3kB package. It even supports rendering many React components using the compat configuration option (see below).\n\n**Want to learn more about Preact before using this integration?**\n\nCheck out ‚ÄúLearn Preact‚Äù, an interactive tutorial on their website.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/preact`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add preact\n```\n\n```\n\npnpm astro add preact\n```\n\n```\nyarn astro add preact\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/preact` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/preact\n```\n\n```\n\npnpm add @astrojs/preact\n```\n\n```\nyarn add @astrojs/preact\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'preact'` (or similar) warning when you start up Astro, you‚Äôll need to install Preact:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install preact\n```\n\n```\n\npnpm add preact\n```\n\n```\nyarn add preact\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [preact()],\n\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"react-jsx\",\n\n    \"jsxImportSource\": \"preact\"\n\n  }\n\n}\n```\n\n## Usage\n\nTo use your first Preact component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together\n\nAlso check our Astro Integration Documentation for more on integrations.\n\n## Configuration\n\nThe Astro Preact integration handles how Preact components are rendered and it has its own options. Change these in the `astro.config.mjs` file which is where your project‚Äôs integration settings live.\n\nFor basic usage, you do not need to configure the Preact integration.\n\n## compat\n\nYou can enable `preact/compat`, Preact‚Äôs compatibility layer for rendering React components without needing to install or ship React‚Äôs larger libraries to your users‚Äô web browsers.\n\nTo do so, pass an object to the Preact integration and set `compat: true`.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  integrations: [preact({ compat: true })],\n\n});\n```\n\nWith the `compat` option enabled, the Preact integration will render React components as well as Preact components in your project and also allow you to import React components inside Preact components. Read more in ‚ÄúSwitching to Preact (from React)‚Äù on the Preact website.\n\nWhen importing React component libraries, in order to swap out the `react` and `react-dom` dependencies as `preact/compat`, you can use overrides to do so.\n\n```\n{\n\n  \"overrides\": {\n\n    \"react\": \"npm:@preact/compat@latest\",\n\n    \"react-dom\": \"npm:@preact/compat@latest\"\n\n  }\n}\n```\n\nCheck out the pnpm overrides and yarn resolutions docs for their respective overrides features.\n\n## devtools\n\nYou can enable Preact devtools in development by passing an object with `devtools: true` to your `preact()` integration config:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [preact({ devtools: true })],\n\n});\n```\n\n## Options\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to include for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nimport react from '@astrojs/react';\n\nimport svelte from '@astrojs/svelte';\n\nimport vue from '@astrojs/vue';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  integrations: [\n\n    preact({\n\n      include: ['**/preact/*'],\n\n    }),\n\n    react({\n\n      include: ['**/react/*'],\n\n    }),\n\n    solid({\n\n      include: ['**/solid/*'],\n\n    }),\n\n  ],\n\n});\n```\n\n## Examples\n\n- The Astro Preact example shows how to use an interactive Preact component in an Astro project.\n- The Astro Nanostores example shows how to share state between different components ‚Äî and even different frameworks! ‚Äî in an Astro project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "overview", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why preact? in astro?\n\nAssistant: To why preact? in astro, here's what you do:\nPreact is a library that lets you build interactive UI components for the web. If you want to build interactive features on your site using JavaScript, you may prefer using its component format instead of using browser APIs directly.\n\nPreact is also a great choice if you have previously used React. Preact provides the same API as React, but in a much smaller 3kB package. It even supports rendering many React components using the compat configuration option (see below).\n\n**Want to learn more about Preact before using this integration?**\n\nCheck out ‚ÄúLearn Preact‚Äù, an interactive tutorial on their website..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/preact`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add preact\n```\n\n```\n\npnpm astro add preact\n```\n\n```\nyarn astro add preact\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/preact` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/preact\n```\n\n```\n\npnpm add @astrojs/preact\n```\n\n```\nyarn add @astrojs/preact\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'preact'` (or similar) warning when you start up Astro, you‚Äôll need to install Preact:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install preact\n```\n\n```\n\npnpm add preact\n```\n\n```\nyarn add preact\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [preact()],\n\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"react-jsx\",\n\n    \"jsxImportSource\": \"preact\"\n\n  }\n\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nTo use your first Preact component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together\n\nAlso check our Astro Integration Documentation for more on integrations..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\nThe Astro Preact integration handles how Preact components are rendered and it has its own options. Change these in the `astro.config.mjs` file which is where your project‚Äôs integration settings live.\n\nFor basic usage, you do not need to configure the Preact integration..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I compat in astro?\n\nAssistant: To compat in astro, here's what you do:\nYou can enable `preact/compat`, Preact‚Äôs compatibility layer for rendering React components without needing to install or ship React‚Äôs larger libraries to your users‚Äô web browsers.\n\nTo do so, pass an object to the Preact integration and set `compat: true`.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  integrations: [preact({ compat: true })],\n\n});\n```\n\nWith the `compat` option enabled, the Preact integration will render React components as well as Preact components in your project and also allow you to import React components inside Preact components. Read more in ‚ÄúSwitching to Preact (from React)‚Äù on the Preact website.\n\nWhen importing React component libraries, in order to swap out the `react` and `react-dom` dependencies as `preact/compat`, you can use overrides to do so.\n\n```\n{\n\n  \"overrides\": {\n\n    \"react\": \"npm:@preact/compat@latest\",\n\n    \"react-dom\": \"npm:@preact/compat@latest\"\n\n  }\n}\n```\n\nCheck out the pnpm overrides and yarn resolutions docs for their respective overrides features..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I devtools in astro?\n\nAssistant: To devtools in astro, here's what you do:\nYou can enable Preact devtools in development by passing an object with `devtools: true` to your `preact()` integration config:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [preact({ devtools: true })],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options in astro?\n\nAssistant: To options in astro, here's what you do:\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to include for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nimport react from '@astrojs/react';\n\nimport svelte from '@astrojs/svelte';\n\nimport vue from '@astrojs/vue';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  integrations: [\n\n    preact({\n\n      include: ['**/preact/*'],\n\n    }),\n\n    react({\n\n      include: ['**/react/*'],\n\n    }),\n\n    solid({\n\n      include: ['**/solid/*'],\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\n- The Astro Preact example shows how to use an interactive Preact component in an Astro project.\n- The Astro Nanostores example shows how to share state between different components ‚Äî and even different frameworks! ‚Äî in an Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/preact in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add preact\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/preact.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/preact\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/preact.\n\n**Manual Install Command for Preact**:\n\n```yaml\nnpm install preact\n```\n\nThis snippet shows you how to manual install command for preact, which is an important aspect of @astrojs/preact.\n\n**Astro Config Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nexport default defineConfig({\n\n  integrations: [preact()],\n\n});\n```\n\nThis snippet shows you how to astro config example, which is an important aspect of @astrojs/preact.\n\n**tsconfig.json Example**:\n\n```yaml\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"react-jsx\",\n\n    \"jsxImportSource\": \"preact\"\n\n  }\n\n}\n```\n\nThis snippet shows you how to tsconfig.json example, which is an important aspect of @astrojs/preact.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "code_examples", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/preact in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/preact", "title": "@astrojs/preact", "description": "This Astro integration enables rendering and client-side hydration for your Preact components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:49:33", "type": "best_practices", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/preact.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/preact/", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Docs", "og:description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "ogLocale": "en", "ogTitle": "@astrojs/preact", "og:title": "@astrojs/preact", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "ogDescription": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "og:locale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "title": "@astrojs/preact | Docs", "description": "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", "scrapeId": "6845d4ea-b7b1-4284-b2c0-2645bbe6e4c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/preact", "url": "https://docs.astro.build/en/guides/integrations-guide/preact/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Installing a Vite or Rollup plugin is in astro?\n\nAssistant: Sure, I'd be happy to explain Installing a Vite or Rollup plugin in astro.\n\n# Installing a Vite or Rollup plugin\n\nAstro builds on top of Vite, and supports both Vite and Rollup plugins. This recipe uses a Rollup plugin to add the ability to import a YAML ( `.yml`) file in Astro.Here's a quick rundown of what this is about:\n\n## Recipe\n\n1. Install `@rollup/plugin-yaml`:\n\n- [npm](https://docs.astro.build/en/recipes/add-yaml-support/#tab-panel-479)\n- [pnpm](https://docs.astro.build/en/recipes/add-yaml-support/#tab-panel-480)\n- [Yarn](https://docs.astro.build/en/recipes/add-yaml-support/#tab-panel-481)\n\n```\n\nnpm install @rollup/plugin-yaml --save-dev\n```\n\n```\n\npnpm add @rollup/plugin-yaml --save-dev\n```\n\n```\n\nyarn add @rollup/plugin-yaml --save-dev\n```\n\n2. Import the plugin in your `astro.config.mjs` and add it to the Vite plugins array:\n\n```javascript\n\nimport { defineConfig } from 'astro/config';\n\nimport yaml from '@rollup/plugin-yaml';\n\n\n\nexport default defineConfig({\n\n     vite: {\n\n       plugins: [yaml()]\n\n     }\n\n});\n```\n\n3. Finally, you can import YAML data using an `import` statement:\n\n```javascript\n\nimport yml from './data.yml';\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/add-yaml-support", "title": "Installing a Vite or Rollup plugin", "description": "Astro builds on top of Vite, and supports both Vite and Rollup plugins. This recipe uses a Rollup plugin to add the ability to import a YAML ( `.yml`) file in Astro.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:49:52", "type": "overview", "page_metadata": {"language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/recipes/add-yaml-support/", "title": "Installing a Vite or Rollup plugin | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogTitle": "Installing a Vite or Rollup plugin", "og:url": "https://docs.astro.build/en/recipes/add-yaml-support/", "ogImage": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "og:description": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "og:image": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Installing a Vite or Rollup plugin", "og:type": "article", "og:locale": "en", "description": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "ogDescription": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "ogLocale": "en", "twitter:site": "astrodotbuild", "scrapeId": "7076a6ea-3203-4e79-997b-02de67e382e7", "sourceURL": "https://docs.astro.build/en/recipes/add-yaml-support", "url": "https://docs.astro.build/en/recipes/add-yaml-support/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recipe in astro?\n\nAssistant: To recipe in astro, here's what you do:\n1. Install `@rollup/plugin-yaml`:\n\n- [npm](https://docs.astro.build/en/recipes/add-yaml-support/#tab-panel-479)\n- [pnpm](https://docs.astro.build/en/recipes/add-yaml-support/#tab-panel-480)\n- [Yarn](https://docs.astro.build/en/recipes/add-yaml-support/#tab-panel-481)\n\n```\n\nnpm install @rollup/plugin-yaml --save-dev\n```\n\n```\n\npnpm add @rollup/plugin-yaml --save-dev\n```\n\n```\n\nyarn add @rollup/plugin-yaml --save-dev\n```\n\n2. Import the plugin in your `astro.config.mjs` and add it to the Vite plugins array:\n\n```javascript\n\nimport { defineConfig } from 'astro/config';\n\nimport yaml from '@rollup/plugin-yaml';\n\n\n\nexport default defineConfig({\n\n     vite: {\n\n       plugins: [yaml()]\n\n     }\n\n});\n```\n\n3. Finally, you can import YAML data using an `import` statement:\n\n```javascript\n\nimport yml from './data.yml';\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/add-yaml-support", "title": "Installing a Vite or Rollup plugin", "description": "Astro builds on top of Vite, and supports both Vite and Rollup plugins. This recipe uses a Rollup plugin to add the ability to import a YAML ( `.yml`) file in Astro.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:49:52", "type": "section_detail", "page_metadata": {"language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/recipes/add-yaml-support/", "title": "Installing a Vite or Rollup plugin | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogTitle": "Installing a Vite or Rollup plugin", "og:url": "https://docs.astro.build/en/recipes/add-yaml-support/", "ogImage": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "og:description": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "og:image": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Installing a Vite or Rollup plugin", "og:type": "article", "og:locale": "en", "description": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "ogDescription": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "ogLocale": "en", "twitter:site": "astrodotbuild", "scrapeId": "7076a6ea-3203-4e79-997b-02de67e382e7", "sourceURL": "https://docs.astro.build/en/recipes/add-yaml-support", "url": "https://docs.astro.build/en/recipes/add-yaml-support/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Installing a Vite or Rollup plugin in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install @rollup/plugin-yaml using npm**:\n\n```yaml\nnpm install @rollup/plugin-yaml --save-dev\n```\n\nThis snippet shows you how to install @rollup/plugin-yaml using npm, which is an important aspect of installing a vite or rollup plugin.\n\n**Install @rollup/plugin-yaml using pnpm**:\n\n```yaml\npnpm add @rollup/plugin-yaml --save-dev\n```\n\nThis snippet shows you how to install @rollup/plugin-yaml using pnpm, which is an important aspect of installing a vite or rollup plugin.\n\n**Install @rollup/plugin-yaml using Yarn**:\n\n```yaml\nyarn add @rollup/plugin-yaml --save-dev\n```\n\nThis snippet shows you how to install @rollup/plugin-yaml using yarn, which is an important aspect of installing a vite or rollup plugin.\n\n**Importing the plugin in astro.config.mjs**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport yaml from '@rollup/plugin-yaml';\n\nexport default defineConfig({\n     vite: {\n       plugins: [yaml()]\n     }\n});\n```\n\nThis snippet shows you how to importing the plugin in astro.config.mjs, which is an important aspect of installing a vite or rollup plugin.\n\n**Importing YAML data**:\n\n```yaml\nimport yml from './data.yml';\n```\n\nThis snippet shows you how to importing yaml data, which is an important aspect of installing a vite or rollup plugin.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/add-yaml-support", "title": "Installing a Vite or Rollup plugin", "description": "Astro builds on top of Vite, and supports both Vite and Rollup plugins. This recipe uses a Rollup plugin to add the ability to import a YAML ( `.yml`) file in Astro.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:49:52", "type": "code_examples", "page_metadata": {"language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/recipes/add-yaml-support/", "title": "Installing a Vite or Rollup plugin | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogTitle": "Installing a Vite or Rollup plugin", "og:url": "https://docs.astro.build/en/recipes/add-yaml-support/", "ogImage": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "og:description": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "og:image": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/add-yaml-support.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Installing a Vite or Rollup plugin", "og:type": "article", "og:locale": "en", "description": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "ogDescription": "Learn how you can import YAML data by adding a Rollup plugin to your project.", "ogLocale": "en", "twitter:site": "astrodotbuild", "scrapeId": "7076a6ea-3203-4e79-997b-02de67e382e7", "sourceURL": "https://docs.astro.build/en/recipes/add-yaml-support", "url": "https://docs.astro.build/en/recipes/add-yaml-support/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/alpinejs is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/alpinejs in astro.\n\n# @astrojs/alpinejs\n\nThis Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.Here's a quick rundown of what this is about:\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/alpinejs`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add alpinejs\n```\n\n```\n\npnpm astro add alpinejs\n```\n\n```\n\nyarn astro add alpinejs\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/alpinejs` package.\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/alpinejs\n```\n\n```\n\npnpm add @astrojs/alpinejs\n```\n\n```\n\nyarn add @astrojs/alpinejs\n```\n\nMost package managers will install associated peer dependencies as well. However, if you see a `Cannot find package 'alpinejs'` (or similar) warning when you start up Astro, you‚Äôll need to manually install Alpine.js yourself:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install alpinejs @types/alpinejs\n```\n\n```\n\npnpm add alpinejs @types/alpinejs\n```\n\n```\n\nyarn add alpinejs @types/alpinejs\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport alpinejs from '@astrojs/alpinejs';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [alpinejs()],\n\n});\n```\n\n## Configuration Options\n\n### `entrypoint`\n\nYou can extend Alpine by setting the `entrypoint` option to a root-relative import specifier (e.g. `entrypoint: \"/src/entrypoint\"`).\n\nThe default export of this file should be a function that accepts an Alpine instance prior to starting. This allows the use of custom directives, plugins and other customizations for advanced use cases.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport alpine from '@astrojs/alpinejs';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [alpine({ entrypoint: '/src/entrypoint' })],\n\n});\n```\n\n```\nimport type { Alpine } from 'alpinejs'\n\nimport intersect from '@alpinejs/intersect'\n\nexport default (Alpine: Alpine) => {\n\n    Alpine.plugin(intersect)\n}\n```\n\n## Usage\n\nOnce the integration is installed, you can use Alpine.js directives and syntax inside any Astro component. The Alpine.js script is automatically added and enabled on every page of your website so no client directives are needed. Add plugin scripts to the page `<head>`.\n\nThe following example adds Alpine‚Äôs Collapse plugin to expand and collapse paragraph text:\n\n```\n---\n---\n<html>\n  <head>\n    <!-- ... -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js\"></script>\n  </head>\n  <body>\n    <!-- ... -->\n    <div x-data=\"{ expanded: false }\">\n      <button @click=\"expanded = ! expanded\">Toggle Content</button>\n      <p id=\"foo\" x-show=\"expanded\" x-collapse>\n        Lorem ipsum\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n## Intellisense for TypeScript\n\nThe `@astrojs/alpine` integration adds `Alpine` to the global window object. For IDE autocompletion, add the following to your `src/env.d.ts`:\n\n```\ninterface Window {\n  Alpine: import('alpinejs').Alpine;\n}\n```\n\n## Examples\n\n- The Astro Alpine.js example shows how to use Alpine.js in an Astro project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "overview", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/alpinejs`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add alpinejs\n```\n\n```\n\npnpm astro add alpinejs\n```\n\n```\n\nyarn astro add alpinejs\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "section_detail", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/alpinejs` package.\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/alpinejs\n```\n\n```\n\npnpm add @astrojs/alpinejs\n```\n\n```\n\nyarn add @astrojs/alpinejs\n```\n\nMost package managers will install associated peer dependencies as well. However, if you see a `Cannot find package 'alpinejs'` (or similar) warning when you start up Astro, you‚Äôll need to manually install Alpine.js yourself:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install alpinejs @types/alpinejs\n```\n\n```\n\npnpm add alpinejs @types/alpinejs\n```\n\n```\n\nyarn add alpinejs @types/alpinejs\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport alpinejs from '@astrojs/alpinejs';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [alpinejs()],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "section_detail", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration options in astro?\n\nAssistant: To configuration options in astro, here's what you do:\n### `entrypoint`\n\nYou can extend Alpine by setting the `entrypoint` option to a root-relative import specifier (e.g. `entrypoint: \"/src/entrypoint\"`).\n\nThe default export of this file should be a function that accepts an Alpine instance prior to starting. This allows the use of custom directives, plugins and other customizations for advanced use cases.\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport alpine from '@astrojs/alpinejs';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [alpine({ entrypoint: '/src/entrypoint' })],\n\n});\n```\n\n```\nimport type { Alpine } from 'alpinejs'\n\nimport intersect from '@alpinejs/intersect'\n\nexport default (Alpine: Alpine) => {\n\n    Alpine.plugin(intersect)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "section_detail", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nOnce the integration is installed, you can use Alpine.js directives and syntax inside any Astro component. The Alpine.js script is automatically added and enabled on every page of your website so no client directives are needed. Add plugin scripts to the page `<head>`.\n\nThe following example adds Alpine‚Äôs Collapse plugin to expand and collapse paragraph text:\n\n```\n---\n---\n<html>\n  <head>\n    <!-- ... -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js\"></script>\n  </head>\n  <body>\n    <!-- ... -->\n    <div x-data=\"{ expanded: false }\">\n      <button @click=\"expanded = ! expanded\">Toggle Content</button>\n      <p id=\"foo\" x-show=\"expanded\" x-collapse>\n        Lorem ipsum\n      </p>\n    </div>\n  </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "section_detail", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I intellisense for typescript in astro?\n\nAssistant: To intellisense for typescript in astro, here's what you do:\nThe `@astrojs/alpine` integration adds `Alpine` to the global window object. For IDE autocompletion, add the following to your `src/env.d.ts`:\n\n```\ninterface Window {\n  Alpine: import('alpinejs').Alpine;\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "section_detail", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\n- The Astro Alpine.js example shows how to use Alpine.js in an Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "section_detail", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/alpinejs in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install @astrojs/alpinejs using npm**:\n\n```yaml\nnpm install @astrojs/alpinejs\n```\n\nThis snippet shows you how to install @astrojs/alpinejs using npm, which is an important aspect of @astrojs/alpinejs.\n\n**Install @astrojs/alpinejs using pnpm**:\n\n```yaml\npnpm add @astrojs/alpinejs\n```\n\nThis snippet shows you how to install @astrojs/alpinejs using pnpm, which is an important aspect of @astrojs/alpinejs.\n\n**Install @astrojs/alpinejs using Yarn**:\n\n```yaml\nyarn add @astrojs/alpinejs\n```\n\nThis snippet shows you how to install @astrojs/alpinejs using yarn, which is an important aspect of @astrojs/alpinejs.\n\n**Install Alpine.js and types using npm**:\n\n```yaml\nnpm install alpinejs @types/alpinejs\n```\n\nThis snippet shows you how to install alpine.js and types using npm, which is an important aspect of @astrojs/alpinejs.\n\n**Install Alpine.js and types using pnpm**:\n\n```yaml\npnpm add alpinejs @types/alpinejs\n```\n\nThis snippet shows you how to install alpine.js and types using pnpm, which is an important aspect of @astrojs/alpinejs.\n\n**Install Alpine.js and types using Yarn**:\n\n```yaml\nyarn add alpinejs @types/alpinejs\n```\n\nThis snippet shows you how to install alpine.js and types using yarn, which is an important aspect of @astrojs/alpinejs.\n\n**Astro config with Alpine.js integration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport alpinejs from '@astrojs/alpinejs';\nexport default defineConfig({\n  // ...\n  integrations: [alpinejs()],\n});\n```\n\nThis snippet shows you how to astro config with alpine.js integration, which is an important aspect of @astrojs/alpinejs.\n\n**Astro config with entrypoint option**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport alpine from '@astrojs/alpinejs';\nexport default defineConfig({\n  // ...\n  integrations: [alpine({ entrypoint: '/src/entrypoint' })],\n});\n```\n\nThis snippet shows you how to astro config with entrypoint option, which is an important aspect of @astrojs/alpinejs.\n\n**Alpine.js plugin example**:\n\n```yaml\nimport type { Alpine } from 'alpinejs'\nimport intersect from '@alpinejs/intersect'\nexport default (Alpine: Alpine) => {\n    Alpine.plugin(intersect)\n}\n```\n\nThis snippet shows you how to alpine.js plugin example, which is an important aspect of @astrojs/alpinejs.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "code_examples", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/alpinejs in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub.\n\nMost package managers will install associated peer dependencies as well.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "title": "@astrojs/alpinejs", "description": "This Astro integration adds Alpine.js to your project so that you can use Alpine.js anywhere on your page.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:50:50", "type": "best_practices", "page_metadata": {"og:type": "article", "description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogTitle": "@astrojs/alpinejs", "twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "ogSiteName": "Docs", "ogDescription": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:description": "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "@astrojs/alpinejs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "title": "@astrojs/alpinejs | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/alpinejs.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "scrapeId": "7859ce33-ad9b-4788-9acc-34b2285218c3", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/alpinejs", "url": "https://docs.astro.build/en/guides/integrations-guide/alpinejs/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Combine layouts to get the best of both worlds is in astro?\n\nAssistant: Sure, I'd be happy to explain Combine layouts to get the best of both worlds in astro.\n\n# Combine layouts to get the best of both worlds\n\nNow that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!Here's a quick rundown of what this is about:\n\n## Nest your two layouts\n\nYou already have a `BaseLayout.astro` for defining the overall layout of your pages.\n\n`MarkdownPostLayout.astro` gives you some additional templating for common blog post properties such as `title` and `date`, but your blog posts don‚Äôt look like the other pages on your site. You can match the look of your blog posts to the rest of your site by **nesting layouts**.\n\n1. In `src/layouts/MarkdownPostLayout.astro`, import `BaseLayout.astro` and use it to wrap the entire template content. Don‚Äôt forget to pass the `pageTitle` prop:\n\n```javascript\n---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n     <h1>{frontmatter.title}</h1>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p><em>{frontmatter.description}</em></p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <slot />\n</BaseLayout>\n```\n\n2. Check your browser preview at `http://localhost:4321/posts/post-1`. Now you should see content rendered by:\n   - Your **main page layout**, including your styles, navigation links, and social footer.\n   - Your **blog post layout**, including frontmatter properties like the description, date, title, and image.\n   - Your **individual blog post Markdown content**, including just the text written in this post.\n3. Notice that your page title is now displayed twice, once by each layout.\n\nRemove the line that displays your page title from `MarkdownPostLayout.astro`:\n\n```javascript\n<BaseLayout pageTitle={frontmatter.title}>\n     <h1>{frontmatter.title}</h1>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p><em>{frontmatter.description}</em></p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <slot />\n</BaseLayout>\n```\n\n4. Check your browser preview again at `http://localhost:4321/posts/post-1` and verify that this line is no longer displayed and that your title is only displayed once. Make any other adjustments necessary to ensure that you do not have any duplicated content.\n\nMake sure that:\n\n- Each blog post shows the same page template, and no content is missing. (If one of your blog posts is missing content, check its frontmatter properties.)\n\n- No content is duplicated on a page. (If something is being rendered twice, then be sure to remove it from `MarkdownPostLayout.astro`.)\n\nIf you‚Äôd like to customize your page template, you can.\n\n## Test your knowledge\n\n1. This allows you to nest one layout inside another and take advantage of working with modular pieces.\n\n1. continuous deployment\n\n2. responsive design\n\n3. component-based design\n\n2. Multiple layouts are particularly useful for projects that contain Markdown pages, like a‚Ä¶\n\n1. blog\n\n2. dashboard\n\n3. chat app\n\n3. Which of these provides templating for all your pages?\n\n1. `index.astro`\n\n2. `BaseLayout.astro`\n\n3. `post-1.md`\n\n## Checklist\n\n- I can nest layouts, checking for any duplicated elements.\n\n## Resources\n\n- [Nesting Layouts in Astro](https://docs.astro.build/en/basics/layouts/#nesting-layouts)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "overview", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I nest your two layouts in astro?\n\nAssistant: To nest your two layouts in astro, here's what you do:\nYou already have a `BaseLayout.astro` for defining the overall layout of your pages.\n\n`MarkdownPostLayout.astro` gives you some additional templating for common blog post properties such as `title` and `date`, but your blog posts don‚Äôt look like the other pages on your site. You can match the look of your blog posts to the rest of your site by **nesting layouts**.\n\n1. In `src/layouts/MarkdownPostLayout.astro`, import `BaseLayout.astro` and use it to wrap the entire template content. Don‚Äôt forget to pass the `pageTitle` prop:\n\n```javascript\n---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n     <h1>{frontmatter.title}</h1>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p><em>{frontmatter.description}</em></p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <slot />\n</BaseLayout>\n```\n\n2. Check your browser preview at `http://localhost:4321/posts/post-1`. Now you should see content rendered by:\n   - Your **main page layout**, including your styles, navigation links, and social footer.\n   - Your **blog post layout**, including frontmatter properties like the description, date, title, and image.\n   - Your **individual blog post Markdown content**, including just the text written in this post.\n3. Notice that your page title is now displayed twice, once by each layout.\n\nRemove the line that displays your page title from `MarkdownPostLayout.astro`:\n\n```javascript\n<BaseLayout pageTitle={frontmatter.title}>\n     <h1>{frontmatter.title}</h1>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p><em>{frontmatter.description}</em></p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <slot />\n</BaseLayout>\n```\n\n4. Check your browser preview again at `http://localhost:4321/posts/post-1` and verify that this line is no longer displayed and that your title is only displayed once. Make any other adjustments necessary to ensure that you do not have any duplicated content.\n\nMake sure that:\n\n- Each blog post shows the same page template, and no content is missing. (If one of your blog posts is missing content, check its frontmatter properties.)\n\n- No content is duplicated on a page. (If something is being rendered twice, then be sure to remove it from `MarkdownPostLayout.astro`.)\n\nIf you‚Äôd like to customize your page template, you can..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. This allows you to nest one layout inside another and take advantage of working with modular pieces.\n\n1. continuous deployment\n\n2. responsive design\n\n3. component-based design\n\n2. Multiple layouts are particularly useful for projects that contain Markdown pages, like a‚Ä¶\n\n1. blog\n\n2. dashboard\n\n3. chat app\n\n3. Which of these provides templating for all your pages?\n\n1. `index.astro`\n\n2. `BaseLayout.astro`\n\n3. `post-1.md`.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can nest layouts, checking for any duplicated elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Nesting Layouts in Astro](https://docs.astro.build/en/basics/layouts/#nesting-layouts).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Combine layouts to get the best of both worlds in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Nest your two layouts**:\n\n```yaml\n---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n     <h1>{frontmatter.title}</h1>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p><em>{frontmatter.description}</em></p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <slot />\n</BaseLayout>\n```\n\nThis snippet shows you how to nest your two layouts, which is an important aspect of combine layouts to get the best of both worlds.\n\n**Remove duplicated page title**:\n\n```yaml\n<BaseLayout pageTitle={frontmatter.title}>\n     <h1>{frontmatter.title}</h1>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p><em>{frontmatter.description}</em></p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <slot />\n</BaseLayout>\n```\n\nThis snippet shows you how to remove duplicated page title, which is an important aspect of combine layouts to get the best of both worlds.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "code_examples", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Combine layouts to get the best of both worlds in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure that each blog post shows the same page template, and no content is missing.\n\nEnsure no content is duplicated on a page.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/3", "title": "Combine layouts to get the best of both worlds", "description": "Now that you have added a layout to each blog post, it‚Äôs time to make your posts look like the rest of the pages on your website!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:51:39", "type": "best_practices", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Combine layouts to get the best of both worlds", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "title": "Combine layouts to get the best of both worlds | Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/3/", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd your basic page layout to the layout that formats your blog posts", "ogTitle": "Combine layouts to get the best of both worlds", "og:locale": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "scrapeId": "2bd3adba-75ad-4612-9639-ba92cd4b2f65", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/3", "url": "https://docs.astro.build/en/tutorial/4-layouts/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Prepare your dev environment is in astro?\n\nAssistant: Sure, I'd be happy to explain Prepare your dev environment in astro.\n\n# Prepare your dev environment\n\nGet ready to install any tools that you will use to build your Astro websiteHere's a quick rundown of what this is about:\n\n## Get the dev tools you need\n\nYou will use a command line (terminal) to create your Astro project and to run key commands to build, develop, and test your site.\n\n## Terminal\n\nYou can access the command line through a local terminal program for your operating system. Common applications include Terminal (MacOS/Linux), Command Prompt (Windows), and Termux (Android). One of these will probably already be on your machine.\n\n## Node.js\n\nFor Astro to run on your system, you will also need to have Node.js installed, version v18.17.1 or v20.3.0 or later. (v19 is not supported.) To check to see whether you already have a compatible version installed, run the following command in your terminal:\n\n```\nnode -v\n\n// Example output\n\nv18.17.1\n```\n\nIf the command returns a version number higher than v18.17.1 or v20.3.0 (excluding any v19), you‚Äôre good to go! If the command returns an error message like Command 'node' not found, or a version number lower than the required, then you need to install a compatible Node.js version.\n\n## Code Editor\n\nAdditionally, you will need to download and install a code editor to write your code.\n\n1. Download and install VS Code or another code editor of your choice.\n\n## Test your knowledge\n\nWhich of the following is‚Ä¶\n\n1. A code editor, for making changes to your files and their content?\n   1. web browser\n   2. Terminal\n   3. VS Code\n\n2. An online version control provider for your repository?\n   1. GitHub\n   2. Terminal\n   3. VS Code\n\n3. An application for running commands?\n   1. GitHub\n   2. Terminal\n   3. web browser\n\n## Checklist for moving on\n\n- I can access the command line in a terminal.\n- I have Node.js installed.\n- I have a code editor like VS Code.\n\n## Resources\n\n- FreeCodeCamp.org external ‚Äî a free educational site with full courses or quick refreshers in HTML, CSS, JS, and more.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "overview", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I get the dev tools you need in astro?\n\nAssistant: To get the dev tools you need in astro, here's what you do:\nYou will use a command line (terminal) to create your Astro project and to run key commands to build, develop, and test your site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I terminal in astro?\n\nAssistant: To terminal in astro, here's what you do:\nYou can access the command line through a local terminal program for your operating system. Common applications include Terminal (MacOS/Linux), Command Prompt (Windows), and Termux (Android). One of these will probably already be on your machine..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I node.js in astro?\n\nAssistant: To node.js in astro, here's what you do:\nFor Astro to run on your system, you will also need to have Node.js installed, version v18.17.1 or v20.3.0 or later. (v19 is not supported.) To check to see whether you already have a compatible version installed, run the following command in your terminal:\n\n```\nnode -v\n\n// Example output\n\nv18.17.1\n```\n\nIf the command returns a version number higher than v18.17.1 or v20.3.0 (excluding any v19), you‚Äôre good to go! If the command returns an error message like Command 'node' not found, or a version number lower than the required, then you need to install a compatible Node.js version..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I code editor in astro?\n\nAssistant: To code editor in astro, here's what you do:\nAdditionally, you will need to download and install a code editor to write your code.\n\n1. Download and install VS Code or another code editor of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\nWhich of the following is‚Ä¶\n\n1. A code editor, for making changes to your files and their content?\n   1. web browser\n   2. Terminal\n   3. VS Code\n\n2. An online version control provider for your repository?\n   1. GitHub\n   2. Terminal\n   3. VS Code\n\n3. An application for running commands?\n   1. GitHub\n   2. Terminal\n   3. web browser.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist for moving on in astro?\n\nAssistant: To checklist for moving on in astro, here's what you do:\n- I can access the command line in a terminal.\n- I have Node.js installed.\n- I have a code editor like VS Code..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- FreeCodeCamp.org external ‚Äî a free educational site with full courses or quick refreshers in HTML, CSS, JS, and more..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "section_detail", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Prepare your dev environment in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Check Node.js version**:\n\n```yaml\nnode -v\n// Example output\nv18.17.1\n```\n\nThis snippet shows you how to check node.js version, which is an important aspect of prepare your dev environment.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "code_examples", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Prepare your dev environment in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have a compatible version of Node.js installed before proceeding.\n\nUse a reliable code editor like VS Code for better development experience.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/1", "title": "Prepare your dev environment", "description": "Get ready to install any tools that you will use to build your Astro website", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:51:51", "type": "best_practices", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/1.webp", "ogLocale": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:url": "https://docs.astro.build/en/tutorial/1-setup/1/", "language": "en", "title": "Prepare your dev environment | Docs", "ogTitle": "Prepare your dev environment", "og:title": "Prepare your dev environment", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/1/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "description": "Tutorial: Build your first Astro blog ‚Äî\nInstall the local tools that you‚Äôll need to complete the tutorial", "docsearch:language": "en", "scrapeId": "1ae55b78-62f6-4513-a197-91fb0a12eae6", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/1", "url": "https://docs.astro.build/en/tutorial/1-setup/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what On-demand rendering is in astro?\n\nAssistant: Sure, I'd be happy to explain On-demand rendering in astro.\n\n# On-demand rendering\n\nThis page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).Here's a quick rundown of what this is about:\n\n## Server adapters\n\nTo render any page on demand, you need to add an adapter. Each adapter allows Astro to output a script that runs your project on a specific runtime: the environment that runs code on the server to generate pages when they are requested (e.g. Netlify, Cloudflare).\n\nYou may also wish to add an adapter even if your site is entirely static and you are not rendering any pages on demand. For example, the Netlify adapter enables Netlify‚Äôs Image CDN, and server islands require an adapter installed to use `server:defer` on a component.\n\n## Add an Adapter\n\nYou can add any of the official adapter integrations maintained by Astro with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\nFor example, to install the Netlify adapter, run:\n\n- npm\n- pnpm\n- Yarn\n\nYou can also add an adapter manually by installing the NPM package (e.g. `@astrojs/netlify`) and updating `astro.config.mjs` yourself. Note that different adapters may have different configuration settings. Read each adapter‚Äôs documentation, and apply any necessary config options to your chosen adapter in `astro.config.mjs.\n\n## Enabling on-demand rendering\n\nBy default, your entire Astro site will be prerendered, and static HTML pages will be sent to the browser. However, you may opt out of prerendering on any routes that require server rendering, for example, a page that checks for cookies and displays personalized content.\n\nFirst, add an adapter integration for your server runtime to enable on-demand server rendering in your Astro project. Then, add `export const prerender = false` at the top of the individual page or endpoint you want to render on demand. The rest of your site will remain a static site.\n\n## On-demand rendering features\n\nThis section covers various features of on-demand rendering, including HTML streaming, cookies, response handling, and request handling.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "overview", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server adapters in astro?\n\nAssistant: To server adapters in astro, here's what you do:\nTo render any page on demand, you need to add an adapter. Each adapter allows Astro to output a script that runs your project on a specific runtime: the environment that runs code on the server to generate pages when they are requested (e.g. Netlify, Cloudflare).\n\nYou may also wish to add an adapter even if your site is entirely static and you are not rendering any pages on demand. For example, the Netlify adapter enables Netlify‚Äôs Image CDN, and server islands require an adapter installed to use `server:defer` on a component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "section_detail", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add an adapter in astro?\n\nAssistant: To add an adapter in astro, here's what you do:\nYou can add any of the official adapter integrations maintained by Astro with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\nFor example, to install the Netlify adapter, run:\n\n- npm\n- pnpm\n- Yarn\n\nYou can also add an adapter manually by installing the NPM package (e.g. `@astrojs/netlify`) and updating `astro.config.mjs` yourself. Note that different adapters may have different configuration settings. Read each adapter‚Äôs documentation, and apply any necessary config options to your chosen adapter in `astro.config.mjs..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "section_detail", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I enabling on-demand rendering in astro?\n\nAssistant: To enabling on-demand rendering in astro, here's what you do:\nBy default, your entire Astro site will be prerendered, and static HTML pages will be sent to the browser. However, you may opt out of prerendering on any routes that require server rendering, for example, a page that checks for cookies and displays personalized content.\n\nFirst, add an adapter integration for your server runtime to enable on-demand server rendering in your Astro project. Then, add `export const prerender = false` at the top of the individual page or endpoint you want to render on demand. The rest of your site will remain a static site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "section_detail", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I on-demand rendering features in astro?\n\nAssistant: To on-demand rendering features in astro, here's what you do:\nThis section covers various features of on-demand rendering, including HTML streaming, cookies, response handling, and request handling..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "section_detail", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for On-demand rendering in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Netlify Adapter**:\n\n```yaml\nnpx astro add netlify\n```\n\nThis snippet shows you how to add netlify adapter, which is an important aspect of on-demand rendering.\n\n**Add Netlify Adapter with pnpm**:\n\n```yaml\npnpm astro add netlify\n```\n\nThis snippet shows you how to add netlify adapter with pnpm, which is an important aspect of on-demand rendering.\n\n**Add Netlify Adapter with Yarn**:\n\n```yaml\nyarn astro add netlify\n```\n\nThis snippet shows you how to add netlify adapter with yarn, which is an important aspect of on-demand rendering.\n\n**Opting out of prerendering**:\n\n```yaml\nexport const prerender = false;\n\nexport async function GET() {\n  let number = Math.random();\n  return new Response(\n    JSON.stringify({\n      number,\n      message: `Here's a random number: ${number}`,\n    }),\n  );\n}\n```\n\nThis snippet shows you how to opting out of prerendering, which is an important aspect of on-demand rendering.\n\n**Server mode configuration**:\n\n```yaml\nexport const prerender = true;\n\nexport async function GET() {\n  return new Response(\n    JSON.stringify({\n      message: `This is my static endpoint`,\n    }),\n  );\n}\n```\n\nThis snippet shows you how to server mode configuration, which is an important aspect of on-demand rendering.\n\n**Updating a cookie for a page view counter**:\n\n```yaml\nexport const prerender = false; // Not needed in 'server' mode\n\nlet counter = 0;\nif (Astro.cookies.has('counter')) {\n  const cookie = Astro.cookies.get('counter');\n  const value = cookie?.number();\n  if (value !== undefined && !isNaN(value)) counter = value + 1;\n}\nAstro.cookies.set('counter', String(counter));\n```\n\nThis snippet shows you how to updating a cookie for a page view counter, which is an important aspect of on-demand rendering.\n\n**Setting response status and text**:\n\n```yaml\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getProduct } from '../api';\nconst product = await getProduct(Astro.params.id);\n\nif (!product) {\n  Astro.response.status = 404;\n  Astro.response.statusText = 'Not found';\n}\n```\n\nThis snippet shows you how to setting response status and text, which is an important aspect of on-demand rendering.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "code_examples", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using On-demand rendering in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRead each adapter‚Äôs documentation for configuration settings.\n\nUse `export const prerender = false` to opt out of prerendering for specific pages.\n\nConsider using `output: 'server'` for highly dynamic applications.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/on-demand-rendering", "title": "On-demand rendering", "description": "This page covers how to render Astro project pages on demand, allowing for dynamic content generation and server-side rendering (SSR).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:57:27", "type": "best_practices", "page_metadata": {"ogDescription": "Generate server-rendered pages and routes on demand with an adapter.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogTitle": "On-demand rendering", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "twitter:site": "astrodotbuild", "description": "Generate server-rendered pages and routes on demand with an adapter.", "title": "On-demand rendering | Docs", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/on-demand-rendering/", "og:url": "https://docs.astro.build/en/guides/on-demand-rendering/", "ogImage": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/on-demand-rendering.webp", "og:title": "On-demand rendering", "og:description": "Generate server-rendered pages and routes on demand with an adapter.", "docsearch:language": "en", "scrapeId": "79722e3c-8331-4def-b889-d9c85456ac66", "sourceURL": "https://docs.astro.build/en/guides/on-demand-rendering", "url": "https://docs.astro.build/en/guides/on-demand-rendering/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Analyze bundle size is in astro?\n\nAssistant: Sure, I'd be happy to explain Analyze bundle size in astro.\n\n# Analyze bundle size\n\nUnderstanding what is a part of an Astro bundle is important for improving site performance. Visualizing the bundle can give clues as to where changes can be made in your project to reduce the bundle size.Here's a quick rundown of what this is about:\n\n## Recipe\n\nThe `rollup-plugin-visualizer` library allows you to visualize and analyze your Rollup bundle to see which modules are taking up space.\n\n1. Install `rollup-plugin-visualizer`:\n\n- [npm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-473)\n- [pnpm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-474)\n- [Yarn](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-475)\n\n2. Add the plugin to the `astro.config.mjs` file:\n\n3. Run the build command:\n\n- [npm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-476)\n- [pnpm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-477)\n- [Yarn](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-478)\n\n4. Find the `stats.html` file(s) for your project.\n\nThis will be at the root of your `dist/` directory for entirely static sites and will allow you to see what is included in the bundle.\n\nIf your Astro project uses on-demand rendering, you will have two `stats.html` files. One will be for the client, and the other for the server, and each will be located at the root of the `dist/client` and `dist/server/` directories.\n\nSee [the Rollup Plugin Visualizer documentation](https://github.com/btd/rollup-plugin-visualizer#how-to-use-generated-files) for guidance on how to interpret these files, or configure specific options.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/analyze-bundle-size", "title": "Analyze bundle size", "description": "Understanding what is a part of an Astro bundle is important for improving site performance. Visualizing the bundle can give clues as to where changes can be made in your project to reduce the bundle size.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:57:43", "type": "overview", "page_metadata": {"twitter:site": "astrodotbuild", "og:description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "og:title": "Analyze bundle size", "description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "ogLocale": "en", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogTitle": "Analyze bundle size", "title": "Analyze bundle size | Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "ogUrl": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogDescription": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "docsearch:language": "en", "language": "en", "scrapeId": "7f279a01-6368-469e-98e7-5d72efcc04dc", "sourceURL": "https://docs.astro.build/en/recipes/analyze-bundle-size", "url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recipe in astro?\n\nAssistant: To recipe in astro, here's what you do:\nThe `rollup-plugin-visualizer` library allows you to visualize and analyze your Rollup bundle to see which modules are taking up space.\n\n1. Install `rollup-plugin-visualizer`:\n\n- [npm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-473)\n- [pnpm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-474)\n- [Yarn](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-475)\n\n2. Add the plugin to the `astro.config.mjs` file:\n\n3. Run the build command:\n\n- [npm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-476)\n- [pnpm](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-477)\n- [Yarn](https://docs.astro.build/en/recipes/analyze-bundle-size/#tab-panel-478)\n\n4. Find the `stats.html` file(s) for your project.\n\nThis will be at the root of your `dist/` directory for entirely static sites and will allow you to see what is included in the bundle.\n\nIf your Astro project uses on-demand rendering, you will have two `stats.html` files. One will be for the client, and the other for the server, and each will be located at the root of the `dist/client` and `dist/server/` directories.\n\nSee [the Rollup Plugin Visualizer documentation](https://github.com/btd/rollup-plugin-visualizer#how-to-use-generated-files) for guidance on how to interpret these files, or configure specific options..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/analyze-bundle-size", "title": "Analyze bundle size", "description": "Understanding what is a part of an Astro bundle is important for improving site performance. Visualizing the bundle can give clues as to where changes can be made in your project to reduce the bundle size.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:57:43", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "og:title": "Analyze bundle size", "description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "ogLocale": "en", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogTitle": "Analyze bundle size", "title": "Analyze bundle size | Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "ogUrl": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogDescription": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "docsearch:language": "en", "language": "en", "scrapeId": "7f279a01-6368-469e-98e7-5d72efcc04dc", "sourceURL": "https://docs.astro.build/en/recipes/analyze-bundle-size", "url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Analyze bundle size in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install rollup-plugin-visualizer**:\n\n```yaml\nnpm install rollup-plugin-visualizer --save-dev\n```\n\nThis snippet shows you how to install rollup-plugin-visualizer, which is an important aspect of analyze bundle size.\n\n**Install rollup-plugin-visualizer with pnpm**:\n\n```yaml\npnpm add rollup-plugin-visualizer --save-dev\n```\n\nThis snippet shows you how to install rollup-plugin-visualizer with pnpm, which is an important aspect of analyze bundle size.\n\n**Install rollup-plugin-visualizer with Yarn**:\n\n```yaml\nyarn add rollup-plugin-visualizer --save-dev\n```\n\nThis snippet shows you how to install rollup-plugin-visualizer with yarn, which is an important aspect of analyze bundle size.\n\n**Add the plugin to astro.config.mjs**:\n\n```yaml\n// @ts-check\n\nimport { defineConfig } from 'astro/config';\n\nimport { visualizer } from \"rollup-plugin-visualizer\";\n\nexport default defineConfig({\n\nvite: {\n\n       plugins: [visualizer({\n\n           emitFile: true,\n\n           filename: \"stats.html\",\n\n       })]\n\n}\n\n});\n```\n\nThis snippet shows you how to add the plugin to astro.config.mjs, which is an important aspect of analyze bundle size.\n\n**Run the build command with npm**:\n\n```yaml\nnpm run build\n```\n\nThis snippet shows you how to run the build command with npm, which is an important aspect of analyze bundle size.\n\n**Run the build command with pnpm**:\n\n```yaml\npnpm build\n```\n\nThis snippet shows you how to run the build command with pnpm, which is an important aspect of analyze bundle size.\n\n**Run the build command with Yarn**:\n\n```yaml\nyarn build\n```\n\nThis snippet shows you how to run the build command with yarn, which is an important aspect of analyze bundle size.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/analyze-bundle-size", "title": "Analyze bundle size", "description": "Understanding what is a part of an Astro bundle is important for improving site performance. Visualizing the bundle can give clues as to where changes can be made in your project to reduce the bundle size.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:57:43", "type": "code_examples", "page_metadata": {"twitter:site": "astrodotbuild", "og:description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "og:title": "Analyze bundle size", "description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "ogLocale": "en", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogTitle": "Analyze bundle size", "title": "Analyze bundle size | Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "ogUrl": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogDescription": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "docsearch:language": "en", "language": "en", "scrapeId": "7f279a01-6368-469e-98e7-5d72efcc04dc", "sourceURL": "https://docs.astro.build/en/recipes/analyze-bundle-size", "url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Analyze bundle size in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFind the `stats.html` file(s) for your project in the root of your `dist/` directory for entirely static sites.\n\nIf using on-demand rendering, check both `dist/client` and `dist/server/` for `stats.html` files.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/analyze-bundle-size", "title": "Analyze bundle size", "description": "Understanding what is a part of an Astro bundle is important for improving site performance. Visualizing the bundle can give clues as to where changes can be made in your project to reduce the bundle size.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:57:43", "type": "best_practices", "page_metadata": {"twitter:site": "astrodotbuild", "og:description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "og:title": "Analyze bundle size", "description": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "ogLocale": "en", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogTitle": "Analyze bundle size", "title": "Analyze bundle size | Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "ogUrl": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "ogDescription": "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/analyze-bundle-size.webp", "docsearch:language": "en", "language": "en", "scrapeId": "7f279a01-6368-469e-98e7-5d72efcc04dc", "sourceURL": "https://docs.astro.build/en/recipes/analyze-bundle-size", "url": "https://docs.astro.build/en/recipes/analyze-bundle-size/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Store your repository online is in astro?\n\nAssistant: Sure, I'd be happy to explain Store your repository online in astro.\n\n# Store your repository online\n\nGet ready to put your project repository online using GitHub to store our repository and connect to a web host.Here's a quick rundown of what this is about:\n\n## Create a repository on GitHub\n\nAlthough there are a few ways to get your local code stored in GitHub, this tutorial will guide you through a method that does not require using git in the command line.\n\n1. Log in to GitHub.com in a browser and click the `+` in the upper right of the screen to make a new repository.\n\n2. Choose a name for your repository. This does not have to be the same name as your project folder.\n\n3. You will be presented with options, but you do not need to change any of the defaults. Scroll down and click the button to `Create Repository`.\n\n4. You will be presented with various setup next steps, but you won‚Äôt need to use any of them. Make a note of the URL of your repository. You can now exit this page without doing anything.\n\n## Commit your local code to GitHub\n\nIn the last section, you made a change to your page‚Äôs content. This means that your project files have changed, and VS Code should show a number on top of the ‚ÄúSource‚Äù menu icon. This source tab is where you will regularly go to update your files on GitHub.\n\n1. Click the Source Control tab in your VS Code to see a list of files that have changed. If you see a message that you need to install `git`, follow the instructions provided, then reload VS Code.\n\n2. Click the `‚Ä¢‚Ä¢‚Ä¢` ‚Äú3 dots‚Äù menu above the commit message and choose `Remote` > `Add Remote`.\n\n3. Select `Add remote from GitHub`. If necessary, follow any authentication steps then return to VS Code and repeat this action.\n\n4. You should see a list of all your repositories on GitHub. Choose the one you created for this project. If you don‚Äôt see your project, paste in its GitHub URL directly. You may also be asked to give this repository a local name. You can select any name you like.\n\n5. At the top of the menu pane, there will be a place to enter a **commit message** (description of your file changes). Type in `initial commit` and press the `Commit` button to commit these changes.\n\n6. You may see a message telling you that you have no ‚Äústaged‚Äù commits, and asking you if you want to stage them. Click `Always` and continue.\n\n7. Lastly, the list of changed files should be replaced with a `Publish` button. Click this to send your committed changes to GitHub.\n\n## See your project on GitHub\n\nTo verify that your project is successfully stored on GitHub, visit GitHub.com and look under your account for a list of your repositories. Choose the new one you created, and verify that it contains your Astro project files.\n\n## Checklist\n\n- I have stored my project on GitHub.\n\n## Resources\n\n- [Using Git Source control in VS Code](https://code.visualstudio.com/docs/sourcecontrol/overview#_git-support) external\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "overview", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a repository on github in astro?\n\nAssistant: To create a repository on github in astro, here's what you do:\nAlthough there are a few ways to get your local code stored in GitHub, this tutorial will guide you through a method that does not require using git in the command line.\n\n1. Log in to GitHub.com in a browser and click the `+` in the upper right of the screen to make a new repository.\n\n2. Choose a name for your repository. This does not have to be the same name as your project folder.\n\n3. You will be presented with options, but you do not need to change any of the defaults. Scroll down and click the button to `Create Repository`.\n\n4. You will be presented with various setup next steps, but you won‚Äôt need to use any of them. Make a note of the URL of your repository. You can now exit this page without doing anything..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I commit your local code to github in astro?\n\nAssistant: To commit your local code to github in astro, here's what you do:\nIn the last section, you made a change to your page‚Äôs content. This means that your project files have changed, and VS Code should show a number on top of the ‚ÄúSource‚Äù menu icon. This source tab is where you will regularly go to update your files on GitHub.\n\n1. Click the Source Control tab in your VS Code to see a list of files that have changed. If you see a message that you need to install `git`, follow the instructions provided, then reload VS Code.\n\n2. Click the `‚Ä¢‚Ä¢‚Ä¢` ‚Äú3 dots‚Äù menu above the commit message and choose `Remote` > `Add Remote`.\n\n3. Select `Add remote from GitHub`. If necessary, follow any authentication steps then return to VS Code and repeat this action.\n\n4. You should see a list of all your repositories on GitHub. Choose the one you created for this project. If you don‚Äôt see your project, paste in its GitHub URL directly. You may also be asked to give this repository a local name. You can select any name you like.\n\n5. At the top of the menu pane, there will be a place to enter a **commit message** (description of your file changes). Type in `initial commit` and press the `Commit` button to commit these changes.\n\n6. You may see a message telling you that you have no ‚Äústaged‚Äù commits, and asking you if you want to stage them. Click `Always` and continue.\n\n7. Lastly, the list of changed files should be replaced with a `Publish` button. Click this to send your committed changes to GitHub..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I see your project on github in astro?\n\nAssistant: To see your project on github in astro, here's what you do:\nTo verify that your project is successfully stored on GitHub, visit GitHub.com and look under your account for a list of your repositories. Choose the new one you created, and verify that it contains your Astro project files..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I have stored my project on GitHub..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Using Git Source control in VS Code](https://code.visualstudio.com/docs/sourcecontrol/overview#_git-support) external.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Store your repository online in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake a note of the URL of your repository after creating it on GitHub.\n\nUse the Source Control tab in VS Code to manage your files and commits.\n\nAlways stage your commits before publishing to GitHub.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/4", "title": "Store your repository online", "description": "Get ready to put your project repository online using GitHub to store our repository and connect to a web host.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:59:20", "type": "best_practices", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/4/", "ogSiteName": "Docs", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "og:type": "article", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "ogTitle": "Store your repository online", "ogLocale": "en", "og:title": "Store your repository online", "title": "Store your repository online | Docs", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/4/", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a GitHub repo for your tutorial project", "scrapeId": "312138dc-599d-4270-b7b3-05081e62c7c8", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/4", "url": "https://docs.astro.build/en/tutorial/1-setup/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build your first Astro island is in astro?\n\nAssistant: Sure, I'd be happy to explain Build your first Astro island in astro.\n\n# Build your first Astro island\n\nUse a Preact component to greet your visitors with a randomly-selected welcome message!Here's a quick rundown of what this is about:\n\n## Add Preact to your Astro project\n\n1. If it‚Äôs running, quit the dev server to have access to the terminal (keyboard shortcut: `Ctrl + C`).\n\n2. Add the ability to use Preact components in your Astro project with a single command:\n\n- [npm](https://docs.astro.build/en/tutorial/6-islands/1/#tab-panel-1957)\n- [pnpm](https://docs.astro.build/en/tutorial/6-islands/1/#tab-panel-1958)\n- [Yarn](https://docs.astro.build/en/tutorial/6-islands/1/#tab-panel-1959)\n\n```\n\nnpx astro add preact\n```\n\n```\n\npnpm astro add preact\n```\n\n```\n\nyarn astro add preact\n```\n\n3. Follow the command line instructions to confirm adding Preact to your project.\n\n## Include a Preact greeting banner\n\nThis component will take an array of greeting messages as a prop and randomly select one of them to show as a welcome message. The user can click a button to get a new random message.\n\n1. Create a new file in `src/components/` named `Greeting.jsx`\n\nNote the `.jsx` file extension. This file will be written in Preact, not Astro.\n\n2. Add the following code to `Greeting.jsx`:\n\n```javascript\nimport { useState } from 'preact/hooks';\n\nexport default function Greeting({messages}) {\n    const randomMessage = () => messages[(Math.floor(Math.random() * messages.length))];\n    const [greeting, setGreeting] = useState(messages[0]);\n    return (\n      <div>\n        <h3>{greeting}! Thank you for visiting!</h3>\n        <button onClick={() => setGreeting(randomMessage())}>\n          New Greeting\n        </button>\n      </div>\n    );\n}\n```\n\n3. Import and use this component on your Home page `index.astro`.\n\n```javascript\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport Greeting from '../components/Greeting';\nconst pageTitle = \"Home Page\";\n---\n<BaseLayout pageTitle={pageTitle}>\n    <h2>My awesome blog subtitle</h2>\n    <Greeting messages={[\"Hi\", \"Hello\", \"Howdy\", \"Hey there\"]} />\n</BaseLayout>\n```\n\nCheck the preview in your browser: you should see a random greeting, but the button won‚Äôt work!\n\n4. Add a second `<Greeting />` component with the `client:load` directive.\n\n```javascript\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport Greeting from '../components/Greeting';\nconst pageTitle = \"Home Page\";\n---\n<BaseLayout pageTitle={pageTitle}>\n    <h2>My awesome blog subtitle</h2>\n    <Greeting messages={[\"Hi\", \"Hello\", \"Howdy\", \"Hey there\"]} />\n    <Greeting client:load messages={[\"Hej\", \"Hallo\", \"Hola\", \"Habari\"]} />\n</BaseLayout>\n```\n\n5. Revisit your page and compare the two components. The second button works because the `client:load` directive tells Astro to send and rerun its JavaScript on the _client_ when the page _loads_, making the component interactive. This is called a **hydrated** component.\n\n6. Once the difference is clear, remove the non-hydrated Greeting component.\n\n```javascript\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport Greeting from '../components/Greeting';\nconst pageTitle = \"Home Page\";\n---\n<BaseLayout pageTitle={pageTitle}>\n    <h2>My awesome blog subtitle</h2>\n    <Greeting client:load messages={[\"Hej\", \"Hallo\", \"Hola\", \"Habari\"]} />\n</BaseLayout>\n```\n\n## Analyze the Pattern\n\nThere are other `client:` directives to explore. Each sends the JavaScript to the client at a different time. `client:visible`, for example, will only send the component‚Äôs JavaScript when it is visible on the page.\n\nConsider an Astro component with the following code:\n\n```\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport AstroBanner from '../components/AstroBanner.astro';\nimport PreactBanner from '../components/PreactBanner';\nimport SvelteCounter from '../components/SvelteCounter.svelte';\n---\n<BaseLayout>\n  <AstroBanner />\n  <PreactBanner />\n  <PreactBanner client:load />\n  <SvelteCounter />\n  <SvelteCounter client:visible />\n</BaseLayout>\n```\n\n1. Which of the five components will be **hydrated** islands, sending JavaScript to the client?\n`<PreactBanner client:load />` and `<SvelteCounter client:visible />` will be hydrated islands.\n\n2. In what way(s) will the two `<PreactBanner />` components be the same? In what way(s) will they be different?\n**Same**: They both show the same HTML elements and look the same initially. **Different**: The component with the `client:load` directive will rerender after the page is loaded, and any interactive elements that it has will work.\n\n3. Assume the `SvelteCounter` component shows a number and has a button to increase it. If you couldn‚Äôt see your website‚Äôs code, only the live published page, how would you tell which of the two `<SvelteCounter />` components used `client:visible`?\nTry clicking the button, and see which one is interactive. If it responds to your input, it must have had a `client:` directive.\n\n## Test your knowledge\n\nFor each of the following components, identify what will be sent to the browser:\n\n1. `<ReactCounter client:load />`\n   1. HTML and CSS only\n   2. HTML, CSS, and JavaScript\n\n2. `<SvelteCard />`\n   1. HTML and CSS only\n   2. HTML, CSS, and JavaScript\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "overview", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add preact to your astro project in astro?\n\nAssistant: To add preact to your astro project in astro, here's what you do:\n1. If it‚Äôs running, quit the dev server to have access to the terminal (keyboard shortcut: `Ctrl + C`).\n\n2. Add the ability to use Preact components in your Astro project with a single command:\n\n- [npm](https://docs.astro.build/en/tutorial/6-islands/1/#tab-panel-1957)\n- [pnpm](https://docs.astro.build/en/tutorial/6-islands/1/#tab-panel-1958)\n- [Yarn](https://docs.astro.build/en/tutorial/6-islands/1/#tab-panel-1959)\n\n```\n\nnpx astro add preact\n```\n\n```\n\npnpm astro add preact\n```\n\n```\n\nyarn astro add preact\n```\n\n3. Follow the command line instructions to confirm adding Preact to your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "section_detail", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I include a preact greeting banner in astro?\n\nAssistant: To include a preact greeting banner in astro, here's what you do:\nThis component will take an array of greeting messages as a prop and randomly select one of them to show as a welcome message. The user can click a button to get a new random message.\n\n1. Create a new file in `src/components/` named `Greeting.jsx`\n\nNote the `.jsx` file extension. This file will be written in Preact, not Astro.\n\n2. Add the following code to `Greeting.jsx`:\n\n```javascript\nimport { useState } from 'preact/hooks';\n\nexport default function Greeting({messages}) {\n    const randomMessage = () => messages[(Math.floor(Math.random() * messages.length))];\n    const [greeting, setGreeting] = useState(messages[0]);\n    return (\n      <div>\n        <h3>{greeting}! Thank you for visiting!</h3>\n        <button onClick={() => setGreeting(randomMessage())}>\n          New Greeting\n        </button>\n      </div>\n    );\n}\n```\n\n3. Import and use this component on your Home page `index.astro`.\n\n```javascript\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport Greeting from '../components/Greeting';\nconst pageTitle = \"Home Page\";\n---\n<BaseLayout pageTitle={pageTitle}>\n    <h2>My awesome blog subtitle</h2>\n    <Greeting messages={[\"Hi\", \"Hello\", \"Howdy\", \"Hey there\"]} />\n</BaseLayout>\n```\n\nCheck the preview in your browser: you should see a random greeting, but the button won‚Äôt work!\n\n4. Add a second `<Greeting />` component with the `client:load` directive.\n\n```javascript\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport Greeting from '../components/Greeting';\nconst pageTitle = \"Home Page\";\n---\n<BaseLayout pageTitle={pageTitle}>\n    <h2>My awesome blog subtitle</h2>\n    <Greeting messages={[\"Hi\", \"Hello\", \"Howdy\", \"Hey there\"]} />\n    <Greeting client:load messages={[\"Hej\", \"Hallo\", \"Hola\", \"Habari\"]} />\n</BaseLayout>\n```\n\n5. Revisit your page and compare the two components. The second button works because the `client:load` directive tells Astro to send and rerun its JavaScript on the _client_ when the page _loads_, making the component interactive. This is called a **hydrated** component.\n\n6. Once the difference is clear, remove the non-hydrated Greeting component.\n\n```javascript\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport Greeting from '../components/Greeting';\nconst pageTitle = \"Home Page\";\n---\n<BaseLayout pageTitle={pageTitle}>\n    <h2>My awesome blog subtitle</h2>\n    <Greeting client:load messages={[\"Hej\", \"Hallo\", \"Hola\", \"Habari\"]} />\n</BaseLayout>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "section_detail", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I analyze the pattern in astro?\n\nAssistant: To analyze the pattern in astro, here's what you do:\nThere are other `client:` directives to explore. Each sends the JavaScript to the client at a different time. `client:visible`, for example, will only send the component‚Äôs JavaScript when it is visible on the page.\n\nConsider an Astro component with the following code:\n\n```\n---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport AstroBanner from '../components/AstroBanner.astro';\nimport PreactBanner from '../components/PreactBanner';\nimport SvelteCounter from '../components/SvelteCounter.svelte';\n---\n<BaseLayout>\n  <AstroBanner />\n  <PreactBanner />\n  <PreactBanner client:load />\n  <SvelteCounter />\n  <SvelteCounter client:visible />\n</BaseLayout>\n```\n\n1. Which of the five components will be **hydrated** islands, sending JavaScript to the client?\n`<PreactBanner client:load />` and `<SvelteCounter client:visible />` will be hydrated islands.\n\n2. In what way(s) will the two `<PreactBanner />` components be the same? In what way(s) will they be different?\n**Same**: They both show the same HTML elements and look the same initially. **Different**: The component with the `client:load` directive will rerender after the page is loaded, and any interactive elements that it has will work.\n\n3. Assume the `SvelteCounter` component shows a number and has a button to increase it. If you couldn‚Äôt see your website‚Äôs code, only the live published page, how would you tell which of the two `<SvelteCounter />` components used `client:visible`?\nTry clicking the button, and see which one is interactive. If it responds to your input, it must have had a `client:` directive..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "section_detail", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\nFor each of the following components, identify what will be sent to the browser:\n\n1. `<ReactCounter client:load />`\n   1. HTML and CSS only\n   2. HTML, CSS, and JavaScript\n\n2. `<SvelteCard />`\n   1. HTML and CSS only\n   2. HTML, CSS, and JavaScript.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "section_detail", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Build your first Astro island in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Preact to your Astro project**:\n\n```yaml\nnpx astro add preact\n```\n\nThis snippet shows you how to add preact to your astro project, which is an important aspect of build your first astro island.\n\n**Add Preact to your Astro project**:\n\n```yaml\npnpm astro add preact\n```\n\nThis snippet shows you how to add preact to your astro project, which is an important aspect of build your first astro island.\n\n**Add Preact to your Astro project**:\n\n```yaml\nyarn astro add preact\n```\n\nThis snippet shows you how to add preact to your astro project, which is an important aspect of build your first astro island.\n\n**Greeting Component**:\n\n```yaml\nimport { useState } from 'preact/hooks';\n\nexport default function Greeting({messages}) {\n    const randomMessage = () => messages[(Math.floor(Math.random() * messages.length))];\n    const [greeting, setGreeting] = useState(messages[0]);\n    return (\n      <div>\n        <h3>{greeting}! Thank you for visiting!</h3>\n        <button onClick={() => setGreeting(randomMessage())}>\n          New Greeting\n        </button>\n      </div>\n    );\n}\n```\n\nThis snippet shows you how to greeting component, which is an important aspect of build your first astro island.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "code_examples", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build your first Astro island in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nI can install an Astro integration.\n\nI can write UI framework components in their own language.\n\nI can use a `client:` directive for hydration on my UI framework component.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/1", "title": "Build your first Astro island", "description": "Use a Preact component to greet your visitors with a randomly-selected welcome message!", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:59:43", "type": "best_practices", "page_metadata": {"og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/6-islands/1/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "docsearch:language": "en", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/1/", "language": "en", "og:title": "Build your first Astro island", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse a Preact component to greet your visitors with a randomly-selected message", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "title": "Build your first Astro island | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/1.webp", "ogTitle": "Build your first Astro island", "scrapeId": "4a665f57-b7b2-4738-83eb-6acffd3f5696", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/1", "url": "https://docs.astro.build/en/tutorial/6-islands/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Back on dry land. Take your blog from day to night, no island required! is in astro?\n\nAssistant: Sure, I'd be happy to explain Back on dry land. Take your blog from day to night, no island required! in astro.\n\n# Back on dry land. Take your blog from day to night, no island required!\n\nNow that you can build Astro islands for interactive elements, don‚Äôt forget that you can go pretty far with just vanilla JavaScript and CSS!Here's a quick rundown of what this is about:\n\n## Add and style a theme toggle icon\n\n1. Create a new file at `src/components/ThemeIcon.astro` and paste the following code into it:\n\n```javascript\n---\n---\n<button id=\"themeToggle\">\n    <svg width=\"30px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path class=\"sun\" fill-rule=\"evenodd\" d=\"M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z\"/>\n        <path class=\"moon\" fill-rule=\"evenodd\" d=\"M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z\"/>\n    </svg>\n</button>\n\n<style>\n    #themeToggle {\n        border: 0;\n        background: none;\n    }\n    .sun { fill: black; }\n    .moon { fill: transparent; }\n    :global(.dark) .sun { fill: transparent; }\n    :global(.dark) .moon { fill: white; }\n</style>\n```\n\n2. Add the icon to `Header.astro` so that it will be displayed on all pages. Don‚Äôt forget to import the component.\n\n```javascript\n---\nimport Hamburger from './Hamburger.astro';\nimport Navigation from './Navigation.astro';\nimport ThemeIcon from './ThemeIcon.astro';\n---\n<header>\n    <nav>\n        <Hamburger />\n        <ThemeIcon />\n        <Navigation />\n    </nav>\n</header>\n```\n\n3. Visit your browser preview at `http://localhost:4321` to see the icon now on all your pages. You can try clicking it, but you have not written a script to make it interactive yet.\n\n## Add CSS styling for a dark theme\n\nChoose some alternate colors to use in dark mode.\n\n1. In `global.css`, define some dark styles. You can choose your own, or copy and paste:\n\n```css\nhtml.dark {\n    background-color: #0d0950;\n    color: #fff;\n}\n\n.dark .nav-links a {\n    color: #fff;\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/2", "title": "Back on dry land. Take your blog from day to night, no island required!", "description": "Now that you can build Astro islands for interactive elements, don‚Äôt forget that you can go pretty far with just vanilla JavaScript and CSS!", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:00:43", "type": "overview", "page_metadata": {"ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "title": "Back on dry land. Take your blog from day to night, no island required! | Docs", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Back on dry land. Take your blog from day to night, no island required!", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/2/", "ogLocale": "en", "og:type": "article", "docsearch:language": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "ogTitle": "Back on dry land. Take your blog from day to night, no island required!", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/6-islands/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "scrapeId": "4a88a2b3-72b7-4bb0-aa02-46d0f8a22fa2", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/2", "url": "https://docs.astro.build/en/tutorial/6-islands/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add and style a theme toggle icon in astro?\n\nAssistant: To add and style a theme toggle icon in astro, here's what you do:\n1. Create a new file at `src/components/ThemeIcon.astro` and paste the following code into it:\n\n```javascript\n---\n---\n<button id=\"themeToggle\">\n    <svg width=\"30px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path class=\"sun\" fill-rule=\"evenodd\" d=\"M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z\"/>\n        <path class=\"moon\" fill-rule=\"evenodd\" d=\"M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z\"/>\n    </svg>\n</button>\n\n<style>\n    #themeToggle {\n        border: 0;\n        background: none;\n    }\n    .sun { fill: black; }\n    .moon { fill: transparent; }\n    :global(.dark) .sun { fill: transparent; }\n    :global(.dark) .moon { fill: white; }\n</style>\n```\n\n2. Add the icon to `Header.astro` so that it will be displayed on all pages. Don‚Äôt forget to import the component.\n\n```javascript\n---\nimport Hamburger from './Hamburger.astro';\nimport Navigation from './Navigation.astro';\nimport ThemeIcon from './ThemeIcon.astro';\n---\n<header>\n    <nav>\n        <Hamburger />\n        <ThemeIcon />\n        <Navigation />\n    </nav>\n</header>\n```\n\n3. Visit your browser preview at `http://localhost:4321` to see the icon now on all your pages. You can try clicking it, but you have not written a script to make it interactive yet..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/2", "title": "Back on dry land. Take your blog from day to night, no island required!", "description": "Now that you can build Astro islands for interactive elements, don‚Äôt forget that you can go pretty far with just vanilla JavaScript and CSS!", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:00:43", "type": "section_detail", "page_metadata": {"ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "title": "Back on dry land. Take your blog from day to night, no island required! | Docs", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Back on dry land. Take your blog from day to night, no island required!", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/2/", "ogLocale": "en", "og:type": "article", "docsearch:language": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "ogTitle": "Back on dry land. Take your blog from day to night, no island required!", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/6-islands/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "scrapeId": "4a88a2b3-72b7-4bb0-aa02-46d0f8a22fa2", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/2", "url": "https://docs.astro.build/en/tutorial/6-islands/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add css styling for a dark theme in astro?\n\nAssistant: To add css styling for a dark theme in astro, here's what you do:\nChoose some alternate colors to use in dark mode.\n\n1. In `global.css`, define some dark styles. You can choose your own, or copy and paste:\n\n```css\nhtml.dark {\n    background-color: #0d0950;\n    color: #fff;\n}\n\n.dark .nav-links a {\n    color: #fff;\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/2", "title": "Back on dry land. Take your blog from day to night, no island required!", "description": "Now that you can build Astro islands for interactive elements, don‚Äôt forget that you can go pretty far with just vanilla JavaScript and CSS!", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:00:43", "type": "section_detail", "page_metadata": {"ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "title": "Back on dry land. Take your blog from day to night, no island required! | Docs", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Back on dry land. Take your blog from day to night, no island required!", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/2/", "ogLocale": "en", "og:type": "article", "docsearch:language": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "ogTitle": "Back on dry land. Take your blog from day to night, no island required!", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/6-islands/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "scrapeId": "4a88a2b3-72b7-4bb0-aa02-46d0f8a22fa2", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/2", "url": "https://docs.astro.build/en/tutorial/6-islands/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Back on dry land. Take your blog from day to night, no island required! in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Theme Toggle Button Code**:\n\n```yaml\n---\n---\n<button id=\"themeToggle\">\n    <svg width=\"30px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path class=\"sun\" fill-rule=\"evenodd\" d=\"M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z\"/>\n        <path class=\"moon\" fill-rule=\"evenodd\" d=\"M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z\"/>\n    </svg>\n</button>\n\n<style>\n    #themeToggle {\n        border: 0;\n        background: none;\n    }\n    .sun { fill: black; }\n    .moon { fill: transparent; }\n    :global(.dark) .sun { fill: transparent; }\n    :global(.dark) .moon { fill: white; }\n</style>\n\n```\n\nThis snippet shows you how to theme toggle button code, which is an important aspect of back on dry land. take your blog from day to night, no island required!.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/2", "title": "Back on dry land. Take your blog from day to night, no island required!", "description": "Now that you can build Astro islands for interactive elements, don‚Äôt forget that you can go pretty far with just vanilla JavaScript and CSS!", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:00:43", "type": "code_examples", "page_metadata": {"ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "title": "Back on dry land. Take your blog from day to night, no island required! | Docs", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Back on dry land. Take your blog from day to night, no island required!", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/2/", "ogLocale": "en", "og:type": "article", "docsearch:language": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "ogTitle": "Back on dry land. Take your blog from day to night, no island required!", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/6-islands/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "scrapeId": "4a88a2b3-72b7-4bb0-aa02-46d0f8a22fa2", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/2", "url": "https://docs.astro.build/en/tutorial/6-islands/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Back on dry land. Take your blog from day to night, no island required! in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nI can use JavaScript for interactivity when I don‚Äôt want to add a framework.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/2", "title": "Back on dry land. Take your blog from day to night, no island required!", "description": "Now that you can build Astro islands for interactive elements, don‚Äôt forget that you can go pretty far with just vanilla JavaScript and CSS!", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:00:43", "type": "best_practices", "page_metadata": {"ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "title": "Back on dry land. Take your blog from day to night, no island required! | Docs", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Back on dry land. Take your blog from day to night, no island required!", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/2/", "ogLocale": "en", "og:type": "article", "docsearch:language": "en", "language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "ogTitle": "Back on dry land. Take your blog from day to night, no island required!", "ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/6-islands/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a light/dark theme toggle using only JavaScript and CSS", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/2.webp", "scrapeId": "4a88a2b3-72b7-4bb0-aa02-46d0f8a22fa2", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/2", "url": "https://docs.astro.build/en/tutorial/6-islands/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Create a dev toolbar app is in astro?\n\nAssistant: Sure, I'd be happy to explain Create a dev toolbar app in astro.\n\n# Create a dev toolbar app\n\nAstro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.Here's a quick rundown of what this is about:\n\n## Build a motivational dev toolbar app\n\nIn this recipe, you‚Äôll learn how to create a dev toolbar app that helps you stay motivated while working on your site. This app will display a motivational message every time you toggle it on.\n\n## Creating the Astro integration\n\nDev toolbar apps can only be added by Astro Integrations using the `astro:config:setup` hook. You will need to create both a toolbar app and the integration that will add it to the toolbar of your existing Astro project.\n\n1. In the root of your existing Astro project, create a new folder named `my-toolbar-app/` for your app and integration files. Create two new files in this folder: `app.ts` and `my-integration.ts`.\n\n- Directory **my-toolbar-app/**\n\n- **app.ts**\n- **my-integration.ts**\n\n- Directorysrc/\n\n- Directorypages/\n\n- ‚Ä¶\n\n- ‚Ä¶\n\n- astro.config.mjs\n- package.json\n- tsconfig.json\n\n2. In `my-integration.ts`, add the following code to provide both the name of your integration and the `addDevToolbarApp()` function needed to add your dev toolbar app with the `astro:config:setup` hook:\n\n```javascript\nimport { fileURLToPath } from 'node:url';\nimport type { AstroIntegration } from 'astro';\n\nexport default {\n     name: 'my-astro-integration',\n     hooks: {\n       'astro:config:setup': ({ addDevToolbarApp }) => {\n         addDevToolbarApp({\n           id: \"my-toolbar-app\",\n           name: \"My Toolbar App\",\n           icon: \"üöÄ\",\n           entrypoint: fileURLToPath(new URL('./app.ts', import.meta.url))\n         });\n       },\n     },\n} satisfies AstroIntegration;\n```\n\n3. To use this integration in your project, add it to the `integrations` array in your `astro.config.mjs` file.\n\n```javascript\nimport { defineConfig } from 'astro/config';\nimport myIntegration from './my-toolbar-app/my-integration.ts';\n\nexport default defineConfig({\n     integrations: [myIntegration],\n})\n```\n\n4. If not already running, start the dev server. If your integration has been successfully added to your project, you should see a new ‚Äúundefined‚Äù app in the dev toolbar.\n\nBut, you will also see an error message that your dev toolbar app has failed to load. This is because you have not yet built the app itself. You will do that in the next section.\n\nSee the Astro Integration API documentation for more about building Astro integrations.\n\n## Creating the app\n\nDev toolbar apps are defined using the `defineToolbarApp()` function from the `astro/toolbar` module. This function takes an object with an `init()` function that will be called when the dev toolbar app is loaded.\n\nThis `init()` function contains your app logic to render elements to the screen, send and receive client-side events from the dev toolbar, and communicate with the server.\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nexport default defineToolbarApp({\n    init(canvas, app, server) {\n      // ...\n    },\n});\n```\n\nTo display motivational messages on the screen, you will use the `canvas` property to access a standard ShadowRoot. Elements can be created and added to the ShadowRoot using the standard DOM APIs.\n\n1. Copy the following code into `my-toolbar-app/app.ts`. This provides a list of motivational messages, and the logic to create a new `<h1>` element with a random message:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nconst motivationalMessages = [\n     \"You're doing great!\",\n     \"Keep up the good work!\",\n     \"You're awesome!\",\n     \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n       init(canvas) {\n         const h1 = document.createElement('h1');\n         h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n         canvas.append(h1);\n       },\n});\n```\n\n2. Start the dev server if it is not already running and toggle the app on in the dev toolbar. If your app is working successfully, you will see a motivational message displayed in the top-left corner of the screen. (And, it‚Äôs true!)\n\nHowever, this message will not change when the app is toggled on and off, as the `init()` function is only called once when the app is loaded.\n\n3. To add client-side interactivity to your app, add the `app` argument and use `onAppToggled()` to select a new random message each time your toolbar app is toggled on:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nconst motivationalMessages = [\n     \"You're doing great!\",\n     \"Keep up the good work!\",\n     \"You're awesome!\",\n     \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n       init(canvas, app) {\n         const h1 = document.createElement('h1');\n         h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n         canvas.append(h1);\n\n         // Display a random message when the app is toggled\n         app.onToggled(({ state }) => {\n           const newMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n           h1.textContent = newMessage;\n         });\n       },\n});\n```\n\n4. In your browser preview, toggle your app on and off several times. With this change, a new random message will be selected every time you toggle the app on, providing you with an infinite source of motivation!\n\nSee the Astro Dev Toolbar API documentation for more about building dev toolbar apps.\n\n## Building apps with a UI framework\n\nUI frameworks like React, Vue, or Svelte can also be used to create dev toolbar apps. These frameworks provide a more declarative way to create UIs and can make your code more maintainable and easier to read.\n\nThe same motivational dev toolbar app built into your existing Astro project earlier on this page with JavaScript can be built using a UI framework (e.g. Preact) instead. Depending on your chosen framework, you may or may not require a build step.\n\n## Without a build step\n\nIf your framework supports it, you can create a dev toolbar app without a build step. For example, you can use Preact‚Äôs `h` function to create elements and render them directly to the ShadowRoot:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\nimport { render, h } from \"preact\";\n\nconst motivationalMessages = [\n  \"You're doing great!\",\n  \"Keep up the good work!\",\n  \"You're awesome!\",\n  \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n    init(canvas) {\n      const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      render(h('h1', null, message), canvas);\n    },\n});\n```\n\nAlternatively, the `htm` package is a good choice for creating dev toolbar apps without a build step, offering native integration for React and Preact and support for other frameworks:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\nimport { render } from \"preact\";\nimport { html } from 'htm/preact';\n\nconst motivationalMessages = [\n  \"You're doing great!\",\n  \"Keep up the good work!\",\n  \"You're awesome!\",\n  \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n    init(canvas) {\n      const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      render(html`<h1>${message}</h1>`, canvas);\n    },\n});\n```\n\nIn both cases, you can now start your project and see the motivational message displayed in the top-left corner of the screen when you toggle the app on.\n\n## With a build step\n\nAstro does not preprocess JSX code in dev toolbar apps, so a build step is required in order to use JSX components in your dev toolbar app.\n\nThe following steps will use TypeScript to do this, but any other tools that compile JSX code will also work (e.g. Babel, Rollup, ESBuild).\n\n1. Install TypeScript inside your project:\n\n- [npm](https://docs.astro.build/en/recipes/making-toolbar-apps/#tab-panel-507)\n- [pnpm](https://docs.astro.build/en/recipes/making-toolbar-apps/#tab-panel-508)\n- [Yarn](https://docs.astro.build/en/recipes/making-toolbar-apps/#tab-panel-509)\n\n```\nnpm install --save-dev typescript\n```\n```\npnpm install --save-dev typescript\n```\n```\nyarn add --dev typescript\n```\n\n2. Create a `tsconfig.json` file in the root of your toolbar app‚Äôs folder with the appropriate settings to build and for the framework you‚Äôre using ( [React](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup), [Preact](https://preactjs.com/guide/v10/typescript), [Solid](https://www.solidjs.com/guides/typescript)). For example, for Preact:\n\n```json\n{\n     \"compilerOptions\": {\n       \"skipLibCheck\": true,\n       \"module\": \"NodeNext\",\n       \"jsx\": \"react-jsx\",\n       \"jsxImportSource\": \"preact\",\n     }\n}\n```\n\n3. Adjust the `entrypoint` in your integration to point to the compiled file, remembering that this file is relative to the root of your Astro project:\n\n```javascript\naddDevToolbarApp({\n     id: \"my-toolbar-app\",\n     name: \"My Toolbar App\",\n     icon: \"üöÄ\",\n     entrypoint: join(__dirname, \"./app.js\"),\n});\n```\n\n4. Run `tsc` to build your toolbar app, or `tsc --watch` to automatically rebuild your app when you make changes.\n\nWith these changes, you can now rename your `app.ts` file to `app.tsx` (or `.jsx`) and use JSX syntax to create your dev toolbar app:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\nimport { render } from \"preact\";\n\nconst motivationalMessages = [\n     \"You're doing great!\",\n     \"Keep up the good work!\",\n     \"You're awesome!\",\n     \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n       init(canvas) {\n         const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n         render(<h1>{message}</h1>, canvas);\n       },\n});\n```\n\nYou should now have all the tools you need to create a dev toolbar app using a UI framework of your choice!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "overview", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build a motivational dev toolbar app in astro?\n\nAssistant: To build a motivational dev toolbar app in astro, here's what you do:\nIn this recipe, you‚Äôll learn how to create a dev toolbar app that helps you stay motivated while working on your site. This app will display a motivational message every time you toggle it on..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating the astro integration in astro?\n\nAssistant: To creating the astro integration in astro, here's what you do:\nDev toolbar apps can only be added by Astro Integrations using the `astro:config:setup` hook. You will need to create both a toolbar app and the integration that will add it to the toolbar of your existing Astro project.\n\n1. In the root of your existing Astro project, create a new folder named `my-toolbar-app/` for your app and integration files. Create two new files in this folder: `app.ts` and `my-integration.ts`.\n\n- Directory **my-toolbar-app/**\n\n- **app.ts**\n- **my-integration.ts**\n\n- Directorysrc/\n\n- Directorypages/\n\n- ‚Ä¶\n\n- ‚Ä¶\n\n- astro.config.mjs\n- package.json\n- tsconfig.json\n\n2. In `my-integration.ts`, add the following code to provide both the name of your integration and the `addDevToolbarApp()` function needed to add your dev toolbar app with the `astro:config:setup` hook:\n\n```javascript\nimport { fileURLToPath } from 'node:url';\nimport type { AstroIntegration } from 'astro';\n\nexport default {\n     name: 'my-astro-integration',\n     hooks: {\n       'astro:config:setup': ({ addDevToolbarApp }) => {\n         addDevToolbarApp({\n           id: \"my-toolbar-app\",\n           name: \"My Toolbar App\",\n           icon: \"üöÄ\",\n           entrypoint: fileURLToPath(new URL('./app.ts', import.meta.url))\n         });\n       },\n     },\n} satisfies AstroIntegration;\n```\n\n3. To use this integration in your project, add it to the `integrations` array in your `astro.config.mjs` file.\n\n```javascript\nimport { defineConfig } from 'astro/config';\nimport myIntegration from './my-toolbar-app/my-integration.ts';\n\nexport default defineConfig({\n     integrations: [myIntegration],\n})\n```\n\n4. If not already running, start the dev server. If your integration has been successfully added to your project, you should see a new ‚Äúundefined‚Äù app in the dev toolbar.\n\nBut, you will also see an error message that your dev toolbar app has failed to load. This is because you have not yet built the app itself. You will do that in the next section.\n\nSee the Astro Integration API documentation for more about building Astro integrations..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating the app in astro?\n\nAssistant: To creating the app in astro, here's what you do:\nDev toolbar apps are defined using the `defineToolbarApp()` function from the `astro/toolbar` module. This function takes an object with an `init()` function that will be called when the dev toolbar app is loaded.\n\nThis `init()` function contains your app logic to render elements to the screen, send and receive client-side events from the dev toolbar, and communicate with the server.\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nexport default defineToolbarApp({\n    init(canvas, app, server) {\n      // ...\n    },\n});\n```\n\nTo display motivational messages on the screen, you will use the `canvas` property to access a standard ShadowRoot. Elements can be created and added to the ShadowRoot using the standard DOM APIs.\n\n1. Copy the following code into `my-toolbar-app/app.ts`. This provides a list of motivational messages, and the logic to create a new `<h1>` element with a random message:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nconst motivationalMessages = [\n     \"You're doing great!\",\n     \"Keep up the good work!\",\n     \"You're awesome!\",\n     \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n       init(canvas) {\n         const h1 = document.createElement('h1');\n         h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n         canvas.append(h1);\n       },\n});\n```\n\n2. Start the dev server if it is not already running and toggle the app on in the dev toolbar. If your app is working successfully, you will see a motivational message displayed in the top-left corner of the screen. (And, it‚Äôs true!)\n\nHowever, this message will not change when the app is toggled on and off, as the `init()` function is only called once when the app is loaded.\n\n3. To add client-side interactivity to your app, add the `app` argument and use `onAppToggled()` to select a new random message each time your toolbar app is toggled on:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nconst motivationalMessages = [\n     \"You're doing great!\",\n     \"Keep up the good work!\",\n     \"You're awesome!\",\n     \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n       init(canvas, app) {\n         const h1 = document.createElement('h1');\n         h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n         canvas.append(h1);\n\n         // Display a random message when the app is toggled\n         app.onToggled(({ state }) => {\n           const newMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n           h1.textContent = newMessage;\n         });\n       },\n});\n```\n\n4. In your browser preview, toggle your app on and off several times. With this change, a new random message will be selected every time you toggle the app on, providing you with an infinite source of motivation!\n\nSee the Astro Dev Toolbar API documentation for more about building dev toolbar apps..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I building apps with a ui framework in astro?\n\nAssistant: To building apps with a ui framework in astro, here's what you do:\nUI frameworks like React, Vue, or Svelte can also be used to create dev toolbar apps. These frameworks provide a more declarative way to create UIs and can make your code more maintainable and easier to read.\n\nThe same motivational dev toolbar app built into your existing Astro project earlier on this page with JavaScript can be built using a UI framework (e.g. Preact) instead. Depending on your chosen framework, you may or may not require a build step..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I without a build step in astro?\n\nAssistant: To without a build step in astro, here's what you do:\nIf your framework supports it, you can create a dev toolbar app without a build step. For example, you can use Preact‚Äôs `h` function to create elements and render them directly to the ShadowRoot:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\nimport { render, h } from \"preact\";\n\nconst motivationalMessages = [\n  \"You're doing great!\",\n  \"Keep up the good work!\",\n  \"You're awesome!\",\n  \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n    init(canvas) {\n      const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      render(h('h1', null, message), canvas);\n    },\n});\n```\n\nAlternatively, the `htm` package is a good choice for creating dev toolbar apps without a build step, offering native integration for React and Preact and support for other frameworks:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\nimport { render } from \"preact\";\nimport { html } from 'htm/preact';\n\nconst motivationalMessages = [\n  \"You're doing great!\",\n  \"Keep up the good work!\",\n  \"You're awesome!\",\n  \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n    init(canvas) {\n      const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      render(html`<h1>${message}</h1>`, canvas);\n    },\n});\n```\n\nIn both cases, you can now start your project and see the motivational message displayed in the top-left corner of the screen when you toggle the app on..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I with a build step in astro?\n\nAssistant: To with a build step in astro, here's what you do:\nAstro does not preprocess JSX code in dev toolbar apps, so a build step is required in order to use JSX components in your dev toolbar app.\n\nThe following steps will use TypeScript to do this, but any other tools that compile JSX code will also work (e.g. Babel, Rollup, ESBuild).\n\n1. Install TypeScript inside your project:\n\n- [npm](https://docs.astro.build/en/recipes/making-toolbar-apps/#tab-panel-507)\n- [pnpm](https://docs.astro.build/en/recipes/making-toolbar-apps/#tab-panel-508)\n- [Yarn](https://docs.astro.build/en/recipes/making-toolbar-apps/#tab-panel-509)\n\n```\nnpm install --save-dev typescript\n```\n```\npnpm install --save-dev typescript\n```\n```\nyarn add --dev typescript\n```\n\n2. Create a `tsconfig.json` file in the root of your toolbar app‚Äôs folder with the appropriate settings to build and for the framework you‚Äôre using ( [React](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup), [Preact](https://preactjs.com/guide/v10/typescript), [Solid](https://www.solidjs.com/guides/typescript)). For example, for Preact:\n\n```json\n{\n     \"compilerOptions\": {\n       \"skipLibCheck\": true,\n       \"module\": \"NodeNext\",\n       \"jsx\": \"react-jsx\",\n       \"jsxImportSource\": \"preact\",\n     }\n}\n```\n\n3. Adjust the `entrypoint` in your integration to point to the compiled file, remembering that this file is relative to the root of your Astro project:\n\n```javascript\naddDevToolbarApp({\n     id: \"my-toolbar-app\",\n     name: \"My Toolbar App\",\n     icon: \"üöÄ\",\n     entrypoint: join(__dirname, \"./app.js\"),\n});\n```\n\n4. Run `tsc` to build your toolbar app, or `tsc --watch` to automatically rebuild your app when you make changes.\n\nWith these changes, you can now rename your `app.ts` file to `app.tsx` (or `.jsx`) and use JSX syntax to create your dev toolbar app:\n\n```javascript\nimport { defineToolbarApp } from \"astro/toolbar\";\nimport { render } from \"preact\";\n\nconst motivationalMessages = [\n     \"You're doing great!\",\n     \"Keep up the good work!\",\n     \"You're awesome!\",\n     \"You're a star!\",\n];\n\nexport default defineToolbarApp({\n       init(canvas) {\n         const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n         render(<h1>{message}</h1>, canvas);\n       },\n});\n```\n\nYou should now have all the tools you need to create a dev toolbar app using a UI framework of your choice!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Create a dev toolbar app in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Astro Integration Example**:\n\n```yaml\nimport { fileURLToPath } from 'node:url';\nimport type { AstroIntegration } from 'astro';\n\nexport default {\n     name: 'my-astro-integration',\n     hooks: {\n       'astro:config:setup': ({ addDevToolbarApp }) => {\n         addDevToolbarApp({\n           id: \"my-toolbar-app\",\n           name: \"My Toolbar App\",\n           icon: \"üöÄ\",\n           entrypoint: fileURLToPath(new URL('./app.ts', import.meta.url))\n         });\n       },\n     },\n} satisfies AstroIntegration;\n```\n\nThis snippet shows you how to astro integration example, which is an important aspect of create a dev toolbar app.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "code_examples", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Create a dev toolbar app in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStart the dev server to see your integration in action.\n\nUse the `onToggled()` method to add interactivity to your app.\n\nConsider using a UI framework for more complex UIs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/making-toolbar-apps", "title": "Create a dev toolbar app", "description": "Astro includes a development toolbar that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:01:31", "type": "best_practices", "page_metadata": {"og:locale": "en", "ogDescription": "Learn how to create a dev toolbar app for your site.", "ogUrl": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "twitter:site": "astrodotbuild", "ogTitle": "Create a dev toolbar app", "og:description": "Learn how to create a dev toolbar app for your site.", "viewport": "width=device-width, initial-scale=1", "og:title": "Create a dev toolbar app", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "description": "Learn how to create a dev toolbar app for your site.", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/making-toolbar-apps.webp", "og:url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "og:site_name": "Docs", "docsearch:language": "en", "title": "Create a dev toolbar app | Docs", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogSiteName": "Docs", "og:type": "article", "scrapeId": "64ff4f48-6089-4541-b735-6da69b05f859", "sourceURL": "https://docs.astro.build/en/recipes/making-toolbar-apps", "url": "https://docs.astro.build/en/recipes/making-toolbar-apps/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Upgrade to Astro v3 is in astro?\n\nAssistant: Sure, I'd be happy to explain Upgrade to Astro v3 in astro.\n\n# Upgrade to Astro v3\n\nThis guide will help you migrate from Astro v2 to Astro v3.Here's a quick rundown of what this is about:\n\n## Upgrade Astro\n\nUpdate your project‚Äôs version of Astro to the latest version using your package manager. If you‚Äôre using Astro integrations, please also update those to the latest version.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v3/#tab-panel-1936)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v3/#tab-panel-1937)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v3/#tab-panel-1938)\n\n```bash\n# Upgrade to Astro v3.x\nnpm install astro@latest\n\n# Example: upgrade React and Tailwind integrations\nnpm install @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v3.x\npnpm add astro@latest\n\n# Example: upgrade React and Tailwind integrations\npnpm add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v3.x\nyarn add astro@latest\n\n# Example: upgrade React and Tailwind integrations\nyarn add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n## Astro v3.0 Experimental Flags Removed\n\nRemove the following experimental flags from `astro.config.mjs`:\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    assets: true,\n\n    viewTransitions: true,\n\n  },\n\n})\n```\n\nThese features are now available by default:\n\n- View Transitions for animated page transitions and persistent islands. See [view transitions API breaking changes and upgrading advice](https://docs.astro.build/en/guides/upgrade-to/v3/#upgrade-view-transitions-to-v3) if you were using this experimental flag.\n- A new image services API `astro:assets` for using images in Astro, including a new `<Image />` component and `getImage()` function. Please read the detailed [image upgrade advice](https://docs.astro.build/en/guides/upgrade-to/v3/#upgrade-images-to-v3) **whether or not you were using this experimental flag** to see how this might affect your project.\n\nRead more about these two exciting features and more in [the 3.0 Blog post](https://astro.build/blog/astro-3/)!\n\n## Astro v3.0 Breaking Changes\n\nAstro v3.0 includes some breaking changes, as well as the removal of some previously deprecated features. If your project doesn‚Äôt work as expected after upgrading to v3.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n## Removed: Support for Node 16\n\nNode 16 is scheduled to reach its End of Life in September 2023.\n\nAstro v3.0 drops Node 16 support entirely so that all Astro users can take advantage of Node‚Äôs more modern features.\n\n#### What should I do?\n\nCheck that both your development environment and your deployment environment are using **Node `18.14.1` or higher**.\n\n1. Check your local version of Node using:\n\n```bash\nnode -v\n```\n\n2. Check your [deployment environment‚Äôs](https://docs.astro.build/en/guides/deploy/) own documentation to verify that they support Node 18.\n\nYou can specify Node `18.14.1` for your Astro project either in a dashboard configuration setting or a `.nvmrc` file.\n\n```bash\n18.14.1\n```\n\n## Removed: Support for TypeScript 4\n\nIn Astro v2.x, the `tsconfig.json` presets include support for both TypeScript 4.x and 5.x.\n\nAstro v3.0 updates the `tsconfig.json` presets to only support TypeScript 5.x. Astro now assumes that you use TypeScript 5.0 (March 2023), or that your editor includes it (e.g. VS Code 1.77).\n\n#### What should I do?\n\nIf you have installed TypeScript locally, update to at least v5.0.\n\n```bash\nnpm install typescript@latest --save-dev\n```\n\n## Removed: `@astrojs/image`\n\nIn Astro v2.x, Astro offered an official image integration that included Astro `<Image />` and `<Picture />` components.\n\nAstro v3.0 removes this integration from the codebase entirely. Astro‚Äôs new solution for images is a built-in image services API: `astro:assets`.\n\n#### What should I do?\n\nRemove the `@astrojs/image` integration from your project. You will need to not only uninstall the integration but also update or remove any import statements and existing `<Image />` and `<Picture />` components. You might also need to configure a preferred default image processing service.\n\nYou will find [complete, step-by-step instructions for removing the old image integration](https://docs.astro.build/en/guides/upgrade-to/v3/#remove-astrojsimage) in our Images guide.\n\nMigrating to `astro:assets` will also bring some new image options and features that you may now wish to use. Please see the full [v3.0 Image Upgrade Advice](https://docs.astro.build/en/guides/upgrade-to/v3/#upgrade-images-to-v3) for full details!\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport image from '@astrojs/image';\n\nexport default defineConfig({\n\n  integrations: [\n\n    image(),\n\n  ]\n\n})\n```\n\n## Removed: `<Markdown />` component\n\nIn Astro v1.x, Astro deprecated the `<Markdown />` component and moved it to an external package.\n\nAstro v3.0 completely removes the package `@astrojs/markdown-component`. Astro‚Äôs `<Markdown />` component will no longer work in your project.\n\n#### What should I do?\n\nRemove all instances of the `@astrojs/markdown-component`.\n\n```markdown\n---\nimport Markdown from '@astrojs/markdown-component';\n---\n```\n\nTo continue using a similar `<Markdown />` component in your code, consider using [community integrations](https://astro.build/integrations/) such as [`astro-remote`](https://github.com/natemoo-re/astro-remote). Be sure to update your `<Markdown />` component imports and attributes as necessary, according to the integration‚Äôs own documentation.\n\nOtherwise, delete all references to importing Astro‚Äôs `<Markdown />` component and the component itself in your `.astro` files. You will need to rewrite your content as HTML directly or [import Markdown](https://docs.astro.build/en/guides/markdown-content/#importing-markdown) from a `.md` file.\n\n## Removed: deprecated 1.x APIs\n\nIn Astro v1.x, Astro deprecated our original configuration settings as well as `<style global>` and `<script hoist>` support. However, these were still supported for backwards compatibility.\n\nAstro v3.0 removes these deprecated APIs entirely. The officially supported [configuration settings](https://docs.astro.build/en/reference/configuration-reference/) and modern `<style is:global>` and `<script>` syntax should be used instead.\n\n#### What should I do?\n\nIf you are continuing to use v1.x APIs, use the new APIs for each feature instead:\n\n- Deprecated config options: See [the 0.26 migration guide](https://docs.astro.build/en/guides/upgrade-to/v1/#new-configuration-api)\n- Deprecated script/style attribute types: See [the 0.26 migration guide](https://docs.astro.build/en/guides/upgrade-to/v1/#new-default-script-behavior)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "overview", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgrade astro in astro?\n\nAssistant: To upgrade astro in astro, here's what you do:\nUpdate your project‚Äôs version of Astro to the latest version using your package manager. If you‚Äôre using Astro integrations, please also update those to the latest version.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v3/#tab-panel-1936)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v3/#tab-panel-1937)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v3/#tab-panel-1938)\n\n```bash\n# Upgrade to Astro v3.x\nnpm install astro@latest\n\n# Example: upgrade React and Tailwind integrations\nnpm install @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v3.x\npnpm add astro@latest\n\n# Example: upgrade React and Tailwind integrations\npnpm add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v3.x\nyarn add astro@latest\n\n# Example: upgrade React and Tailwind integrations\nyarn add @astrojs/react@latest @astrojs/tailwind@latest\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro v3.0 experimental flags removed in astro?\n\nAssistant: To astro v3.0 experimental flags removed in astro, here's what you do:\nRemove the following experimental flags from `astro.config.mjs`:\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    assets: true,\n\n    viewTransitions: true,\n\n  },\n\n})\n```\n\nThese features are now available by default:\n\n- View Transitions for animated page transitions and persistent islands. See [view transitions API breaking changes and upgrading advice](https://docs.astro.build/en/guides/upgrade-to/v3/#upgrade-view-transitions-to-v3) if you were using this experimental flag.\n- A new image services API `astro:assets` for using images in Astro, including a new `<Image />` component and `getImage()` function. Please read the detailed [image upgrade advice](https://docs.astro.build/en/guides/upgrade-to/v3/#upgrade-images-to-v3) **whether or not you were using this experimental flag** to see how this might affect your project.\n\nRead more about these two exciting features and more in [the 3.0 Blog post](https://astro.build/blog/astro-3/)!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro v3.0 breaking changes in astro?\n\nAssistant: To astro v3.0 breaking changes in astro, here's what you do:\nAstro v3.0 includes some breaking changes, as well as the removal of some previously deprecated features. If your project doesn‚Äôt work as expected after upgrading to v3.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: support for node 16 in astro?\n\nAssistant: To removed: support for node 16 in astro, here's what you do:\nNode 16 is scheduled to reach its End of Life in September 2023.\n\nAstro v3.0 drops Node 16 support entirely so that all Astro users can take advantage of Node‚Äôs more modern features.\n\n#### What should I do?\n\nCheck that both your development environment and your deployment environment are using **Node `18.14.1` or higher**.\n\n1. Check your local version of Node using:\n\n```bash\nnode -v\n```\n\n2. Check your [deployment environment‚Äôs](https://docs.astro.build/en/guides/deploy/) own documentation to verify that they support Node 18.\n\nYou can specify Node `18.14.1` for your Astro project either in a dashboard configuration setting or a `.nvmrc` file.\n\n```bash\n18.14.1\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: support for typescript 4 in astro?\n\nAssistant: To removed: support for typescript 4 in astro, here's what you do:\nIn Astro v2.x, the `tsconfig.json` presets include support for both TypeScript 4.x and 5.x.\n\nAstro v3.0 updates the `tsconfig.json` presets to only support TypeScript 5.x. Astro now assumes that you use TypeScript 5.0 (March 2023), or that your editor includes it (e.g. VS Code 1.77).\n\n#### What should I do?\n\nIf you have installed TypeScript locally, update to at least v5.0.\n\n```bash\nnpm install typescript@latest --save-dev\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: `@astrojs/image` in astro?\n\nAssistant: To removed: `@astrojs/image` in astro, here's what you do:\nIn Astro v2.x, Astro offered an official image integration that included Astro `<Image />` and `<Picture />` components.\n\nAstro v3.0 removes this integration from the codebase entirely. Astro‚Äôs new solution for images is a built-in image services API: `astro:assets`.\n\n#### What should I do?\n\nRemove the `@astrojs/image` integration from your project. You will need to not only uninstall the integration but also update or remove any import statements and existing `<Image />` and `<Picture />` components. You might also need to configure a preferred default image processing service.\n\nYou will find [complete, step-by-step instructions for removing the old image integration](https://docs.astro.build/en/guides/upgrade-to/v3/#remove-astrojsimage) in our Images guide.\n\nMigrating to `astro:assets` will also bring some new image options and features that you may now wish to use. Please see the full [v3.0 Image Upgrade Advice](https://docs.astro.build/en/guides/upgrade-to/v3/#upgrade-images-to-v3) for full details!\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport image from '@astrojs/image';\n\nexport default defineConfig({\n\n  integrations: [\n\n    image(),\n\n  ]\n\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: `<markdown />` component in astro?\n\nAssistant: To removed: `<markdown />` component in astro, here's what you do:\nIn Astro v1.x, Astro deprecated the `<Markdown />` component and moved it to an external package.\n\nAstro v3.0 completely removes the package `@astrojs/markdown-component`. Astro‚Äôs `<Markdown />` component will no longer work in your project.\n\n#### What should I do?\n\nRemove all instances of the `@astrojs/markdown-component`.\n\n```markdown\n---\nimport Markdown from '@astrojs/markdown-component';\n---\n```\n\nTo continue using a similar `<Markdown />` component in your code, consider using [community integrations](https://astro.build/integrations/) such as [`astro-remote`](https://github.com/natemoo-re/astro-remote). Be sure to update your `<Markdown />` component imports and attributes as necessary, according to the integration‚Äôs own documentation.\n\nOtherwise, delete all references to importing Astro‚Äôs `<Markdown />` component and the component itself in your `.astro` files. You will need to rewrite your content as HTML directly or [import Markdown](https://docs.astro.build/en/guides/markdown-content/#importing-markdown) from a `.md` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: deprecated 1.x apis in astro?\n\nAssistant: To removed: deprecated 1.x apis in astro, here's what you do:\nIn Astro v1.x, Astro deprecated our original configuration settings as well as `<style global>` and `<script hoist>` support. However, these were still supported for backwards compatibility.\n\nAstro v3.0 removes these deprecated APIs entirely. The officially supported [configuration settings](https://docs.astro.build/en/reference/configuration-reference/) and modern `<style is:global>` and `<script>` syntax should be used instead.\n\n#### What should I do?\n\nIf you are continuing to use v1.x APIs, use the new APIs for each feature instead:\n\n- Deprecated config options: See [the 0.26 migration guide](https://docs.astro.build/en/guides/upgrade-to/v1/#new-configuration-api)\n- Deprecated script/style attribute types: See [the 0.26 migration guide](https://docs.astro.build/en/guides/upgrade-to/v1/#new-default-script-behavior).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Upgrade to Astro v3 in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Upgrade to Astro v3.x (npm)**:\n\n```yaml\nnpm install astro@latest\n```\n\nThis snippet shows you how to upgrade to astro v3.x (npm), which is an important aspect of upgrade to astro v3.\n\n**Upgrade to Astro v3.x (pnpm)**:\n\n```yaml\npnpm add astro@latest\n```\n\nThis snippet shows you how to upgrade to astro v3.x (pnpm), which is an important aspect of upgrade to astro v3.\n\n**Upgrade to Astro v3.x (yarn)**:\n\n```yaml\nyarn add astro@latest\n```\n\nThis snippet shows you how to upgrade to astro v3.x (yarn), which is an important aspect of upgrade to astro v3.\n\n**Check Node version**:\n\n```yaml\nnode -v\n```\n\nThis snippet shows you how to check node version, which is an important aspect of upgrade to astro v3.\n\n**Specify Node version in .nvmrc**:\n\n```yaml\n18.14.1\n```\n\nThis snippet shows you how to specify node version in .nvmrc, which is an important aspect of upgrade to astro v3.\n\n**Update TypeScript version**:\n\n```yaml\nnpm install typescript@latest --save-dev\n```\n\nThis snippet shows you how to update typescript version, which is an important aspect of upgrade to astro v3.\n\n**Remove experimental.assets flag**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    assets: true\n\n  }\n\n});\n```\n\nThis snippet shows you how to remove experimental.assets flag, which is an important aspect of upgrade to astro v3.\n\n**Remove the ~/assets import alias**:\n\n```yaml\nimport rocket from '~/assets/rocket.png';\nimport rocket from '../../assets/rocket.png';\n```\n\nThis snippet shows you how to remove the ~/assets import alias, which is an important aspect of upgrade to astro v3.\n\n**Remove @astrojs/image integration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport image from '@astrojs/image';\n\nexport default defineConfig({\n\n  integrations: [\n\n    image(),\n\n  ]\n\n});\n```\n\nThis snippet shows you how to remove @astrojs/image integration, which is an important aspect of upgrade to astro v3.\n\n**Update TypeScript types**:\n\n```yaml\n/// <reference types=\"@astrojs/image/client\" />\n/// <reference types=\"astro/client\" />\n```\n\nThis snippet shows you how to update typescript types, which is an important aspect of upgrade to astro v3.\n\n**Update tsconfig.json**:\n\n```yaml\n{\n\n  \"compilerOptions\": {\n\n    \"types\": [\"@astrojs/image/client\"]\n\n    \"types\": [\"astro/client\"]\n\n  }\n}\n```\n\nThis snippet shows you how to update tsconfig.json, which is an important aspect of upgrade to astro v3.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "code_examples", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Upgrade to Astro v3 in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck your local version of Node using `node -v` and ensure it is `18.14.1` or higher.\n\nIf you have installed TypeScript locally, update to at least v5.0 using `npm install typescript@latest --save-dev`.\n\nRemove the `@astrojs/image` integration from your project and update your imports to use the new built-in `<Image />` component.\n\nIf you were using the experimental flag for `astro:assets`, remove it as it is now available by default.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v3", "title": "Upgrade to Astro v3", "description": "This guide will help you migrate from Astro v2 to Astro v3.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:02:16", "type": "best_practices", "page_metadata": {"og:site_name": "Docs", "og:title": "Upgrade to Astro v3", "og:type": "article", "language": "en", "title": "Upgrade to Astro v3 | Docs", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "docsearch:language": "en", "description": "How to upgrade your project to the latest version of Astro (v3.0).", "ogLocale": "en", "ogDescription": "How to upgrade your project to the latest version of Astro (v3.0).", "ogTitle": "Upgrade to Astro v3", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v3/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v3.webp", "ogSiteName": "Docs", "og:description": "How to upgrade your project to the latest version of Astro (v3.0).", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32235a8b-5615-4318-b210-3125472b3993", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v3", "url": "https://docs.astro.build/en/guides/upgrade-to/v3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Style rendered Markdown with Tailwind Typography is in astro?\n\nAssistant: Sure, I'd be happy to explain Style rendered Markdown with Tailwind Typography in astro.\n\n# Style rendered Markdown with Tailwind Typography\n\nYou can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nAn Astro project that:\n\n- has Tailwind‚Äôs Vite plugin installed.\n- uses Astro‚Äôs content collections.\n\n## Setting Up `@tailwindcss/typography`\n\nFirst, install `@tailwindcss/typography` using your preferred package manager.\n\n- npm\n- pnpm\n- Yarn\n\nThen, add the package as a plugin in your Tailwind configuration file.\n\n## Recipe\n\n1. Create a `<Prose />` component to provide a wrapping `<div>` with a `<slot />` for your rendered Markdown. Add the style class `prose` alongside any desired Tailwind element modifiers in the parent element.\n\n2. Query your collection entry on the page you want to render your Markdown. Pass the `<Content />` component from `await render(entry)` to `<Prose />` as a child to wrap your Markdown content in Tailwind styles.\n\n## Resources\n\n- Tailwind Typography Documentation\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "overview", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nAn Astro project that:\n\n- has Tailwind‚Äôs Vite plugin installed.\n- uses Astro‚Äôs content collections..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "section_detail", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I setting up `@tailwindcss/typography` in astro?\n\nAssistant: To setting up `@tailwindcss/typography` in astro, here's what you do:\nFirst, install `@tailwindcss/typography` using your preferred package manager.\n\n- npm\n- pnpm\n- Yarn\n\nThen, add the package as a plugin in your Tailwind configuration file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "section_detail", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recipe in astro?\n\nAssistant: To recipe in astro, here's what you do:\n1. Create a `<Prose />` component to provide a wrapping `<div>` with a `<slot />` for your rendered Markdown. Add the style class `prose` alongside any desired Tailwind element modifiers in the parent element.\n\n2. Query your collection entry on the page you want to render your Markdown. Pass the `<Content />` component from `await render(entry)` to `<Prose />` as a child to wrap your Markdown content in Tailwind styles..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "section_detail", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- Tailwind Typography Documentation.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "section_detail", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Style rendered Markdown with Tailwind Typography in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install @tailwindcss/typography using npm**:\n\n```yaml\nnpm install -D @tailwindcss/typography\n```\n\nThis snippet shows you how to install @tailwindcss/typography using npm, which is an important aspect of style rendered markdown with tailwind typography.\n\n**Install @tailwindcss/typography using pnpm**:\n\n```yaml\npnpm add -D @tailwindcss/typography\n```\n\nThis snippet shows you how to install @tailwindcss/typography using pnpm, which is an important aspect of style rendered markdown with tailwind typography.\n\n**Install @tailwindcss/typography using Yarn**:\n\n```yaml\nyarn add --dev @tailwindcss/typography\n```\n\nThis snippet shows you how to install @tailwindcss/typography using yarn, which is an important aspect of style rendered markdown with tailwind typography.\n\n**Prose Component Example**:\n\n```yaml\n<div class=\"prose dark:prose-invert prose-h1:font-bold prose-h1:text-xl prose-a:text-blue-600 prose-p:text-justify prose-img:rounded-xl prose-headings:underline\">\n    <slot />\n</div>\n```\n\nThis snippet shows you how to prose component example, which is an important aspect of style rendered markdown with tailwind typography.\n\n**Rendering Markdown Example**:\n\n```yaml\nimport Prose from '../components/Prose.astro';\nimport Layout from '../layouts/Layout.astro';\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('collection', 'entry');\nconst { Content } = await render(entry);\n\n<Layout>\n    <Prose>\n        <Content />\n    </Prose>\n</Layout>\n```\n\nThis snippet shows you how to rendering markdown example, which is an important aspect of style rendered markdown with tailwind typography.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "code_examples", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Style rendered Markdown with Tailwind Typography in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have the Tailwind Vite plugin installed in your Astro project.\n\nUse the `prose` class along with Tailwind element modifiers to customize the styling of your Markdown content.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "title": "Style rendered Markdown with Tailwind Typography", "description": "You can use Tailwind‚Äôs Typography plugin to style rendered Markdown from sources such as Astro‚Äôs content collections. This recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind‚Äôs utility classes.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:02:31", "type": "best_practices", "page_metadata": {"ogDescription": "Learn how to use @tailwind/typography to style your rendered Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:type": "article", "ogSiteName": "Docs", "title": "Style rendered Markdown with Tailwind Typography | Docs", "og:url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "og:site_name": "Docs", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "ogLocale": "en", "description": "Learn how to use @tailwind/typography to style your rendered Markdown.", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Style rendered Markdown with Tailwind Typography", "og:image": "https://docs.astro.build/open-graph/en/recipes/tailwind-rendered-markdown.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Style rendered Markdown with Tailwind Typography", "scrapeId": "7b85267e-703b-4e47-af43-70f1c8979d27", "sourceURL": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown", "url": "https://docs.astro.build/en/recipes/tailwind-rendered-markdown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/react is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/react in astro.\n\n# @astrojs/react\n\nThis Astro integration enables rendering and client-side hydration for your React components.Here's a quick rundown of what this is about:\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/react`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add react\n```\n\n```\n\npnpm astro add react\n```\n\n```\nyarn astro add react\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/react` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/react\n```\n\n```\n\npnpm add @astrojs/react\n```\n\n```\nyarn add @astrojs/react\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'react'` (or similar) warning when you start up Astro, you‚Äôll need to install `react` and `react-dom` with its type definitions:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install react react-dom @types/react @types/react-dom\n```\n\n```\n\npnpm add react react-dom @types/react @types/react-dom\n```\n\n```\nyarn add react react-dom @types/react @types/react-dom\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [react()],\n\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"react-jsx\",\n\n    \"jsxImportSource\": \"react\"\n\n  }\n\n}\n```\n\n## Getting started\n\nTo use your first React component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together\n\n## Options\n\n### Combining multiple JSX frameworks\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nimport react from '@astrojs/react';\n\nimport svelte from '@astrojs/svelte';\n\nimport vue from '@astrojs/vue';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // Enable many frameworks to support all different kinds of components.\n\n  // No `include` is needed if you are only using a single JSX framework!\n\n  integrations: [\n\n    preact({\n\n      include: ['**/preact/*'],\n\n    }),\n\n    react({\n\n      include: ['**/react/*'],\n\n    }),\n\n    solid({\n\n      include: ['**/solid/*'],\n\n    }),\n\n  ],\n\n});\n```\n\n### Children parsing\n\nChildren passed into a React component from an Astro component are parsed as plain strings, not React nodes.\n\nFor example, the `<ReactComponent />` below will only receive a single child element:\n\n```\n---\nimport ReactComponent from './ReactComponent';\n---\n<ReactComponent>\n\n  <div>one</div>\n\n  <div>two</div>\n\n</ReactComponent>\n```\n\nIf you are using a library that _expects_ more than one child element to be passed, for example so that it can slot certain elements in different places, you might find this to be a blocker.\n\nYou can set the experimental flag `experimentalReactChildren` to tell Astro to always pass children to React as React virtual DOM nodes. There is some runtime cost to this, but it can help with compatibility.\n\nYou can enable this option in the configuration for the React integration:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    react({\n\n      experimentalReactChildren: true,\n\n    }),\n\n  ],\n\n});\n```\n\n### Disable streaming (experimental)\n\nAstro streams the output of React components by default. However, you can disable this behavior by enabling the `experimentalDisableStreaming` option. This is particularly helpful for supporting libraries that don‚Äôt work well with streaming, like some CSS-in-JS solutions.\n\nTo disable streaming for all React components in your project, configure `@astrojs/react` with `experimentalDisableStreaming: true`:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    react({\n\n      experimentalDisableStreaming: true,\n\n    }),\n\n  ],\n\n});\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "overview", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/react`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add react\n```\n\n```\n\npnpm astro add react\n```\n\n```\nyarn astro add react\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/react` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/react\n```\n\n```\n\npnpm add @astrojs/react\n```\n\n```\nyarn add @astrojs/react\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'react'` (or similar) warning when you start up Astro, you‚Äôll need to install `react` and `react-dom` with its type definitions:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install react react-dom @types/react @types/react-dom\n```\n\n```\n\npnpm add react react-dom @types/react @types/react-dom\n```\n\n```\nyarn add react react-dom @types/react @types/react-dom\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [react()],\n\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"react-jsx\",\n\n    \"jsxImportSource\": \"react\"\n\n  }\n\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\nTo use your first React component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options in astro?\n\nAssistant: To options in astro, here's what you do:\n### Combining multiple JSX frameworks\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nimport react from '@astrojs/react';\n\nimport svelte from '@astrojs/svelte';\n\nimport vue from '@astrojs/vue';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // Enable many frameworks to support all different kinds of components.\n\n  // No `include` is needed if you are only using a single JSX framework!\n\n  integrations: [\n\n    preact({\n\n      include: ['**/preact/*'],\n\n    }),\n\n    react({\n\n      include: ['**/react/*'],\n\n    }),\n\n    solid({\n\n      include: ['**/solid/*'],\n\n    }),\n\n  ],\n\n});\n```\n\n### Children parsing\n\nChildren passed into a React component from an Astro component are parsed as plain strings, not React nodes.\n\nFor example, the `<ReactComponent />` below will only receive a single child element:\n\n```\n---\nimport ReactComponent from './ReactComponent';\n---\n<ReactComponent>\n\n  <div>one</div>\n\n  <div>two</div>\n\n</ReactComponent>\n```\n\nIf you are using a library that _expects_ more than one child element to be passed, for example so that it can slot certain elements in different places, you might find this to be a blocker.\n\nYou can set the experimental flag `experimentalReactChildren` to tell Astro to always pass children to React as React virtual DOM nodes. There is some runtime cost to this, but it can help with compatibility.\n\nYou can enable this option in the configuration for the React integration:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    react({\n\n      experimentalReactChildren: true,\n\n    }),\n\n  ],\n\n});\n```\n\n### Disable streaming (experimental)\n\nAstro streams the output of React components by default. However, you can disable this behavior by enabling the `experimentalDisableStreaming` option. This is particularly helpful for supporting libraries that don‚Äôt work well with streaming, like some CSS-in-JS solutions.\n\nTo disable streaming for all React components in your project, configure `@astrojs/react` with `experimentalDisableStreaming: true`:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [\n\n    react({\n\n      experimentalDisableStreaming: true,\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/react in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add react\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/react.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/react\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/react.\n\n**Install React and React-DOM**:\n\n```yaml\nnpm install react react-dom @types/react @types/react-dom\n```\n\nThis snippet shows you how to install react and react-dom, which is an important aspect of @astrojs/react.\n\n**Astro Config Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [react()],\n\n});\n```\n\nThis snippet shows you how to astro config example, which is an important aspect of @astrojs/react.\n\n**tsconfig.json Example**:\n\n```yaml\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"react-jsx\",\n\n    \"jsxImportSource\": \"react\"\n\n  }\n\n}\n```\n\nThis snippet shows you how to tsconfig.json example, which is an important aspect of @astrojs/react.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/react in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you see a `Cannot find package 'react'` warning, install `react` and `react-dom` with type definitions.\n\nPlace common framework components in the same folder to make specifying includes easier.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/react", "title": "@astrojs/react", "description": "This Astro integration enables rendering and client-side hydration for your React components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:06:15", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogSiteName": "Docs", "og:locale": "en", "og:title": "@astrojs/react", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "@astrojs/react | Docs", "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "twitter:site": "astrodotbuild", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/react/", "ogDescription": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "ogTitle": "@astrojs/react", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "language": "en", "og:description": "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/react.webp", "ogLocale": "en", "scrapeId": "4e8c8685-a341-45dc-bad9-f3202cd24792", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/react", "url": "https://docs.astro.build/en/guides/integrations-guide/react/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build forms with API routes is in astro?\n\nAssistant: Sure, I'd be happy to explain Build forms with API routes in astro.\n\n# Build forms with API routes\n\nThis recipe shows you how to send form data to an API endpoint and handle that data.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\n- A project with [an adapter for on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/)\n- A [UI Framework integration](https://docs.astro.build/en/guides/framework-components/) installed\n\n## Recipe\n\n1. Create a `POST` API endpoint at `/api/feedback` that will receive the form data. Use `request.formData()` to process it. Be sure to validate the form values before you use them.\n\nThis example sends a JSON object with a message back to the client.\n\n2. Create a form component using your UI framework. Each input should have a `name` attribute that describes the value of that input.\n\nBe sure to include a `<button>` or `<input type=\"submit\">` element to submit the form.\n\n3. Create a function that accepts a submit event, then pass it as a `submit` handler to your form.\n\nIn the function:\n   - Call `preventDefault()` on the event to override the browser‚Äôs default submission process.\n   - Create a `FormData` object and send it in a `POST` request to your endpoint using `fetch()`.\n\n4. Import and include your `<FeedbackForm />` component on a page. Be sure to use a `client:*` directive to ensure that the form logic is hydrated when you want it to be.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-forms-api", "title": "Build forms with API routes", "description": "This recipe shows you how to send form data to an API endpoint and handle that data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:07:47", "type": "overview", "page_metadata": {"ogUrl": "https://docs.astro.build/en/recipes/build-forms-api/", "title": "Build forms with API routes | Docs", "og:url": "https://docs.astro.build/en/recipes/build-forms-api/", "og:description": "Learn how to use JavaScript to send form submissions to an API Route.", "ogTitle": "Build forms with API routes", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "description": "Learn how to use JavaScript to send form submissions to an API Route.", "docsearch:language": "en", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to use JavaScript to send form submissions to an API Route.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "ogLocale": "en", "ogSiteName": "Docs", "og:type": "article", "og:title": "Build forms with API routes", "scrapeId": "7313774a-38a8-4065-9fdc-f3b2a25ce79c", "sourceURL": "https://docs.astro.build/en/recipes/build-forms-api", "url": "https://docs.astro.build/en/recipes/build-forms-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\n- A project with [an adapter for on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/)\n- A [UI Framework integration](https://docs.astro.build/en/guides/framework-components/) installed.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-forms-api", "title": "Build forms with API routes", "description": "This recipe shows you how to send form data to an API endpoint and handle that data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:07:47", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/recipes/build-forms-api/", "title": "Build forms with API routes | Docs", "og:url": "https://docs.astro.build/en/recipes/build-forms-api/", "og:description": "Learn how to use JavaScript to send form submissions to an API Route.", "ogTitle": "Build forms with API routes", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "description": "Learn how to use JavaScript to send form submissions to an API Route.", "docsearch:language": "en", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to use JavaScript to send form submissions to an API Route.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "ogLocale": "en", "ogSiteName": "Docs", "og:type": "article", "og:title": "Build forms with API routes", "scrapeId": "7313774a-38a8-4065-9fdc-f3b2a25ce79c", "sourceURL": "https://docs.astro.build/en/recipes/build-forms-api", "url": "https://docs.astro.build/en/recipes/build-forms-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recipe in astro?\n\nAssistant: To recipe in astro, here's what you do:\n1. Create a `POST` API endpoint at `/api/feedback` that will receive the form data. Use `request.formData()` to process it. Be sure to validate the form values before you use them.\n\nThis example sends a JSON object with a message back to the client.\n\n2. Create a form component using your UI framework. Each input should have a `name` attribute that describes the value of that input.\n\nBe sure to include a `<button>` or `<input type=\"submit\">` element to submit the form.\n\n3. Create a function that accepts a submit event, then pass it as a `submit` handler to your form.\n\nIn the function:\n   - Call `preventDefault()` on the event to override the browser‚Äôs default submission process.\n   - Create a `FormData` object and send it in a `POST` request to your endpoint using `fetch()`.\n\n4. Import and include your `<FeedbackForm />` component on a page. Be sure to use a `client:*` directive to ensure that the form logic is hydrated when you want it to be..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-forms-api", "title": "Build forms with API routes", "description": "This recipe shows you how to send form data to an API endpoint and handle that data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:07:47", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/recipes/build-forms-api/", "title": "Build forms with API routes | Docs", "og:url": "https://docs.astro.build/en/recipes/build-forms-api/", "og:description": "Learn how to use JavaScript to send form submissions to an API Route.", "ogTitle": "Build forms with API routes", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "description": "Learn how to use JavaScript to send form submissions to an API Route.", "docsearch:language": "en", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to use JavaScript to send form submissions to an API Route.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "ogLocale": "en", "ogSiteName": "Docs", "og:type": "article", "og:title": "Build forms with API routes", "scrapeId": "7313774a-38a8-4065-9fdc-f3b2a25ce79c", "sourceURL": "https://docs.astro.build/en/recipes/build-forms-api", "url": "https://docs.astro.build/en/recipes/build-forms-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Build forms with API routes in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**API Endpoint Example**:\n\n```yaml\nexport const prerender = false; // Not needed in 'server' mode\n\nimport type { APIRoute } from \"astro\";\n\nexport const POST: APIRoute = async ({ request }) => {\n     const data = await request.formData();\n     const name = data.get(\"name\");\n     const email = data.get(\"email\");\n     const message = data.get(\"message\");\n     // Validate the data - you'll probably want to do more than this\n     if (!name || !email || !message) {\n       return new Response(\n         JSON.stringify({\n           message: \"Missing required fields\",\n         }),\n         { status: 400 }\n       );\n     }\n     // Do something with the data, then return a success response\n     return new Response(\n       JSON.stringify({\n         message: \"Success!\"\n       }),\n       { status: 200 }\n     );\n};\n```\n\nThis snippet shows you how to api endpoint example, which is an important aspect of build forms with api routes.\n\n**Form Component Example (React)**:\n\n```yaml\nexport default function Form() {\n  return (\n    <form>\n      <label>\n        Name\n        <input type=\"text\" id=\"name\" name=\"name\" required />\n      </label>\n      <label>\n        Email\n        <input type=\"email\" id=\"email\" name=\"email\" required />\n      </label>\n      <label>\n        Message\n        <textarea id=\"message\" name=\"message\" required />\n      </label>\n      <button>Send</button>\n    </form>\n  );\n}\n```\n\nThis snippet shows you how to form component example (react), which is an important aspect of build forms with api routes.\n\n**Form Submission Example (React)**:\n\n```yaml\nimport { useState } from \"react\";\nimport type { FormEvent } from \"react\";\n\nexport default function Form() {\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  async function submit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const response = await fetch(\"/api/feedback\", {\n      method: \"POST\",\n      body: formData,\n    });\n    const data = await response.json();\n    if (data.message) {\n      setResponseMessage(data.message);\n    }\n  }\n  return (\n    <form onSubmit={submit}>\n      <label htmlFor=\"name\">\n        Name\n        <input type=\"text\" id=\"name\" name=\"name\" autoComplete=\"name\" required />\n      </label>\n      <label htmlFor=\"email\">\n        Email\n        <input type=\"email\" id=\"email\" name=\"email\" autoComplete=\"email\" required />\n      </label>\n      <label htmlFor=\"message\">\n        Message\n        <textarea id=\"message\" name=\"message\" autoComplete=\"off\" required />\n      </label>\n      <button>Send</button>\n      {responseMessage && <p>{responseMessage}</p>}\n    </form>\n  );\n}\n```\n\nThis snippet shows you how to form submission example (react), which is an important aspect of build forms with api routes.\n\n**Feedback Form Import Example**:\n\n```yaml\n---\nimport FeedbackForm from \"../components/FeedbackForm\"\n---\n<FeedbackForm client:load />\n```\n\nThis snippet shows you how to feedback form import example, which is an important aspect of build forms with api routes.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-forms-api", "title": "Build forms with API routes", "description": "This recipe shows you how to send form data to an API endpoint and handle that data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:07:47", "type": "code_examples", "page_metadata": {"ogUrl": "https://docs.astro.build/en/recipes/build-forms-api/", "title": "Build forms with API routes | Docs", "og:url": "https://docs.astro.build/en/recipes/build-forms-api/", "og:description": "Learn how to use JavaScript to send form submissions to an API Route.", "ogTitle": "Build forms with API routes", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "description": "Learn how to use JavaScript to send form submissions to an API Route.", "docsearch:language": "en", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to use JavaScript to send form submissions to an API Route.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "ogLocale": "en", "ogSiteName": "Docs", "og:type": "article", "og:title": "Build forms with API routes", "scrapeId": "7313774a-38a8-4065-9fdc-f3b2a25ce79c", "sourceURL": "https://docs.astro.build/en/recipes/build-forms-api", "url": "https://docs.astro.build/en/recipes/build-forms-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build forms with API routes in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe sure to validate the form values before you use them.\n\nEach input should have a `name` attribute that describes the value of that input.\n\nInclude a `<button>` or `<input type=\"submit\">` element to submit the form.\n\nUse a `client:*` directive to ensure that the form logic is hydrated when you want it to be.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-forms-api", "title": "Build forms with API routes", "description": "This recipe shows you how to send form data to an API endpoint and handle that data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:07:47", "type": "best_practices", "page_metadata": {"ogUrl": "https://docs.astro.build/en/recipes/build-forms-api/", "title": "Build forms with API routes | Docs", "og:url": "https://docs.astro.build/en/recipes/build-forms-api/", "og:description": "Learn how to use JavaScript to send form submissions to an API Route.", "ogTitle": "Build forms with API routes", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "description": "Learn how to use JavaScript to send form submissions to an API Route.", "docsearch:language": "en", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to use JavaScript to send form submissions to an API Route.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-forms-api.webp", "ogLocale": "en", "ogSiteName": "Docs", "og:type": "article", "og:title": "Build forms with API routes", "scrapeId": "7313774a-38a8-4065-9fdc-f3b2a25ce79c", "sourceURL": "https://docs.astro.build/en/recipes/build-forms-api", "url": "https://docs.astro.build/en/recipes/build-forms-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Write your first line of Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Write your first line of Astro in astro.\n\n# Write your first line of Astro\n\nGet ready to make your first edit to your new websiteHere's a quick rundown of what this is about:\n\n## Edit your home page\n\n1. In your code editor, navigate in the Explorer file pane to `src/pages/index.astro` and click on it to open the file‚Äôs contents in an editable tab.\n\nThe contents of your `index.astro` file should look like this:\n\n```html\n---\n---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <meta name=\"generator\" content={Astro.generator} >\n       <title>Astro</title>\n     </head>\n     <body>\n       <h1>Astro</h1>\n     </body>\n</html>\n```\n\n2. Edit the content of your page `<body>`.\n\nType in the editor to change the heading text on your page and save the change.\n\n```html\n<body>\n     <h1>Astro</h1>\n     <h1>My Astro Site</h1>\n</body>\n```\n\n3. Check the browser preview and you should see your page content updated to the new text.\n\nCongratulations! You are now an Astro developer! The rest of this unit will set you up for success with version control and a published website you can show off.\n\n## Checklist\n\n- I can make changes and see them in the browser.\n- I am an Astro developer!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/3", "title": "Write your first line of Astro", "description": "Get ready to make your first edit to your new website", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:09:09", "type": "overview", "page_metadata": {"language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Write your first line of Astro | Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "twitter:card": "summary_large_image", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "og:type": "article", "description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/tutorial/1-setup/3/", "docsearch:language": "en", "ogTitle": "Write your first line of Astro", "og:site_name": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/3/", "ogLocale": "en", "og:title": "Write your first line of Astro", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "scrapeId": "91dac603-da21-4b33-a159-1103205dd65c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/3", "url": "https://docs.astro.build/en/tutorial/1-setup/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I edit your home page in astro?\n\nAssistant: To edit your home page in astro, here's what you do:\n1. In your code editor, navigate in the Explorer file pane to `src/pages/index.astro` and click on it to open the file‚Äôs contents in an editable tab.\n\nThe contents of your `index.astro` file should look like this:\n\n```html\n---\n---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <meta name=\"generator\" content={Astro.generator} >\n       <title>Astro</title>\n     </head>\n     <body>\n       <h1>Astro</h1>\n     </body>\n</html>\n```\n\n2. Edit the content of your page `<body>`.\n\nType in the editor to change the heading text on your page and save the change.\n\n```html\n<body>\n     <h1>Astro</h1>\n     <h1>My Astro Site</h1>\n</body>\n```\n\n3. Check the browser preview and you should see your page content updated to the new text.\n\nCongratulations! You are now an Astro developer! The rest of this unit will set you up for success with version control and a published website you can show off..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/3", "title": "Write your first line of Astro", "description": "Get ready to make your first edit to your new website", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:09:09", "type": "section_detail", "page_metadata": {"language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Write your first line of Astro | Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "twitter:card": "summary_large_image", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "og:type": "article", "description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/tutorial/1-setup/3/", "docsearch:language": "en", "ogTitle": "Write your first line of Astro", "og:site_name": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/3/", "ogLocale": "en", "og:title": "Write your first line of Astro", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "scrapeId": "91dac603-da21-4b33-a159-1103205dd65c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/3", "url": "https://docs.astro.build/en/tutorial/1-setup/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can make changes and see them in the browser.\n- I am an Astro developer!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/3", "title": "Write your first line of Astro", "description": "Get ready to make your first edit to your new website", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:09:09", "type": "section_detail", "page_metadata": {"language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Write your first line of Astro | Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "twitter:card": "summary_large_image", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "og:type": "article", "description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/tutorial/1-setup/3/", "docsearch:language": "en", "ogTitle": "Write your first line of Astro", "og:site_name": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/3/", "ogLocale": "en", "og:title": "Write your first line of Astro", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "scrapeId": "91dac603-da21-4b33-a159-1103205dd65c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/3", "url": "https://docs.astro.build/en/tutorial/1-setup/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Write your first line of Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initial index.astro file**:\n\n```yaml\n---\n---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <meta name=\"generator\" content={Astro.generator} >\n       <title>Astro</title>\n     </head>\n     <body>\n       <h1>Astro</h1>\n     </body>\n</html>\n```\n\nThis snippet shows you how to initial index.astro file, which is an important aspect of write your first line of astro.\n\n**Edited index.astro file**:\n\n```yaml\n<body>\n     <h1>Astro</h1>\n     <h1>My Astro Site</h1>\n</body>\n```\n\nThis snippet shows you how to edited index.astro file, which is an important aspect of write your first line of astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/3", "title": "Write your first line of Astro", "description": "Get ready to make your first edit to your new website", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:09:09", "type": "code_examples", "page_metadata": {"language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Write your first line of Astro | Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "twitter:card": "summary_large_image", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "og:type": "article", "description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/tutorial/1-setup/3/", "docsearch:language": "en", "ogTitle": "Write your first line of Astro", "og:site_name": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/3/", "ogLocale": "en", "og:title": "Write your first line of Astro", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "scrapeId": "91dac603-da21-4b33-a159-1103205dd65c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/3", "url": "https://docs.astro.build/en/tutorial/1-setup/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Write your first line of Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to save your changes in the code editor before checking the browser preview.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/3", "title": "Write your first line of Astro", "description": "Get ready to make your first edit to your new website", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:09:09", "type": "best_practices", "page_metadata": {"language": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Write your first line of Astro | Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "twitter:card": "summary_large_image", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "og:type": "article", "description": "Tutorial: Build your first Astro blog ‚Äî\nMake your first edits to your tutorial project's home page", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/tutorial/1-setup/3/", "docsearch:language": "en", "ogTitle": "Write your first line of Astro", "og:site_name": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/3/", "ogLocale": "en", "og:title": "Write your first line of Astro", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/3.webp", "scrapeId": "91dac603-da21-4b33-a159-1103205dd65c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/3", "url": "https://docs.astro.build/en/tutorial/1-setup/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Google‚Äôs Firebase Hosting is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Google‚Äôs Firebase Hosting in astro.\n\n# Deploy your Astro Site to Google‚Äôs Firebase Hosting\n\nFirebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.Here's a quick rundown of what this is about:\n\n## Project Configuration\n\nYour Astro project can be deployed to Firebase as a static site, or as a server-side rendered site (SSR).\n\n## Static Site\n\nYour Astro project is a static site by default. You don‚Äôt need any extra configuration to deploy a static Astro site to Firebase.\n\n## Adapter for SSR\n\nTo enable SSR in your Astro project and deploy on Firebase add the Node.js adapter.\n\n## How to deploy\n\n1. Install the Firebase CLI. This is a command-line tool that allows you to interact with Firebase from the terminal.\n\n2. Authenticate the Firebase CLI with your Google account. This will open a browser window where you can log in to your Google account.\n\n3. Enable experimental web frameworks support. This is an experimental feature that allows the Firebase CLI to detect and configure your deployment settings for Astro.\n\n4. Initialize Firebase Hosting in your project. This will create a `firebase.json` and `.firebaserc` file in your project root.\n\n5. Deploy your site to Firebase Hosting. This will build your Astro site and deploy it to Firebase.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "overview", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I project configuration in astro?\n\nAssistant: To project configuration in astro, here's what you do:\nYour Astro project can be deployed to Firebase as a static site, or as a server-side rendered site (SSR)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I static site in astro?\n\nAssistant: To static site in astro, here's what you do:\nYour Astro project is a static site by default. You don‚Äôt need any extra configuration to deploy a static Astro site to Firebase..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adapter for ssr in astro?\n\nAssistant: To adapter for ssr in astro, here's what you do:\nTo enable SSR in your Astro project and deploy on Firebase add the Node.js adapter..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\n1. Install the Firebase CLI. This is a command-line tool that allows you to interact with Firebase from the terminal.\n\n2. Authenticate the Firebase CLI with your Google account. This will open a browser window where you can log in to your Google account.\n\n3. Enable experimental web frameworks support. This is an experimental feature that allows the Firebase CLI to detect and configure your deployment settings for Astro.\n\n4. Initialize Firebase Hosting in your project. This will create a `firebase.json` and `.firebaserc` file in your project root.\n\n5. Deploy your site to Firebase Hosting. This will build your Astro site and deploy it to Firebase..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Google‚Äôs Firebase Hosting in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Firebase CLI**:\n\n```yaml\nnpm install firebase-tools\n```\n\nThis snippet shows you how to install firebase cli, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Install Firebase CLI with pnpm**:\n\n```yaml\npnpm add firebase-tools\n```\n\nThis snippet shows you how to install firebase cli with pnpm, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Install Firebase CLI with Yarn**:\n\n```yaml\nyarn add firebase-tools\n```\n\nThis snippet shows you how to install firebase cli with yarn, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Authenticate Firebase CLI**:\n\n```yaml\nnpx firebase login\n```\n\nThis snippet shows you how to authenticate firebase cli, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Authenticate Firebase CLI with pnpm**:\n\n```yaml\npnpm exec firebase login\n```\n\nThis snippet shows you how to authenticate firebase cli with pnpm, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Authenticate Firebase CLI with Yarn**:\n\n```yaml\nyarn firebase login\n```\n\nThis snippet shows you how to authenticate firebase cli with yarn, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Enable experimental web frameworks support**:\n\n```yaml\nnpx firebase experiments:enable webframeworks\n```\n\nThis snippet shows you how to enable experimental web frameworks support, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Enable experimental web frameworks support with pnpm**:\n\n```yaml\npnpm exec firebase experiments:enable webframeworks\n```\n\nThis snippet shows you how to enable experimental web frameworks support with pnpm, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Enable experimental web frameworks support with Yarn**:\n\n```yaml\nyarn firebase experiments:enable webframeworks\n```\n\nThis snippet shows you how to enable experimental web frameworks support with yarn, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Initialize Firebase Hosting**:\n\n```yaml\nnpx firebase init hosting\n```\n\nThis snippet shows you how to initialize firebase hosting, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Initialize Firebase Hosting with pnpm**:\n\n```yaml\npnpm exec firebase init hosting\n```\n\nThis snippet shows you how to initialize firebase hosting with pnpm, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Initialize Firebase Hosting with Yarn**:\n\n```yaml\nyarn firebase init hosting\n```\n\nThis snippet shows you how to initialize firebase hosting with yarn, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Deploy to Firebase Hosting**:\n\n```yaml\nnpx firebase deploy --only hosting\n```\n\nThis snippet shows you how to deploy to firebase hosting, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Deploy to Firebase Hosting with pnpm**:\n\n```yaml\npnpm exec firebase deploy --only hosting\n```\n\nThis snippet shows you how to deploy to firebase hosting with pnpm, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n**Deploy to Firebase Hosting with Yarn**:\n\n```yaml\nyarn firebase deploy --only hosting\n```\n\nThis snippet shows you how to deploy to firebase hosting with yarn, which is an important aspect of deploy your astro site to google‚Äôs firebase hosting.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "code_examples", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to Google‚Äôs Firebase Hosting in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYour Astro project is a static site by default, no extra configuration is needed for static deployment.\n\nTo enable SSR, add the Node.js adapter to your Astro project.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-firebase", "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "description": "Firebase Hosting is a service provided by Google‚Äôs Firebase app development platform, which can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:09:33", "type": "best_practices", "page_metadata": {"og:site_name": "Docs", "ogTitle": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-firebase/", "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "ogDescription": "How to deploy your Astro site to the web using Google‚Äôs Firebase Hosting.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Deploy your Astro Site to Google‚Äôs Firebase Hosting | Docs", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-firebase.webp", "language": "en", "scrapeId": "862ccf43-7740-408b-ac79-3e252549a5b7", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-firebase", "url": "https://docs.astro.build/en/guides/deploy/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Create a social media footer is in astro?\n\nAssistant: Sure, I'd be happy to explain Create a social media footer in astro.\n\n# Create a social media footer\n\nGet ready to create a Footer component and pass props to a Social Media component.Here's a quick rundown of what this is about:\n\n## Create a Footer Component\n\n1. Create a new file at the location `src/components/Footer.astro`.\n\n2. Copy the following code into your new file, `Footer.astro`.\n\n```javascript\n---\nconst platform = \"github\";\nconst username = \"withastro\";\n---\n\n<footer>\n     <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n</footer>\n```\n\n## Import and use `Footer.astro`\n\n1. Add the following import statement to the frontmatter in each of your three Astro pages ( `index.astro`, `about.astro`, and `blog.astro`):\n\n```javascript\nimport Footer from '../components/Footer.astro';\n```\n\n2. Add a new `<Footer />` component in your Astro template on each page, just before the closing `</body>` tag to display your footer at the bottom of the page.\n\n```html\n       <Footer />\n     </body>\n</html>\n```\n\n3. In your browser preview, check that you can see your new footer text on each page.\n\n## Try it yourself - Personalize your footer\n\nCustomize your footer to display multiple social networks (e.g. Instagram, Twitter, LinkedIn) and include your username to link directly to your own profile.\n\n## Code Check-In\n\nIf you‚Äôve been following along with each step in the tutorial, your `index.astro` file should look like this:\n\n```\n---\nimport Navigation from '../components/Navigation.astro';\nimport Footer from '../components/Footer.astro';\nimport '../styles/global.css';\nconst pageTitle = 'Home Page';\n---\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <title>{pageTitle}</title>\n  </head>\n  <body>\n    <Navigation />\n    <h1>{pageTitle}</h1>\n    <Footer />\n  </body>\n</html>\n```\n\n## Create a Social Media component\n\nSince you might have multiple online accounts you can link to, you can make a single, reusable component and display it multiple times. Each time, you will pass it different properties ( `props`) to use: the online platform and your username there.\n\n1. Create a new file at the location `src/components/Social.astro`.\n\n2. Copy the following code into your new file, `Social.astro`.\n\n```javascript\n---\nconst { platform, username } = Astro.props;\n---\n<a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n```\n\n## Import and use `Social.astro` in your Footer\n\n1. Change the code in `src/components/Footer.astro` to import, then use this new component three times, passing different **component attributes** as props each time:\n\n```javascript\n---\nconst platform = \"github\";\nconst username = \"withastro\";\nimport Social from './Social.astro';\n---\n\n<footer>\n     <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n     <Social platform=\"twitter\" username=\"astrodotbuild\" />\n     <Social platform=\"github\" username=\"withastro\" />\n     <Social platform=\"youtube\" username=\"astrodotbuild\" />\n</footer>\n```\n\n2. Check your browser preview, and you should see your new footer displaying links to these three platforms on each page.\n\n## Style your Social Media Component\n\n1. Customize the appearance of your links by adding a `<style>` tag to `src/components/Social.astro`.\n\n```javascript\n---\nconst { platform, username } = Astro.props;\n---\n<a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n\n<style>\n     a {\n       padding: 0.5rem 1rem;\n       color: white;\n       background-color: #4c1d95;\n       text-decoration: none;\n     }\n</style>\n```\n\n2. Add a `<style>` tag to `src/components/Footer.astro` to improve the layout of its contents.\n\n```javascript\n---\nimport Social from './Social.astro';\n---\n<style>\n     footer {\n       display: flex;\n       gap: 1rem;\n       margin-top: 2rem;\n     }\n</style>\n\n<footer>\n     <Social platform=\"twitter\" username=\"astrodotbuild\" />\n     <Social platform=\"github\" username=\"withastro\" />\n     <Social platform=\"youtube\" username=\"astrodotbuild\" />\n</footer>\n```\n\n3. Check your browser preview again and confirm that each page shows an updated footer.\n\n## Test Yourself\n\n1. What line of code do you need to write in an Astro component‚Äôs frontmatter to receive values of `title`, `author`, and `date` as props?\n\n1. `const { title, author, date } = Astro.props;`\n2. `import BlogPost from '../components/BlogPost.astro'`\n3. `<BlogPost title=\"My First Post\" author=\"Dan\" date=\"12 Aug 2022\" />`\n\n2. How do you **pass values as props** to an Astro component?\n\n1. `const { title, author, date } = Astro.props;`\n2. `import BlogPost from '../components/BlogPost.astro'`\n3. `<BlogPost title=\"My First Post\" author=\"Dan\" date=\"12 Aug 2022\" />`\n\n## Checklist\n\n- I can create new `.astro` components in `src/components/`\n- I can import and use Astro components inside other Astro components.\n- I can pass props to an Astro component.\n\n## Resources\n\n- [Component Props in Astro](https://docs.astro.build/en/basics/astro-components/#component-props)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a footer component in astro?\n\nAssistant: To create a footer component in astro, here's what you do:\n1. Create a new file at the location `src/components/Footer.astro`.\n\n2. Copy the following code into your new file, `Footer.astro`.\n\n```javascript\n---\nconst platform = \"github\";\nconst username = \"withastro\";\n---\n\n<footer>\n     <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n</footer>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I import and use `footer.astro` in astro?\n\nAssistant: To import and use `footer.astro` in astro, here's what you do:\n1. Add the following import statement to the frontmatter in each of your three Astro pages ( `index.astro`, `about.astro`, and `blog.astro`):\n\n```javascript\nimport Footer from '../components/Footer.astro';\n```\n\n2. Add a new `<Footer />` component in your Astro template on each page, just before the closing `</body>` tag to display your footer at the bottom of the page.\n\n```html\n       <Footer />\n     </body>\n</html>\n```\n\n3. In your browser preview, check that you can see your new footer text on each page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - personalize your footer in astro?\n\nAssistant: To try it yourself - personalize your footer in astro, here's what you do:\nCustomize your footer to display multiple social networks (e.g. Instagram, Twitter, LinkedIn) and include your username to link directly to your own profile..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I code check-in in astro?\n\nAssistant: To code check-in in astro, here's what you do:\nIf you‚Äôve been following along with each step in the tutorial, your `index.astro` file should look like this:\n\n```\n---\nimport Navigation from '../components/Navigation.astro';\nimport Footer from '../components/Footer.astro';\nimport '../styles/global.css';\nconst pageTitle = 'Home Page';\n---\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <title>{pageTitle}</title>\n  </head>\n  <body>\n    <Navigation />\n    <h1>{pageTitle}</h1>\n    <Footer />\n  </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a social media component in astro?\n\nAssistant: To create a social media component in astro, here's what you do:\nSince you might have multiple online accounts you can link to, you can make a single, reusable component and display it multiple times. Each time, you will pass it different properties ( `props`) to use: the online platform and your username there.\n\n1. Create a new file at the location `src/components/Social.astro`.\n\n2. Copy the following code into your new file, `Social.astro`.\n\n```javascript\n---\nconst { platform, username } = Astro.props;\n---\n<a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I import and use `social.astro` in your footer in astro?\n\nAssistant: To import and use `social.astro` in your footer in astro, here's what you do:\n1. Change the code in `src/components/Footer.astro` to import, then use this new component three times, passing different **component attributes** as props each time:\n\n```javascript\n---\nconst platform = \"github\";\nconst username = \"withastro\";\nimport Social from './Social.astro';\n---\n\n<footer>\n     <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n     <Social platform=\"twitter\" username=\"astrodotbuild\" />\n     <Social platform=\"github\" username=\"withastro\" />\n     <Social platform=\"youtube\" username=\"astrodotbuild\" />\n</footer>\n```\n\n2. Check your browser preview, and you should see your new footer displaying links to these three platforms on each page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I style your social media component in astro?\n\nAssistant: To style your social media component in astro, here's what you do:\n1. Customize the appearance of your links by adding a `<style>` tag to `src/components/Social.astro`.\n\n```javascript\n---\nconst { platform, username } = Astro.props;\n---\n<a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n\n<style>\n     a {\n       padding: 0.5rem 1rem;\n       color: white;\n       background-color: #4c1d95;\n       text-decoration: none;\n     }\n</style>\n```\n\n2. Add a `<style>` tag to `src/components/Footer.astro` to improve the layout of its contents.\n\n```javascript\n---\nimport Social from './Social.astro';\n---\n<style>\n     footer {\n       display: flex;\n       gap: 1rem;\n       margin-top: 2rem;\n     }\n</style>\n\n<footer>\n     <Social platform=\"twitter\" username=\"astrodotbuild\" />\n     <Social platform=\"github\" username=\"withastro\" />\n     <Social platform=\"youtube\" username=\"astrodotbuild\" />\n</footer>\n```\n\n3. Check your browser preview again and confirm that each page shows an updated footer..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test yourself in astro?\n\nAssistant: To test yourself in astro, here's what you do:\n1. What line of code do you need to write in an Astro component‚Äôs frontmatter to receive values of `title`, `author`, and `date` as props?\n\n1. `const { title, author, date } = Astro.props;`\n2. `import BlogPost from '../components/BlogPost.astro'`\n3. `<BlogPost title=\"My First Post\" author=\"Dan\" date=\"12 Aug 2022\" />`\n\n2. How do you **pass values as props** to an Astro component?\n\n1. `const { title, author, date } = Astro.props;`\n2. `import BlogPost from '../components/BlogPost.astro'`\n3. `<BlogPost title=\"My First Post\" author=\"Dan\" date=\"12 Aug 2022\" />`.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can create new `.astro` components in `src/components/`\n- I can import and use Astro components inside other Astro components.\n- I can pass props to an Astro component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Component Props in Astro](https://docs.astro.build/en/basics/astro-components/#component-props).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Create a social media footer in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a Footer Component**:\n\n```yaml\n---\nconst platform = \"github\";\nconst username = \"withastro\";\n---\n\n<footer>\n     <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n</footer>\n```\n\nThis snippet shows you how to create a footer component, which is an important aspect of create a social media footer.\n\n**Import and use `Footer.astro`**:\n\n```yaml\nimport Footer from '../components/Footer.astro';\n\n<Footer />\n```\n\nThis snippet shows you how to import and use `footer.astro`, which is an important aspect of create a social media footer.\n\n**Code Check-In**:\n\n```yaml\n---\nimport Navigation from '../components/Navigation.astro';\nimport Footer from '../components/Footer.astro';\nimport '../styles/global.css';\nconst pageTitle = 'Home Page';\n---\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <title>{pageTitle}</title>\n  </head>\n  <body>\n    <Navigation />\n    <h1>{pageTitle}</h1>\n    <Footer />\n  </body>\n</html>\n```\n\nThis snippet shows you how to code check-in, which is an important aspect of create a social media footer.\n\n**Create a Social Media component**:\n\n```yaml\n---\nconst { platform, username } = Astro.props;\n---\n<a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n```\n\nThis snippet shows you how to create a social media component, which is an important aspect of create a social media footer.\n\n**Import and use `Social.astro` in your Footer**:\n\n```yaml\n---\nconst platform = \"github\";\nconst username = \"withastro\";\nimport Social from './Social.astro';\n---\n\n<footer>\n     <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n     <Social platform=\"twitter\" username=\"astrodotbuild\" />\n     <Social platform=\"github\" username=\"withastro\" />\n     <Social platform=\"youtube\" username=\"astrodotbuild\" />\n</footer>\n```\n\nThis snippet shows you how to import and use `social.astro` in your footer, which is an important aspect of create a social media footer.\n\n**Style your Social Media Component**:\n\n```yaml\n---\nconst { platform, username } = Astro.props;\n---\n<a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n\n<style>\n     a {\n       padding: 0.5rem 1rem;\n       color: white;\n       background-color: #4c1d95;\n       text-decoration: none;\n     }\n</style>\n\n<style>\n     footer {\n       display: flex;\n       gap: 1rem;\n       margin-top: 2rem;\n     }\n</style>\n\n<footer>\n     <Social platform=\"twitter\" username=\"astrodotbuild\" />\n     <Social platform=\"github\" username=\"withastro\" />\n     <Social platform=\"youtube\" username=\"astrodotbuild\" />\n</footer>\n```\n\nThis snippet shows you how to style your social media component, which is an important aspect of create a social media footer.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Create a social media footer in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCustomize your footer to display multiple social networks and include your username to link directly to your own profile.\n\nCheck your browser preview to ensure that your footer displays correctly on each page.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/2", "title": "Create a social media footer", "description": "Get ready to create a Footer component and pass props to a Social Media component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:15:46", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "title": "Create a social media footer | Docs", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/2/", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/2.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create a social media footer", "ogSiteName": "Docs", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/tutorial/3-components/2/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nBuild a new component from scratch, then add it to your pages", "og:title": "Create a social media footer", "scrapeId": "9ff7a7cd-7ca9-4137-b02b-b7ccc63aa636", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/2", "url": "https://docs.astro.build/en/tutorial/3-components/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Upgrade to Astro v4 is in astro?\n\nAssistant: Sure, I'd be happy to explain Upgrade to Astro v4 in astro.\n\n# Upgrade to Astro v4\n\nThis guide will help you migrate from Astro v3 to Astro v4.Here's a quick rundown of what this is about:\n\n## Upgrade Astro\n\nUpdate your project‚Äôs version of Astro and all official integrations to the latest versions using your package manager.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v4/#tab-panel-1933)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v4/#tab-panel-1934)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v4/#tab-panel-1935)\n\nYou can also [upgrade your Astro integrations manually](https://docs.astro.build/en/guides/integrations-guide/#manual-upgrading) if needed, and you may also need to upgrade other dependencies in your project.\n\nAstro v4.0 includes [potentially breaking changes](https://docs.astro.build/en/guides/upgrade-to/v4/#breaking-changes), as well as the [removal of some previously deprecated features](https://docs.astro.build/en/guides/upgrade-to/v4/#previously-deprecated-features-now-removed). If your project doesn‚Äôt work as expected after upgrading to v4.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase. See [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n## Astro v4.0 Experimental Flags Removed\n\nRemove the `devOverlay` experimental flag and move any `i18n` config to the top level in `astro.config.mjs`:\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    devOverlay: true,\n\n    i18n: {\n\n      locales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n\n      defaultLocale: \"en\",\n\n    }\n\n  },\n\n  i18n: {\n\n    locales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n    defaultLocale: \"en\",\n\n  },\n\n})\n``` \n\nThese configurations, `i18n` and the renamed `devToolbar`, are now available in Astro v4.0. Read more about these two exciting features and more in [the v4.0 Blog post](https://astro.build/blog/astro-4/)!\n\n## Upgrades\n\nAny major upgrades to Astro‚Äôs dependencies may cause breaking changes in your project.\n\n## Upgraded: Vite 5.0\n\nIn Astro v3.0, Vite 4 was used as the development server and production bundler. Astro v4.0 upgrades from Vite 4 to Vite 5.\n\n## What should I do?\n\nIf you are using Vite-specific plugins, configuration, or APIs, check the [Vite migration guide](https://vite.dev/guide/migration) for their breaking changes and upgrade your project as needed. There are no breaking changes to Astro itself.\n\n## Upgraded: unified, remark, and rehype dependencies\n\nIn Astro v3.x, unified v10 and its related compatible remark/rehype packages were used to process Markdown and MDX. Astro v4.0 upgrades [unified to v11](https://github.com/unifiedjs/unified/releases/tag/11.0.0) and the other remark/rehype packages to the latest version.\n\n## What should I do?\n\nIf you used custom remark/rehype packages, update all of them to the latest version using your package manager to ensure they support unified v11. The packages you are using can be found in `astro.config.mjs`. There should not be any significant breaking changes if you use actively updated packages, but some packages may not yet be compatible with unified v11. Visually inspect your Markdown/MDX pages before deploying to ensure your site is functioning as intended.\n\n## Breaking Changes\n\nThe following changes are considered breaking changes in Astro. Breaking changes may or may not provide temporary backwards compatibility, and all documentation is updated to refer to only the current, supported code.\n\n## Renamed: entrypoint (Integrations API)\n\nIn Astro v3.x, the property of the `injectRoute` integrations API that specified the route entry point was named `entryPoint`. Astro v4.0 renames this property to `entrypoint` to be consistent with other Astro APIs. The `entryPoint` property is deprecated but will continue to work and logs a warning prompting you to update your code.\n\n## What should I do?\n\nIf you have integrations that use the `injectRoute` API, rename the `entryPoint` property to `entrypoint`. If you‚Äôre a library author who wants to support both Astro 3 and 4, you can specify both `entryPoint` and `entrypoint`, in which case, a warning will not be logged.\n\n```javascript\ninjectRoute({\n\n  pattern: '/fancy-dashboard',\n\n  entryPoint: '@fancy/dashboard/dashboard.astro'\n\n  entrypoint: '@fancy/dashboard/dashboard.astro'\n\n});\n```\n\n## Changed: app.render signature in Integrations API\n\nIn Astro v3.0, the `app.render()` method accepted `routeData` and `locals` as separate, optional arguments. Astro v4.0 changes the `app.render()` signature. These two properties are now available in a single object. Both the object and these two properties are still optional.\n\n## What should I do?\n\nIf you are maintaining an adapter, the current signature will continue to work until the next major version. To migrate to the new signature, pass `routeData` and `locals` as properties of an object instead of as multiple independent arguments.\n\n```javascript\napp.render(request, routeData, locals)\n\napp.render(request, { routeData, locals })\n```\n\n## Changed: adapters must now specify supported features\n\nIn Astro v3.x, adapters were not required to specify the features they support. Astro v4.0 requires adapters to pass the `supportedAstroFeatures{}` property to specify a list of features they support. This property is no longer optional.\n\n## What should I do?\n\nAdapter authors need to pass the `supportedAstroFeatures{}` option to specify a list of features they support.\n\n```javascript\nexport default function createIntegration() {\n\n  return {\n\n    name: '@matthewp/my-adapter',\n\n    hooks: {\n\n      'astro:config:done': ({ setAdapter }) => {\n\n        setAdapter({\n\n          name: '@matthewp/my-adapter',\n\n          serverEntrypoint: '@matthewp/my-adapter/server.js',\n\n          supportedAstroFeatures: {\n\n              staticOutput: 'stable'\n\n          }\n\n        });\n\n      },\n\n    },\n\n  };\n}\n```\n\n## Removed: Shiki language path property\n\nIn Astro v3.x, a Shiki language passed to `markdown.shikiConfig.langs` was automatically converted to a Shikiji-compatible language. Shikiji is the internal tooling used by Astro for syntax highlighting. Astro v4.0 removes support for the `path` property of a Shiki language, which was confusing to configure. It is replaced by an import which can be passed to `langs` directly.\n\n## What should I do?\n\nThe language JSON file should be imported and passed to the option instead.\n\n```javascript\nimport customLang from './custom.tmLanguage.json'\n\nexport default defineConfig({\n\n  markdown: {\n\n    shikiConfig: {\n\n      langs: [\n\n       { path: '../../custom.tmLanguage.json' },\n\n       customLang,\n\n      ],\n\n    },\n\n  },\n\n})\n```\n\n## Deprecated\n\nThe following deprecated features are no longer supported and are no longer documented. Please update your project accordingly. Some deprecated features may temporarily continue to function until they are completely removed. Others may silently have no effect, or throw an error prompting you to update these features.\n\n## Deprecated: handleForms for View Transitions submit events\n\nIn Astro v3.x, projects using the `<ViewTransitions />` component were required to opt-in to handling `submit` events for `form` elements. This was done by passing a `handleForms` prop. Astro v4.0 handles `submit` events for `form` elements by default when `<ViewTransitions />` are used. The `handleForms` prop has been deprecated and no longer has any effect.\n\n## What should I do?\n\nRemove the `handleForms` property from your `ViewTransitions` component. It is no longer necessary.\n\n```html\n---\nimport { ViewTransitions } from \"astro:transitions\";\n---\n<html>\n  <head>\n    <ViewTransitions handleForms />\n  </head>\n  <body>\n    <!-- stuff here -->\n  </body>\n</html>\n``` \n\nTo opt out of `submit` event handling, add the `data-astro-reload` attribute to relevant `form` elements.\n\n```html\n<form action=\"/contact\" data-astro-reload>\n  <!-- -->\n</form>\n```\n\n## Previously deprecated features now removed\n\nThe following deprecated features have now been entirely removed from the code base and can no longer be used. Some of these features may have continued to work in your project even after deprecation. Others may have silently had no effect. Projects now containing these removed features will be unable to build, and there will no longer be any supporting documentation prompting you to remove these features.\n\n## Removed: returning simple objects from endpoints\n\nIn Astro v3.x, returning simple objects from endpoints was deprecated, but was still supported to maintain compatibility with Astro v2. A `ResponseWithEncoding` utility was also provided to ease the migration. Astro v4.0 removes support for simple objects and requires endpoints to always return a `Response`. The `ResponseWithEncoding` utility is also removed in favor of a proper `Response` type.\n\n## What should I do?\n\nUpdate your endpoints to return a `Response` object directly.\n\n```javascript\nexport async function GET() {\n  return { body: { \"title\": \"Bob's blog\" }};\n  return new Response(JSON.stringify({ \"title\": \"Bob's blog\" }));\n}\n``` \n\nTo remove usage of `ResponseWithEncoding`, refactor your code to use an `ArrayBuffer` instead:\n\n```javascript\nexport async function GET() {\n  const file = await fs.readFile('./bob.png');\n  return new ResponseWithEncoding(file.toString('binary'), undefined, 'binary');\n  return new Response(file.buffer);\n}\n```\n\n## Removed: build.split and build.excludeMiddleware\n\nIn Astro v3.0, `build.split` and `build.excludeMiddleware` build config options were deprecated and replaced with [adapter configuration options](https://docs.astro.build/en/reference/adapter-reference/#adapter-features) to perform the same tasks. Astro v4.0 removes these properties entirely.\n\n## What should I do?\n\nIf you are using the deprecated `build.split` or `build.excludeMiddleware`, you must now remove them as these no longer exist. Please see the v3 migration guide to [update these deprecated middleware properties](https://docs.astro.build/en/guides/upgrade-to/v3/#deprecated-buildexcludemiddleware-and-buildsplit) with adapter configurations.\n\n## Removed: Astro.request.params\n\nIn Astro v3.0, the `Astro.request.params` API was deprecated, but preserved for backwards compatibility. Astro v4.0 removes this option entirely.\n\n## What should I do?\n\nUpdate all occurrences to [`Astro.params`](https://docs.astro.build/en/reference/api-reference/#params), which is the supported replacement.\n\n```javascript\nconst { id } = Astro.request.params;\nconst { id } = Astro.params;\n```\n\n## Removed: markdown.drafts\n\nIn Astro v3.0, using `markdown.drafts` to control the building of draft posts was deprecated. Astro v4.0 removes this option entirely.\n\n## What should I do?\n\nIf you are using the deprecated `markdown.drafts`, you must now remove it as it no longer exists. To continue to mark some pages in your project as drafts, [migrate to content collections](https://docs.astro.build/en/guides/content-collections/) and manually filter out pages with the `draft: true` frontmatter property instead.\n\n## Removed: getHeaders()\n\nIn Astro v3.0, the `getHeaders()` Markdown export was deprecated and replaced with `getHeadings()`. Astro v4.0 removes this option entirely.\n\n## What should I do?\n\nIf you are using the deprecated `getHeaders()`, you must now remove it as it no longer exists. Replace any instances with `getHeadings()`, which is the supported replacement.\n\n```javascript\nconst posts = await Astro.glob('../content/blog/*.mdx');\nconst firstPostHeadings = posts.at(0).getHeaders();\nconst firstPostHeadings = posts.at(0).getHeadings();\n```\n\n## Removed: using rss in getStaticPaths()\n\nIn Astro v3.0, using the deprecated `rss` helper in `getStaticPaths()` would throw an error. Astro v4.0 removes this helper entirely.\n\n## What should I do?\n\nIf you are using the unsupported method for generating RSS feeds, you must now use the [`@astrojs/rss` integration](https://docs.astro.build/en/recipes/rss/) for a complete RSS setup.\n\n## Removed: lowercase HTTP method names\n\nIn Astro v3.0, using lowercase HTTP request method names ( `get`, `post`, `put`, `all`, `del`) was deprecated. Astro v4.0 removes support for lowercase names entirely. All HTTP request methods must now be written using uppercase.\n\n## What should I do?\n\nIf you are using the deprecated lowercase names, you must now replace them with their uppercase equivalents. Please see the v3 migration guide [for guidance using uppercase HTTP request methods](https://docs.astro.build/en/guides/upgrade-to/v3/#changed-http-request-methods-case).\n\n## Removed: 301 redirects when missing a base prefix\n\nIn Astro v3.x, the Astro preview server returned a 301 redirect when accessing public directory assets without a base path. Astro v4.0 returns a 404 status without a base path prefix for public directory assets when the preview server is running, matching the behavior of the dev server.\n\n## What should I do?\n\nWhen using the Astro preview server, all of your static asset imports and URLs from the public directory must have [the base value](https://docs.astro.build/en/reference/configuration-reference/#base) prefixed to the path. The following example shows the `src` attribute required to display an image from the public folder when `base: '/docs'` is configured:\n\n```html\n// To access public/images/my-image.png:\n<img src=\"/docs/images/my-image.png\" alt=\"\">\n```\n\n## Removed: astro/client-image auto-conversion\n\nIn Astro v3.x, the `astro/client-image` type (used for the deprecated image integration) was removed but was auto-converted to the default Astro type `astro/client` if found in your `env.d.ts` file. Astro v4.0 ignores `astro/client-image` and will no longer update `env.d.ts` for you automatically.\n\n## What should I do?\n\nIf you had types configured for `@astrojs/image` in `src/env.d.ts` and upgrading to v3.0 did not automatically convert the type for you, replace the `astro/client-image` type manually with `astro/client`.\n\n```javascript\n  /// <reference types=\"astro/client-image\" />\n  /// <reference types=\"astro/client\" />\n```\n\n## Community Resources\n\nKnow a good resource for Astro v4.0? [Edit this page](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/upgrade-to/v4.mdx) and add a link below!\n\n## Known Issues\n\nPlease check [Astro‚Äôs issues on GitHub](https://github.com/withastro/astro/issues/) for any reported issues, or to file an issue yourself.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "overview", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgrade astro in astro?\n\nAssistant: To upgrade astro in astro, here's what you do:\nUpdate your project‚Äôs version of Astro and all official integrations to the latest versions using your package manager.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v4/#tab-panel-1933)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v4/#tab-panel-1934)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v4/#tab-panel-1935)\n\nYou can also [upgrade your Astro integrations manually](https://docs.astro.build/en/guides/integrations-guide/#manual-upgrading) if needed, and you may also need to upgrade other dependencies in your project.\n\nAstro v4.0 includes [potentially breaking changes](https://docs.astro.build/en/guides/upgrade-to/v4/#breaking-changes), as well as the [removal of some previously deprecated features](https://docs.astro.build/en/guides/upgrade-to/v4/#previously-deprecated-features-now-removed). If your project doesn‚Äôt work as expected after upgrading to v4.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase. See [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro v4.0 experimental flags removed in astro?\n\nAssistant: To astro v4.0 experimental flags removed in astro, here's what you do:\nRemove the `devOverlay` experimental flag and move any `i18n` config to the top level in `astro.config.mjs`:\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    devOverlay: true,\n\n    i18n: {\n\n      locales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n\n      defaultLocale: \"en\",\n\n    }\n\n  },\n\n  i18n: {\n\n    locales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n    defaultLocale: \"en\",\n\n  },\n\n})\n``` \n\nThese configurations, `i18n` and the renamed `devToolbar`, are now available in Astro v4.0. Read more about these two exciting features and more in [the v4.0 Blog post](https://astro.build/blog/astro-4/)!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgrades in astro?\n\nAssistant: To upgrades in astro, here's what you do:\nAny major upgrades to Astro‚Äôs dependencies may cause breaking changes in your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgraded: vite 5.0 in astro?\n\nAssistant: To upgraded: vite 5.0 in astro, here's what you do:\nIn Astro v3.0, Vite 4 was used as the development server and production bundler. Astro v4.0 upgrades from Vite 4 to Vite 5..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are using Vite-specific plugins, configuration, or APIs, check the [Vite migration guide](https://vite.dev/guide/migration) for their breaking changes and upgrade your project as needed. There are no breaking changes to Astro itself..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgraded: unified, remark, and rehype dependencies in astro?\n\nAssistant: To upgraded: unified, remark, and rehype dependencies in astro, here's what you do:\nIn Astro v3.x, unified v10 and its related compatible remark/rehype packages were used to process Markdown and MDX. Astro v4.0 upgrades [unified to v11](https://github.com/unifiedjs/unified/releases/tag/11.0.0) and the other remark/rehype packages to the latest version..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you used custom remark/rehype packages, update all of them to the latest version using your package manager to ensure they support unified v11. The packages you are using can be found in `astro.config.mjs`. There should not be any significant breaking changes if you use actively updated packages, but some packages may not yet be compatible with unified v11. Visually inspect your Markdown/MDX pages before deploying to ensure your site is functioning as intended..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I breaking changes in astro?\n\nAssistant: To breaking changes in astro, here's what you do:\nThe following changes are considered breaking changes in Astro. Breaking changes may or may not provide temporary backwards compatibility, and all documentation is updated to refer to only the current, supported code..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I renamed: entrypoint (integrations api) in astro?\n\nAssistant: To renamed: entrypoint (integrations api) in astro, here's what you do:\nIn Astro v3.x, the property of the `injectRoute` integrations API that specified the route entry point was named `entryPoint`. Astro v4.0 renames this property to `entrypoint` to be consistent with other Astro APIs. The `entryPoint` property is deprecated but will continue to work and logs a warning prompting you to update your code..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you have integrations that use the `injectRoute` API, rename the `entryPoint` property to `entrypoint`. If you‚Äôre a library author who wants to support both Astro 3 and 4, you can specify both `entryPoint` and `entrypoint`, in which case, a warning will not be logged.\n\n```javascript\ninjectRoute({\n\n  pattern: '/fancy-dashboard',\n\n  entryPoint: '@fancy/dashboard/dashboard.astro'\n\n  entrypoint: '@fancy/dashboard/dashboard.astro'\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: app.render signature in integrations api in astro?\n\nAssistant: To changed: app.render signature in integrations api in astro, here's what you do:\nIn Astro v3.0, the `app.render()` method accepted `routeData` and `locals` as separate, optional arguments. Astro v4.0 changes the `app.render()` signature. These two properties are now available in a single object. Both the object and these two properties are still optional..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are maintaining an adapter, the current signature will continue to work until the next major version. To migrate to the new signature, pass `routeData` and `locals` as properties of an object instead of as multiple independent arguments.\n\n```javascript\napp.render(request, routeData, locals)\n\napp.render(request, { routeData, locals })\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: adapters must now specify supported features in astro?\n\nAssistant: To changed: adapters must now specify supported features in astro, here's what you do:\nIn Astro v3.x, adapters were not required to specify the features they support. Astro v4.0 requires adapters to pass the `supportedAstroFeatures{}` property to specify a list of features they support. This property is no longer optional..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nAdapter authors need to pass the `supportedAstroFeatures{}` option to specify a list of features they support.\n\n```javascript\nexport default function createIntegration() {\n\n  return {\n\n    name: '@matthewp/my-adapter',\n\n    hooks: {\n\n      'astro:config:done': ({ setAdapter }) => {\n\n        setAdapter({\n\n          name: '@matthewp/my-adapter',\n\n          serverEntrypoint: '@matthewp/my-adapter/server.js',\n\n          supportedAstroFeatures: {\n\n              staticOutput: 'stable'\n\n          }\n\n        });\n\n      },\n\n    },\n\n  };\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: shiki language path property in astro?\n\nAssistant: To removed: shiki language path property in astro, here's what you do:\nIn Astro v3.x, a Shiki language passed to `markdown.shikiConfig.langs` was automatically converted to a Shikiji-compatible language. Shikiji is the internal tooling used by Astro for syntax highlighting. Astro v4.0 removes support for the `path` property of a Shiki language, which was confusing to configure. It is replaced by an import which can be passed to `langs` directly..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nThe language JSON file should be imported and passed to the option instead.\n\n```javascript\nimport customLang from './custom.tmLanguage.json'\n\nexport default defineConfig({\n\n  markdown: {\n\n    shikiConfig: {\n\n      langs: [\n\n       { path: '../../custom.tmLanguage.json' },\n\n       customLang,\n\n      ],\n\n    },\n\n  },\n\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I deprecated in astro?\n\nAssistant: To deprecated in astro, here's what you do:\nThe following deprecated features are no longer supported and are no longer documented. Please update your project accordingly. Some deprecated features may temporarily continue to function until they are completely removed. Others may silently have no effect, or throw an error prompting you to update these features..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I deprecated: handleforms for view transitions submit events in astro?\n\nAssistant: To deprecated: handleforms for view transitions submit events in astro, here's what you do:\nIn Astro v3.x, projects using the `<ViewTransitions />` component were required to opt-in to handling `submit` events for `form` elements. This was done by passing a `handleForms` prop. Astro v4.0 handles `submit` events for `form` elements by default when `<ViewTransitions />` are used. The `handleForms` prop has been deprecated and no longer has any effect..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nRemove the `handleForms` property from your `ViewTransitions` component. It is no longer necessary.\n\n```html\n---\nimport { ViewTransitions } from \"astro:transitions\";\n---\n<html>\n  <head>\n    <ViewTransitions handleForms />\n  </head>\n  <body>\n    <!-- stuff here -->\n  </body>\n</html>\n``` \n\nTo opt out of `submit` event handling, add the `data-astro-reload` attribute to relevant `form` elements.\n\n```html\n<form action=\"/contact\" data-astro-reload>\n  <!-- -->\n</form>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I previously deprecated features now removed in astro?\n\nAssistant: To previously deprecated features now removed in astro, here's what you do:\nThe following deprecated features have now been entirely removed from the code base and can no longer be used. Some of these features may have continued to work in your project even after deprecation. Others may have silently had no effect. Projects now containing these removed features will be unable to build, and there will no longer be any supporting documentation prompting you to remove these features..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: returning simple objects from endpoints in astro?\n\nAssistant: To removed: returning simple objects from endpoints in astro, here's what you do:\nIn Astro v3.x, returning simple objects from endpoints was deprecated, but was still supported to maintain compatibility with Astro v2. A `ResponseWithEncoding` utility was also provided to ease the migration. Astro v4.0 removes support for simple objects and requires endpoints to always return a `Response`. The `ResponseWithEncoding` utility is also removed in favor of a proper `Response` type..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nUpdate your endpoints to return a `Response` object directly.\n\n```javascript\nexport async function GET() {\n  return { body: { \"title\": \"Bob's blog\" }};\n  return new Response(JSON.stringify({ \"title\": \"Bob's blog\" }));\n}\n``` \n\nTo remove usage of `ResponseWithEncoding`, refactor your code to use an `ArrayBuffer` instead:\n\n```javascript\nexport async function GET() {\n  const file = await fs.readFile('./bob.png');\n  return new ResponseWithEncoding(file.toString('binary'), undefined, 'binary');\n  return new Response(file.buffer);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: build.split and build.excludemiddleware in astro?\n\nAssistant: To removed: build.split and build.excludemiddleware in astro, here's what you do:\nIn Astro v3.0, `build.split` and `build.excludeMiddleware` build config options were deprecated and replaced with [adapter configuration options](https://docs.astro.build/en/reference/adapter-reference/#adapter-features) to perform the same tasks. Astro v4.0 removes these properties entirely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are using the deprecated `build.split` or `build.excludeMiddleware`, you must now remove them as these no longer exist. Please see the v3 migration guide to [update these deprecated middleware properties](https://docs.astro.build/en/guides/upgrade-to/v3/#deprecated-buildexcludemiddleware-and-buildsplit) with adapter configurations..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: astro.request.params in astro?\n\nAssistant: To removed: astro.request.params in astro, here's what you do:\nIn Astro v3.0, the `Astro.request.params` API was deprecated, but preserved for backwards compatibility. Astro v4.0 removes this option entirely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nUpdate all occurrences to [`Astro.params`](https://docs.astro.build/en/reference/api-reference/#params), which is the supported replacement.\n\n```javascript\nconst { id } = Astro.request.params;\nconst { id } = Astro.params;\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: markdown.drafts in astro?\n\nAssistant: To removed: markdown.drafts in astro, here's what you do:\nIn Astro v3.0, using `markdown.drafts` to control the building of draft posts was deprecated. Astro v4.0 removes this option entirely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are using the deprecated `markdown.drafts`, you must now remove it as it no longer exists. To continue to mark some pages in your project as drafts, [migrate to content collections](https://docs.astro.build/en/guides/content-collections/) and manually filter out pages with the `draft: true` frontmatter property instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: getheaders() in astro?\n\nAssistant: To removed: getheaders() in astro, here's what you do:\nIn Astro v3.0, the `getHeaders()` Markdown export was deprecated and replaced with `getHeadings()`. Astro v4.0 removes this option entirely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are using the deprecated `getHeaders()`, you must now remove it as it no longer exists. Replace any instances with `getHeadings()`, which is the supported replacement.\n\n```javascript\nconst posts = await Astro.glob('../content/blog/*.mdx');\nconst firstPostHeadings = posts.at(0).getHeaders();\nconst firstPostHeadings = posts.at(0).getHeadings();\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: using rss in getstaticpaths() in astro?\n\nAssistant: To removed: using rss in getstaticpaths() in astro, here's what you do:\nIn Astro v3.0, using the deprecated `rss` helper in `getStaticPaths()` would throw an error. Astro v4.0 removes this helper entirely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are using the unsupported method for generating RSS feeds, you must now use the [`@astrojs/rss` integration](https://docs.astro.build/en/recipes/rss/) for a complete RSS setup..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: lowercase http method names in astro?\n\nAssistant: To removed: lowercase http method names in astro, here's what you do:\nIn Astro v3.0, using lowercase HTTP request method names ( `get`, `post`, `put`, `all`, `del`) was deprecated. Astro v4.0 removes support for lowercase names entirely. All HTTP request methods must now be written using uppercase..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you are using the deprecated lowercase names, you must now replace them with their uppercase equivalents. Please see the v3 migration guide [for guidance using uppercase HTTP request methods](https://docs.astro.build/en/guides/upgrade-to/v3/#changed-http-request-methods-case)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: 301 redirects when missing a base prefix in astro?\n\nAssistant: To removed: 301 redirects when missing a base prefix in astro, here's what you do:\nIn Astro v3.x, the Astro preview server returned a 301 redirect when accessing public directory assets without a base path. Astro v4.0 returns a 404 status without a base path prefix for public directory assets when the preview server is running, matching the behavior of the dev server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nWhen using the Astro preview server, all of your static asset imports and URLs from the public directory must have [the base value](https://docs.astro.build/en/reference/configuration-reference/#base) prefixed to the path. The following example shows the `src` attribute required to display an image from the public folder when `base: '/docs'` is configured:\n\n```html\n// To access public/images/my-image.png:\n<img src=\"/docs/images/my-image.png\" alt=\"\">\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: astro/client-image auto-conversion in astro?\n\nAssistant: To removed: astro/client-image auto-conversion in astro, here's what you do:\nIn Astro v3.x, the `astro/client-image` type (used for the deprecated image integration) was removed but was auto-converted to the default Astro type `astro/client` if found in your `env.d.ts` file. Astro v4.0 ignores `astro/client-image` and will no longer update `env.d.ts` for you automatically..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what should i do? in astro?\n\nAssistant: To what should i do? in astro, here's what you do:\nIf you had types configured for `@astrojs/image` in `src/env.d.ts` and upgrading to v3.0 did not automatically convert the type for you, replace the `astro/client-image` type manually with `astro/client`.\n\n```javascript\n  /// <reference types=\"astro/client-image\" />\n  /// <reference types=\"astro/client\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community resources in astro?\n\nAssistant: To community resources in astro, here's what you do:\nKnow a good resource for Astro v4.0? [Edit this page](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/upgrade-to/v4.mdx) and add a link below!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I known issues in astro?\n\nAssistant: To known issues in astro, here's what you do:\nPlease check [Astro‚Äôs issues on GitHub](https://github.com/withastro/astro/issues/) for any reported issues, or to file an issue yourself..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Upgrade to Astro v4 in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Upgrade Astro and official integrations together (npm)**:\n\n```yaml\nnpx @astrojs/upgrade\n```\n\nThis snippet shows you how to upgrade astro and official integrations together (npm), which is an important aspect of upgrade to astro v4.\n\n**Upgrade Astro and official integrations together (pnpm)**:\n\n```yaml\npnpm dlx @astrojs/upgrade\n```\n\nThis snippet shows you how to upgrade astro and official integrations together (pnpm), which is an important aspect of upgrade to astro v4.\n\n**Upgrade Astro and official integrations together (yarn)**:\n\n```yaml\nyarn dlx @astrojs/upgrade\n```\n\nThis snippet shows you how to upgrade astro and official integrations together (yarn), which is an important aspect of upgrade to astro v4.\n\n**Example of astro.config.mjs**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    devOverlay: true,\n\n    i18n: {\n\n      locales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n\n      defaultLocale: \"en\",\n\n    }\n\n  },\n\n  i18n: {\n\n    locales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n    defaultLocale: \"en\",\n\n  },\n\n})\n```\n\nThis snippet shows you how to example of astro.config.mjs, which is an important aspect of upgrade to astro v4.\n\n**Example of injectRoute**:\n\n```yaml\ninjectRoute({\n\n  pattern: '/fancy-dashboard',\n\n  entryPoint: '@fancy/dashboard/dashboard.astro'\n\n  entrypoint: '@fancy/dashboard/dashboard.astro'\n\n});\n```\n\nThis snippet shows you how to example of injectroute, which is an important aspect of upgrade to astro v4.\n\n**Example of app.render**:\n\n```yaml\napp.render(request, routeData, locals)\n\napp.render(request, { routeData, locals })\n```\n\nThis snippet shows you how to example of app.render, which is an important aspect of upgrade to astro v4.\n\n**Example of createIntegration**:\n\n```yaml\nexport default function createIntegration() {\n\n  return {\n\n    name: '@matthewp/my-adapter',\n\n    hooks: {\n\n      'astro:config:done': ({ setAdapter }) => {\n\n        setAdapter({\n\n          name: '@matthewp/my-adapter',\n\n          serverEntrypoint: '@matthewp/my-adapter/server.js',\n\n          supportedAstroFeatures: {\n\n              staticOutput: 'stable'\n\n          }\n\n        });\n\n      },\n\n    },\n\n  };\n}\n```\n\nThis snippet shows you how to example of createintegration, which is an important aspect of upgrade to astro v4.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "code_examples", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Upgrade to Astro v4 in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVisually inspect your Markdown/MDX pages before deploying to ensure your site is functioning as intended.\n\nIf you have integrations that use the injectRoute API, rename the entryPoint property to entrypoint.\n\nIf you are maintaining an adapter, the current signature will continue to work until the next major version. To migrate to the new signature, pass routeData and locals as properties of an object instead of as multiple independent arguments.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v4", "title": "Upgrade to Astro v4", "description": "This guide will help you migrate from Astro v3 to Astro v4.", "has_code_examples": true, "has_best_practices": true, "section_count": 40, "timestamp": "2025-03-01 02:16:43", "type": "best_practices", "page_metadata": {"generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "ogTitle": "Upgrade to Astro v4", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "language": "en", "title": "Upgrade to Astro v4 | Docs", "og:title": "Upgrade to Astro v4", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:description": "How to upgrade your project to the latest version of Astro (v4.0).", "description": "How to upgrade your project to the latest version of Astro (v4.0).", "favicon": "https://docs.astro.build/favicon.ico", "ogSiteName": "Docs", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v4.webp", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "ogDescription": "How to upgrade your project to the latest version of Astro (v4.0).", "og:site_name": "Docs", "scrapeId": "5e0cd064-7672-4455-9db9-9962651426e3", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v4", "url": "https://docs.astro.build/en/guides/upgrade-to/v4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/db is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/db in astro.\n\n# @astrojs/db\n\nAstro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.Here's a quick rundown of what this is about:\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add db\n```\n\n```\npnpm astro add db\n```\n\n```\nyarn astro add db\n```\n\n## Manual Installation\n\nIf you prefer to set things up from scratch yourself, skip `astro add` and follow these instructions to install Astro DB yourself.\n\n## 1. Install the integration from npm via a package manager\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm install @astrojs/db\n```\n\n```\npnpm add @astrojs/db\n```\n\n```\nyarn add @astrojs/db\n```\n\n## 2. Add the integration to astro.config.mjs\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport db from '@astrojs/db';\n\nexport default defineConfig({\n\n  integrations: [\n   db()\n  ]\n});\n```\n\n## 3. Configure your database\n\nCreate a `db/config.ts` file at the root of your project. This is a special file that Astro will automatically load and use to configure your database tables.\n\n```\nimport { defineDb } from 'astro:db';\n\nexport default defineDb({\n\n  tables: {},\n})\n```\n\n## Table configuration reference\n\n### `columns`\n\nTable columns are configured using the `columns` object:\n\n```\nimport { defineTable, column, NOW } from 'astro:db';\n\nconst Comment = defineTable({\n\n  columns: {\n\n    id: column.number({ primaryKey: true }),\n\n    author: column.text(),\n\n    content: column.text({ optional: true }),\n\n    published: column.date({ default: NOW }),\n\n  },\n});\n```\n\nColumns are configured using the `column` utility. `column` supports the following types:\n\n- **`column.text(...)`** \\- store either plain or rich text content\n- **`column.number(...)`** \\- store integer and floating point values\n- **`column.boolean(...)`** \\- store true / false values\n- **`column.date(...)`** \\- store `Date` objects, parsed as ISO strings for data storage\n- **`column.json(...)`** \\- store arbitrary JSON blobs, parsed as stringified JSON for data storage\n\nThere are a few shared configuration values across all columns:\n\n- `primaryKey` \\- Set a `number` or `text` column as the unique identifier.\n- `optional` \\- Astro DB uses `NOT NULL` for all columns by default. Set `optional` to `true` to allow null values.\n- `default` \\- Set the default value for newly inserted entries. This accepts either a static value or a string of `sql` for generated values like timestamps.\n- `unique` \\- Mark a column as unique. This prevents duplicate values across entries in the table.\n- `references` \\- Reference a related table by column. This establishes a foreign key constraint, meaning each column value must have a matching value in the referenced table.\n\n## indexes\n\nTable indexes are used to improve lookup speeds on a given column or combination of columns. The `indexes` property accepts an array of configuration objects specifying the columns to index:\n\n```\nimport { defineTable, column } from 'astro:db';\n\nconst Comment = defineTable({\n\n  columns: {\n\n    authorId: column.number(),\n\n    published: column.date(),\n\n    body: column.text(),\n\n  },\n\n  indexes: [\n    { on: [\"authorId\", \"published\"], unique: true },\n  ]\n});\n```\n\nThis will generate a unique index on the `authorId` and `published` columns with the name `Comment_authorId_published_idx`.\n\nThe following configuration options are available for each index:\n\n- `on`: `string | string[]` \\- A single column or array of column names to index.\n- `unique`: `boolean` \\- Set to `true` to enforce unique values across the indexed columns.\n- `name`: `string` (optional) - A custom name for the unique index. This will override Astro‚Äôs generated name based on the table and column names being indexed (e.g. `Comment_authorId_published_idx`). Custom names are global, so ensure index names do not conflict between tables.\n\n## foreignKeys\n\nForeign keys are used to establish a relationship between two tables. The `foreignKeys` property accepts an array of configuration objects that may relate one or more columns between tables:\n\n```\nimport { defineTable, column } from 'astro:db';\n\nconst Author = defineTable({\n\n  columns: {\n\n    firstName: column.text(),\n\n    lastName: column.text(),\n\n  },\n});\n\nconst Comment = defineTable({\n\n  columns: {\n\n    authorFirstName: column.text(),\n\n    authorLastName: column.text(),\n\n    body: column.text(),\n\n  },\n\n  foreignKeys: [\n    {\n      columns: [\"authorFirstName\", \"authorLastName\"],\n      references: () => [Author.columns.firstName, Author.columns.lastName],\n    },\n  ],\n});\n```\n\nEach foreign key configuration object accepts the following properties:\n\n- `columns`: `string[]` \\- An array of column names to relate to the referenced table.\n- `references`: `() => Column[]` \\- A function that returns an array of columns from the referenced table.\n\n## Astro DB CLI reference\n\nAstro DB includes a set of CLI commands to interact with your local and libSQL-compatible database.\n\nThese commands are called automatically when using a GitHub CI action, and can be called manually using the `astro db` CLI.\n\n## astro db push\n\n**Flags:**\n- `--force-reset` Reset all production data if a breaking schema change is required.\n\nSafely push database configuration changes to your project database. This will check for any risk of data loss and guide you on any recommended migration steps. If a breaking schema change must be made, use the `--force-reset` flag to reset all production data.\n\n## astro db verify\n\nCheck for any differences between your local and remote database configurations. This is automatically run by `astro db push`. `verify` will compare your local `db/config.ts` file with the remote database and warn if changes are detected.\n\n## astro db execute <file-path>\n\n**Flags:**\n- `--remote` Run against your libSQL-compatible database. Omit to run against your development server.\n\nExecute a `.ts` or `.js` file to read or write to your database. This accepts a file path as an argument, and supports usage of the `astro:db` module to write type-safe queries. Use the `--remote` flag to run against your libSQL-compatible database, or omit the flag to run against your development server.\n\n## astro db shell --query <sql-string>\n\n**Flags:**\n- `--query` Raw SQL query to execute.\n- `--remote` Run against your libSQL-compatible database. Omit to run against your development server.\n\nExecute a raw SQL query against your database. Use the `--remote` flag to run against your libSQL-compatible database, or omit the flag to run against your development server.\n\n## Astro DB utility reference\n\n### isDbError()\n\nThe `isDbError()` function checks if an error is a libSQL database exception. This may include a foreign key constraint error when using references, or missing fields when inserting data. You can combine `isDbError()` with a try / catch block to handle database errors in your application:\n\n```\nimport { db, Comment, isDbError } from 'astro:db';\n\nimport type { APIRoute } from 'astro';\n\nexport const POST: APIRoute = (ctx) => {\n\n  try {\n\n    await db.insert(Comment).values({\n\n      id: ctx.params.id,\n\n      content: 'Hello, world!'\n\n    });\n\n  } catch (e) {\n\n    if (isDbError(e)) {\n\n      return new Response(`Cannot insert comment with id ${id}\\n\\n${e.message}`, { status: 400 });\n\n    }\n\n    return new Response('An unexpected error occurred', { status: 500 });\n\n  }\n\n  return new Response(null, { status: 201 });\n};\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "overview", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add db\n```\n\n```\npnpm astro add db\n```\n\n```\nyarn astro add db\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual installation in astro?\n\nAssistant: To manual installation in astro, here's what you do:\nIf you prefer to set things up from scratch yourself, skip `astro add` and follow these instructions to install Astro DB yourself..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I 1. install the integration from npm via a package manager in astro?\n\nAssistant: To 1. install the integration from npm via a package manager in astro, here's what you do:\n- npm\n- pnpm\n- Yarn\n\n```\nnpm install @astrojs/db\n```\n\n```\npnpm add @astrojs/db\n```\n\n```\nyarn add @astrojs/db\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I 2. add the integration to astro.config.mjs in astro?\n\nAssistant: To 2. add the integration to astro.config.mjs in astro, here's what you do:\n```\nimport { defineConfig } from 'astro/config';\n\nimport db from '@astrojs/db';\n\nexport default defineConfig({\n\n  integrations: [\n   db()\n  ]\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I 3. configure your database in astro?\n\nAssistant: To 3. configure your database in astro, here's what you do:\nCreate a `db/config.ts` file at the root of your project. This is a special file that Astro will automatically load and use to configure your database tables.\n\n```\nimport { defineDb } from 'astro:db';\n\nexport default defineDb({\n\n  tables: {},\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I table configuration reference in astro?\n\nAssistant: To table configuration reference in astro, here's what you do:\n### `columns`\n\nTable columns are configured using the `columns` object:\n\n```\nimport { defineTable, column, NOW } from 'astro:db';\n\nconst Comment = defineTable({\n\n  columns: {\n\n    id: column.number({ primaryKey: true }),\n\n    author: column.text(),\n\n    content: column.text({ optional: true }),\n\n    published: column.date({ default: NOW }),\n\n  },\n});\n```\n\nColumns are configured using the `column` utility. `column` supports the following types:\n\n- **`column.text(...)`** \\- store either plain or rich text content\n- **`column.number(...)`** \\- store integer and floating point values\n- **`column.boolean(...)`** \\- store true / false values\n- **`column.date(...)`** \\- store `Date` objects, parsed as ISO strings for data storage\n- **`column.json(...)`** \\- store arbitrary JSON blobs, parsed as stringified JSON for data storage\n\nThere are a few shared configuration values across all columns:\n\n- `primaryKey` \\- Set a `number` or `text` column as the unique identifier.\n- `optional` \\- Astro DB uses `NOT NULL` for all columns by default. Set `optional` to `true` to allow null values.\n- `default` \\- Set the default value for newly inserted entries. This accepts either a static value or a string of `sql` for generated values like timestamps.\n- `unique` \\- Mark a column as unique. This prevents duplicate values across entries in the table.\n- `references` \\- Reference a related table by column. This establishes a foreign key constraint, meaning each column value must have a matching value in the referenced table..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I indexes in astro?\n\nAssistant: To indexes in astro, here's what you do:\nTable indexes are used to improve lookup speeds on a given column or combination of columns. The `indexes` property accepts an array of configuration objects specifying the columns to index:\n\n```\nimport { defineTable, column } from 'astro:db';\n\nconst Comment = defineTable({\n\n  columns: {\n\n    authorId: column.number(),\n\n    published: column.date(),\n\n    body: column.text(),\n\n  },\n\n  indexes: [\n    { on: [\"authorId\", \"published\"], unique: true },\n  ]\n});\n```\n\nThis will generate a unique index on the `authorId` and `published` columns with the name `Comment_authorId_published_idx`.\n\nThe following configuration options are available for each index:\n\n- `on`: `string | string[]` \\- A single column or array of column names to index.\n- `unique`: `boolean` \\- Set to `true` to enforce unique values across the indexed columns.\n- `name`: `string` (optional) - A custom name for the unique index. This will override Astro‚Äôs generated name based on the table and column names being indexed (e.g. `Comment_authorId_published_idx`). Custom names are global, so ensure index names do not conflict between tables..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I foreignkeys in astro?\n\nAssistant: To foreignkeys in astro, here's what you do:\nForeign keys are used to establish a relationship between two tables. The `foreignKeys` property accepts an array of configuration objects that may relate one or more columns between tables:\n\n```\nimport { defineTable, column } from 'astro:db';\n\nconst Author = defineTable({\n\n  columns: {\n\n    firstName: column.text(),\n\n    lastName: column.text(),\n\n  },\n});\n\nconst Comment = defineTable({\n\n  columns: {\n\n    authorFirstName: column.text(),\n\n    authorLastName: column.text(),\n\n    body: column.text(),\n\n  },\n\n  foreignKeys: [\n    {\n      columns: [\"authorFirstName\", \"authorLastName\"],\n      references: () => [Author.columns.firstName, Author.columns.lastName],\n    },\n  ],\n});\n```\n\nEach foreign key configuration object accepts the following properties:\n\n- `columns`: `string[]` \\- An array of column names to relate to the referenced table.\n- `references`: `() => Column[]` \\- A function that returns an array of columns from the referenced table..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro db cli reference in astro?\n\nAssistant: To astro db cli reference in astro, here's what you do:\nAstro DB includes a set of CLI commands to interact with your local and libSQL-compatible database.\n\nThese commands are called automatically when using a GitHub CI action, and can be called manually using the `astro db` CLI..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro db push in astro?\n\nAssistant: To astro db push in astro, here's what you do:\n**Flags:**\n- `--force-reset` Reset all production data if a breaking schema change is required.\n\nSafely push database configuration changes to your project database. This will check for any risk of data loss and guide you on any recommended migration steps. If a breaking schema change must be made, use the `--force-reset` flag to reset all production data..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro db verify in astro?\n\nAssistant: To astro db verify in astro, here's what you do:\nCheck for any differences between your local and remote database configurations. This is automatically run by `astro db push`. `verify` will compare your local `db/config.ts` file with the remote database and warn if changes are detected..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro db execute <file-path> in astro?\n\nAssistant: To astro db execute <file-path> in astro, here's what you do:\n**Flags:**\n- `--remote` Run against your libSQL-compatible database. Omit to run against your development server.\n\nExecute a `.ts` or `.js` file to read or write to your database. This accepts a file path as an argument, and supports usage of the `astro:db` module to write type-safe queries. Use the `--remote` flag to run against your libSQL-compatible database, or omit the flag to run against your development server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro db shell --query <sql-string> in astro?\n\nAssistant: To astro db shell --query <sql-string> in astro, here's what you do:\n**Flags:**\n- `--query` Raw SQL query to execute.\n- `--remote` Run against your libSQL-compatible database. Omit to run against your development server.\n\nExecute a raw SQL query against your database. Use the `--remote` flag to run against your libSQL-compatible database, or omit the flag to run against your development server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro db utility reference in astro?\n\nAssistant: To astro db utility reference in astro, here's what you do:\n### isDbError()\n\nThe `isDbError()` function checks if an error is a libSQL database exception. This may include a foreign key constraint error when using references, or missing fields when inserting data. You can combine `isDbError()` with a try / catch block to handle database errors in your application:\n\n```\nimport { db, Comment, isDbError } from 'astro:db';\n\nimport type { APIRoute } from 'astro';\n\nexport const POST: APIRoute = (ctx) => {\n\n  try {\n\n    await db.insert(Comment).values({\n\n      id: ctx.params.id,\n\n      content: 'Hello, world!'\n\n    });\n\n  } catch (e) {\n\n    if (isDbError(e)) {\n\n      return new Response(`Cannot insert comment with id ${id}\\n\\n${e.message}`, { status: 400 });\n\n    }\n\n    return new Response('An unexpected error occurred', { status: 500 });\n\n  }\n\n  return new Response(null, { status: 201 });\n};\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/db in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add db\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/db.\n\n**Manual Installation Command**:\n\n```yaml\nnpm install @astrojs/db\n```\n\nThis snippet shows you how to manual installation command, which is an important aspect of @astrojs/db.\n\n**Add Integration to astro.config.mjs**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport db from '@astrojs/db';\n\nexport default defineConfig({\n\n  integrations: [\n   db()\n  ]\n});\n```\n\nThis snippet shows you how to add integration to astro.config.mjs, which is an important aspect of @astrojs/db.\n\n**Configure Database**:\n\n```yaml\nimport { defineDb } from 'astro:db';\n\nexport default defineDb({\n\n  tables: {},\n})\n```\n\nThis snippet shows you how to configure database, which is an important aspect of @astrojs/db.\n\n**Define Table with Columns**:\n\n```yaml\nimport { defineTable, column, NOW } from 'astro:db';\n\nconst Comment = defineTable({\n\n  columns: {\n\n    id: column.number({ primaryKey: true }),\n\n    author: column.text(),\n\n    content: column.text({ optional: true }),\n\n    published: column.date({ default: NOW }),\n\n  },\n});\n```\n\nThis snippet shows you how to define table with columns, which is an important aspect of @astrojs/db.\n\n**Define Table with Indexes**:\n\n```yaml\nimport { defineTable, column } from 'astro:db';\n\nconst Comment = defineTable({\n\n  columns: {\n\n    authorId: column.number(),\n\n    published: column.date(),\n\n    body: column.text(),\n\n  },\n\n  indexes: [\n    { on: [\"authorId\", \"published\"], unique: true },\n  ]\n});\n```\n\nThis snippet shows you how to define table with indexes, which is an important aspect of @astrojs/db.\n\n**Define Table with Foreign Keys**:\n\n```yaml\nimport { defineTable, column } from 'astro:db';\n\nconst Author = defineTable({\n\n  columns: {\n\n    firstName: column.text(),\n\n    lastName: column.text(),\n\n  },\n});\n\nconst Comment = defineTable({\n\n  columns: {\n\n    authorFirstName: column.text(),\n\n    authorLastName: column.text(),\n\n    body: column.text(),\n\n  },\n\n  foreignKeys: [\n    {\n      columns: [\"authorFirstName\", \"authorLastName\"],\n      references: () => [Author.columns.firstName, Author.columns.lastName],\n    },\n  ],\n});\n```\n\nThis snippet shows you how to define table with foreign keys, which is an important aspect of @astrojs/db.\n\n**Handle Database Error**:\n\n```yaml\nimport { db, Comment, isDbError } from 'astro:db';\n\nimport type { APIRoute } from 'astro';\n\nexport const POST: APIRoute = (ctx) => {\n\n  try {\n\n    await db.insert(Comment).values({\n\n      id: ctx.params.id,\n\n      content: 'Hello, world!'\n\n    });\n\n  } catch (e) {\n\n    if (isDbError(e)) {\n\n      return new Response(`Cannot insert comment with id ${id}\\n\\n${e.message}`, { status: 400 });\n\n    }\n\n    return new Response('An unexpected error occurred', { status: 500 });\n\n  }\n\n  return new Response(null, { status: 201 });\n};\n```\n\nThis snippet shows you how to handle database error, which is an important aspect of @astrojs/db.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "code_examples", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/db in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `astro add` command for automated setup of integrations.\n\nAlways verify your database configuration with `astro db verify` before pushing changes.\n\nUse the `--force-reset` flag with caution as it will reset all production data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/db", "title": "@astrojs/db", "description": "Astro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any libSQL-compatible database.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 02:18:20", "type": "best_practices", "page_metadata": {"ogSiteName": "Docs", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "description": "Learn how to use the @astrojs/db integration in your Astro project.", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogTitle": "@astrojs/db", "docsearch:language": "en", "og:locale": "en", "title": "@astrojs/db | Docs", "twitter:site": "astrodotbuild", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "og:title": "@astrojs/db", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to use the @astrojs/db integration in your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/db/", "og:description": "Learn how to use the @astrojs/db integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/db.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/db/", "scrapeId": "a1ee743e-4560-4aef-a564-a10855b19646", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/db", "url": "https://docs.astro.build/en/guides/integrations-guide/db/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Microsoft Azure is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Microsoft Azure in astro.\n\n# Deploy your Astro Site to Microsoft Azure\n\nThis guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nTo follow this guide, you will need:\n\n- An Azure account and a subscription key. You can create a [free Azure account here](https://azure.microsoft.com/free).\n- Your app code pushed to [GitHub](https://github.com/).\n- The [SWA Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) in [Visual Studio Code](https://code.visualstudio.com/).\n\n## How to deploy\n\n1. Open your project in VS Code.\n\n2. Open the Static Web Apps extension, sign in to Azure, and click the **+** button to create a new Static Web App. You will be prompted to designate which subscription key to use.\n\n3. Follow the wizard started by the extension to give your app a name, choose a framework preset, and designate the app root (usually `/`) and built file location (use `/dist`). Astro is not listed in the built-in templates in Azure so you will need to select `custom`. The wizard will run and will create a [GitHub Action](https://github.com/features/actions) in the `.github` folder of your repo. (This folder will be automatically created if it does not already exist.)\n\nThe GitHub Action will deploy your app (you can see its progress in your repo‚Äôs Actions tab on GitHub). When successfully completed, you can view your app at the address shown in the SWA Extension‚Äôs progress window by clicking the **Browse Website** button (this will appear after the GitHub Action has run).\n\n## Known Issues\n\nThe GitHub action yaml that is created for you assumes the use of node 14. This means the Astro build fails. To resolve this update your projects package.json file with this snippet.\n\n```\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n```\n\n## Official Resources\n\n- [Microsoft Azure Static Web Apps documentation](https://learn.microsoft.com/en-us/azure/static-web-apps/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "overview", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nTo follow this guide, you will need:\n\n- An Azure account and a subscription key. You can create a [free Azure account here](https://azure.microsoft.com/free).\n- Your app code pushed to [GitHub](https://github.com/).\n- The [SWA Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) in [Visual Studio Code](https://code.visualstudio.com/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "section_detail", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\n1. Open your project in VS Code.\n\n2. Open the Static Web Apps extension, sign in to Azure, and click the **+** button to create a new Static Web App. You will be prompted to designate which subscription key to use.\n\n3. Follow the wizard started by the extension to give your app a name, choose a framework preset, and designate the app root (usually `/`) and built file location (use `/dist`). Astro is not listed in the built-in templates in Azure so you will need to select `custom`. The wizard will run and will create a [GitHub Action](https://github.com/features/actions) in the `.github` folder of your repo. (This folder will be automatically created if it does not already exist.)\n\nThe GitHub Action will deploy your app (you can see its progress in your repo‚Äôs Actions tab on GitHub). When successfully completed, you can view your app at the address shown in the SWA Extension‚Äôs progress window by clicking the **Browse Website** button (this will appear after the GitHub Action has run)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "section_detail", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I known issues in astro?\n\nAssistant: To known issues in astro, here's what you do:\nThe GitHub action yaml that is created for you assumes the use of node 14. This means the Astro build fails. To resolve this update your projects package.json file with this snippet.\n\n```\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "section_detail", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- [Microsoft Azure Static Web Apps documentation](https://learn.microsoft.com/en-us/azure/static-web-apps/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "section_detail", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Microsoft Azure in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Update package.json for Node version**:\n\n```yaml\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n```\n\nThis snippet shows you how to update package.json for node version, which is an important aspect of deploy your astro site to microsoft azure.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "code_examples", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to Microsoft Azure in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have an Azure account and subscription key before starting the deployment process.\n\nUse the SWA Extension in Visual Studio Code for a smoother deployment experience.\n\nSelect 'custom' in the framework preset when deploying an Astro site.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "title": "Deploy your Astro Site to Microsoft Azure", "description": "This guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:18:37", "type": "best_practices", "page_metadata": {"og:title": "Deploy your Astro Site to Microsoft Azure", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "language": "en", "ogTitle": "Deploy your Astro Site to Microsoft Azure", "docsearch:language": "en", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web using Microsoft Azure.", "ogSiteName": "Docs", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "title": "Deploy your Astro Site to Microsoft Azure | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:description": "How to deploy your Astro site to the web using Microsoft Azure.", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/microsoft-azure.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "description": "How to deploy your Astro site to the web using Microsoft Azure.", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "twitter:site": "astrodotbuild", "scrapeId": "18516769-ae00-4080-a624-c86173270398", "sourceURL": "https://docs.astro.build/en/guides/deploy/microsoft-azure", "url": "https://docs.astro.build/en/guides/deploy/microsoft-azure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Check in: Unit 5 - Astro API is in astro?\n\nAssistant: Sure, I'd be happy to explain Check in: Unit 5 - Astro API in astro.\n\n# Check in: Unit 5 - Astro API\n\nNow that you have some blog posts, it‚Äôs time to use Astro‚Äôs API to work with your files!Here's a quick rundown of what this is about:\n\n## Looking ahead\n\nIn this unit, you‚Äôll supercharge your blog with an index page, tag pages, and an RSS feed.\n\nAlong the way, you‚Äôll learn how to use:\n\n- `import.meta.glob()` to access data from files in your project\n- `getStaticPaths()` to create multiple pages (routes) at once\n- The Astro RSS package to create an RSS feed\n\n## Checklist\n\n- I am ready to add some blog features to my Astro project!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api", "title": "Check in: Unit 5 - Astro API", "description": "Now that you have some blog posts, it‚Äôs time to use Astro‚Äôs API to work with your files!", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:22:55", "type": "overview", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "og:title": "Check in: Unit 5 - Astro API", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "og:site_name": "Docs", "ogTitle": "Check in: Unit 5 - Astro API", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "favicon": "https://docs.astro.build/favicon.ico", "title": "Check in: Unit 5 - Astro API | Docs", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "ogLocale": "en", "scrapeId": "2d82b8ef-a918-4c63-bc08-decdd1c15baa", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api", "url": "https://docs.astro.build/en/tutorial/5-astro-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I looking ahead in astro?\n\nAssistant: To looking ahead in astro, here's what you do:\nIn this unit, you‚Äôll supercharge your blog with an index page, tag pages, and an RSS feed.\n\nAlong the way, you‚Äôll learn how to use:\n\n- `import.meta.glob()` to access data from files in your project\n- `getStaticPaths()` to create multiple pages (routes) at once\n- The Astro RSS package to create an RSS feed.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api", "title": "Check in: Unit 5 - Astro API", "description": "Now that you have some blog posts, it‚Äôs time to use Astro‚Äôs API to work with your files!", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:22:55", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "og:title": "Check in: Unit 5 - Astro API", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "og:site_name": "Docs", "ogTitle": "Check in: Unit 5 - Astro API", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "favicon": "https://docs.astro.build/favicon.ico", "title": "Check in: Unit 5 - Astro API | Docs", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "ogLocale": "en", "scrapeId": "2d82b8ef-a918-4c63-bc08-decdd1c15baa", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api", "url": "https://docs.astro.build/en/tutorial/5-astro-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I am ready to add some blog features to my Astro project!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api", "title": "Check in: Unit 5 - Astro API", "description": "Now that you have some blog posts, it‚Äôs time to use Astro‚Äôs API to work with your files!", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:22:55", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "og:title": "Check in: Unit 5 - Astro API", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "og:site_name": "Docs", "ogTitle": "Check in: Unit 5 - Astro API", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "favicon": "https://docs.astro.build/favicon.ico", "title": "Check in: Unit 5 - Astro API | Docs", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nFetching and using data from project files to dynamically generate pages content and routes", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "ogLocale": "en", "scrapeId": "2d82b8ef-a918-4c63-bc08-decdd1c15baa", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api", "url": "https://docs.astro.build/en/tutorial/5-astro-api/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/partytown is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/partytown in astro.\n\n# @astrojs/partytown\n\nThis Astro integration enables Partytown in your Astro project.Here's a quick rundown of what this is about:\n\n## Why Astro Partytown\n\nPartytown is a lazy-loaded library to help relocate resource intensive scripts into a web worker, and off of the main thread. If you‚Äôre using third-party scripts for things like analytics or ads, Partytown is a great way to make sure that they don‚Äôt slow down your site. The Astro Partytown integration installs Partytown for you and makes sure it‚Äôs enabled on all of your pages.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead. Run one of the following commands in a new terminal window.\n\n## Manual Install\n\nFirst, install the `@astrojs/partytown` package. Then, apply the integration to your `astro.config.*` file using the `integrations` property.\n\n## Usage\n\nPartytown should be ready to go with zero config. If you have an existing 3rd party script on your site, try adding the `type=\"text/partytown\"` attribute.\n\n## Configuration\n\nTo configure this integration, pass a ‚Äòconfig‚Äô object to the `partytown()` function call in `astro.config.mjs`.\n\n## config.debug\n\nPartytown ships with a `debug` mode; enable or disable it by passing `true` or `false` to `config.debug`. If `debug` mode is enabled, it will output detailed logs to the browser console.\n\n## config.forward\n\nThird-party scripts typically add variables to the `window` object so that you can communicate with them throughout your site. But when a script is loaded in a web-worker, it doesn‚Äôt have access to that global `window` object. To solve this, Partytown can 'patch' variables to the global window object and forward them to the appropriate script.\n\n## Examples\n\nBrowse projects with Astro Partytown on GitHub for more examples!\n\n## More integrations\n\nVarious integrations available for front-end frameworks and SSR adapters.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "overview", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why astro partytown in astro?\n\nAssistant: To why astro partytown in astro, here's what you do:\nPartytown is a lazy-loaded library to help relocate resource intensive scripts into a web worker, and off of the main thread. If you‚Äôre using third-party scripts for things like analytics or ads, Partytown is a great way to make sure that they don‚Äôt slow down your site. The Astro Partytown integration installs Partytown for you and makes sure it‚Äôs enabled on all of your pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead. Run one of the following commands in a new terminal window..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/partytown` package. Then, apply the integration to your `astro.config.*` file using the `integrations` property..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nPartytown should be ready to go with zero config. If you have an existing 3rd party script on your site, try adding the `type=\"text/partytown\"` attribute..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\nTo configure this integration, pass a ‚Äòconfig‚Äô object to the `partytown()` function call in `astro.config.mjs`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I config.debug in astro?\n\nAssistant: To config.debug in astro, here's what you do:\nPartytown ships with a `debug` mode; enable or disable it by passing `true` or `false` to `config.debug`. If `debug` mode is enabled, it will output detailed logs to the browser console..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I config.forward in astro?\n\nAssistant: To config.forward in astro, here's what you do:\nThird-party scripts typically add variables to the `window` object so that you can communicate with them throughout your site. But when a script is loaded in a web-worker, it doesn‚Äôt have access to that global `window` object. To solve this, Partytown can 'patch' variables to the global window object and forward them to the appropriate script..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\nBrowse projects with Astro Partytown on GitHub for more examples!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I more integrations in astro?\n\nAssistant: To more integrations in astro, here's what you do:\nVarious integrations available for front-end frameworks and SSR adapters..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/partytown in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add partytown\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/partytown.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/partytown\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/partytown.\n\n**Integration in astro.config.js**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport partytown from '@astrojs/partytown';\n\nexport default defineConfig({\n  // ...\n  integrations: [partytown()],\n});\n```\n\nThis snippet shows you how to integration in astro.config.js, which is an important aspect of @astrojs/partytown.\n\n**Usage Example**:\n\n```yaml\n<script type=\"text/partytown\" src=\"fancy-analytics.js\"></script>\n```\n\nThis snippet shows you how to usage example, which is an important aspect of @astrojs/partytown.\n\n**Configuration Example**:\n\n```yaml\nexport default defineConfig({\n  // ...\n  integrations: [\n    partytown({\n      config: {\n        // options go here\n      },\n    }),\n  ],\n});\n```\n\nThis snippet shows you how to configuration example, which is an important aspect of @astrojs/partytown.\n\n**Debug Mode Example**:\n\n```yaml\nexport default defineConfig({\n  // ...\n  integrations: [\n    partytown({\n      config: { debug: false },\n    }),\n  ],\n});\n```\n\nThis snippet shows you how to debug mode example, which is an important aspect of @astrojs/partytown.\n\n**Forwarding Example**:\n\n```yaml\nexport default defineConfig({\n  // ...\n  integrations: [\n    partytown({\n      config: { forward: ['dataLayer.push'], },\n    }),\n  ],\n});\n```\n\nThis snippet shows you how to forwarding example, which is an important aspect of @astrojs/partytown.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "code_examples", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/partytown in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Partytown to offload resource-intensive scripts to web workers to improve site performance.\n\nEnable debug mode during development to get detailed logs in the console.\n\nSpecify which variables to forward to the global window object to ensure communication with third-party scripts.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/partytown", "title": "@astrojs/partytown", "description": "This Astro integration enables Partytown in your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:24:15", "type": "best_practices", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogDescription": "Learn how to use the @astrojs/partytown integration in your Astro project.", "og:title": "@astrojs/partytown", "description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "twitter:card": "summary_large_image", "title": "@astrojs/partytown | Docs", "ogTitle": "@astrojs/partytown", "og:locale": "en", "og:site_name": "Docs", "og:description": "Learn how to use the @astrojs/partytown integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/partytown.webp", "og:type": "article", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "scrapeId": "7439e71b-5a67-476b-85b2-56b5912cee88", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/partytown", "url": "https://docs.astro.build/en/guides/integrations-guide/partytown/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build your first layout is in astro?\n\nAssistant: Sure, I'd be happy to explain Build your first layout in astro.\n\n# Build your first layout\n\nGet ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.Here's a quick rundown of what this is about:\n\n## Create your first layout component\n\n1. Create a new file at the location `src/layouts/BaseLayout.astro`. (You will need to create a new `layouts` folder first.)\n\n2. Copy the **entire contents** of `index.astro` into your new file, `BaseLayout.astro`.\n\n``` \n\n   ---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<html lang=\"en\">\n\n     <head>\n\n       <meta charset=\"utf-8\" />\n\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n       <meta name=\"viewport\" content=\"width=device-width\" />\n\n       <meta name=\"generator\" content={Astro.generator} />\n\n       <title>{pageTitle}</title>\n\n     </head>\n\n     <body>\n\n       <Header />\n\n       <h1>{pageTitle}</h1>\n\n       <Footer />\n\n       <script>\n\n         import \"../scripts/menu.js\";\n\n       </script>\n\n     </body>\n\n</html>\n```\n\n## Use your layout on a page\n\n3. Replace the code at `src/pages/index.astro` with the following:\n\n``` \n\n   ---\n\nimport BaseLayout from '../layouts/BaseLayout.astro';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<BaseLayout>\n\n     <h2>My awesome blog subtitle</h2>\n\n</BaseLayout>\n```\n\n4. Check the browser preview again to notice what did (or, spoiler alert: did _not_!) change.\n\n5. Add a `<slot />` element to `src/layouts/BaseLayout.astro` just above the footer component, then check the browser preview of your Home page and notice what really _did_ change this time!\n\n``` \n\n   ---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<html lang=\"en\">\n\n     <head>\n\n       <meta charset=\"utf-8\" />\n\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n       <meta name=\"viewport\" content=\"width=device-width\" />\n\n       <meta name=\"generator\" content={Astro.generator} />\n\n       <title>{pageTitle}</title>\n\n     </head>\n\n     <body>\n\n       <Header />\n\n       <h1>{pageTitle}</h1>\n\n       <slot />\n\n       <Footer />\n\n       <script>\n\n         import \"../scripts/menu.js\";\n\n       </script>\n\n     </body>\n\n</html>\n``` \n\nThe `<slot />` allows you to inject (or ‚Äúslot in‚Äù) **child content** written between opening and closing `<Component></Component>` tags to any `Component.astro` file.\n\n## Pass page-specific values as props\n\n6. Pass the page title to your layout component from `index.astro` using a component attribute:\n\n``` \n\n   ---\n\nimport BaseLayout from '../layouts/BaseLayout.astro';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<BaseLayout pageTitle={pageTitle}>\n\n     <h2>My awesome blog subtitle</h2>\n\n</BaseLayout>\n```\n\n7. Change the script of your `BaseLayout.astro` layout component to receive a page title via `Astro.props` instead of defining it as a constant.\n\n``` \n\n   ---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\nconst { pageTitle } = Astro.props;\n\n   ---\n```\n\n8. Check your browser preview to verify that your page title has not changed. It has the same value, but is now being rendered dynamically. And now, each individual page can specify its own title to the layout.\n\n## Try it yourself - Use your layout everywhere\n\n**Refactor** your other pages ( `blog.astro` and `about.astro`) so that they use your new `<BaseLayout>` component to render the common page elements.\n\nDon‚Äôt forget to:\n\n- Pass a page title as props via a component attribute.\n\n- Let the layout be responsible for the HTML rendering of any common elements.\n\n- Move any existing `<style>` tags in the page `<head>` with styles you wish to keep to the page HTML template.\n\n- Delete anything from each individual page that is now being handled by the layout, including:\n  - HTML elements\n  - Components and their imports\n  - CSS rules in a `<style>` tag (e.g. `<h1>` in your About page)\n  - `<script>` tags\n\n## Test your knowledge\n\n1. An Astro component ( `.astro` file) can function as a:\n\n1. page\n2. UI component\n3. layout\n4. all of the above, because Astro components are so functional! üèóÔ∏è\n\n2. To display a page title on the page, you can:\n\n1. use a standard HTML element on the page with static text (e.g `<h1>Home Page</h1>`)\n\n2. use a standard HTML element on the page referring to a variable defined in your component‚Äôs frontmatter script (e.g. `<h1>{pageTitle}</h1>`)\n\n3. use a layout component on the page, passing the title as a component attribute (e.g. `<BaseLayout title=\"Home Page\" />` or `<BaseLayout title={pageTitle} />`)\n\n4. all of the above, because Astro lets you use plain HTML or supercharge it with some script and components! üí™\n\n3. Information can be passed from one component to another by:\n\n1. importing a UI component and rendering it in the template of another component\n\n2. passing props to a component where it is rendered via a component attribute\n\n3. sending HTML content to be rendered inside another component using a `<slot />` placeholder\n\n4. all of the above, because Astro was built to take advantage of component-based design! üß©\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "overview", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create your first layout component in astro?\n\nAssistant: To create your first layout component in astro, here's what you do:\n1. Create a new file at the location `src/layouts/BaseLayout.astro`. (You will need to create a new `layouts` folder first.)\n\n2. Copy the **entire contents** of `index.astro` into your new file, `BaseLayout.astro`.\n\n``` \n\n   ---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<html lang=\"en\">\n\n     <head>\n\n       <meta charset=\"utf-8\" />\n\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n       <meta name=\"viewport\" content=\"width=device-width\" />\n\n       <meta name=\"generator\" content={Astro.generator} />\n\n       <title>{pageTitle}</title>\n\n     </head>\n\n     <body>\n\n       <Header />\n\n       <h1>{pageTitle}</h1>\n\n       <Footer />\n\n       <script>\n\n         import \"../scripts/menu.js\";\n\n       </script>\n\n     </body>\n\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use your layout on a page in astro?\n\nAssistant: To use your layout on a page in astro, here's what you do:\n3. Replace the code at `src/pages/index.astro` with the following:\n\n``` \n\n   ---\n\nimport BaseLayout from '../layouts/BaseLayout.astro';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<BaseLayout>\n\n     <h2>My awesome blog subtitle</h2>\n\n</BaseLayout>\n```\n\n4. Check the browser preview again to notice what did (or, spoiler alert: did _not_!) change.\n\n5. Add a `<slot />` element to `src/layouts/BaseLayout.astro` just above the footer component, then check the browser preview of your Home page and notice what really _did_ change this time!\n\n``` \n\n   ---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<html lang=\"en\">\n\n     <head>\n\n       <meta charset=\"utf-8\" />\n\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n       <meta name=\"viewport\" content=\"width=device-width\" />\n\n       <meta name=\"generator\" content={Astro.generator} />\n\n       <title>{pageTitle}</title>\n\n     </head>\n\n     <body>\n\n       <Header />\n\n       <h1>{pageTitle}</h1>\n\n       <slot />\n\n       <Footer />\n\n       <script>\n\n         import \"../scripts/menu.js\";\n\n       </script>\n\n     </body>\n\n</html>\n``` \n\nThe `<slot />` allows you to inject (or ‚Äúslot in‚Äù) **child content** written between opening and closing `<Component></Component>` tags to any `Component.astro` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I pass page-specific values as props in astro?\n\nAssistant: To pass page-specific values as props in astro, here's what you do:\n6. Pass the page title to your layout component from `index.astro` using a component attribute:\n\n``` \n\n   ---\n\nimport BaseLayout from '../layouts/BaseLayout.astro';\n\nconst pageTitle = \"Home Page\";\n\n   ---\n\n<BaseLayout pageTitle={pageTitle}>\n\n     <h2>My awesome blog subtitle</h2>\n\n</BaseLayout>\n```\n\n7. Change the script of your `BaseLayout.astro` layout component to receive a page title via `Astro.props` instead of defining it as a constant.\n\n``` \n\n   ---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\nconst { pageTitle } = Astro.props;\n\n   ---\n```\n\n8. Check your browser preview to verify that your page title has not changed. It has the same value, but is now being rendered dynamically. And now, each individual page can specify its own title to the layout..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - use your layout everywhere in astro?\n\nAssistant: To try it yourself - use your layout everywhere in astro, here's what you do:\n**Refactor** your other pages ( `blog.astro` and `about.astro`) so that they use your new `<BaseLayout>` component to render the common page elements.\n\nDon‚Äôt forget to:\n\n- Pass a page title as props via a component attribute.\n\n- Let the layout be responsible for the HTML rendering of any common elements.\n\n- Move any existing `<style>` tags in the page `<head>` with styles you wish to keep to the page HTML template.\n\n- Delete anything from each individual page that is now being handled by the layout, including:\n  - HTML elements\n  - Components and their imports\n  - CSS rules in a `<style>` tag (e.g. `<h1>` in your About page)\n  - `<script>` tags.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. An Astro component ( `.astro` file) can function as a:\n\n1. page\n2. UI component\n3. layout\n4. all of the above, because Astro components are so functional! üèóÔ∏è\n\n2. To display a page title on the page, you can:\n\n1. use a standard HTML element on the page with static text (e.g `<h1>Home Page</h1>`)\n\n2. use a standard HTML element on the page referring to a variable defined in your component‚Äôs frontmatter script (e.g. `<h1>{pageTitle}</h1>`)\n\n3. use a layout component on the page, passing the title as a component attribute (e.g. `<BaseLayout title=\"Home Page\" />` or `<BaseLayout title={pageTitle} />`)\n\n4. all of the above, because Astro lets you use plain HTML or supercharge it with some script and components! üí™\n\n3. Information can be passed from one component to another by:\n\n1. importing a UI component and rendering it in the template of another component\n\n2. passing props to a component where it is rendered via a component attribute\n\n3. sending HTML content to be rendered inside another component using a `<slot />` placeholder\n\n4. all of the above, because Astro was built to take advantage of component-based design! üß©.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Build your first layout in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create your first layout component**:\n\n```yaml\n---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\n---\n\n<html lang=\"en\">\n\n     <head>\n\n       <meta charset=\"utf-8\" />\n\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n       <meta name=\"viewport\" content=\"width=device-width\" />\n\n       <meta name=\"generator\" content={Astro.generator} />\n\n       <title>{pageTitle}</title>\n\n     </head>\n\n     <body>\n\n       <Header />\n\n       <h1>{pageTitle}</h1>\n\n       <Footer />\n\n       <script>\n\n         import \"../scripts/menu.js\";\n\n       </script>\n\n     </body>\n\n</html>\n```\n\nThis snippet shows you how to create your first layout component, which is an important aspect of build your first layout.\n\n**Use your layout on a page**:\n\n```yaml\n---\n\nimport BaseLayout from '../layouts/BaseLayout.astro';\n\nconst pageTitle = \"Home Page\";\n\n---\n\n<BaseLayout>\n\n     <h2>My awesome blog subtitle</h2>\n\n</BaseLayout>\n```\n\nThis snippet shows you how to use your layout on a page, which is an important aspect of build your first layout.\n\n**Add a <slot /> element**:\n\n```yaml\n---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\n---\n\n<html lang=\"en\">\n\n     <head>\n\n       <meta charset=\"utf-8\" />\n\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n       <meta name=\"viewport\" content=\"width=device-width\" />\n\n       <meta name=\"generator\" content={Astro.generator} />\n\n       <title>{pageTitle}</title>\n\n     </head>\n\n     <body>\n\n       <Header />\n\n       <h1>{pageTitle}</h1>\n\n       <slot />\n\n       <Footer />\n\n       <script>\n\n         import \"../scripts/menu.js\";\n\n       </script>\n\n     </body>\n\n</html>\n```\n\nThis snippet shows you how to add a <slot /> element, which is an important aspect of build your first layout.\n\n**Pass page-specific values as props**:\n\n```yaml\n---\n\nimport BaseLayout from '../layouts/BaseLayout.astro';\n\nconst pageTitle = \"Home Page\";\n\n---\n\n<BaseLayout pageTitle={pageTitle}>\n\n     <h2>My awesome blog subtitle</h2>\n\n</BaseLayout>\n```\n\nThis snippet shows you how to pass page-specific values as props, which is an important aspect of build your first layout.\n\n**Change the script to receive props**:\n\n```yaml\n---\n\nimport Header from '../components/Header.astro';\n\nimport Footer from '../components/Footer.astro';\n\nimport '../styles/global.css';\n\nconst pageTitle = \"Home Page\";\n\nconst { pageTitle } = Astro.props;\n\n---\n```\n\nThis snippet shows you how to change the script to receive props, which is an important aspect of build your first layout.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "code_examples", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build your first layout in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRefactor common elements into a page layout.\n\nUse an Astro <slot /> element to place page contents within a layout.\n\nPass page-specific values as props to its layout.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/1", "title": "Build your first layout", "description": "Get ready to refactor common elements into a page layout, use an Astro <slot /> element to place page contents within a layout, and pass page-specific values as props to its layout.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:24:49", "type": "best_practices", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/1/", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "og:site_name": "Docs", "ogLocale": "en", "ogTitle": "Build your first layout", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "og:locale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "description": "Tutorial: Build your first Astro blog ‚Äî\nRefactor common elements into a reusable page layout", "language": "en", "title": "Build your first layout | Docs", "ogSiteName": "Docs", "og:title": "Build your first layout", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/1.webp", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "af55220a-a5cf-4e09-bc3a-6b64efa8c902", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/1", "url": "https://docs.astro.build/en/tutorial/4-layouts/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your site to the web is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your site to the web in astro.\n\n# Deploy your site to the web\n\nGet ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.Here's a quick rundown of what this is about:\n\n## Create a new Netlify site\n\n1. Create a free account at [Netlify](https://netlify.com/) if you do not already have one.\n\nMake a note of your username. You will view your dashboard and any sites you create at `https://app.netlify.com/teams/username`\n\n2. Click `Add new site` > `Import an existing project`.\n\nYou will be asked to connect to a Git provider. Choose GitHub and follow the steps onscreen to authenticate your GitHub account. Then, choose your Astro project‚Äôs GitHub repository from the list provided.\n\n3. At the final step, Netlify will show you your app‚Äôs site settings. The defaults should be correct for your Astro project, so you can scroll down and click `Deploy site`.\n\n\nCongratulations, you have an Astro website!\n\n## Change your project name\n\nOn your site‚Äôs overview page in Netlify, you will see your randomly-generated project name, and your website URL of the form `https://project-name-123456.netlify.app`. You can change your project name to something more memorable, and this will automatically update your URL.\n\n## Visit your new website\n\nClick on the URL in your site settings, or type it into a browser window to view your new website.\n\n## Test your knowledge\n\nYou want to update the home page of your existing website. What steps do you take?\n\n1. I open a terminal, run `create astro`, and then visit my Netlify URL.\n\n2. I change a setting in my Netlify app, then start a new Astro project on astro.new.\n\n3. I make an edit to `index.astro`. I commit and push my changes to GitHub. Netlify will handle the rest!\n\n## Checklist\n\n- I can view my updated website online.\n- I‚Äôm ready to get back to coding!\n\n## Resources\n\n- [A step-by-step guide to deploying on Netlify](https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/) external\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "overview", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a new netlify site in astro?\n\nAssistant: To create a new netlify site in astro, here's what you do:\n1. Create a free account at [Netlify](https://netlify.com/) if you do not already have one.\n\nMake a note of your username. You will view your dashboard and any sites you create at `https://app.netlify.com/teams/username`\n\n2. Click `Add new site` > `Import an existing project`.\n\nYou will be asked to connect to a Git provider. Choose GitHub and follow the steps onscreen to authenticate your GitHub account. Then, choose your Astro project‚Äôs GitHub repository from the list provided.\n\n3. At the final step, Netlify will show you your app‚Äôs site settings. The defaults should be correct for your Astro project, so you can scroll down and click `Deploy site`.\n\n\nCongratulations, you have an Astro website!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I change your project name in astro?\n\nAssistant: To change your project name in astro, here's what you do:\nOn your site‚Äôs overview page in Netlify, you will see your randomly-generated project name, and your website URL of the form `https://project-name-123456.netlify.app`. You can change your project name to something more memorable, and this will automatically update your URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I visit your new website in astro?\n\nAssistant: To visit your new website in astro, here's what you do:\nClick on the URL in your site settings, or type it into a browser window to view your new website..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\nYou want to update the home page of your existing website. What steps do you take?\n\n1. I open a terminal, run `create astro`, and then visit my Netlify URL.\n\n2. I change a setting in my Netlify app, then start a new Astro project on astro.new.\n\n3. I make an edit to `index.astro`. I commit and push my changes to GitHub. Netlify will handle the rest!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can view my updated website online.\n- I‚Äôm ready to get back to coding!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [A step-by-step guide to deploying on Netlify](https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/) external.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your site to the web in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake a note of your Netlify username for easy access to your dashboard.\n\nUse memorable project names for easier identification of your sites.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/5", "title": "Deploy your site to the web", "description": "Get ready to add your GitHub repository as a new Netlify app and deploy your Astro site to the web.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:25:07", "type": "best_practices", "page_metadata": {"ogLocale": "en", "og:type": "article", "ogTitle": "Deploy your site to the web", "og:title": "Deploy your site to the web", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "twitter:site": "astrodotbuild", "language": "en", "twitter:card": "summary_large_image", "title": "Deploy your site to the web | Docs", "og:url": "https://docs.astro.build/en/tutorial/1-setup/5/", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/5/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "ogSiteName": "Docs", "docsearch:language": "en", "description": "Tutorial: Build your first Astro blog ‚Äî\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/5.webp", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "264c263a-7a96-436c-9436-3f30e21c939c", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/5", "url": "https://docs.astro.build/en/tutorial/1-setup/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Style your About page is in astro?\n\nAssistant: Sure, I'd be happy to explain Style your About page in astro.\n\n# Style your About page\n\nNow that you have an About page with content about you, it‚Äôs time to style it!Here's a quick rundown of what this is about:\n\n## Style an individual page\n\nUsing Astro‚Äôs own `<style></style>` tags, you can style items on your page. Adding **attributes** and **directives** to these tags gives you even more ways to style.\n\n1. Copy the following code and paste it into `src/pages/about.astro`:\n\n\n```html\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>{pageTitle}</title>\n       <style>\n         h1 {\n           color: purple;\n           font-size: 4rem;\n         }\n       </style>\n     </head>\n```  \n\nCheck all three pages in your browser preview.\n   - Which color is the page title of:\n     - Your Home page? black\n     - Your About page? purple\n     - Your Blog page? black\n   - The page with the biggest title text is? Your About page\n2. Add the class name `skill` to the generated `<li>` elements on your About page, so you can style them. Your code should now look like this:\n\n\n```html\n<p>My skills are:</p>\n<ul>\n     {skills.map((skill) => <li class=\"skill\">{skill}</li>)}\n</ul>\n```\n\n3. Add the following code to your existing style tag:\n\n\n```html\n<style>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: green;\n       font-weight: bold;\n     }\n</style>\n```\n\n4. Visit your About page in your browser again, and verify, through visual inspection or dev tools, that each item in your list of skills is now green and bold.\n\n## Use your first CSS variable\n\nThe Astro `<style>` tag can also reference any variables from your frontmatter script using the `define:vars={ {...} }` directive. You can **define variables within your code fence**, then **use them as CSS variables in your style tag**.\n\n1. Define a `skillColor` variable by adding it to the frontmatter script of `src/pages/about.astro` like this:\n\n\n```javascript\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\nconst skillColor = \"navy\";\n---\n```\n\n2. Update your existing `<style>` tag below to first define, then use this `skillColor` variable inside double curly braces.\n\n\n```html\n<style define:vars={{skillColor}}>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: green;\n       color: var(--skillColor);\n       font-weight: bold;\n     }\n</style>\n```\n\n3. Check your About page in your browser preview. You should see that the skills are now navy blue, as set by the `skillColor` variable passed to the `define:vars` directive.\n\n## Try it yourself - Define CSS variables\n\n1. Update the `<style>` tag on your About page so that it matches the one below.\n\n\n```html\n<style define:vars={{skillColor, fontWeight, textCase}}>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: var(--skillColor);\n       font-weight: var(--fontWeight);\n       text-transform: var(--textCase);\n     }\n</style>\n```\n\n2. Add any missing variable definitions in your frontmatter script so that your new `<style>` tag successfully applies these styles to your list of skills:\n   - The text color is navy blue\n   - The text is bold\n   - The list items are in all-caps (all uppercase letters)\n\n‚úÖ Show me the code! ‚úÖ\n\n```\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n  firstName: \"Sarah\",\n  country: \"Canada\",\n  occupation: \"Technical Writer\",\n  hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\nconst skillColor = \"navy\";\nconst fontWeight = \"bold\";\nconst textCase = \"uppercase\";\n---\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/4", "title": "Style your About page", "description": "Now that you have an About page with content about you, it‚Äôs time to style it!", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:50", "type": "overview", "page_metadata": {"og:site_name": "Docs", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Style your About page", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "ogSiteName": "Docs", "og:type": "article", "title": "Style your About page | Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "og:title": "Style your About page", "og:locale": "en", "scrapeId": "561a6211-8a1f-47d3-9113-8c71df163a1e", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/4", "url": "https://docs.astro.build/en/tutorial/2-pages/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I style an individual page in astro?\n\nAssistant: To style an individual page in astro, here's what you do:\nUsing Astro‚Äôs own `<style></style>` tags, you can style items on your page. Adding **attributes** and **directives** to these tags gives you even more ways to style.\n\n1. Copy the following code and paste it into `src/pages/about.astro`:\n\n\n```html\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>{pageTitle}</title>\n       <style>\n         h1 {\n           color: purple;\n           font-size: 4rem;\n         }\n       </style>\n     </head>\n```  \n\nCheck all three pages in your browser preview.\n   - Which color is the page title of:\n     - Your Home page? black\n     - Your About page? purple\n     - Your Blog page? black\n   - The page with the biggest title text is? Your About page\n2. Add the class name `skill` to the generated `<li>` elements on your About page, so you can style them. Your code should now look like this:\n\n\n```html\n<p>My skills are:</p>\n<ul>\n     {skills.map((skill) => <li class=\"skill\">{skill}</li>)}\n</ul>\n```\n\n3. Add the following code to your existing style tag:\n\n\n```html\n<style>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: green;\n       font-weight: bold;\n     }\n</style>\n```\n\n4. Visit your About page in your browser again, and verify, through visual inspection or dev tools, that each item in your list of skills is now green and bold..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/4", "title": "Style your About page", "description": "Now that you have an About page with content about you, it‚Äôs time to style it!", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:50", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Style your About page", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "ogSiteName": "Docs", "og:type": "article", "title": "Style your About page | Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "og:title": "Style your About page", "og:locale": "en", "scrapeId": "561a6211-8a1f-47d3-9113-8c71df163a1e", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/4", "url": "https://docs.astro.build/en/tutorial/2-pages/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use your first css variable in astro?\n\nAssistant: To use your first css variable in astro, here's what you do:\nThe Astro `<style>` tag can also reference any variables from your frontmatter script using the `define:vars={ {...} }` directive. You can **define variables within your code fence**, then **use them as CSS variables in your style tag**.\n\n1. Define a `skillColor` variable by adding it to the frontmatter script of `src/pages/about.astro` like this:\n\n\n```javascript\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\nconst skillColor = \"navy\";\n---\n```\n\n2. Update your existing `<style>` tag below to first define, then use this `skillColor` variable inside double curly braces.\n\n\n```html\n<style define:vars={{skillColor}}>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: green;\n       color: var(--skillColor);\n       font-weight: bold;\n     }\n</style>\n```\n\n3. Check your About page in your browser preview. You should see that the skills are now navy blue, as set by the `skillColor` variable passed to the `define:vars` directive..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/4", "title": "Style your About page", "description": "Now that you have an About page with content about you, it‚Äôs time to style it!", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:50", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Style your About page", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "ogSiteName": "Docs", "og:type": "article", "title": "Style your About page | Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "og:title": "Style your About page", "og:locale": "en", "scrapeId": "561a6211-8a1f-47d3-9113-8c71df163a1e", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/4", "url": "https://docs.astro.build/en/tutorial/2-pages/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - define css variables in astro?\n\nAssistant: To try it yourself - define css variables in astro, here's what you do:\n1. Update the `<style>` tag on your About page so that it matches the one below.\n\n\n```html\n<style define:vars={{skillColor, fontWeight, textCase}}>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: var(--skillColor);\n       font-weight: var(--fontWeight);\n       text-transform: var(--textCase);\n     }\n</style>\n```\n\n2. Add any missing variable definitions in your frontmatter script so that your new `<style>` tag successfully applies these styles to your list of skills:\n   - The text color is navy blue\n   - The text is bold\n   - The list items are in all-caps (all uppercase letters)\n\n‚úÖ Show me the code! ‚úÖ\n\n```\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n  firstName: \"Sarah\",\n  country: \"Canada\",\n  occupation: \"Technical Writer\",\n  hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\nconst skillColor = \"navy\";\nconst fontWeight = \"bold\";\nconst textCase = \"uppercase\";\n---\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/4", "title": "Style your About page", "description": "Now that you have an About page with content about you, it‚Äôs time to style it!", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:50", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Style your About page", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "ogSiteName": "Docs", "og:type": "article", "title": "Style your About page | Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "og:title": "Style your About page", "og:locale": "en", "scrapeId": "561a6211-8a1f-47d3-9113-8c71df163a1e", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/4", "url": "https://docs.astro.build/en/tutorial/2-pages/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Style your About page in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initial HTML Structure**:\n\n```yaml\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>{pageTitle}</title>\n       <style>\n         h1 {\n           color: purple;\n           font-size: 4rem;\n         }\n       </style>\n     </head>\n\n```\n\nThis snippet shows you how to initial html structure, which is an important aspect of style your about page.\n\n**Skills List with Class**:\n\n```yaml\n<p>My skills are:</p>\n<ul>\n     {skills.map((skill) => <li class=\"skill\">{skill}</li>)}\n</ul>\n```\n\nThis snippet shows you how to skills list with class, which is an important aspect of style your about page.\n\n**Updated Style Tag with Skill Class**:\n\n```yaml\n<style>\n     h1 {\n       color: purple;\n       font-size: 4rem;\n     }\n     .skill {\n       color: green;\n       font-weight: bold;\n     }\n</style>\n```\n\nThis snippet shows you how to updated style tag with skill class, which is an important aspect of style your about page.\n\n**Define Skill Color Variable**:\n\n```yaml\n---\nconst pageTitle = \"About Me\";\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\nconst happy = true;\nconst finished = false;\nconst goal = 3;\nconst skillColor = \"navy\";\n---\n```\n\nThis snippet shows you how to define skill color variable, which is an important aspect of style your about page.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/4", "title": "Style your About page", "description": "Now that you have an About page with content about you, it‚Äôs time to style it!", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:50", "type": "code_examples", "page_metadata": {"og:site_name": "Docs", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Style your About page", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "ogSiteName": "Docs", "og:type": "article", "title": "Style your About page | Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "og:title": "Style your About page", "og:locale": "en", "scrapeId": "561a6211-8a1f-47d3-9113-8c71df163a1e", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/4", "url": "https://docs.astro.build/en/tutorial/2-pages/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Style your About page in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Astro‚Äôs `<style>` tags to style individual pages effectively.\n\nUtilize CSS variables for dynamic styling and easier maintenance.\n\nAlways verify styles visually in the browser after making changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/4", "title": "Style your About page", "description": "Now that you have an About page with content about you, it‚Äôs time to style it!", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:50", "type": "best_practices", "page_metadata": {"og:site_name": "Docs", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Style your About page", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "ogSiteName": "Docs", "og:type": "article", "title": "Style your About page | Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/4/", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/4.webp", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd an Astro style tag for scoped styling on the page", "og:title": "Style your About page", "og:locale": "en", "scrapeId": "561a6211-8a1f-47d3-9113-8c71df163a1e", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/4", "url": "https://docs.astro.build/en/tutorial/2-pages/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/mdx is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/mdx in astro.\n\n# @astrojs/mdx\n\nThis Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.Here's a quick rundown of what this is about:\n\n## Why MDX?\n\nMDX allows you to use variables, JSX expressions and components within Markdown content in Astro. If you have existing content authored in MDX, this integration allows you to bring those files to your Astro project.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add mdx\n```\n\n```\npnpm astro add mdx\n```\n\n```\nyarn astro add mdx\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/mdx` package:\n\n```\nnpm install @astrojs/mdx\n```\n\n```\npnpm add @astrojs/mdx\n```\n\n```\nyarn add @astrojs/mdx\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [mdx()],\n\n});\n```\n\n## Editor Integration\n\nFor editor support in VS Code, install the official MDX extension. For other editors, use the MDX language server.\n\n## Usage\n\nVisit the MDX docs to learn about using standard MDX features.\n\n## MDX in Astro\n\nAdding the MDX integration enhances your Markdown authoring with JSX variables, expressions and components. It also adds extra features to standard MDX, including support for Markdown-style frontmatter in MDX. This allows you to use most of Astro‚Äôs built-in Markdown features. .mdx files must be written in MDX syntax rather than Astro‚Äôs HTML-like syntax.\n\n## Using MDX with content collections\n\nTo include MDX files in a content collection, make sure that your collection loader is configured to load content from .mdx files:\n\n```\nimport { defineCollection, z } from 'astro:content';\n\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n\n  loader: glob({ pattern: \"**/*.{md,mdx}\", base: \"./src/blog\" }),\n\n  schema: z.object({\n\n    title: z.string(),\n\n    description: z.string(),\n\n    pubDate: z.coerce.date(),\n\n  })\n\n});\n\nexport const collections = { blog };\n```\n\n## Using Exported Variables in MDX\n\nMDX supports using export statements to add variables to your MDX content or to export data to a component that imports it.\n\nFor example, you can export a title field from an MDX page or component to use as a heading with {JSX expressions}:\n\n```\nexport const title = 'My first MDX post'\n\n# {title}\n```\n\nOr you can use that exported title in your page using import and import.meta.glob() statements:\n\n```\n---\n\nconst matches = import.meta.glob('./posts/*.mdx', { eager: true });\n\nconst posts = Object.values(matches);\n\n---\n\n{posts.map(post => <p>{post.title}</p>) }\n```\n\n## Exported Properties\n\nThe following properties are available to a .astro component when using an import statement or import.meta.glob():\n\n- **`file`** - The absolute file path (e.g. /home/user/projects/.../file.mdx).\n- **`url`** - The URL of the page (e.g. /en/guides/markdown-content).\n- **`frontmatter`** - Contains any data specified in the file‚Äôs YAML/TOML frontmatter.\n- **`getHeadings()`** - An async function that returns an array of all headings ( <h1> to <h6>) in the file with the type: { depth: number; slug: string; text: string }[]. Each heading‚Äôs slug corresponds to the generated ID for a given heading and can be used for anchor links.\n- **`<Content />`** - A component that returns the full, rendered contents of the file.\n- **(any `export` value)** - MDX files can also export data with an export statement.\n\n## Using Frontmatter Variables in MDX\n\nThe Astro MDX integration includes support for using frontmatter in MDX by default. Add frontmatter properties just as you would in Markdown files, and these variables are available to use in the template, and as named properties when importing the file somewhere else.\n\n```\n---\n\ntitle: 'My first MDX post'\n\nauthor: 'Houston'\n\n---\n\n# {frontmatter.title}\n\nWritten by: {frontmatter.author}\n```\n\n## Using Components in MDX\n\nAfter installing the MDX integration, you can import and use both Astro components and UI framework components in MDX (.mdx) files just as you would use them in any other Astro component. Don‚Äôt forget to include a client:directive on your UI framework components, if necessary!\n\n```\n---\n\ntitle: My first post\n\n---\n\nimport ReactCounter from '../components/ReactCounter.jsx';\n\nI just started my new Astro blog!\n\nHere is my counter component, working in MDX:\n\n<ReactCounter client:load />\n```\n\n## Custom components with imported MDX\n\nWhen rendering imported MDX content, custom components can be passed via the components prop.\n\n```\n---\n\nimport { Content, components } from '../content.mdx';\n\nimport Heading from '../Heading.astro';\n\n---\n\n<!-- Creates a custom <h1> for the # syntax, _and_ applies any custom components defined in `content.mdx` -->\n\n<Content components={{...components, h1: Heading }} />\n```\n\n## Assigning Custom Components to HTML elements\n\nWith MDX, you can map Markdown syntax to custom components instead of their standard HTML elements. This allows you to write in standard Markdown syntax, but apply special component styling to selected elements.\n\nImport your custom component into your .mdx file, then export a components object that maps the standard HTML element to your custom component:\n\n```\nimport Blockquote from '../components/Blockquote.astro';\n\nexport const components = {blockquote: Blockquote}\n\n> This quote will be a custom Blockquote\n```\n\n```\n---\n\nconst props = Astro.props;\n\n---\n\n<blockquote {...props} class=\"bg-blue-50 p-4\">\n\n  <span class=\"text-4xl text-blue-600 mb-2\">‚Äú</span>\n\n  <slot /> <!-- Be sure to add a `<slot/>` for child content! -->\n\n</blockquote>\n```\n\n## Configuration\n\nOnce the MDX integration is installed, no configuration is necessary to use .mdx files in your Astro project. You can configure how your MDX is rendered with the following options:\n- Options inherited from Markdown config\n- extendMarkdownConfig\n- recmaPlugins\n- optimize\n\n## Options inherited from Markdown config\n\nAll markdown configuration options can be configured separately in the MDX integration. This includes remark and rehype plugins, syntax highlighting, and more. Options will default to those in your Markdown config.\n\n## extendMarkdownConfig\n\n- **Type:** boolean\n- **Default:** true\n\nMDX will extend your project‚Äôs existing Markdown configuration by default. To override individual options, you can specify their equivalent in your MDX configuration.\n\n## recmaPlugins\n\nThese are plugins that modify the output estree directly. This is useful for modifying or injecting JavaScript variables in your MDX files.\n\n## optimize\n\n- **Type:** boolean | { ignoreElementNames?: string[] }\n\nThis is an optional configuration setting to optimize the MDX output for faster builds and rendering via an internal rehype plugin.\n\n## ignoreElementNames\n\n- **Type:** string[]\n\nAn optional property of optimize to prevent the MDX optimizer from handling certain element names.\n\n## Examples\n\nThe Astro MDX starter template shows how to use MDX files in your Astro project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "overview", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why mdx? in astro?\n\nAssistant: To why mdx? in astro, here's what you do:\nMDX allows you to use variables, JSX expressions and components within Markdown content in Astro. If you have existing content authored in MDX, this integration allows you to bring those files to your Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add mdx\n```\n\n```\npnpm astro add mdx\n```\n\n```\nyarn astro add mdx\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/mdx` package:\n\n```\nnpm install @astrojs/mdx\n```\n\n```\npnpm add @astrojs/mdx\n```\n\n```\nyarn add @astrojs/mdx\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [mdx()],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I editor integration in astro?\n\nAssistant: To editor integration in astro, here's what you do:\nFor editor support in VS Code, install the official MDX extension. For other editors, use the MDX language server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nVisit the MDX docs to learn about using standard MDX features..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I mdx in astro in astro?\n\nAssistant: To mdx in astro in astro, here's what you do:\nAdding the MDX integration enhances your Markdown authoring with JSX variables, expressions and components. It also adds extra features to standard MDX, including support for Markdown-style frontmatter in MDX. This allows you to use most of Astro‚Äôs built-in Markdown features. .mdx files must be written in MDX syntax rather than Astro‚Äôs HTML-like syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using mdx with content collections in astro?\n\nAssistant: To using mdx with content collections in astro, here's what you do:\nTo include MDX files in a content collection, make sure that your collection loader is configured to load content from .mdx files:\n\n```\nimport { defineCollection, z } from 'astro:content';\n\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n\n  loader: glob({ pattern: \"**/*.{md,mdx}\", base: \"./src/blog\" }),\n\n  schema: z.object({\n\n    title: z.string(),\n\n    description: z.string(),\n\n    pubDate: z.coerce.date(),\n\n  })\n\n});\n\nexport const collections = { blog };\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using exported variables in mdx in astro?\n\nAssistant: To using exported variables in mdx in astro, here's what you do:\nMDX supports using export statements to add variables to your MDX content or to export data to a component that imports it.\n\nFor example, you can export a title field from an MDX page or component to use as a heading with {JSX expressions}:\n\n```\nexport const title = 'My first MDX post'\n\n# {title}\n```\n\nOr you can use that exported title in your page using import and import.meta.glob() statements:\n\n```\n---\n\nconst matches = import.meta.glob('./posts/*.mdx', { eager: true });\n\nconst posts = Object.values(matches);\n\n---\n\n{posts.map(post => <p>{post.title}</p>) }\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I exported properties in astro?\n\nAssistant: To exported properties in astro, here's what you do:\nThe following properties are available to a .astro component when using an import statement or import.meta.glob():\n\n- **`file`** - The absolute file path (e.g. /home/user/projects/.../file.mdx).\n- **`url`** - The URL of the page (e.g. /en/guides/markdown-content).\n- **`frontmatter`** - Contains any data specified in the file‚Äôs YAML/TOML frontmatter.\n- **`getHeadings()`** - An async function that returns an array of all headings ( <h1> to <h6>) in the file with the type: { depth: number; slug: string; text: string }[]. Each heading‚Äôs slug corresponds to the generated ID for a given heading and can be used for anchor links.\n- **`<Content />`** - A component that returns the full, rendered contents of the file.\n- **(any `export` value)** - MDX files can also export data with an export statement..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using frontmatter variables in mdx in astro?\n\nAssistant: To using frontmatter variables in mdx in astro, here's what you do:\nThe Astro MDX integration includes support for using frontmatter in MDX by default. Add frontmatter properties just as you would in Markdown files, and these variables are available to use in the template, and as named properties when importing the file somewhere else.\n\n```\n---\n\ntitle: 'My first MDX post'\n\nauthor: 'Houston'\n\n---\n\n# {frontmatter.title}\n\nWritten by: {frontmatter.author}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using components in mdx in astro?\n\nAssistant: To using components in mdx in astro, here's what you do:\nAfter installing the MDX integration, you can import and use both Astro components and UI framework components in MDX (.mdx) files just as you would use them in any other Astro component. Don‚Äôt forget to include a client:directive on your UI framework components, if necessary!\n\n```\n---\n\ntitle: My first post\n\n---\n\nimport ReactCounter from '../components/ReactCounter.jsx';\n\nI just started my new Astro blog!\n\nHere is my counter component, working in MDX:\n\n<ReactCounter client:load />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom components with imported mdx in astro?\n\nAssistant: To custom components with imported mdx in astro, here's what you do:\nWhen rendering imported MDX content, custom components can be passed via the components prop.\n\n```\n---\n\nimport { Content, components } from '../content.mdx';\n\nimport Heading from '../Heading.astro';\n\n---\n\n<!-- Creates a custom <h1> for the # syntax, _and_ applies any custom components defined in `content.mdx` -->\n\n<Content components={{...components, h1: Heading }} />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I assigning custom components to html elements in astro?\n\nAssistant: To assigning custom components to html elements in astro, here's what you do:\nWith MDX, you can map Markdown syntax to custom components instead of their standard HTML elements. This allows you to write in standard Markdown syntax, but apply special component styling to selected elements.\n\nImport your custom component into your .mdx file, then export a components object that maps the standard HTML element to your custom component:\n\n```\nimport Blockquote from '../components/Blockquote.astro';\n\nexport const components = {blockquote: Blockquote}\n\n> This quote will be a custom Blockquote\n```\n\n```\n---\n\nconst props = Astro.props;\n\n---\n\n<blockquote {...props} class=\"bg-blue-50 p-4\">\n\n  <span class=\"text-4xl text-blue-600 mb-2\">‚Äú</span>\n\n  <slot /> <!-- Be sure to add a `<slot/>` for child content! -->\n\n</blockquote>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\nOnce the MDX integration is installed, no configuration is necessary to use .mdx files in your Astro project. You can configure how your MDX is rendered with the following options:\n- Options inherited from Markdown config\n- extendMarkdownConfig\n- recmaPlugins\n- optimize.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options inherited from markdown config in astro?\n\nAssistant: To options inherited from markdown config in astro, here's what you do:\nAll markdown configuration options can be configured separately in the MDX integration. This includes remark and rehype plugins, syntax highlighting, and more. Options will default to those in your Markdown config..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I extendmarkdownconfig in astro?\n\nAssistant: To extendmarkdownconfig in astro, here's what you do:\n- **Type:** boolean\n- **Default:** true\n\nMDX will extend your project‚Äôs existing Markdown configuration by default. To override individual options, you can specify their equivalent in your MDX configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recmaplugins in astro?\n\nAssistant: To recmaplugins in astro, here's what you do:\nThese are plugins that modify the output estree directly. This is useful for modifying or injecting JavaScript variables in your MDX files..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I optimize in astro?\n\nAssistant: To optimize in astro, here's what you do:\n- **Type:** boolean | { ignoreElementNames?: string[] }\n\nThis is an optional configuration setting to optimize the MDX output for faster builds and rendering via an internal rehype plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I ignoreelementnames in astro?\n\nAssistant: To ignoreelementnames in astro, here's what you do:\n- **Type:** string[]\n\nAn optional property of optimize to prevent the MDX optimizer from handling certain element names..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\nThe Astro MDX starter template shows how to use MDX files in your Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/mdx in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add mdx\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/mdx.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/mdx\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/mdx.\n\n**Apply Integration to astro.config.***:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [mdx()],\n\n});\n```\n\nThis snippet shows you how to apply integration to astro.config.*, which is an important aspect of @astrojs/mdx.\n\n**Using MDX with content collections**:\n\n```yaml\nimport { defineCollection, z } from 'astro:content';\n\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n\n  loader: glob({ pattern: \"**/*.{md,mdx}\", base: \"./src/blog\" }),\n\n  schema: z.object({\n\n    title: z.string(),\n\n    description: z.string(),\n\n    pubDate: z.coerce.date(),\n\n  })\n\n});\n\nexport const collections = { blog };\n\n```\n\nThis snippet shows you how to using mdx with content collections, which is an important aspect of @astrojs/mdx.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "code_examples", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/mdx in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\nDon‚Äôt forget to include a client:directive on your UI framework components, if necessary!\n\nVisit the MDX website for a full list of HTML elements that can be overwritten as custom components.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/mdx", "title": "@astrojs/mdx", "description": "This Astro integration enables the usage of MDX components and allows you to create pages as .mdx files.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 02:29:39", "type": "best_practices", "page_metadata": {"og:title": "@astrojs/mdx", "title": "@astrojs/mdx | Docs", "ogDescription": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogTitle": "@astrojs/mdx", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "description": "Learn how to use the @astrojs/mdx integration in your Astro project.", "twitter:site": "astrodotbuild", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/mdx.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "scrapeId": "41e0db99-4f87-47ff-807c-576e3df3d617", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/mdx", "url": "https://docs.astro.build/en/guides/integrations-guide/mdx/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Publish to NPM is in astro?\n\nAssistant: Sure, I'd be happy to explain Publish to NPM in astro.\n\n# Publish to NPM\n\nBuilding a new Astro component? Publish it to npm!Here's a quick rundown of what this is about:\n\n## Quick Start\n\nTo get started developing your component quickly, you can use a template already set up for you.\n\n```\n\n# Initialize the Astro Component template in a new directory\n\nnpm create astro@latest my-new-component-directory -- --template component\n\n# yarn\nyarn create astro my-new-component-directory --template component\n\n# pnpm\npnpm create astro@latest my-new-component-directory -- --template component\n```\n\n## Creating a package\n\nTo create a new package, configure your development environment to use **workspaces** within your project. This will allow you to develop your component alongside a working copy of Astro.\n\n- Directorymy-new-component-directory/\n\n- Directorydemo/\n\n- ‚Ä¶for testing and demonstration\n\n- package.json\n- Directorypackages/\n\n- Directorymy-component/\n\n- index.js\n- package.json\n- ‚Ä¶additional files used by the package\n\nThis example, named `my-project`, creates a project with a single package, named `my-component`, and a `demo/` directory for testing and demonstrating the component.\n\nThis is configured in the project root‚Äôs `package.json` file:\n\n```\n{\n  \"name\": \"my-project\",\n  \"workspaces\": [\"demo\", \"packages/*\"]\n}\n```\n\nIn this example, multiple packages can be developed together from the `packages` directory. These packages can also be referenced from `demo`, where you can install a working copy of Astro.\n\n```\nnpm create astro@latest demo -- --template minimal\n\n# yarn\nyarn create astro demo --template minimal\n\n# pnpm\npnpm create astro@latest demo -- --template minimal\n```\n\n## package.json\n\nThe `package.json` in the package directory includes all of the information related to your package, including its description, dependencies, and any other package metadata.\n\n```\n{\n  \"name\": \"my-component\",\n  \"description\": \"Component description\",\n  \"version\": \"1.0.0\",\n  \"homepage\": \"https://github.com/owner/project#readme\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./astro\": \"./MyAstroComponent.astro\",\n    \"./react\": \"./MyReactComponent.jsx\"\n  },\n  \"files\": [\"index.js\", \"MyAstroComponent.astro\", \"MyReactComponent.jsx\"],\n  \"keywords\": [\"astro\", \"withastro\", \"astro-component\", \"...\", \"...\"]\n}\n```\n\n## description\n\nA short description of your component used to help others know what it does.\n\n```\n{\n  \"description\": \"An Astro Element Generator\"\n}\n```\n\n## type\n\nThe module format used by Node.js and Astro to interpret your `index.js` files.\n\n```\n{\n  \"type\": \"module\"\n}\n```\n\nUse `\"type\": \"module\"` so that your `index.js` can be used as an entrypoint with `import` and `export`.\n\n## homepage\n\nThe url to the project homepage.\n\n```\n{\n  \"homepage\": \"https://github.com/owner/project#readme\"\n}\n```\n\nThis is a great way to direct users to an online demo, documentation, or homepage for your project.\n\n## exports\n\nThe entry points of a package when imported by name.\n\n```\n{\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./astro\": \"./MyAstroComponent.astro\",\n    \"./react\": \"./MyReactComponent.jsx\"\n  }\n}\n```\n\nIn this example, importing `my-component` would use `index.js`, while importing `my-component/astro` or `my-component/react` would use `MyAstroComponent.astro` or `MyReactComponent.jsx` respectively.\n\n## files\n\nAn optional optimization to exclude unnecessary files from the bundle shipped to users via npm. Note that **only files listed here will be included in your package**, so if you add or change files necessary for your package to work, you must update this list accordingly.\n\n```\n{\n  \"files\": [\"index.js\", \"MyAstroComponent.astro\", \"MyReactComponent.jsx\"]\n}\n```\n\n## keywords\n\nAn array of keywords relevant to your component, used to help others find your component on npm and in any other search catalogs.\n\nAdd `astro-component` or `withastro` as a special keyword to maximize its discoverability in the Astro ecosystem.\n\n```\n{\n  \"keywords\": [\"astro-component\", \"withastro\", \"... etc\", \"... etc\"]\n}\n```\n\n## index.js\n\nThe main **package entrypoint** used whenever your package is imported.\n\n```\nexport { default as MyAstroComponent } from './MyAstroComponent.astro';\nexport { default as MyReactComponent } from './MyReactComponent.jsx';\n```\n\nThis allows you to package multiple components together into a single interface.\n\n## Example: Using Named Imports\n\n```\n---\nimport { MyAstroComponent } from 'my-component';\nimport { MyReactComponent } from 'my-component';\n---\n\n<MyAstroComponent />\n<MyReactComponent />\n```\n\n## Example: Using Namespace Imports\n\n```\n---\nimport * as Example from 'example-astro-component';\n---\n\n<Example.MyAstroComponent />\n<Example.MyReactComponent />\n```\n\n## Example: Using Individual Imports\n\n```\n---\nimport MyAstroComponent from 'example-astro-component/astro';\nimport MyReactComponent from 'example-astro-component/react';\n---\n\n<MyAstroComponent />\n<MyReactComponent />\n```\n\n## Developing your package\n\nAstro does not have a dedicated ‚Äúpackage mode‚Äù for development. Instead, you should use a demo project to develop and test your package inside of your project. This can be a private website only used for development, or a public demo/documentation website for your package.\n\nIf you are extracting components from an existing project, you can even continue to use that project to develop your now-extracted components.\n\n## Testing your component\n\nAstro does not currently ship a test runner. _(If you are interested in helping out with this, join us on Discord!)_\n\nIn the meantime, our current recommendation for testing is:\n\n1. Add a test `fixtures` directory to your `demo/src/pages` directory.\n2. Add a new page for every test that you‚Äôd like to run.\n3. Each page should include some different component usage that you‚Äôd like to test.\n4. Run `astro build` to build your fixtures, then compare the output of the `dist/__fixtures__/` directory to what you expected.\n\n- Directorymy-project/demo/src/pages/__fixtures__/ \n\n- test-name-01.astro\n- test-name-02.astro\n- test-name-03.astro\n\n## Publishing your component\n\nOnce you have your package ready, you can publish it to npm using the `npm publish` command. If that fails, make sure that you have logged in via `npm login` and that your `package.json` is correct. If it succeeds, you‚Äôre done!\n\nNotice that there was no `build` step for Astro packages. Any file type that Astro supports natively, such as `.astro`, `.ts`, `.jsx`, and `.css`, can be published directly without a build step.\n\nIf you need another file type that isn‚Äôt natively supported by Astro, add a build step to your package. This advanced exercise is left up to you.\n\n## Integrations Library\n\nShare your hard work by adding your integration to our integrations library!\n\n### package.json data\n\nThe library is automatically updated weekly, pulling in every package published to NPM with the `astro-component` or `withastro` keyword.\n\nThe integrations library reads the `name`, `description`, `repository`, and `homepage` data from your `package.json`.\n\nAvatars are a great way to highlight your brand in the library! Once your package is published you can file a GitHub issue with your avatar attached and we will add it to your listing.\n\n## Categories\n\nIn addition to the required `astro-component` or `withastro` keyword, special keywords are also used to automatically organize packages. Including any of the keywords below will add your integration to the matching category in our integrations library.\n\n| category | keywords |\n| --- | --- |\n| Accessibility | `a11y`, `accessibility` |\n| Adapters | `astro-adapter` |\n| Analytics | `analytics` |\n| CSS + UI | `css`, `ui`, `icon`, `icons`, `renderer` |\n| Frameworks | `renderer` |\n| Content Loaders | `astro-loader` |\n| Images + Media | `media`, `image`, `images`, `video`, `audio` |\n| Performance + SEO | `performance`, `perf`, `seo`, `optimization` |\n| Dev Toolbar | `devtools`, `dev-overlay`, `dev-toolbar` |\n| Utilities | `tooling`, `utils`, `utility` |\n\nPackages that don‚Äôt include any keyword matching a category will be shown as `Uncategorized`.\n\n## Share\n\nWe encourage you to share your work, and we really do love seeing what our talented Astronauts create. Come and share what you create with us in our Discord or mention @astrodotbuild in a Tweet!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "overview", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I quick start in astro?\n\nAssistant: To quick start in astro, here's what you do:\nTo get started developing your component quickly, you can use a template already set up for you.\n\n```\n\n# Initialize the Astro Component template in a new directory\n\nnpm create astro@latest my-new-component-directory -- --template component\n\n# yarn\nyarn create astro my-new-component-directory --template component\n\n# pnpm\npnpm create astro@latest my-new-component-directory -- --template component\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating a package in astro?\n\nAssistant: To creating a package in astro, here's what you do:\nTo create a new package, configure your development environment to use **workspaces** within your project. This will allow you to develop your component alongside a working copy of Astro.\n\n- Directorymy-new-component-directory/\n\n- Directorydemo/\n\n- ‚Ä¶for testing and demonstration\n\n- package.json\n- Directorypackages/\n\n- Directorymy-component/\n\n- index.js\n- package.json\n- ‚Ä¶additional files used by the package\n\nThis example, named `my-project`, creates a project with a single package, named `my-component`, and a `demo/` directory for testing and demonstrating the component.\n\nThis is configured in the project root‚Äôs `package.json` file:\n\n```\n{\n  \"name\": \"my-project\",\n  \"workspaces\": [\"demo\", \"packages/*\"]\n}\n```\n\nIn this example, multiple packages can be developed together from the `packages` directory. These packages can also be referenced from `demo`, where you can install a working copy of Astro.\n\n```\nnpm create astro@latest demo -- --template minimal\n\n# yarn\nyarn create astro demo --template minimal\n\n# pnpm\npnpm create astro@latest demo -- --template minimal\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I package.json in astro?\n\nAssistant: To package.json in astro, here's what you do:\nThe `package.json` in the package directory includes all of the information related to your package, including its description, dependencies, and any other package metadata.\n\n```\n{\n  \"name\": \"my-component\",\n  \"description\": \"Component description\",\n  \"version\": \"1.0.0\",\n  \"homepage\": \"https://github.com/owner/project#readme\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./astro\": \"./MyAstroComponent.astro\",\n    \"./react\": \"./MyReactComponent.jsx\"\n  },\n  \"files\": [\"index.js\", \"MyAstroComponent.astro\", \"MyReactComponent.jsx\"],\n  \"keywords\": [\"astro\", \"withastro\", \"astro-component\", \"...\", \"...\"]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I description in astro?\n\nAssistant: To description in astro, here's what you do:\nA short description of your component used to help others know what it does.\n\n```\n{\n  \"description\": \"An Astro Element Generator\"\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I type in astro?\n\nAssistant: To type in astro, here's what you do:\nThe module format used by Node.js and Astro to interpret your `index.js` files.\n\n```\n{\n  \"type\": \"module\"\n}\n```\n\nUse `\"type\": \"module\"` so that your `index.js` can be used as an entrypoint with `import` and `export`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I homepage in astro?\n\nAssistant: To homepage in astro, here's what you do:\nThe url to the project homepage.\n\n```\n{\n  \"homepage\": \"https://github.com/owner/project#readme\"\n}\n```\n\nThis is a great way to direct users to an online demo, documentation, or homepage for your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I exports in astro?\n\nAssistant: To exports in astro, here's what you do:\nThe entry points of a package when imported by name.\n\n```\n{\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./astro\": \"./MyAstroComponent.astro\",\n    \"./react\": \"./MyReactComponent.jsx\"\n  }\n}\n```\n\nIn this example, importing `my-component` would use `index.js`, while importing `my-component/astro` or `my-component/react` would use `MyAstroComponent.astro` or `MyReactComponent.jsx` respectively..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I files in astro?\n\nAssistant: To files in astro, here's what you do:\nAn optional optimization to exclude unnecessary files from the bundle shipped to users via npm. Note that **only files listed here will be included in your package**, so if you add or change files necessary for your package to work, you must update this list accordingly.\n\n```\n{\n  \"files\": [\"index.js\", \"MyAstroComponent.astro\", \"MyReactComponent.jsx\"]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I keywords in astro?\n\nAssistant: To keywords in astro, here's what you do:\nAn array of keywords relevant to your component, used to help others find your component on npm and in any other search catalogs.\n\nAdd `astro-component` or `withastro` as a special keyword to maximize its discoverability in the Astro ecosystem.\n\n```\n{\n  \"keywords\": [\"astro-component\", \"withastro\", \"... etc\", \"... etc\"]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I index.js in astro?\n\nAssistant: To index.js in astro, here's what you do:\nThe main **package entrypoint** used whenever your package is imported.\n\n```\nexport { default as MyAstroComponent } from './MyAstroComponent.astro';\nexport { default as MyReactComponent } from './MyReactComponent.jsx';\n```\n\nThis allows you to package multiple components together into a single interface..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I example: using named imports in astro?\n\nAssistant: To example: using named imports in astro, here's what you do:\n```\n---\nimport { MyAstroComponent } from 'my-component';\nimport { MyReactComponent } from 'my-component';\n---\n\n<MyAstroComponent />\n<MyReactComponent />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I example: using namespace imports in astro?\n\nAssistant: To example: using namespace imports in astro, here's what you do:\n```\n---\nimport * as Example from 'example-astro-component';\n---\n\n<Example.MyAstroComponent />\n<Example.MyReactComponent />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I example: using individual imports in astro?\n\nAssistant: To example: using individual imports in astro, here's what you do:\n```\n---\nimport MyAstroComponent from 'example-astro-component/astro';\nimport MyReactComponent from 'example-astro-component/react';\n---\n\n<MyAstroComponent />\n<MyReactComponent />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I developing your package in astro?\n\nAssistant: To developing your package in astro, here's what you do:\nAstro does not have a dedicated ‚Äúpackage mode‚Äù for development. Instead, you should use a demo project to develop and test your package inside of your project. This can be a private website only used for development, or a public demo/documentation website for your package.\n\nIf you are extracting components from an existing project, you can even continue to use that project to develop your now-extracted components..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I testing your component in astro?\n\nAssistant: To testing your component in astro, here's what you do:\nAstro does not currently ship a test runner. _(If you are interested in helping out with this, join us on Discord!)_\n\nIn the meantime, our current recommendation for testing is:\n\n1. Add a test `fixtures` directory to your `demo/src/pages` directory.\n2. Add a new page for every test that you‚Äôd like to run.\n3. Each page should include some different component usage that you‚Äôd like to test.\n4. Run `astro build` to build your fixtures, then compare the output of the `dist/__fixtures__/` directory to what you expected.\n\n- Directorymy-project/demo/src/pages/__fixtures__/ \n\n- test-name-01.astro\n- test-name-02.astro\n- test-name-03.astro.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publishing your component in astro?\n\nAssistant: To publishing your component in astro, here's what you do:\nOnce you have your package ready, you can publish it to npm using the `npm publish` command. If that fails, make sure that you have logged in via `npm login` and that your `package.json` is correct. If it succeeds, you‚Äôre done!\n\nNotice that there was no `build` step for Astro packages. Any file type that Astro supports natively, such as `.astro`, `.ts`, `.jsx`, and `.css`, can be published directly without a build step.\n\nIf you need another file type that isn‚Äôt natively supported by Astro, add a build step to your package. This advanced exercise is left up to you..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrations library in astro?\n\nAssistant: To integrations library in astro, here's what you do:\nShare your hard work by adding your integration to our integrations library!\n\n### package.json data\n\nThe library is automatically updated weekly, pulling in every package published to NPM with the `astro-component` or `withastro` keyword.\n\nThe integrations library reads the `name`, `description`, `repository`, and `homepage` data from your `package.json`.\n\nAvatars are a great way to highlight your brand in the library! Once your package is published you can file a GitHub issue with your avatar attached and we will add it to your listing..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I categories in astro?\n\nAssistant: To categories in astro, here's what you do:\nIn addition to the required `astro-component` or `withastro` keyword, special keywords are also used to automatically organize packages. Including any of the keywords below will add your integration to the matching category in our integrations library.\n\n| category | keywords |\n| --- | --- |\n| Accessibility | `a11y`, `accessibility` |\n| Adapters | `astro-adapter` |\n| Analytics | `analytics` |\n| CSS + UI | `css`, `ui`, `icon`, `icons`, `renderer` |\n| Frameworks | `renderer` |\n| Content Loaders | `astro-loader` |\n| Images + Media | `media`, `image`, `images`, `video`, `audio` |\n| Performance + SEO | `performance`, `perf`, `seo`, `optimization` |\n| Dev Toolbar | `devtools`, `dev-overlay`, `dev-toolbar` |\n| Utilities | `tooling`, `utils`, `utility` |\n\nPackages that don‚Äôt include any keyword matching a category will be shown as `Uncategorized`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I share in astro?\n\nAssistant: To share in astro, here's what you do:\nWe encourage you to share your work, and we really do love seeing what our talented Astronauts create. Come and share what you create with us in our Discord or mention @astrodotbuild in a Tweet!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Publish to NPM in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initialize the Astro Component template in a new directory**:\n\n```yaml\nnpm create astro@latest my-new-component-directory -- --template component\n# yarn\nyarn create astro my-new-component-directory --template component\n# pnpm\npnpm create astro@latest my-new-component-directory -- --template component\n```\n\nThis snippet shows you how to initialize the astro component template in a new directory, which is an important aspect of publish to npm.\n\n**package.json configuration**:\n\n```yaml\n{\n  \"name\": \"my-project\",\n  \"workspaces\": [\"demo\", \"packages/*\"]\n}\n```\n\nThis snippet shows you how to package.json configuration, which is an important aspect of publish to npm.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "code_examples", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Publish to NPM in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse \"type\": \"module\" in your package.json to allow for import/export functionality.\n\nAdd relevant keywords to your package.json to maximize discoverability.\n\nUse a demo project for developing and testing your package.\n\nInclude a test fixtures directory for testing component usage.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/reference/publish-to-npm", "title": "Publish to NPM", "description": "Building a new Astro component? Publish it to npm!", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:30:11", "type": "best_practices", "page_metadata": {"og:url": "https://docs.astro.build/en/reference/publish-to-npm/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "viewport": "width=device-width, initial-scale=1", "title": "Publish to NPM | Docs", "description": "Learn how to publish Astro components to NPM", "ogUrl": "https://docs.astro.build/en/reference/publish-to-npm/", "ogImage": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:description": "Learn how to publish Astro components to NPM", "ogDescription": "Learn how to publish Astro components to NPM", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/reference/publish-to-npm.webp", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Docs", "og:type": "article", "ogTitle": "Publish to NPM", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Publish to NPM", "scrapeId": "2910d7ae-694e-451c-bfc0-8fef0c93e1b1", "sourceURL": "https://docs.astro.build/en/reference/publish-to-npm", "url": "https://docs.astro.build/en/reference/publish-to-npm/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Add site-wide styling is in astro?\n\nAssistant: Sure, I'd be happy to explain Add site-wide styling in astro.\n\n# Add site-wide styling\n\nNow that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!Here's a quick rundown of what this is about:\n\n## Add a global stylesheet\n\nYou have seen that the Astro `<style>` tag is **scoped by default**, meaning that it only affects the elements in its own file.\n\nThere are a few ways to define styles **globally** in Astro, but in this tutorial, you will create and import a `global.css` file into each of your pages. This combination of stylesheet and `<style>` tag gives you the ability to control some styles site-wide, and to apply some specific styles exactly where you want them.\n\n1. Create a new file at the location `src/styles/global.css` (You‚Äôll have to create a `styles` folder first.)\n\n2. Copy the following code into your new file, `global.css`\n\n\n\n```html\nhtml {\n     background-color: #f1f5f9;\n     font-family: sans-serif;\n}\n\nbody {\n     margin: 0 auto;\n     width: 100%;\n     max-width: 80ch;\n     padding: 1rem;\n     line-height: 1.5;\n}\n\n* {\n     box-sizing: border-box;\n}\n\nh1 {\n     margin: 1rem 0;\n     font-size: 2.5rem;\n}\n```\n\n3. In `about.astro`, add the following import statement to your frontmatter:\n\n\n```html\n   ---\nimport '../styles/global.css';\n\nconst pageTitle = \"About Me\";\n\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\n\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n\nconst happy = true;\nconst finished = false;\nconst goal = 3;\n\nconst skillColor = \"navy\";\nconst fontWeight = \"bold\";\nconst textCase = \"uppercase\";\n   ---\n```\n\n4. Check the browser preview of your About page, and you should now see new styles applied!\n\n## Try it yourself - Import your global stylesheet\n\nAdd the necessary line of code to each `.astro` file in your project to apply your global styles to every page of your site.\n\n‚úÖ Show me the code! ‚úÖ\n\nAdd the following import statement to the two other page files: `src/pages/index.astro` and `src/pages/blog.astro`\n\n```\n---\nimport '../styles/global.css';\n---\n```\n\nMake any changes or additions you want to the content of your About page by adding HTML elements to the page template, either statically or dynamically. Write any additional JavaScript in your frontmatter script to provide you with values to use in your HTML. When you are happy with this page, commit your changes to GitHub before moving on to the next lesson.\n\n## Analyze the Pattern\n\nYour About page is now styled using _both_ the imported `global.css` file _and_ a `<style>` tag.\n\n- Are styles from both styling methods being applied?\nYes\n\n- Are there any conflicting styles, and if so, which are applied?\nYes, `<h1>` has a size of `2.5rem` globally, but `4rem` locally in the `<style>` tag. The local `4rem` rule is applied on the About page.\n\n- Describe how `global.css` and `<style>` work together.\nWhen conflicting styles are defined both globally and in a page‚Äôs local `<style>` tag, the local styles should overwrite any global styles. (But, there can be other factors involved, so always visually inspect your site to make sure your styles are properly applied!)\n\n- How would you choose whether to declare a style in a `global.css` file or a `<style>` tag?\nIf you want a style to be applied site-wide, you would choose to use a `global.css` file. However, if you want styles to apply to only the HTML content in a single `.astro` file, and not affect other elements on your site, you would choose a `<style>` tag.\n\n## Checklist\n\n- I can add global CSS styles by importing a `.css` file.\n\n## Resources\n\n- [Astro syntax vs JSX - comparison](https://docs.astro.build/en/reference/astro-syntax/#differences-between-astro-and-jsx)\n- [Astro `<style>` tag](https://docs.astro.build/en/guides/styling/#styling-in-astro)\n- [CSS variables in Astro](https://docs.astro.build/en/guides/styling/#css-variables)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "overview", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add a global stylesheet in astro?\n\nAssistant: To add a global stylesheet in astro, here's what you do:\nYou have seen that the Astro `<style>` tag is **scoped by default**, meaning that it only affects the elements in its own file.\n\nThere are a few ways to define styles **globally** in Astro, but in this tutorial, you will create and import a `global.css` file into each of your pages. This combination of stylesheet and `<style>` tag gives you the ability to control some styles site-wide, and to apply some specific styles exactly where you want them.\n\n1. Create a new file at the location `src/styles/global.css` (You‚Äôll have to create a `styles` folder first.)\n\n2. Copy the following code into your new file, `global.css`\n\n\n\n```html\nhtml {\n     background-color: #f1f5f9;\n     font-family: sans-serif;\n}\n\nbody {\n     margin: 0 auto;\n     width: 100%;\n     max-width: 80ch;\n     padding: 1rem;\n     line-height: 1.5;\n}\n\n* {\n     box-sizing: border-box;\n}\n\nh1 {\n     margin: 1rem 0;\n     font-size: 2.5rem;\n}\n```\n\n3. In `about.astro`, add the following import statement to your frontmatter:\n\n\n```html\n   ---\nimport '../styles/global.css';\n\nconst pageTitle = \"About Me\";\n\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\n\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n\nconst happy = true;\nconst finished = false;\nconst goal = 3;\n\nconst skillColor = \"navy\";\nconst fontWeight = \"bold\";\nconst textCase = \"uppercase\";\n   ---\n```\n\n4. Check the browser preview of your About page, and you should now see new styles applied!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - import your global stylesheet in astro?\n\nAssistant: To try it yourself - import your global stylesheet in astro, here's what you do:\nAdd the necessary line of code to each `.astro` file in your project to apply your global styles to every page of your site.\n\n‚úÖ Show me the code! ‚úÖ\n\nAdd the following import statement to the two other page files: `src/pages/index.astro` and `src/pages/blog.astro`\n\n```\n---\nimport '../styles/global.css';\n---\n```\n\nMake any changes or additions you want to the content of your About page by adding HTML elements to the page template, either statically or dynamically. Write any additional JavaScript in your frontmatter script to provide you with values to use in your HTML. When you are happy with this page, commit your changes to GitHub before moving on to the next lesson..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I analyze the pattern in astro?\n\nAssistant: To analyze the pattern in astro, here's what you do:\nYour About page is now styled using _both_ the imported `global.css` file _and_ a `<style>` tag.\n\n- Are styles from both styling methods being applied?\nYes\n\n- Are there any conflicting styles, and if so, which are applied?\nYes, `<h1>` has a size of `2.5rem` globally, but `4rem` locally in the `<style>` tag. The local `4rem` rule is applied on the About page.\n\n- Describe how `global.css` and `<style>` work together.\nWhen conflicting styles are defined both globally and in a page‚Äôs local `<style>` tag, the local styles should overwrite any global styles. (But, there can be other factors involved, so always visually inspect your site to make sure your styles are properly applied!)\n\n- How would you choose whether to declare a style in a `global.css` file or a `<style>` tag?\nIf you want a style to be applied site-wide, you would choose to use a `global.css` file. However, if you want styles to apply to only the HTML content in a single `.astro` file, and not affect other elements on your site, you would choose a `<style>` tag..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can add global CSS styles by importing a `.css` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Astro syntax vs JSX - comparison](https://docs.astro.build/en/reference/astro-syntax/#differences-between-astro-and-jsx)\n- [Astro `<style>` tag](https://docs.astro.build/en/guides/styling/#styling-in-astro)\n- [CSS variables in Astro](https://docs.astro.build/en/guides/styling/#css-variables).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Add site-wide styling in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Global CSS Styles**:\n\n```yaml\nhtml {\n     background-color: #f1f5f9;\n     font-family: sans-serif;\n}\n\nbody {\n     margin: 0 auto;\n     width: 100%;\n     max-width: 80ch;\n     padding: 1rem;\n     line-height: 1.5;\n}\n\n* {\n     box-sizing: border-box;\n}\n\nh1 {\n     margin: 1rem 0;\n     font-size: 2.5rem;\n}\n```\n\nThis snippet shows you how to global css styles, which is an important aspect of add site-wide styling.\n\n**Import Statement in about.astro**:\n\n```yaml\n---\nimport '../styles/global.css';\n\nconst pageTitle = \"About Me\";\n\nconst identity = {\n     firstName: \"Sarah\",\n     country: \"Canada\",\n     occupation: \"Technical Writer\",\n     hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n};\n\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n\nconst happy = true;\nconst finished = false;\nconst goal = 3;\n\nconst skillColor = \"navy\";\nconst fontWeight = \"bold\";\nconst textCase = \"uppercase\";\n---\n```\n\nThis snippet shows you how to import statement in about.astro, which is an important aspect of add site-wide styling.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "code_examples", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Add site-wide styling in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen conflicting styles are defined both globally and in a page‚Äôs local `<style>` tag, the local styles should overwrite any global styles.\n\nAlways visually inspect your site to make sure your styles are properly applied!\n\nUse a `global.css` file for styles that should be applied site-wide, and a `<style>` tag for styles that should only apply to a single `.astro` file.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/5", "title": "Add site-wide styling", "description": "Now that you have a styled About page, it‚Äôs time to add some global styles for the rest of your site!", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:30:59", "type": "best_practices", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:locale": "en", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "og:title": "Add site-wide styling", "ogTitle": "Add site-wide styling", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "title": "Add site-wide styling | Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/5/", "og:url": "https://docs.astro.build/en/tutorial/2-pages/5/", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a global stylesheet for site-wide styling", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/5.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "language": "en", "scrapeId": "71e4ccb9-cb92-49bb-b7a9-8c2649f44579", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/5", "url": "https://docs.astro.build/en/tutorial/2-pages/5/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Share state between islands is in astro?\n\nAssistant: Sure, I'd be happy to explain Share state between islands in astro.\n\n# Share state between islands\n\nThis page covers how to share state between components in an Astro website using islands architecture and Nano Stores.Here's a quick rundown of what this is about:\n\n## Why Nano Stores?\n\nThe Nano Stores library allows you to author stores that any component can interact with. We recommend Nano Stores because:\n\n- **They‚Äôre lightweight.** Nano Stores ship the bare minimum JS you‚Äôll need (less than 1 KB) with zero dependencies.\n- **They‚Äôre framework-agnostic.** This means sharing state between frameworks will be seamless! Astro is built on flexibility, so we love solutions that offer a similar developer experience no matter your preference.\n\nStill, there are a number of alternatives you can explore. These include:\n\n- Svelte‚Äôs built-in stores\n- Solid signals outside of a component context\n- Vue‚Äôs reactivity API\n- Sending custom browser events between components\n\n## Installing Nano Stores\n\nTo get started, install Nano Stores alongside their helper package for your favorite UI framework:\n\n- Preact\n- React\n- Solid\n- Svelte\n- Vue\n\n```bash\nnpm install nanostores @nanostores/preact\n```\n\n```bash\nnpm install nanostores @nanostores/react\n```\n\n```bash\nnpm install nanostores @nanostores/solid\n```\n\n```bash\nnpm install nanostores\n```\n\n```bash\nnpm install nanostores @nanostores/vue\n```\n\nYou can jump into the Nano Stores usage guide from here, or follow along with our example below!\n\n## Usage example - ecommerce cart flyout\n\nLet‚Äôs say we‚Äôre building a simple ecommerce interface with three interactive elements:\n\n- An ‚Äúadd to cart‚Äù submission form\n- A cart flyout to display those added items\n- A cart flyout toggle\n\nYour base Astro file may look like this:\n\n```html\n---\nimport CartFlyoutToggle from '../components/CartFlyoutToggle';\nimport CartFlyout from '../components/CartFlyout';\nimport AddToCartForm from '../components/AddToCartForm';\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>...</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/\">Astro storefront</a>\n      <CartFlyoutToggle client:load />\n    </nav>\n  </header>\n  <main>\n    <AddToCartForm client:load>\n    <!-- ... -->\n    </AddToCartForm>\n  </main>\n  <CartFlyout client:load />\n</body>\n</html>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/sharing-state-islands", "title": "Share state between islands", "description": "This page covers how to share state between components in an Astro website using islands architecture and Nano Stores.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:31:18", "type": "overview", "page_metadata": {"ogTitle": "Share state between islands", "og:locale": "en", "og:description": "Learn how to share state across framework components with Nano Stores.", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to share state across framework components with Nano Stores.", "og:url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:card": "summary_large_image", "description": "Learn how to share state across framework components with Nano Stores.", "og:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/recipes/sharing-state-islands/", "title": "Share state between islands | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Share state between islands", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "language": "en", "scrapeId": "9a751e69-06a4-4c76-af3a-a4749422d494", "sourceURL": "https://docs.astro.build/en/recipes/sharing-state-islands", "url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why nano stores? in astro?\n\nAssistant: To why nano stores? in astro, here's what you do:\nThe Nano Stores library allows you to author stores that any component can interact with. We recommend Nano Stores because:\n\n- **They‚Äôre lightweight.** Nano Stores ship the bare minimum JS you‚Äôll need (less than 1 KB) with zero dependencies.\n- **They‚Äôre framework-agnostic.** This means sharing state between frameworks will be seamless! Astro is built on flexibility, so we love solutions that offer a similar developer experience no matter your preference.\n\nStill, there are a number of alternatives you can explore. These include:\n\n- Svelte‚Äôs built-in stores\n- Solid signals outside of a component context\n- Vue‚Äôs reactivity API\n- Sending custom browser events between components.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/sharing-state-islands", "title": "Share state between islands", "description": "This page covers how to share state between components in an Astro website using islands architecture and Nano Stores.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:31:18", "type": "section_detail", "page_metadata": {"ogTitle": "Share state between islands", "og:locale": "en", "og:description": "Learn how to share state across framework components with Nano Stores.", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to share state across framework components with Nano Stores.", "og:url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:card": "summary_large_image", "description": "Learn how to share state across framework components with Nano Stores.", "og:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/recipes/sharing-state-islands/", "title": "Share state between islands | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Share state between islands", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "language": "en", "scrapeId": "9a751e69-06a4-4c76-af3a-a4749422d494", "sourceURL": "https://docs.astro.build/en/recipes/sharing-state-islands", "url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installing nano stores in astro?\n\nAssistant: To installing nano stores in astro, here's what you do:\nTo get started, install Nano Stores alongside their helper package for your favorite UI framework:\n\n- Preact\n- React\n- Solid\n- Svelte\n- Vue\n\n```bash\nnpm install nanostores @nanostores/preact\n```\n\n```bash\nnpm install nanostores @nanostores/react\n```\n\n```bash\nnpm install nanostores @nanostores/solid\n```\n\n```bash\nnpm install nanostores\n```\n\n```bash\nnpm install nanostores @nanostores/vue\n```\n\nYou can jump into the Nano Stores usage guide from here, or follow along with our example below!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/sharing-state-islands", "title": "Share state between islands", "description": "This page covers how to share state between components in an Astro website using islands architecture and Nano Stores.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:31:18", "type": "section_detail", "page_metadata": {"ogTitle": "Share state between islands", "og:locale": "en", "og:description": "Learn how to share state across framework components with Nano Stores.", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to share state across framework components with Nano Stores.", "og:url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:card": "summary_large_image", "description": "Learn how to share state across framework components with Nano Stores.", "og:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/recipes/sharing-state-islands/", "title": "Share state between islands | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Share state between islands", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "language": "en", "scrapeId": "9a751e69-06a4-4c76-af3a-a4749422d494", "sourceURL": "https://docs.astro.build/en/recipes/sharing-state-islands", "url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage example - ecommerce cart flyout in astro?\n\nAssistant: To usage example - ecommerce cart flyout in astro, here's what you do:\nLet‚Äôs say we‚Äôre building a simple ecommerce interface with three interactive elements:\n\n- An ‚Äúadd to cart‚Äù submission form\n- A cart flyout to display those added items\n- A cart flyout toggle\n\nYour base Astro file may look like this:\n\n```html\n---\nimport CartFlyoutToggle from '../components/CartFlyoutToggle';\nimport CartFlyout from '../components/CartFlyout';\nimport AddToCartForm from '../components/AddToCartForm';\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>...</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/\">Astro storefront</a>\n      <CartFlyoutToggle client:load />\n    </nav>\n  </header>\n  <main>\n    <AddToCartForm client:load>\n    <!-- ... -->\n    </AddToCartForm>\n  </main>\n  <CartFlyout client:load />\n</body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/sharing-state-islands", "title": "Share state between islands", "description": "This page covers how to share state between components in an Astro website using islands architecture and Nano Stores.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:31:18", "type": "section_detail", "page_metadata": {"ogTitle": "Share state between islands", "og:locale": "en", "og:description": "Learn how to share state across framework components with Nano Stores.", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to share state across framework components with Nano Stores.", "og:url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:card": "summary_large_image", "description": "Learn how to share state across framework components with Nano Stores.", "og:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/recipes/sharing-state-islands/", "title": "Share state between islands | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Share state between islands", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "language": "en", "scrapeId": "9a751e69-06a4-4c76-af3a-a4749422d494", "sourceURL": "https://docs.astro.build/en/recipes/sharing-state-islands", "url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Share state between islands in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a store with an atom**:\n\n```yaml\nimport { atom } from 'nanostores';\n\nexport const isCartOpen = atom(false);\n```\n\nThis snippet shows you how to creating a store with an atom, which is an important aspect of share state between islands.\n\n**Cart button component for Preact**:\n\n```yaml\nimport { useStore } from '@nanostores/preact';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartButton() {\n  const $isCartOpen = useStore(isCartOpen);\n  return (\n    <button onClick={() => isCartOpen.set(!$isCartOpen)}>Cart</button>\n  )\n}\n```\n\nThis snippet shows you how to cart button component for preact, which is an important aspect of share state between islands.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/sharing-state-islands", "title": "Share state between islands", "description": "This page covers how to share state between components in an Astro website using islands architecture and Nano Stores.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:31:18", "type": "code_examples", "page_metadata": {"ogTitle": "Share state between islands", "og:locale": "en", "og:description": "Learn how to share state across framework components with Nano Stores.", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to share state across framework components with Nano Stores.", "og:url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:card": "summary_large_image", "description": "Learn how to share state across framework components with Nano Stores.", "og:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/recipes/sharing-state-islands/", "title": "Share state between islands | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Share state between islands", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "language": "en", "scrapeId": "9a751e69-06a4-4c76-af3a-a4749422d494", "sourceURL": "https://docs.astro.build/en/recipes/sharing-state-islands", "url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Share state between islands in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Nano Stores for lightweight and framework-agnostic state management.\n\nConsider alternatives like Svelte‚Äôs built-in stores, Solid signals, Vue‚Äôs reactivity API, or custom browser events for state sharing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/sharing-state-islands", "title": "Share state between islands", "description": "This page covers how to share state between components in an Astro website using islands architecture and Nano Stores.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:31:18", "type": "best_practices", "page_metadata": {"ogTitle": "Share state between islands", "og:locale": "en", "og:description": "Learn how to share state across framework components with Nano Stores.", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Learn how to share state across framework components with Nano Stores.", "og:url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:card": "summary_large_image", "description": "Learn how to share state across framework components with Nano Stores.", "og:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/recipes/sharing-state-islands/", "title": "Share state between islands | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Share state between islands", "og:type": "article", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/sharing-state-islands.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "language": "en", "scrapeId": "9a751e69-06a4-4c76-af3a-a4749422d494", "sourceURL": "https://docs.astro.build/en/recipes/sharing-state-islands", "url": "https://docs.astro.build/en/recipes/sharing-state-islands/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Create your first Astro page is in astro?\n\nAssistant: Sure, I'd be happy to explain Create your first Astro page in astro.\n\n# Create your first Astro page\n\nThis page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.Here's a quick rundown of what this is about:\n\n## Create a new `.astro` file\n\n1. In the files pane of your code editor, navigate to the folder `src/pages/` where you will see the existing file `index.astro`.\n\n2. In that same folder, create a new file named `about.astro`.\n\n3. Copy, or retype the contents of `index.astro` into your new `about.astro` file.\n\n4. Add `/about` to the end of your website preview‚Äôs URL in the address bar and check that you can see a page load there. (e.g. `http://localhost:4321/about`)\n\nRight now, your ‚ÄúAbout‚Äù page should look exactly the same as the first page, but we‚Äôre going to change that!\n\n## Edit your page\n\nEdit the HTML content to make this page about you.\n\nTo change or add more content to your About page, add more HTML element tags containing content. You can copy and paste the HTML code below between the existing `<body></body>` tags, or create your own.\n\n```\n<body>\n\n  <h1>My Astro Site</h1>\n\n  <h1>About Me</h1>\n\n  <h2>... and my new Astro site!</h2>\n\n  <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n\n  <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n\n</body>\n``` \n\nNow, visit your `/about` page in your browser tab again, and you should see your updated content.\n\n## Add navigation links\n\nTo make it easier to preview all your pages, add HTML page navigation links before your `<h1>` at the top of both of your pages ( `index.astro` and `about.astro`):\n\n```\n<a href=\"/\">Home</a>\n\n<a href=\"/about/\">About</a>\n\n<h1>About Me</h1>\n\n<h2>... and my new Astro site!</h2>\n```\n\nCheck that you can click these links to move back and forth between pages on your site.\n\n## Try it yourself - Add a Blog page\n\nAdd a third page `blog.astro` to your site, following the [same steps as above](https://docs.astro.build/en/tutorial/2-pages/1/#create-a-new-astro-file).\n\n(Don‚Äôt forget to add a third navigation link to every page.)\n\nShow me the steps.\n\n1. Create a new file at `src/pages/blog.astro`.\n2. Copy the entire contents of `index.astro` and paste them into `blog.astro`.\n3. [Add a third navigation link](https://docs.astro.build/en/tutorial/2-pages/1/#add-navigation-links) to the top of every page:\n\n```\n<body>\n\n  <a href=\"/\">Home</a>\n\n  <a href=\"/about/\">About</a>\n\n  <a href=\"/blog/\">Blog</a>\n\n  <h1>My Astro Site</h1>\n\n</body>\n```\n\nYou should now have a website with three pages that all link to each other. It‚Äôs time to add some content to the Blog page.\n\nUpdate the page content at `blog.astro` with:\n\n```\n<body>\n\n  <a href=\"/\">Home</a>\n\n  <a href=\"/about/\">About</a>\n\n  <a href=\"/blog/\">Blog</a>\n\n  <h1>My Astro Site</h1>\n\n  <h1>My Astro Learning Blog</h1>\n\n  <p>This is where I will post about my journey learning Astro.</p>\n\n</body>\n```\n\nPreview your entire site by visiting all three pages in your browser preview and check that:\n\n- Every page correctly links to all three pages\n- Your two new pages each have their own descriptive heading\n- Your two new pages each have their own paragraph text.\n\n## Publish your changes to the web\n\nIf you‚Äôve followed our setup in Unit 1, you can publish your changes to your live website through Netlify.\n\nWhen you are happy with the way your preview looks, **commit** your changes to your online repository at GitHub.\n\n1. In VS Code, preview the files that have changed since your last commit to GitHub.\n   - Go to the **Source Control tab** in the left menu. It should have a small ‚Äú3‚Äù displayed.\n\n   - You should see `index.astro`, `about.astro`, and `blog.astro` listed as files that have changed.\n2. Enter a commit message (e.g. ‚ÄúAdded two new pages - about and blog‚Äù) in the text box, and press `Ctrl + Enter` (macOS: `Cmd ‚åò + Enter`) to commit the change to your current workspace.\n\n3. Click the button to `Sync Changes` to GitHub.\n\n4. After waiting a few minutes, visit your Netlify URL to verify that your changes are published live.\n\n## Checklist\n\n- I can create a new page for my website and link to it from an existing page.\n- I can commit my changes back to GitHub and update my live site on Netlify.\n\n## Resources\n\n- [File-based Routing in Astro](https://docs.astro.build/en/basics/astro-pages/#file-based-routing)\n\n- [Astro page HTML](https://docs.astro.build/en/basics/astro-pages/#astro-pages)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "overview", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a new `.astro` file in astro?\n\nAssistant: To create a new `.astro` file in astro, here's what you do:\n1. In the files pane of your code editor, navigate to the folder `src/pages/` where you will see the existing file `index.astro`.\n\n2. In that same folder, create a new file named `about.astro`.\n\n3. Copy, or retype the contents of `index.astro` into your new `about.astro` file.\n\n4. Add `/about` to the end of your website preview‚Äôs URL in the address bar and check that you can see a page load there. (e.g. `http://localhost:4321/about`)\n\nRight now, your ‚ÄúAbout‚Äù page should look exactly the same as the first page, but we‚Äôre going to change that!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I edit your page in astro?\n\nAssistant: To edit your page in astro, here's what you do:\nEdit the HTML content to make this page about you.\n\nTo change or add more content to your About page, add more HTML element tags containing content. You can copy and paste the HTML code below between the existing `<body></body>` tags, or create your own.\n\n```\n<body>\n\n  <h1>My Astro Site</h1>\n\n  <h1>About Me</h1>\n\n  <h2>... and my new Astro site!</h2>\n\n  <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n\n  <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n\n</body>\n``` \n\nNow, visit your `/about` page in your browser tab again, and you should see your updated content..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add navigation links in astro?\n\nAssistant: To add navigation links in astro, here's what you do:\nTo make it easier to preview all your pages, add HTML page navigation links before your `<h1>` at the top of both of your pages ( `index.astro` and `about.astro`):\n\n```\n<a href=\"/\">Home</a>\n\n<a href=\"/about/\">About</a>\n\n<h1>About Me</h1>\n\n<h2>... and my new Astro site!</h2>\n```\n\nCheck that you can click these links to move back and forth between pages on your site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - add a blog page in astro?\n\nAssistant: To try it yourself - add a blog page in astro, here's what you do:\nAdd a third page `blog.astro` to your site, following the [same steps as above](https://docs.astro.build/en/tutorial/2-pages/1/#create-a-new-astro-file).\n\n(Don‚Äôt forget to add a third navigation link to every page.)\n\nShow me the steps.\n\n1. Create a new file at `src/pages/blog.astro`.\n2. Copy the entire contents of `index.astro` and paste them into `blog.astro`.\n3. [Add a third navigation link](https://docs.astro.build/en/tutorial/2-pages/1/#add-navigation-links) to the top of every page:\n\n```\n<body>\n\n  <a href=\"/\">Home</a>\n\n  <a href=\"/about/\">About</a>\n\n  <a href=\"/blog/\">Blog</a>\n\n  <h1>My Astro Site</h1>\n\n</body>\n```\n\nYou should now have a website with three pages that all link to each other. It‚Äôs time to add some content to the Blog page.\n\nUpdate the page content at `blog.astro` with:\n\n```\n<body>\n\n  <a href=\"/\">Home</a>\n\n  <a href=\"/about/\">About</a>\n\n  <a href=\"/blog/\">Blog</a>\n\n  <h1>My Astro Site</h1>\n\n  <h1>My Astro Learning Blog</h1>\n\n  <p>This is where I will post about my journey learning Astro.</p>\n\n</body>\n```\n\nPreview your entire site by visiting all three pages in your browser preview and check that:\n\n- Every page correctly links to all three pages\n- Your two new pages each have their own descriptive heading\n- Your two new pages each have their own paragraph text..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publish your changes to the web in astro?\n\nAssistant: To publish your changes to the web in astro, here's what you do:\nIf you‚Äôve followed our setup in Unit 1, you can publish your changes to your live website through Netlify.\n\nWhen you are happy with the way your preview looks, **commit** your changes to your online repository at GitHub.\n\n1. In VS Code, preview the files that have changed since your last commit to GitHub.\n   - Go to the **Source Control tab** in the left menu. It should have a small ‚Äú3‚Äù displayed.\n\n   - You should see `index.astro`, `about.astro`, and `blog.astro` listed as files that have changed.\n2. Enter a commit message (e.g. ‚ÄúAdded two new pages - about and blog‚Äù) in the text box, and press `Ctrl + Enter` (macOS: `Cmd ‚åò + Enter`) to commit the change to your current workspace.\n\n3. Click the button to `Sync Changes` to GitHub.\n\n4. After waiting a few minutes, visit your Netlify URL to verify that your changes are published live..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can create a new page for my website and link to it from an existing page.\n- I can commit my changes back to GitHub and update my live site on Netlify..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [File-based Routing in Astro](https://docs.astro.build/en/basics/astro-pages/#file-based-routing)\n\n- [Astro page HTML](https://docs.astro.build/en/basics/astro-pages/#astro-pages).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "section_detail", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Create your first Astro page in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Edit your About page**:\n\n```yaml\n<body>\n\n  <h1>My Astro Site</h1>\n\n  <h1>About Me</h1>\n\n  <h2>... and my new Astro site!</h2>\n\n  <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>\n\n  <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n\n</body>\n```\n\nThis snippet shows you how to edit your about page, which is an important aspect of create your first astro page.\n\n**Add navigation links**:\n\n```yaml\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<h1>About Me</h1>\n<h2>... and my new Astro site!</h2>\n```\n\nThis snippet shows you how to add navigation links, which is an important aspect of create your first astro page.\n\n**Blog page content**:\n\n```yaml\n<body>\n\n  <a href=\"/\">Home</a>\n\n  <a href=\"/about/\">About</a>\n\n  <a href=\"/blog/\">Blog</a>\n\n  <h1>My Astro Site</h1>\n\n  <h1>My Astro Learning Blog</h1>\n\n  <p>This is where I will post about my journey learning Astro.</p>\n\n</body>\n```\n\nThis snippet shows you how to blog page content, which is an important aspect of create your first astro page.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "code_examples", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Create your first Astro page in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to preview your changes before publishing to verify everything looks correct.\n\nAlways commit your changes with a descriptive message to keep track of your updates.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/1", "title": "Create your first Astro page", "description": "This page covers the steps to create and manage your first Astro pages, including creating new pages, editing content, adding navigation links, and publishing changes to the web.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:31:54", "type": "best_practices", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "title": "Create your first Astro page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/1/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:title": "Create your first Astro page", "og:url": "https://docs.astro.build/en/tutorial/2-pages/1/", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd new pages to your site with navigation links between them", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/1.webp", "twitter:site": "astrodotbuild", "ogTitle": "Create your first Astro page", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "c75adb23-ea2f-47cf-8c04-97c4a7aa97c2", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/1", "url": "https://docs.astro.build/en/tutorial/2-pages/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/svelte is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/svelte in astro.\n\n# @astrojs/svelte\n\nThis Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.Here's a quick rundown of what this is about:\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/svelte`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add svelte\n```\n\n```\n\npnpm astro add svelte\n```\n\n```\n\nyarn astro add svelte\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/svelte` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/svelte\n```\n\n```\n\npnpm add @astrojs/svelte\n```\n\n```\n\nyarn add @astrojs/svelte\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'svelte'` (or similar) warning when you start up Astro, you‚Äôll need to install Svelte and TypeScript:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install svelte typescript\n```\n\n```\n\npnpm add svelte typescript\n```\n\n```\n\nyarn add svelte typescript\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport svelte from '@astrojs/svelte';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [svelte()],\n\n});\n```\n\nAnd create a new file called `svelte.config.js` in your project root directory and add the following code:\n\n```\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n}\n```\n\n## Getting started\n\nTo use your first Svelte component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together\n\n## Options\n\nThis integration is powered by `@sveltejs/vite-plugin-svelte`. To customize the Svelte compiler, options can be provided to the integration. See the `@sveltejs/vite-plugin-svelte` docs for more details.\n\nYou can set options either by passing them to the `svelte` integration in `astro.config.mjs` or in `svelte.config.js`. The options in `astro.config.mjs` will take precedence over the options in `svelte.config.js` if both are present:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport svelte from '@astrojs/svelte';\n\nexport default defineConfig({\n\n  integrations: [svelte({ extensions: ['.svelte'] })],\n\n});\n```\n\n```\nexport default {\n\n  extensions: ['.svelte'],\n\n};\n```\n\n## Preprocessors\n\n**Added in:** `@astrojs/svelte@2.0.0`\n\nIf you‚Äôre using SCSS or Stylus in your Svelte files, you can create a `svelte.config.js` file so that they are preprocessed by Svelte, and the Svelte IDE extension can correctly parse the Svelte files.\n\n```\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n};\n```\n\nThis config file will be automatically added for you when you run `astro add svelte`. See the `@sveltejs/vite-plugin-svelte` docs for more details about `vitePreprocess`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "overview", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/svelte`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add svelte\n```\n\n```\n\npnpm astro add svelte\n```\n\n```\n\nyarn astro add svelte\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/svelte` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/svelte\n```\n\n```\n\npnpm add @astrojs/svelte\n```\n\n```\n\nyarn add @astrojs/svelte\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'svelte'` (or similar) warning when you start up Astro, you‚Äôll need to install Svelte and TypeScript:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install svelte typescript\n```\n\n```\n\npnpm add svelte typescript\n```\n\n```\n\nyarn add svelte typescript\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport svelte from '@astrojs/svelte';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [svelte()],\n\n});\n```\n\nAnd create a new file called `svelte.config.js` in your project root directory and add the following code:\n\n```\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\nTo use your first Svelte component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options in astro?\n\nAssistant: To options in astro, here's what you do:\nThis integration is powered by `@sveltejs/vite-plugin-svelte`. To customize the Svelte compiler, options can be provided to the integration. See the `@sveltejs/vite-plugin-svelte` docs for more details.\n\nYou can set options either by passing them to the `svelte` integration in `astro.config.mjs` or in `svelte.config.js`. The options in `astro.config.mjs` will take precedence over the options in `svelte.config.js` if both are present:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport svelte from '@astrojs/svelte';\n\nexport default defineConfig({\n\n  integrations: [svelte({ extensions: ['.svelte'] })],\n\n});\n```\n\n```\nexport default {\n\n  extensions: ['.svelte'],\n\n};\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I preprocessors in astro?\n\nAssistant: To preprocessors in astro, here's what you do:\n**Added in:** `@astrojs/svelte@2.0.0`\n\nIf you‚Äôre using SCSS or Stylus in your Svelte files, you can create a `svelte.config.js` file so that they are preprocessed by Svelte, and the Svelte IDE extension can correctly parse the Svelte files.\n\n```\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n};\n```\n\nThis config file will be automatically added for you when you run `astro add svelte`. See the `@sveltejs/vite-plugin-svelte` docs for more details about `vitePreprocess`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "section_detail", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/svelte in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install @astrojs/svelte using npm**:\n\n```yaml\nnpm install @astrojs/svelte\n```\n\nThis snippet shows you how to install @astrojs/svelte using npm, which is an important aspect of @astrojs/svelte.\n\n**Install @astrojs/svelte using pnpm**:\n\n```yaml\npnpm add @astrojs/svelte\n```\n\nThis snippet shows you how to install @astrojs/svelte using pnpm, which is an important aspect of @astrojs/svelte.\n\n**Install @astrojs/svelte using Yarn**:\n\n```yaml\nyarn add @astrojs/svelte\n```\n\nThis snippet shows you how to install @astrojs/svelte using yarn, which is an important aspect of @astrojs/svelte.\n\n**Install Svelte and TypeScript using npm**:\n\n```yaml\nnpm install svelte typescript\n```\n\nThis snippet shows you how to install svelte and typescript using npm, which is an important aspect of @astrojs/svelte.\n\n**Install Svelte and TypeScript using pnpm**:\n\n```yaml\npnpm add svelte typescript\n```\n\nThis snippet shows you how to install svelte and typescript using pnpm, which is an important aspect of @astrojs/svelte.\n\n**Install Svelte and TypeScript using Yarn**:\n\n```yaml\nyarn add svelte typescript\n```\n\nThis snippet shows you how to install svelte and typescript using yarn, which is an important aspect of @astrojs/svelte.\n\n**Astro configuration with Svelte integration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport svelte from '@astrojs/svelte';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [svelte()],\n\n});\n```\n\nThis snippet shows you how to astro configuration with svelte integration, which is an important aspect of @astrojs/svelte.\n\n**Svelte configuration with vitePreprocess**:\n\n```yaml\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n};\n```\n\nThis snippet shows you how to svelte configuration with vitepreprocess, which is an important aspect of @astrojs/svelte.\n\n**Astro configuration with custom Svelte options**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport svelte from '@astrojs/svelte';\n\nexport default defineConfig({\n\n  integrations: [svelte({ extensions: ['.svelte'] })],\n\n});\n```\n\nThis snippet shows you how to astro configuration with custom svelte options, which is an important aspect of @astrojs/svelte.\n\n**Svelte configuration with custom extensions**:\n\n```yaml\nexport default {\n\n  extensions: ['.svelte'],\n\n};\n```\n\nThis snippet shows you how to svelte configuration with custom extensions, which is an important aspect of @astrojs/svelte.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "code_examples", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/svelte in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub.\n\nMost package managers will install associated peer dependencies as well.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/svelte", "title": "@astrojs/svelte", "description": "This Astro integration enables rendering and client-side hydration for your Svelte 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:32:27", "type": "best_practices", "page_metadata": {"og:title": "@astrojs/svelte", "docsearch:language": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "twitter:site": "astrodotbuild", "ogDescription": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:locale": "en", "og:description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/svelte.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "ogTitle": "@astrojs/svelte", "title": "@astrojs/svelte | Docs", "language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "description": "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", "scrapeId": "6c8ac910-c641-4a34-a795-ef9155daa98c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/svelte", "url": "https://docs.astro.build/en/guides/integrations-guide/svelte/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Congratulations! is in astro?\n\nAssistant: Sure, I'd be happy to explain Congratulations! in astro.\n\n# Congratulations!\n\nThis page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.Here's a quick rundown of what this is about:\n\n## Checklist\n\n- I can‚Äôt wait to start my next Astro project! üöÄ\n\n## Share your achievement!\n\nCongratulations on completing the Astro blog tutorial! Share your achievement with the world and let everyone know you‚Äôre an Astronaut now!\n\n## Next Steps\n\nYou can enhance this project‚Äôs final code with one of our tutorial extensions, or start your next Astro project!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/3", "title": "Congratulations!", "description": "This page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:33:20", "type": "overview", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:title": "Congratulations!", "twitter:site": "astrodotbuild", "title": "Congratulations! | Docs", "og:locale": "en", "ogSiteName": "Docs", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "ogTitle": "Congratulations!", "description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:url": "https://docs.astro.build/en/tutorial/6-islands/3/", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/3/", "docsearch:language": "en", "scrapeId": "abe416ab-2203-464d-89c0-696226c54f21", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/3", "url": "https://docs.astro.build/en/tutorial/6-islands/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can‚Äôt wait to start my next Astro project! üöÄ.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/3", "title": "Congratulations!", "description": "This page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:33:20", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:title": "Congratulations!", "twitter:site": "astrodotbuild", "title": "Congratulations! | Docs", "og:locale": "en", "ogSiteName": "Docs", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "ogTitle": "Congratulations!", "description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:url": "https://docs.astro.build/en/tutorial/6-islands/3/", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/3/", "docsearch:language": "en", "scrapeId": "abe416ab-2203-464d-89c0-696226c54f21", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/3", "url": "https://docs.astro.build/en/tutorial/6-islands/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I share your achievement! in astro?\n\nAssistant: To share your achievement! in astro, here's what you do:\nCongratulations on completing the Astro blog tutorial! Share your achievement with the world and let everyone know you‚Äôre an Astronaut now!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/3", "title": "Congratulations!", "description": "This page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:33:20", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:title": "Congratulations!", "twitter:site": "astrodotbuild", "title": "Congratulations! | Docs", "og:locale": "en", "ogSiteName": "Docs", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "ogTitle": "Congratulations!", "description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:url": "https://docs.astro.build/en/tutorial/6-islands/3/", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/3/", "docsearch:language": "en", "scrapeId": "abe416ab-2203-464d-89c0-696226c54f21", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/3", "url": "https://docs.astro.build/en/tutorial/6-islands/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I next steps in astro?\n\nAssistant: To next steps in astro, here's what you do:\nYou can enhance this project‚Äôs final code with one of our tutorial extensions, or start your next Astro project!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/3", "title": "Congratulations!", "description": "This page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:33:20", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:title": "Congratulations!", "twitter:site": "astrodotbuild", "title": "Congratulations! | Docs", "og:locale": "en", "ogSiteName": "Docs", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "ogTitle": "Congratulations!", "description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:url": "https://docs.astro.build/en/tutorial/6-islands/3/", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/3/", "docsearch:language": "en", "scrapeId": "abe416ab-2203-464d-89c0-696226c54f21", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/3", "url": "https://docs.astro.build/en/tutorial/6-islands/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Congratulations! in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Astro Code Example**:\n\n```yaml\n---\n\nimport BaseLayout from \"../layouts/BaseLayout.astro\";\n\nconst pageTitle = \"About Me\";\n\nconst happy = true;\n\nconst finished = false;\n\nconst finished = true;\n\nconst goal = 3;\n\nconst identity = {\n\n  firstName: \"Sarah\",\n\n  country: \"Canada\",\n\n  occupation: \"Technical Writer\",\n\n  hobbies: [\"photography\", \"birdwatching\", \"baseball\"],\n\n};\n\nconst skills = [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Astro\", \"Writing Docs\"];\n\nconst skillColor = \"navy\";\n\nconst fontWeight = \"bold\";\n\nconst textCase = \"uppercase\";\n\n---\n```\n\nThis snippet shows you how to astro code example, which is an important aspect of congratulations!.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/3", "title": "Congratulations!", "description": "This page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:33:20", "type": "code_examples", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:title": "Congratulations!", "twitter:site": "astrodotbuild", "title": "Congratulations! | Docs", "og:locale": "en", "ogSiteName": "Docs", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "ogTitle": "Congratulations!", "description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:url": "https://docs.astro.build/en/tutorial/6-islands/3/", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/3/", "docsearch:language": "en", "scrapeId": "abe416ab-2203-464d-89c0-696226c54f21", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/3", "url": "https://docs.astro.build/en/tutorial/6-islands/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Congratulations! in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck out our docs for guides and reference material.\n\nVisit our Discord to ask questions, get help or just hang out.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/3", "title": "Congratulations!", "description": "This page celebrates the completion of the Astro blog tutorial and provides next steps and sharing options.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:33:20", "type": "best_practices", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:site_name": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/3.webp", "og:title": "Congratulations!", "twitter:site": "astrodotbuild", "title": "Congratulations! | Docs", "og:locale": "en", "ogSiteName": "Docs", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "ogTitle": "Congratulations!", "description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:url": "https://docs.astro.build/en/tutorial/6-islands/3/", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCheck out the final version of your project and find out what‚Äôs next with Astro!", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/3/", "docsearch:language": "en", "scrapeId": "abe416ab-2203-464d-89c0-696226c54f21", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/3", "url": "https://docs.astro.build/en/tutorial/6-islands/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what About this Tutorial is in astro?\n\nAssistant: Sure, I'd be happy to explain About this Tutorial in astro.\n\n# About this Tutorial\n\nThis tutorial provides an introduction to getting started with Astro, including prerequisites, checklists, and support resources.Here's a quick rundown of what this is about:\n\n## What do I need to know to get started?\n\nIf you have some basic familiarity with **HTML**, **Markdown**, **CSS**, and a little **JavaScript**, then you‚Äôre totally good to go! You‚Äôll be able to complete the entire tutorial just by following the instructions. Astro is for everyone! üßë‚ÄçüöÄ üë©‚ÄçüöÄ üë®‚ÄçüöÄ\n\nYou will also need a [GitHub](https://github.com/) (or similar) account for publishing your project to the web.\n\nHow do I use the checklists at the bottom of each page?\n\nYou check them off!\n\nAt the end of each page, you‚Äôll find a clickable checklist of tasks you should now be able to do. Check these items off to see your progress in the Tutorial Tracker.\n\nUsing the tracker is optional, but it can help you remember your place if you complete the tutorial over multiple visits. You can also leave some checklists blank as a reminder of units that you want to revisit later.\n\n(This data is only saved to your browser‚Äôs local storage and is not available elsewhere. No data is sent to, nor stored by Astro.)\n\nUnit 1 is things I already know how to do. Can I skip it?\n\nYou can use the lessons inside [Unit 1](https://docs.astro.build/en/tutorial/1-setup/) to make sure you have the development tools and online accounts you‚Äôll need to complete the tutorial. It will walk you through creating a new Astro project, storing it on GitHub, and deploying it to Netlify.\n\nIf you [create a new, empty Astro project](https://docs.astro.build/en/install-and-setup/) and are comfortable with your setup, you can safely skip ahead to [Unit 2](https://docs.astro.build/en/tutorial/2-pages/) where you will start making new pages in your project.\n\nWhat if I need help, or want to learn more about Astro?\n\nOur [friendly Astro Discord server](https://astro.build/chat) is the place to be!\n\nHop into the support forum channel to ask questions, or say hi and chat in `#general` or `#off-topic`.\n\nWhere can I leave feedback about this tutorial?\n\nThis tutorial is a project of our Docs team. You can find us on Discord in the `#docs` channel, or file issues to the [Docs repo on GitHub](https://github.com/withastro/docs/issues).\n\n## Checklist for moving on\n\n- I‚Äôm ready to build this thing!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction/1", "title": "About this Tutorial", "description": "This tutorial provides an introduction to getting started with Astro, including prerequisites, checklists, and support resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:43:50", "type": "overview", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/1/", "ogDescription": "How to get started with the \"Build your first Astro blog\" tutorial.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "About this Tutorial", "language": "en", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "og:site_name": "Docs", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:description": "How to get started with the \"Build your first Astro blog\" tutorial.", "og:title": "About this Tutorial", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "docsearch:language": "en", "title": "About this Tutorial | Docs", "description": "How to get started with the \"Build your first Astro blog\" tutorial.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "ef58ef0c-b767-4437-9679-3fd805543ca1", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction/1", "url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what do i need to know to get started? in astro?\n\nAssistant: To what do i need to know to get started? in astro, here's what you do:\nIf you have some basic familiarity with **HTML**, **Markdown**, **CSS**, and a little **JavaScript**, then you‚Äôre totally good to go! You‚Äôll be able to complete the entire tutorial just by following the instructions. Astro is for everyone! üßë‚ÄçüöÄ üë©‚ÄçüöÄ üë®‚ÄçüöÄ\n\nYou will also need a [GitHub](https://github.com/) (or similar) account for publishing your project to the web.\n\nHow do I use the checklists at the bottom of each page?\n\nYou check them off!\n\nAt the end of each page, you‚Äôll find a clickable checklist of tasks you should now be able to do. Check these items off to see your progress in the Tutorial Tracker.\n\nUsing the tracker is optional, but it can help you remember your place if you complete the tutorial over multiple visits. You can also leave some checklists blank as a reminder of units that you want to revisit later.\n\n(This data is only saved to your browser‚Äôs local storage and is not available elsewhere. No data is sent to, nor stored by Astro.)\n\nUnit 1 is things I already know how to do. Can I skip it?\n\nYou can use the lessons inside [Unit 1](https://docs.astro.build/en/tutorial/1-setup/) to make sure you have the development tools and online accounts you‚Äôll need to complete the tutorial. It will walk you through creating a new Astro project, storing it on GitHub, and deploying it to Netlify.\n\nIf you [create a new, empty Astro project](https://docs.astro.build/en/install-and-setup/) and are comfortable with your setup, you can safely skip ahead to [Unit 2](https://docs.astro.build/en/tutorial/2-pages/) where you will start making new pages in your project.\n\nWhat if I need help, or want to learn more about Astro?\n\nOur [friendly Astro Discord server](https://astro.build/chat) is the place to be!\n\nHop into the support forum channel to ask questions, or say hi and chat in `#general` or `#off-topic`.\n\nWhere can I leave feedback about this tutorial?\n\nThis tutorial is a project of our Docs team. You can find us on Discord in the `#docs` channel, or file issues to the [Docs repo on GitHub](https://github.com/withastro/docs/issues)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction/1", "title": "About this Tutorial", "description": "This tutorial provides an introduction to getting started with Astro, including prerequisites, checklists, and support resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:43:50", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/1/", "ogDescription": "How to get started with the \"Build your first Astro blog\" tutorial.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "About this Tutorial", "language": "en", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "og:site_name": "Docs", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:description": "How to get started with the \"Build your first Astro blog\" tutorial.", "og:title": "About this Tutorial", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "docsearch:language": "en", "title": "About this Tutorial | Docs", "description": "How to get started with the \"Build your first Astro blog\" tutorial.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "ef58ef0c-b767-4437-9679-3fd805543ca1", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction/1", "url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist for moving on in astro?\n\nAssistant: To checklist for moving on in astro, here's what you do:\n- I‚Äôm ready to build this thing!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction/1", "title": "About this Tutorial", "description": "This tutorial provides an introduction to getting started with Astro, including prerequisites, checklists, and support resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:43:50", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/1/", "ogDescription": "How to get started with the \"Build your first Astro blog\" tutorial.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "About this Tutorial", "language": "en", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "og:site_name": "Docs", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:description": "How to get started with the \"Build your first Astro blog\" tutorial.", "og:title": "About this Tutorial", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "docsearch:language": "en", "title": "About this Tutorial | Docs", "description": "How to get started with the \"Build your first Astro blog\" tutorial.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "ef58ef0c-b767-4437-9679-3fd805543ca1", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction/1", "url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using About this Tutorial in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFamiliarity with HTML, Markdown, CSS, and JavaScript is beneficial for completing the tutorial.\n\nUse the checklist at the end of each page to track your progress.\n\nYou can skip Unit 1 if you are comfortable with your setup and have created a new Astro project.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/0-introduction/1", "title": "About this Tutorial", "description": "This tutorial provides an introduction to getting started with Astro, including prerequisites, checklists, and support resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:43:50", "type": "best_practices", "page_metadata": {"ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/1/", "ogDescription": "How to get started with the \"Build your first Astro blog\" tutorial.", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "About this Tutorial", "language": "en", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "og:site_name": "Docs", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "og:description": "How to get started with the \"Build your first Astro blog\" tutorial.", "og:title": "About this Tutorial", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction/1.webp", "docsearch:language": "en", "title": "About this Tutorial | Docs", "description": "How to get started with the \"Build your first Astro blog\" tutorial.", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "ef58ef0c-b767-4437-9679-3fd805543ca1", "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction/1", "url": "https://docs.astro.build/en/tutorial/0-introduction/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/tailwind is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/tailwind in astro.\n\n# @astrojs/tailwind\n\nTo use Tailwind in Astro, follow the styling guide for Tailwind.", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/tailwind", "title": "@astrojs/tailwind", "description": "To use Tailwind in Astro, follow the styling guide for Tailwind.", "has_code_examples": false, "has_best_practices": false, "section_count": 0, "timestamp": "2025-03-01 02:43:59", "type": "overview", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/tailwind/", "ogSiteName": "Docs", "og:type": "article", "ogLocale": "en", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/tailwind.webp", "ogDescription": "Learn how to use the @astrojs/tailwind integration in your Astro project.", "og:description": "Learn how to use the @astrojs/tailwind integration in your Astro project.", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/tailwind integration in your Astro project.", "ogTitle": "@astrojs/tailwind", "og:site_name": "Docs", "twitter:card": "summary_large_image", "og:title": "@astrojs/tailwind", "title": "@astrojs/tailwind | Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/tailwind/", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/tailwind.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/tailwind.webp", "language": "en", "scrapeId": "eae92c9f-83b8-44d0-b37f-b4eaba706934", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/tailwind", "url": "https://docs.astro.build/en/guides/integrations-guide/tailwind/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Front Matter CMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Front Matter CMS & Astro in astro.\n\n# Front Matter CMS & Astro\n\nFront Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.Here's a quick rundown of what this is about:\n\n## Integration with Astro\n\nIn this section, we‚Äôll walk through how to add Front Matter CMS to your Astro project.\n\n## Prerequisites\n\n- Visual Studio Code\n- Use the Astro Blog template to provide the base configuration and sample content to start with Front Matter CMS.\n\n## Install the Front Matter CMS extension\n\nYou can get the extension from the Visual Studio Code Marketplace - Front Matter or by clicking on the following link: open Front Matter CMS extension in VS Code.\n\n## Project initialization\n\nOnce Front Matter CMS is installed, you will get a new icon in the Activity Bar. It will open the Front Matter CMS panel in the primary sidebar when you click on it. Follow the next steps to initialize your project:\n\n- Click on the Initialize project button in the Front Matter panel\n- The welcome screen will open, and you can start initializing the project\n- Click on the first step to Initialize project\n- As Astro is one of the supported frameworks, you can select it from the list\n- Register your content folders, in this case, the src/content/blog folder.\n- You will be asked to enter the name of the folder. By default, it takes the folder name.\n- Click on Show the dashboard to open the content dashboard.\n\n## Project configuration\n\nOnce the project is initialized, you will get a frontmatter.json configuration file and a .frontmatter folder in the root of your project.\n\n- Directory.frontmatter/\n- Directorydatabase/\n- mediaDb.json\n- Directorysrc/\n- ‚Ä¶\n- astro.config.mjs\n- frontmatter.json\n- package.json\n\n## Content-type configuration\n\nContent-types are the way Front Matter CMS manages your content. Each content-type contains a set of fields, which can be defined per type of content you want to use for your website.\n\nThe fields correspond to the front matter of your page content.\n\nYou can configure the content-types in the frontmatter.json file.\n\n- Open the frontmatter.json file\n- Replace the frontMatter.taxonomy.contentTypes array with the following content-types configuration:\n\n\"frontMatter.taxonomy.contentTypes\": [\\\n\\\n  {\\\n\\\n    \"name\": \"default\",\\\n\\\n    \"pageBundle\": false,\\\n\\\n    \"previewPath\": \"'blog'\",\\\n\\\n    \"filePrefix\": null,\\\n\\\n    \"fields\": [\\\n\\\n      {\\\n\\\n        \"title\": \"Title\",\\\n\\\n        \"name\": \"title\",\\\n\\\n        \"type\": \"string\",\\\n\\\n        \"single\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Description\",\\\n\\\n        \"name\": \"description\",\\\n\\\n        \"type\": \"string\"\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Publishing date\",\\\n\\\n        \"name\": \"pubDate\",\\\n\\\n        \"type\": \"datetime\",\\\n\\\n        \"default\": \"{{now}}\",\\\n\\\n        \"isPublishDate\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Content preview\",\\\n\\\n        \"name\": \"heroImage\",\\\n\\\n        \"type\": \"image\",\\\n\\\n        \"isPreviewImage\": true\\\n\\\n      }\\\n\\\n    ]\\\n\\\n  }\\\n\\\n]\n\n## Preview your articles in the editor\n\nFrom the Front Matter CMS panel, click on the Start server button. This action starts the Astro local dev server. Once running, you can open the content dashboard, select one of the articles and click on the Open preview button to open the article in the editor.\n\n## Create new articles\n\nOpen the Front Matter CMS Dashboard; you can do this as follows:\n\n- Open the Front Matter CMS‚Äô content dashboard\n- Click on the Create content button\n- Front Matter will ask you for the title of the article. Fill it in and press enter\n- Your new article will be created and opened in the editor. You can start writing your article.\n\n## Using Markdoc with Front Matter CMS\n\nTo use Markdoc with Front Matter CMS, you must configure this in the frontMatter.content.supportedFileTypes. This setting lets the CMS know which types of files it can progress.\n\nYou can configure the setting as follows:\n\n\"frontMatter.content.supportedFileTypes\": [ \"md\", \"markdown\", \"mdx\", \"mdoc\" ]\n\nTo allow your content to be created as Markdoc, specify the fileType property on the content-type.\n\n\"frontMatter.taxonomy.contentTypes\": [\\\n\\\n  {\\\n\\\n    \"name\": \"default\",\\\n\\\n    \"pageBundle\": false,\\\n\\\n    \"previewPath\": \"'blog'\",\\\n\\\n    \"filePrefix\": null,\\\n\\\n    \"fileType\": \"mdoc\",\\\n\\\n    \"fields\": [\\\n\\\n      {\\\n\\\n        \"title\": \"Title\",\\\n\\\n        \"name\": \"title\",\\\n\\\n        \"type\": \"string\",\\\n\\\n        \"single\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Description\",\\\n\\\n        \"name\": \"description\",\\\n\\\n        \"type\": \"string\"\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Publishing date\",\\\n\\\n        \"name\": \"pubDate\",\\\n\\\n        \"type\": \"datetime\",\\\n\\\n        \"default\": \"{{now}}\",\\\n\\\n        \"isPublishDate\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Content preview\",\\\n\\\n        \"name\": \"heroImage\",\\\n\\\n        \"type\": \"image\",\\\n\\\n        \"isPreviewImage\": true\\\n\\\n      }\\\n\\\n    ]\\\n\\\n  }\\\n\\\n]\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "overview", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integration with astro in astro?\n\nAssistant: To integration with astro in astro, here's what you do:\nIn this section, we‚Äôll walk through how to add Front Matter CMS to your Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\n- Visual Studio Code\n- Use the Astro Blog template to provide the base configuration and sample content to start with Front Matter CMS..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I install the front matter cms extension in astro?\n\nAssistant: To install the front matter cms extension in astro, here's what you do:\nYou can get the extension from the Visual Studio Code Marketplace - Front Matter or by clicking on the following link: open Front Matter CMS extension in VS Code..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I project initialization in astro?\n\nAssistant: To project initialization in astro, here's what you do:\nOnce Front Matter CMS is installed, you will get a new icon in the Activity Bar. It will open the Front Matter CMS panel in the primary sidebar when you click on it. Follow the next steps to initialize your project:\n\n- Click on the Initialize project button in the Front Matter panel\n- The welcome screen will open, and you can start initializing the project\n- Click on the first step to Initialize project\n- As Astro is one of the supported frameworks, you can select it from the list\n- Register your content folders, in this case, the src/content/blog folder.\n- You will be asked to enter the name of the folder. By default, it takes the folder name.\n- Click on Show the dashboard to open the content dashboard..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I project configuration in astro?\n\nAssistant: To project configuration in astro, here's what you do:\nOnce the project is initialized, you will get a frontmatter.json configuration file and a .frontmatter folder in the root of your project.\n\n- Directory.frontmatter/\n- Directorydatabase/\n- mediaDb.json\n- Directorysrc/\n- ‚Ä¶\n- astro.config.mjs\n- frontmatter.json\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I content-type configuration in astro?\n\nAssistant: To content-type configuration in astro, here's what you do:\nContent-types are the way Front Matter CMS manages your content. Each content-type contains a set of fields, which can be defined per type of content you want to use for your website.\n\nThe fields correspond to the front matter of your page content.\n\nYou can configure the content-types in the frontmatter.json file.\n\n- Open the frontmatter.json file\n- Replace the frontMatter.taxonomy.contentTypes array with the following content-types configuration:\n\n\"frontMatter.taxonomy.contentTypes\": [\\\n\\\n  {\\\n\\\n    \"name\": \"default\",\\\n\\\n    \"pageBundle\": false,\\\n\\\n    \"previewPath\": \"'blog'\",\\\n\\\n    \"filePrefix\": null,\\\n\\\n    \"fields\": [\\\n\\\n      {\\\n\\\n        \"title\": \"Title\",\\\n\\\n        \"name\": \"title\",\\\n\\\n        \"type\": \"string\",\\\n\\\n        \"single\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Description\",\\\n\\\n        \"name\": \"description\",\\\n\\\n        \"type\": \"string\"\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Publishing date\",\\\n\\\n        \"name\": \"pubDate\",\\\n\\\n        \"type\": \"datetime\",\\\n\\\n        \"default\": \"{{now}}\",\\\n\\\n        \"isPublishDate\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Content preview\",\\\n\\\n        \"name\": \"heroImage\",\\\n\\\n        \"type\": \"image\",\\\n\\\n        \"isPreviewImage\": true\\\n\\\n      }\\\n\\\n    ]\\\n\\\n  }\\\n\\\n].\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I preview your articles in the editor in astro?\n\nAssistant: To preview your articles in the editor in astro, here's what you do:\nFrom the Front Matter CMS panel, click on the Start server button. This action starts the Astro local dev server. Once running, you can open the content dashboard, select one of the articles and click on the Open preview button to open the article in the editor..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create new articles in astro?\n\nAssistant: To create new articles in astro, here's what you do:\nOpen the Front Matter CMS Dashboard; you can do this as follows:\n\n- Open the Front Matter CMS‚Äô content dashboard\n- Click on the Create content button\n- Front Matter will ask you for the title of the article. Fill it in and press enter\n- Your new article will be created and opened in the editor. You can start writing your article..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using markdoc with front matter cms in astro?\n\nAssistant: To using markdoc with front matter cms in astro, here's what you do:\nTo use Markdoc with Front Matter CMS, you must configure this in the frontMatter.content.supportedFileTypes. This setting lets the CMS know which types of files it can progress.\n\nYou can configure the setting as follows:\n\n\"frontMatter.content.supportedFileTypes\": [ \"md\", \"markdown\", \"mdx\", \"mdoc\" ]\n\nTo allow your content to be created as Markdoc, specify the fileType property on the content-type.\n\n\"frontMatter.taxonomy.contentTypes\": [\\\n\\\n  {\\\n\\\n    \"name\": \"default\",\\\n\\\n    \"pageBundle\": false,\\\n\\\n    \"previewPath\": \"'blog'\",\\\n\\\n    \"filePrefix\": null,\\\n\\\n    \"fileType\": \"mdoc\",\\\n\\\n    \"fields\": [\\\n\\\n      {\\\n\\\n        \"title\": \"Title\",\\\n\\\n        \"name\": \"title\",\\\n\\\n        \"type\": \"string\",\\\n\\\n        \"single\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Description\",\\\n\\\n        \"name\": \"description\",\\\n\\\n        \"type\": \"string\"\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Publishing date\",\\\n\\\n        \"name\": \"pubDate\",\\\n\\\n        \"type\": \"datetime\",\\\n\\\n        \"default\": \"{{now}}\",\\\n\\\n        \"isPublishDate\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Content preview\",\\\n\\\n        \"name\": \"heroImage\",\\\n\\\n        \"type\": \"image\",\\\n\\\n        \"isPreviewImage\": true\\\n\\\n      }\\\n\\\n    ]\\\n\\\n  }\\\n\\\n].\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Front Matter CMS & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Content-type configuration example**:\n\n```yaml\n\"frontMatter.taxonomy.contentTypes\": [\\\n\\\n  {\\\n\\\n    \"name\": \"default\",\\\n\\\n    \"pageBundle\": false,\\\n\\\n    \"previewPath\": \"'blog'\",\\\n\\\n    \"filePrefix\": null,\\\n\\\n    \"fields\": [\\\n\\\n      {\\\n\\\n        \"title\": \"Title\",\\\n\\\n        \"name\": \"title\",\\\n\\\n        \"type\": \"string\",\\\n\\\n        \"single\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Description\",\\\n\\\n        \"name\": \"description\",\\\n\\\n        \"type\": \"string\"\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Publishing date\",\\\n\\\n        \"name\": \"pubDate\",\\\n\\\n        \"type\": \"datetime\",\\\n\\\n        \"default\": \"{{now}}\",\\\n\\\n        \"isPublishDate\": true\\\n\\\n      },\\\n\\\n      {\\\n\\\n        \"title\": \"Content preview\",\\\n\\\n        \"name\": \"heroImage\",\\\n\\\n        \"type\": \"image\",\\\n\\\n        \"isPreviewImage\": true\\\n\\\n      }\\\n\\\n    ]\\\n\\\n  }\\\n\\\n]\n```\n\nThis snippet shows you how to content-type configuration example, which is an important aspect of front matter cms & astro.\n\n**Supported file types configuration example**:\n\n```yaml\n\"frontMatter.content.supportedFileTypes\": [ \"md\", \"markdown\", \"mdx\", \"mdoc\" ]\n```\n\nThis snippet shows you how to supported file types configuration example, which is an important aspect of front matter cms & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "code_examples", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Front Matter CMS & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the Astro Blog template to provide the base configuration and sample content to start with Front Matter CMS.\n\nEnsure to register your content folders correctly during project initialization.\n\nAlways check the Visual Studio Code Marketplace for the latest version of the Front Matter CMS extension.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "title": "Front Matter CMS & Astro", "description": "Front Matter CMS brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:45:51", "type": "best_practices", "page_metadata": {"twitter:site": "astrodotbuild", "ogTitle": "Front Matter CMS & Astro", "ogDescription": "Add content to your Astro project using Front Matter CMS", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "language": "en", "og:url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Add content to your Astro project using Front Matter CMS", "og:title": "Front Matter CMS & Astro", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "title": "Front Matter CMS & Astro | Docs", "og:type": "article", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "og:description": "Add content to your Astro project using Front Matter CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/frontmatter-cms.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "og:site_name": "Docs", "scrapeId": "adfff7f7-d904-4c82-894a-667949c6c984", "sourceURL": "https://docs.astro.build/en/guides/cms/frontmatter-cms", "url": "https://docs.astro.build/en/guides/cms/frontmatter-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Craft CMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Craft CMS & Astro in astro.\n\n# Craft CMS & Astro\n\nCraft CMS is a flexible open source CMS with an accessible authoring experience. It includes its own front end, but can also be used as a headless CMS to provide content to your Astro project.Here's a quick rundown of what this is about:\n\n## Official Resources\n\n- Check out the official Craft CMS [GraphQL API guide](https://craftcms.com/docs/5.x/development/graphql.html)\n- The official documentation for Craft‚Äôs [`headlessMode` config setting](https://craftcms.com/docs/5.x/reference/config/general.html#headlessmode)\n\n## Community Resources\n\n- [SSG Astro with Headless Craft CMS Content Fetched At Build Time](https://www.olets.dev/posts/ssg-astro-with-headless-craft-cms-content-fetched-at-build-time/)\n- [SSG Astro with Headless Craft CMS Content Fetched At Build Time Or Cached In Advance](https://www.olets.dev/posts/ssg-astro-with-headless-craft-cms-content-fetched-at-build-time-or-cached-in-advance/)\n- [SSR Astro With Headless Craft CMS](https://www.olets.dev/posts/ssr-astro-with-headless-craft-cms/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/craft-cms", "title": "Craft CMS & Astro", "description": "Craft CMS is a flexible open source CMS with an accessible authoring experience. It includes its own front end, but can also be used as a headless CMS to provide content to your Astro project.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:46:16", "type": "overview", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Craft CMS & Astro", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "ogSiteName": "Docs", "language": "en", "ogLocale": "en", "title": "Craft CMS & Astro | Docs", "ogDescription": "Add content to your Astro project using Craft CMS as a CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "Craft CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "og:url": "https://docs.astro.build/en/guides/cms/craft-cms/", "docsearch:language": "en", "description": "Add content to your Astro project using Craft CMS as a CMS", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/cms/craft-cms/", "twitter:card": "summary_large_image", "og:type": "article", "og:locale": "en", "og:description": "Add content to your Astro project using Craft CMS as a CMS", "scrapeId": "abd1409a-0584-4fdb-91d8-2465cbaa8792", "sourceURL": "https://docs.astro.build/en/guides/cms/craft-cms", "url": "https://docs.astro.build/en/guides/cms/craft-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- Check out the official Craft CMS [GraphQL API guide](https://craftcms.com/docs/5.x/development/graphql.html)\n- The official documentation for Craft‚Äôs [`headlessMode` config setting](https://craftcms.com/docs/5.x/reference/config/general.html#headlessmode).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/craft-cms", "title": "Craft CMS & Astro", "description": "Craft CMS is a flexible open source CMS with an accessible authoring experience. It includes its own front end, but can also be used as a headless CMS to provide content to your Astro project.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:46:16", "type": "section_detail", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Craft CMS & Astro", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "ogSiteName": "Docs", "language": "en", "ogLocale": "en", "title": "Craft CMS & Astro | Docs", "ogDescription": "Add content to your Astro project using Craft CMS as a CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "Craft CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "og:url": "https://docs.astro.build/en/guides/cms/craft-cms/", "docsearch:language": "en", "description": "Add content to your Astro project using Craft CMS as a CMS", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/cms/craft-cms/", "twitter:card": "summary_large_image", "og:type": "article", "og:locale": "en", "og:description": "Add content to your Astro project using Craft CMS as a CMS", "scrapeId": "abd1409a-0584-4fdb-91d8-2465cbaa8792", "sourceURL": "https://docs.astro.build/en/guides/cms/craft-cms", "url": "https://docs.astro.build/en/guides/cms/craft-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community resources in astro?\n\nAssistant: To community resources in astro, here's what you do:\n- [SSG Astro with Headless Craft CMS Content Fetched At Build Time](https://www.olets.dev/posts/ssg-astro-with-headless-craft-cms-content-fetched-at-build-time/)\n- [SSG Astro with Headless Craft CMS Content Fetched At Build Time Or Cached In Advance](https://www.olets.dev/posts/ssg-astro-with-headless-craft-cms-content-fetched-at-build-time-or-cached-in-advance/)\n- [SSR Astro With Headless Craft CMS](https://www.olets.dev/posts/ssr-astro-with-headless-craft-cms/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/craft-cms", "title": "Craft CMS & Astro", "description": "Craft CMS is a flexible open source CMS with an accessible authoring experience. It includes its own front end, but can also be used as a headless CMS to provide content to your Astro project.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:46:16", "type": "section_detail", "page_metadata": {"twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Craft CMS & Astro", "og:site_name": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "ogSiteName": "Docs", "language": "en", "ogLocale": "en", "title": "Craft CMS & Astro | Docs", "ogDescription": "Add content to your Astro project using Craft CMS as a CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "Craft CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/craft-cms.webp", "og:url": "https://docs.astro.build/en/guides/cms/craft-cms/", "docsearch:language": "en", "description": "Add content to your Astro project using Craft CMS as a CMS", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/cms/craft-cms/", "twitter:card": "summary_large_image", "og:type": "article", "og:locale": "en", "og:description": "Add content to your Astro project using Craft CMS as a CMS", "scrapeId": "abd1409a-0584-4fdb-91d8-2465cbaa8792", "sourceURL": "https://docs.astro.build/en/guides/cms/craft-cms", "url": "https://docs.astro.build/en/guides/cms/craft-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Create and pass data to a custom blog layout is in astro?\n\nAssistant: Sure, I'd be happy to explain Create and pass data to a custom blog layout in astro.\n\n# Create and pass data to a custom blog layout\n\nThis page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.Here's a quick rundown of what this is about:\n\n## Add a layout to your blog posts\n\nWhen you include the `layout` frontmatter property in an `.md` file, all of your frontmatter YAML values are available to the layout file.\n\n1. Create a new file at `src/layouts/MarkdownPostLayout.astro`\n\n2. Copy the following code into `MarkdownPostLayout.astro`\n\n```javascript\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by {frontmatter.author}</p>\n<slot />\n```\n\n3. Add the following frontmatter property in `post-1.md`\n\n```yaml\n---\nlayout: ../../layouts/MarkdownPostLayout.astro\ntitle: 'My First Blog Post'\npubDate: 2022-07-01\ndescription: 'This is the first post of my new Astro blog.'\nauthor: 'Astro Learner'\nimage:\n  url: 'https://docs.astro.build/assets/rose.webp'\n  alt: 'The Astro logo on a dark background with a pink glow.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n---\n```\n\n4. Check your browser preview again at `http://localhost:4321/posts/post-1` and notice what the layout has added to your page.\n\n5. Add the same layout property to your two other blog posts `post-2.md` and `post-3.md`. Verify in your browser that your layout is also applied to these posts.\n\n## Try it yourself - Customize your blog post layout\n\n**Challenge**: Identify items common to every blog post, and use `MarkdownPostLayout.astro` to render them, instead of writing them in your Markdown in `post-1.md` and in every future blog post.\n\nHere‚Äôs an example of refactoring your code to include the `pubDate` in the layout component instead of writing it in the body of your Markdown:\n\n```\nPublished on: 2022-07-01\n\nWelcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n```\n\n```\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>Published on: {frontmatter.pubDate.toString().slice(0,10)}</p>\n<p>Written by {frontmatter.author}</p>\n<slot />\n```\n\nRefactor as much as you think is useful to you, and add as much to your layout as you want, remembering that everything that you add to your layout is one less thing you will write in each and every blog post!\n\nHere is an example of a refactored layout that leaves only individual blog post content rendered by the slot. Feel free to use this, or create your own!\n\n```\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n<p><em>{frontmatter.description}</em></p>\n<p>Written by: {frontmatter.author}</p>\n<img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n<slot />\n```\n\n## Test your knowledge\n\nCan you figure out what should go in the blanks so that the following two components together produce working Astro code?\n\n1. ```\n---\nlayout: ../../__________/MyMarkdownLayout.astro\ntitle: \"Learning About Markdown in Astro\"\nauthor: Astro Learner\n____: 2022-08-08\n---\nI learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n```\n\n2. ```\n---\nimport ____________ from '../components/Footer.astro'\nconst { ___________ } = Astro.props\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by: {frontmatter.______} on {frontmatter.pubDate}</p>\n< _______ />\n<Footer />\n``` \n\nShow the blanks filled in!\n\n1. ```\n---\nlayout: ../../layouts/MyMarkdownLayout.astro\ntitle: \"Learning About Markdown in Astro\"\nauthor: Astro Learner\npubDate: 2022-08-08\n---\nI learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n```\n\n2. ```\n---\nimport Footer from '../components/Footer.astro'\nconst { frontmatter } = Astro.props\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by: {frontmatter.author} on {frontmatter.pubDate}</p>\n<slot />\n<Footer />\n```\n\n## Checklist\n\n- I can add a layout property to a Markdown blog post in its YAML frontmatter.\n- I can create a separate layout for Markdown posts.\n- I can use values from a blog post‚Äôs frontmatter in a layout component.\n\n## Resources\n\n- [Markdown Layouts in Astro](https://docs.astro.build/en/guides/markdown-content/#frontmatter-layout-property)\n- [Markdown Layout Props](https://docs.astro.build/en/basics/layouts/#markdown-layout-props)\n- [Introduction to YAML](https://dev.to/paulasantamaria/introduction-to-yaml-125f) external\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "overview", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add a layout to your blog posts in astro?\n\nAssistant: To add a layout to your blog posts in astro, here's what you do:\nWhen you include the `layout` frontmatter property in an `.md` file, all of your frontmatter YAML values are available to the layout file.\n\n1. Create a new file at `src/layouts/MarkdownPostLayout.astro`\n\n2. Copy the following code into `MarkdownPostLayout.astro`\n\n```javascript\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by {frontmatter.author}</p>\n<slot />\n```\n\n3. Add the following frontmatter property in `post-1.md`\n\n```yaml\n---\nlayout: ../../layouts/MarkdownPostLayout.astro\ntitle: 'My First Blog Post'\npubDate: 2022-07-01\ndescription: 'This is the first post of my new Astro blog.'\nauthor: 'Astro Learner'\nimage:\n  url: 'https://docs.astro.build/assets/rose.webp'\n  alt: 'The Astro logo on a dark background with a pink glow.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n---\n```\n\n4. Check your browser preview again at `http://localhost:4321/posts/post-1` and notice what the layout has added to your page.\n\n5. Add the same layout property to your two other blog posts `post-2.md` and `post-3.md`. Verify in your browser that your layout is also applied to these posts..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - customize your blog post layout in astro?\n\nAssistant: To try it yourself - customize your blog post layout in astro, here's what you do:\n**Challenge**: Identify items common to every blog post, and use `MarkdownPostLayout.astro` to render them, instead of writing them in your Markdown in `post-1.md` and in every future blog post.\n\nHere‚Äôs an example of refactoring your code to include the `pubDate` in the layout component instead of writing it in the body of your Markdown:\n\n```\nPublished on: 2022-07-01\n\nWelcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n```\n\n```\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>Published on: {frontmatter.pubDate.toString().slice(0,10)}</p>\n<p>Written by {frontmatter.author}</p>\n<slot />\n```\n\nRefactor as much as you think is useful to you, and add as much to your layout as you want, remembering that everything that you add to your layout is one less thing you will write in each and every blog post!\n\nHere is an example of a refactored layout that leaves only individual blog post content rendered by the slot. Feel free to use this, or create your own!\n\n```\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n<p><em>{frontmatter.description}</em></p>\n<p>Written by: {frontmatter.author}</p>\n<img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n<slot />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\nCan you figure out what should go in the blanks so that the following two components together produce working Astro code?\n\n1. ```\n---\nlayout: ../../__________/MyMarkdownLayout.astro\ntitle: \"Learning About Markdown in Astro\"\nauthor: Astro Learner\n____: 2022-08-08\n---\nI learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n```\n\n2. ```\n---\nimport ____________ from '../components/Footer.astro'\nconst { ___________ } = Astro.props\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by: {frontmatter.______} on {frontmatter.pubDate}</p>\n< _______ />\n<Footer />\n``` \n\nShow the blanks filled in!\n\n1. ```\n---\nlayout: ../../layouts/MyMarkdownLayout.astro\ntitle: \"Learning About Markdown in Astro\"\nauthor: Astro Learner\npubDate: 2022-08-08\n---\nI learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n```\n\n2. ```\n---\nimport Footer from '../components/Footer.astro'\nconst { frontmatter } = Astro.props\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by: {frontmatter.author} on {frontmatter.pubDate}</p>\n<slot />\n<Footer />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can add a layout property to a Markdown blog post in its YAML frontmatter.\n- I can create a separate layout for Markdown posts.\n- I can use values from a blog post‚Äôs frontmatter in a layout component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Markdown Layouts in Astro](https://docs.astro.build/en/guides/markdown-content/#frontmatter-layout-property)\n- [Markdown Layout Props](https://docs.astro.build/en/basics/layouts/#markdown-layout-props)\n- [Introduction to YAML](https://dev.to/paulasantamaria/introduction-to-yaml-125f) external.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Create and pass data to a custom blog layout in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**MarkdownPostLayout.astro**:\n\n```yaml\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by {frontmatter.author}</p>\n<slot />\n```\n\nThis snippet shows you how to markdownpostlayout.astro, which is an important aspect of create and pass data to a custom blog layout.\n\n**post-1.md frontmatter**:\n\n```yaml\n---\nlayout: ../../layouts/MarkdownPostLayout.astro\ntitle: 'My First Blog Post'\npubDate: 2022-07-01\ndescription: 'This is the first post of my new Astro blog.'\nauthor: 'Astro Learner'\nimage:\n  url: 'https://docs.astro.build/assets/rose.webp'\n  alt: 'The Astro logo on a dark background with a pink glow.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n---\n```\n\nThis snippet shows you how to post-1.md frontmatter, which is an important aspect of create and pass data to a custom blog layout.\n\n**Refactored layout example**:\n\n```yaml\n---\nconst { frontmatter } = Astro.props;\n---\n<h1>{frontmatter.title}</h1>\n<p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n<p><em>{frontmatter.description}</em></p>\n<p>Written by: {frontmatter.author}</p>\n<img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n<slot />\n```\n\nThis snippet shows you how to refactored layout example, which is an important aspect of create and pass data to a custom blog layout.\n\n**Test your knowledge - Blanks filled**:\n\n```yaml\n1. ```\n---\nlayout: ../../layouts/MyMarkdownLayout.astro\ntitle: \"Learning About Markdown in Astro\"\nauthor: Astro Learner\npubDate: 2022-08-08\n---\nI learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n```\n\n2. ```\n---\nimport Footer from '../components/Footer.astro'\nconst { frontmatter } = Astro.props\n---\n<h1>{frontmatter.title}</h1>\n<p>Written by: {frontmatter.author} on {frontmatter.pubDate}</p>\n<slot />\n<Footer />\n```\n```\n\nThis snippet shows you how to test your knowledge - blanks filled, which is an important aspect of create and pass data to a custom blog layout.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "code_examples", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Create and pass data to a custom blog layout in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIdentify common items in blog posts to reduce redundancy in Markdown files.\n\nRefactor code to include common elements in the layout component instead of repeating them in each post.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/4-layouts/2", "title": "Create and pass data to a custom blog layout", "description": "This page covers how to create a layout for blog posts in Astro and pass YAML frontmatter values as props to the layout component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:46:44", "type": "best_practices", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "ogTitle": "Create and pass data to a custom blog layout", "og:type": "article", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/tutorial/4-layouts/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create and pass data to a custom blog layout | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "og:title": "Create and pass data to a custom blog layout", "og:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/4-layouts/2.webp", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "og:site_name": "Docs", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", "scrapeId": "812b4b99-34ff-4990-a2e3-dfb6aa0df1de", "sourceURL": "https://docs.astro.build/en/tutorial/4-layouts/2", "url": "https://docs.astro.build/en/tutorial/4-layouts/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Make a reusable Navigation component is in astro?\n\nAssistant: Sure, I'd be happy to explain Make a reusable Navigation component in astro.\n\n# Make a reusable Navigation component\n\nLearn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.Here's a quick rundown of what this is about:\n\n## Create a new `src/components/` folder\n\nTo hold `.astro` files that will generate HTML but that will not become new pages on your website, you will need a new folder in your project: `src/components/`.\n\n## Create a Navigation component\n\n1. Create a new file: `src/components/Navigation.astro`.\n\n2. Copy your links to navigate between pages from the top of any page and paste them into your new file, `Navigation.astro`:\n\n```markdown\n---\n---\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n```\n\n## Import and use Navigation.astro\n\n1. Go back to `index.astro` and import your new component inside the code fence:\n\n```markdown\n---\nimport Navigation from '../components/Navigation.astro';\nimport \"../styles/global.css\";\n\nconst pageTitle = \"Home Page\";\n---\n```\n\n2. Then below, replace the existing navigation HTML link elements with the new navigation component you just imported:\n\n```markdown\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<Navigation />\n```\n\n3. Check the preview in your browser and notice that it should look exactly the same‚Ä¶ and that‚Äôs what you want!\n\nYour site contains the same HTML as it did before. But now, those three lines of code are provided by your `<Navigation />` component.\n\n## Try it yourself - Add navigation to the rest of your site\n\nImport and use the `<Navigation />` component in the other two pages on your site ( `about.astro` and `blog.astro`) using the same method.\n\nDon‚Äôt forget to\n\n- Add an import statement at the top of the component script, inside the code fence.\n- Replace the existing code with the navigation component.\n\n## Test your knowledge\n\n1. You can do this when you have elements repeated on multiple pages:\n   1. restart the dev server\n   2. refactor to use a reusable component\n   3. make a new page\n\n2. Astro components are:\n   1. reusable\n   2. fragments of HTML\n   3. both of the above!\n\n3. Astro components will automatically create a new page on your site when you‚Ä¶\n   1. include `<html></html>`\n   2. refactor\n   3. put the `.astro` file within `src/pages/`\n\n## Checklist\n\n- I can refactor content into reusable components.\n- I can add a new component to an `.astro` page.\n\n## Resources\n\n- [Astro Component Overview](https://docs.astro.build/en/basics/astro-components/)\n- [Refactoring](https://refactoring.com/) external\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "overview", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a new `src/components/` folder in astro?\n\nAssistant: To create a new `src/components/` folder in astro, here's what you do:\nTo hold `.astro` files that will generate HTML but that will not become new pages on your website, you will need a new folder in your project: `src/components/`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a navigation component in astro?\n\nAssistant: To create a navigation component in astro, here's what you do:\n1. Create a new file: `src/components/Navigation.astro`.\n\n2. Copy your links to navigate between pages from the top of any page and paste them into your new file, `Navigation.astro`:\n\n```markdown\n---\n---\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I import and use navigation.astro in astro?\n\nAssistant: To import and use navigation.astro in astro, here's what you do:\n1. Go back to `index.astro` and import your new component inside the code fence:\n\n```markdown\n---\nimport Navigation from '../components/Navigation.astro';\nimport \"../styles/global.css\";\n\nconst pageTitle = \"Home Page\";\n---\n```\n\n2. Then below, replace the existing navigation HTML link elements with the new navigation component you just imported:\n\n```markdown\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<Navigation />\n```\n\n3. Check the preview in your browser and notice that it should look exactly the same‚Ä¶ and that‚Äôs what you want!\n\nYour site contains the same HTML as it did before. But now, those three lines of code are provided by your `<Navigation />` component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - add navigation to the rest of your site in astro?\n\nAssistant: To try it yourself - add navigation to the rest of your site in astro, here's what you do:\nImport and use the `<Navigation />` component in the other two pages on your site ( `about.astro` and `blog.astro`) using the same method.\n\nDon‚Äôt forget to\n\n- Add an import statement at the top of the component script, inside the code fence.\n- Replace the existing code with the navigation component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. You can do this when you have elements repeated on multiple pages:\n   1. restart the dev server\n   2. refactor to use a reusable component\n   3. make a new page\n\n2. Astro components are:\n   1. reusable\n   2. fragments of HTML\n   3. both of the above!\n\n3. Astro components will automatically create a new page on your site when you‚Ä¶\n   1. include `<html></html>`\n   2. refactor\n   3. put the `.astro` file within `src/pages/`.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can refactor content into reusable components.\n- I can add a new component to an `.astro` page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Astro Component Overview](https://docs.astro.build/en/basics/astro-components/)\n- [Refactoring](https://refactoring.com/) external.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "section_detail", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Make a reusable Navigation component in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Navigation Links in Navigation.astro**:\n\n```yaml\n---\n---\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n\n```\n\nThis snippet shows you how to navigation links in navigation.astro, which is an important aspect of make a reusable navigation component.\n\n**Importing Navigation Component in index.astro**:\n\n```yaml\n---\nimport Navigation from '../components/Navigation.astro';\nimport \"../styles/global.css\";\n\nconst pageTitle = \"Home Page\";\n---\n\n```\n\nThis snippet shows you how to importing navigation component in index.astro, which is an important aspect of make a reusable navigation component.\n\n**Replacing HTML Links with Navigation Component**:\n\n```yaml\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<Navigation />\n```\n\nThis snippet shows you how to replacing html links with navigation component, which is an important aspect of make a reusable navigation component.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "code_examples", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Make a reusable Navigation component in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAdd an import statement at the top of the component script, inside the code fence.\n\nReplace the existing code with the navigation component.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/1", "title": "Make a reusable Navigation component", "description": "Learn how to create a reusable navigation component in your Astro site to replace duplicated HTML content.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:47:00", "type": "best_practices", "page_metadata": {"og:locale": "en", "language": "en", "ogTitle": "Make a reusable Navigation component", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "docsearch:language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "favicon": "https://docs.astro.build/favicon.ico", "description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/1.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/1/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Docs", "og:title": "Make a reusable Navigation component", "og:type": "article", "og:url": "https://docs.astro.build/en/tutorial/3-components/1/", "twitter:site": "astrodotbuild", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nReplace elements repeated on multiple pages with a reusable component", "og:site_name": "Docs", "title": "Make a reusable Navigation component | Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "93dba3ed-84e2-4441-a721-3d3dcc32b26d", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/1", "url": "https://docs.astro.build/en/tutorial/3-components/1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/markdoc is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/markdoc in astro.\n\n# @astrojs/markdoc\n\nThis Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.Here's a quick rundown of what this is about:\n\n## Why Markdoc?\n\nMarkdoc allows you to enhance your Markdown with Astro components. If you have existing content authored in Markdoc, this integration allows you to bring those files to your Astro project using content collections.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add markdoc\n```\n\n```\npnpm astro add markdoc\n```\n\n```\nyarn astro add markdoc\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/markdoc` package:\n\n```\nnpm install @astrojs/markdoc\n```\n\n```\npnpm add @astrojs/markdoc\n```\n\n```\nyarn add @astrojs/markdoc\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport markdoc from '@astrojs/markdoc';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [markdoc()],\n\n});\n```\n\n## VS Code Editor Integration\n\nIf you are using VS Code, there is an official Markdoc language extension that includes syntax highlighting and autocomplete for configured tags. To set up the extension, create a `markdoc.config.json` file in the project root with following content:\n\n```\n[\n  {\n    \"id\": \"my-site\",\n    \"path\": \"src/content\",\n    \"schema\": {\n      \"path\": \"markdoc.config.mjs\",\n      \"type\": \"esm\",\n      \"property\": \"default\",\n      \"watch\": true\n    }\n  }\n]\n```\n\nSet `markdoc.config.mjs` as your configuration file with the `schema` object, and define where your Markdoc files are stored using the `path` property. Since Markdoc is specific to content collections, you can use `src/content`.\n\n## Usage\n\nMarkdoc files can only be used within content collections. Add entries to any content collection using the `.mdoc` extension:\n\n- Directorysrc/\n- Directorycontent/\n- Directorydocs/\n- why-markdoc.mdoc\n- quick-start.mdoc\n\nThen, query your collection using the Content Collection APIs:\n\n```\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n\n<!--Access frontmatter properties with `data`-->\n<h1>{entry.data.title}</h1>\n\n<!--Render Markdoc contents with the Content component-->\n<Content />\n```\n\nSee the Astro Content Collection docs for more information.\n\n## Pass Markdoc variables\n\nYou may need to pass variables to your content. This is useful when passing SSR parameters like A/B tests.\n\nVariables can be passed as props via the `Content` component:\n\n```\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n\n<!--Pass the `abTest` param as a variable-->\n<Content abTestGroup={Astro.params.abTestGroup} />\n```\n\nNow, `abTestGroup` is available as a variable in `docs/why-markdoc.mdoc`:\n\n```\n{% if $abTestGroup === 'image-optimization-lover' %}\nLet me tell you about image optimization...\n{% /if %}\n```\n\n## Access frontmatter from your Markdoc content\n\nTo access frontmatter, you can pass the entry `data` property as a variable where you render your content:\n\n```\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n\n<Content frontmatter={entry.data} />\n```\n\nThis can now be accessed as `$frontmatter` in your Markdoc.\n\n## Render components\n\n@astrojs/markdoc offers configuration options to use all of Markdoc‚Äôs features and connect UI components to your content.\n\n## Use Astro components as Markdoc tags\n\nYou can configure Markdoc tags that map to `.astro` components. You can add a new tag by creating a `markdoc.config.mjs|ts` file at the root of your project and configuring the `tag` attribute.\n\nThis example renders an `Aside` component, and allows a `type` prop to be passed as a string:\n\n```\nimport { defineMarkdocConfig, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  tags: {\n    aside: {\n      render: component('./src/components/Aside.astro'),\n      attributes: {\n        type: { type: String },\n      },\n    },\n  },\n});\n```\n\nThis component can now be used in your Markdoc files with the `{% aside %}` tag. Children will be passed to your component‚Äôs default slot:\n\n```\n# Welcome to Markdoc üëã\n{% aside type=\"tip\" %}\nUse tags like this fancy \"aside\" to add some _flair_ to your docs.\n{% /aside %}\n```\n\n## Use client-side UI components\n\nTags and nodes are restricted to `.astro` files. To embed client-side UI components in Markdoc, use a wrapper `.astro` component that renders a framework component with your desired `client:` directive.\n\nThis example wraps a React `Aside.tsx` component with a `ClientAside.astro` component:\n\n```\n---\nimport Aside from './Aside';\n---\n<Aside {...Astro.props} client:load />\n```\n\nThis Astro component can now be passed to the `render` prop for any tag or node in your config.\n\n## Use Astro components from npm packages and TypeScript files\n\nYou may need to use Astro components exposed as named exports from TypeScript or JavaScript files. You can pass the import name as the second argument to the `component()` function:\n\n```\nimport { defineMarkdocConfig, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  tags: {\n    tabs: {\n      render: component('@astrojs/starlight/components', 'Tabs'),\n    },\n  },\n});\n```\n\nThis generates the following import statement internally:\n\n```\nimport { Tabs } from '@astrojs/starlight/components';\n```\n\n## Markdoc Partials\n\nThe `{% partial %}` tag allows you to render other `.mdoc` files inside your Markdoc content. This is useful for reusing content across multiple documents, and allows you to have `.mdoc` content files that do not follow your collection schema.\n\nThis example shows a Markdoc partial for a footer to be used inside blog collection entries:\n\n```\nSocial links:\n- [Twitter / X](https://twitter.com/astrodotbuild)\n- [Discord](https://astro.build/chat)\n- [GitHub](https://github.com/withastro/astro)\n```\n\nUse the `{% partial %}` tag with to render the footer at the bottom of a blog post entry. Apply the `file` attribute with the path to the file, using either a relative path or an import alias:\n\n```\n# My Blog Post\n{% partial file=\"./_footer.mdoc\" %}\n```\n\n## Syntax highlighting\n\n@astrojs/markdoc provides Shiki and Prism extensions to highlight your code blocks.\n\n## Shiki\n\nApply the `shiki()` extension to your Markdoc config using the `extends` property. You can optionally pass a shiki configuration object:\n\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nimport shiki from '@astrojs/markdoc/shiki';\n\nexport default defineMarkdocConfig({\n  extends: [\n    shiki({\n      theme: 'dracula',\n      wrap: true,\n      langs: [],\n    }),\n  ],\n});\n```\n\n## Prism\n\nApply the `prism()` extension to your Markdoc config using the `extends` property.\n\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nimport prism from '@astrojs/markdoc/prism';\n\nexport default defineMarkdocConfig({\n  extends: [prism()],\n});\n```\n\n## Custom Markdoc nodes / elements\n\nYou may want to render standard Markdown elements, such as paragraphs and bolded text, as Astro components. This example renders blockquotes with a custom `Quote.astro` component:\n\n```\nimport { defineMarkdocConfig, nodes, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    blockquote: {\n      ...nodes.blockquote,\n      render: component('./src/components/Quote.astro'),\n    },\n  },\n});\n```\n\n## Custom headings\n\n@astrojs/markdoc automatically adds anchor links to your headings, and generates a list of `headings` via the content collections API. To further customize how headings are rendered, you can apply an Astro component as a Markdoc node.\n\nThis example renders a `Heading.astro` component using the `render` property:\n\n```\nimport { defineMarkdocConfig, nodes, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    heading: {\n      ...nodes.heading,\n      render: component('./src/components/Heading.astro'),\n    },\n  },\n});\n```\n\n## Custom image components\n\nAstro‚Äôs `<Image />` component cannot be used directly in Markdoc. However, you can configure an Astro component to override the default image node every time the native `![]()` image syntax is used.\n\n## Override Markdoc‚Äôs default image node\n\nTo override the default image node, you can configure an `.astro` component to be rendered in place of a standard `<img>`.\n\n1. Build a custom `MarkdocImage.astro` component to pass the required `src` and `alt` properties from your image to the `<Image />` component:\n\n```\n---\nimport { Image } from \"astro:assets\";\ninterface Props {\n     src: ImageMetadata;\n     alt: string;\n}\nconst { src, alt } = Astro.props;\n---\n<Image src={src} alt={alt} />\n```\n\n2. The `<Image />` component requires a `width` and `height` for remote images which cannot be provided using the `![]()` syntax. To avoid errors when using remote images, update your component to render a standard HTML `<img>` tag when a remote URL `src` is found:\n\n```\n---\nimport { Image } from \"astro:assets\";\ninterface Props {\n     src: ImageMetadata | string;\n     alt: string;\n}\nconst { src, alt } = Astro.props;\n---\n<Image src={src} alt={alt} />\n{\n     typeof src === 'string' ? <img src={src} alt={alt} /> : <Image src={src} alt={alt} />\n}\n```\n\n3. Configure Markdoc to override the default image node and render `MarkdocImage.astro`:\n\n```\nimport { defineMarkdocConfig, nodes, component } from '@astrojs/markdoc/config';\nexport default defineMarkdocConfig({\n     nodes: {\n       image: {\n         ...nodes.image,\n         render: component('./src/components/MarkdocImage.astro'),\n       },\n     },\n});\n```\n\n4. The native image syntax in any `.mdoc` file will now use the `<Image />` component to optimize your local images.\n\n## Create a custom Markdoc image tag\n\nA Markdoc `image` tag allows you to set additional attributes on your image that are not possible with the `![]()` syntax. The following steps will create a custom Markdoc image tag to display a `<figure>` element with a caption, using the Astro `<Image />` component to optimize the image.\n\n## Advanced Markdoc configuration\n\nThe `markdoc.config.mjs|ts` file accepts all Markdoc configuration options, including tags and functions. You can pass these options from the default export in your `markdoc.config.mjs|ts` file:\n\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nexport default defineMarkdocConfig({\n  functions: {\n    getCountryEmoji: {\n      transform(parameters) {\n        const [country] = Object.values(parameters);\n        const countryToEmojiMap = {\n          japan: 'üáØüáµ',\n          spain: 'üá™üá∏',\n          france: 'üá´üá∑',\n        };\n        return countryToEmojiMap[country] ?? 'üè≥';\n      },\n    },\n  },\n});\n```\n\nNow, you can call this function from any Markdoc content entry.\n\n## Set the root HTML element\n\nMarkdoc wraps documents with an `<article>` tag by default. This can be changed from the `document` Markdoc node. This accepts an HTML element name or `null` if you prefer to remove the wrapper element:\n\n```\nimport { defineMarkdocConfig, nodes } from '@astrojs/markdoc/config';\nexport default defineMarkdocConfig({\n  nodes: {\n    document: {\n      ...nodes.document,\n      render: null,\n    },\n  },\n});\n```\n\n## Integration config options\n\nThe Astro Markdoc integration handles configuring Markdoc options and capabilities that are not available through the `markdoc.config.js` file.\n\n## allowHTML\n\nEnables writing HTML markup alongside Markdoc tags and nodes. By default, Markdoc will not recognize HTML markup as semantic content. To achieve a more Markdown-like experience, where HTML elements can be included alongside your content, set `allowHTML:true` as a `markdoc` integration option.\n\n## ignoreIndentation\n\nBy default, any content that is indented by four spaces is treated as a code block. Unfortunately, this behavior makes it difficult to use arbitrary levels of indentation to improve the readability of documents with complex structure. When using nested tags in Markdoc, it can be helpful to indent the content inside of tags so that the level of depth is clear.\n\n## Examples\n\nThe Astro Markdoc starter template shows how to use Markdoc files in your Astro project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "overview", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why markdoc? in astro?\n\nAssistant: To why markdoc? in astro, here's what you do:\nMarkdoc allows you to enhance your Markdown with Astro components. If you have existing content authored in Markdoc, this integration allows you to bring those files to your Astro project using content collections..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add markdoc\n```\n\n```\npnpm astro add markdoc\n```\n\n```\nyarn astro add markdoc\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/markdoc` package:\n\n```\nnpm install @astrojs/markdoc\n```\n\n```\npnpm add @astrojs/markdoc\n```\n\n```\nyarn add @astrojs/markdoc\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport markdoc from '@astrojs/markdoc';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [markdoc()],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I vs code editor integration in astro?\n\nAssistant: To vs code editor integration in astro, here's what you do:\nIf you are using VS Code, there is an official Markdoc language extension that includes syntax highlighting and autocomplete for configured tags. To set up the extension, create a `markdoc.config.json` file in the project root with following content:\n\n```\n[\n  {\n    \"id\": \"my-site\",\n    \"path\": \"src/content\",\n    \"schema\": {\n      \"path\": \"markdoc.config.mjs\",\n      \"type\": \"esm\",\n      \"property\": \"default\",\n      \"watch\": true\n    }\n  }\n]\n```\n\nSet `markdoc.config.mjs` as your configuration file with the `schema` object, and define where your Markdoc files are stored using the `path` property. Since Markdoc is specific to content collections, you can use `src/content`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nMarkdoc files can only be used within content collections. Add entries to any content collection using the `.mdoc` extension:\n\n- Directorysrc/\n- Directorycontent/\n- Directorydocs/\n- why-markdoc.mdoc\n- quick-start.mdoc\n\nThen, query your collection using the Content Collection APIs:\n\n```\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n\n<!--Access frontmatter properties with `data`-->\n<h1>{entry.data.title}</h1>\n\n<!--Render Markdoc contents with the Content component-->\n<Content />\n```\n\nSee the Astro Content Collection docs for more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I pass markdoc variables in astro?\n\nAssistant: To pass markdoc variables in astro, here's what you do:\nYou may need to pass variables to your content. This is useful when passing SSR parameters like A/B tests.\n\nVariables can be passed as props via the `Content` component:\n\n```\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n\n<!--Pass the `abTest` param as a variable-->\n<Content abTestGroup={Astro.params.abTestGroup} />\n```\n\nNow, `abTestGroup` is available as a variable in `docs/why-markdoc.mdoc`:\n\n```\n{% if $abTestGroup === 'image-optimization-lover' %}\nLet me tell you about image optimization...\n{% /if %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I access frontmatter from your markdoc content in astro?\n\nAssistant: To access frontmatter from your markdoc content in astro, here's what you do:\nTo access frontmatter, you can pass the entry `data` property as a variable where you render your content:\n\n```\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n\n<Content frontmatter={entry.data} />\n```\n\nThis can now be accessed as `$frontmatter` in your Markdoc..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I render components in astro?\n\nAssistant: To render components in astro, here's what you do:\n@astrojs/markdoc offers configuration options to use all of Markdoc‚Äôs features and connect UI components to your content..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use astro components as markdoc tags in astro?\n\nAssistant: To use astro components as markdoc tags in astro, here's what you do:\nYou can configure Markdoc tags that map to `.astro` components. You can add a new tag by creating a `markdoc.config.mjs|ts` file at the root of your project and configuring the `tag` attribute.\n\nThis example renders an `Aside` component, and allows a `type` prop to be passed as a string:\n\n```\nimport { defineMarkdocConfig, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  tags: {\n    aside: {\n      render: component('./src/components/Aside.astro'),\n      attributes: {\n        type: { type: String },\n      },\n    },\n  },\n});\n```\n\nThis component can now be used in your Markdoc files with the `{% aside %}` tag. Children will be passed to your component‚Äôs default slot:\n\n```\n# Welcome to Markdoc üëã\n{% aside type=\"tip\" %}\nUse tags like this fancy \"aside\" to add some _flair_ to your docs.\n{% /aside %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use client-side ui components in astro?\n\nAssistant: To use client-side ui components in astro, here's what you do:\nTags and nodes are restricted to `.astro` files. To embed client-side UI components in Markdoc, use a wrapper `.astro` component that renders a framework component with your desired `client:` directive.\n\nThis example wraps a React `Aside.tsx` component with a `ClientAside.astro` component:\n\n```\n---\nimport Aside from './Aside';\n---\n<Aside {...Astro.props} client:load />\n```\n\nThis Astro component can now be passed to the `render` prop for any tag or node in your config..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use astro components from npm packages and typescript files in astro?\n\nAssistant: To use astro components from npm packages and typescript files in astro, here's what you do:\nYou may need to use Astro components exposed as named exports from TypeScript or JavaScript files. You can pass the import name as the second argument to the `component()` function:\n\n```\nimport { defineMarkdocConfig, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  tags: {\n    tabs: {\n      render: component('@astrojs/starlight/components', 'Tabs'),\n    },\n  },\n});\n```\n\nThis generates the following import statement internally:\n\n```\nimport { Tabs } from '@astrojs/starlight/components';\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdoc partials in astro?\n\nAssistant: To markdoc partials in astro, here's what you do:\nThe `{% partial %}` tag allows you to render other `.mdoc` files inside your Markdoc content. This is useful for reusing content across multiple documents, and allows you to have `.mdoc` content files that do not follow your collection schema.\n\nThis example shows a Markdoc partial for a footer to be used inside blog collection entries:\n\n```\nSocial links:\n- [Twitter / X](https://twitter.com/astrodotbuild)\n- [Discord](https://astro.build/chat)\n- [GitHub](https://github.com/withastro/astro)\n```\n\nUse the `{% partial %}` tag with to render the footer at the bottom of a blog post entry. Apply the `file` attribute with the path to the file, using either a relative path or an import alias:\n\n```\n# My Blog Post\n{% partial file=\"./_footer.mdoc\" %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I syntax highlighting in astro?\n\nAssistant: To syntax highlighting in astro, here's what you do:\n@astrojs/markdoc provides Shiki and Prism extensions to highlight your code blocks..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I shiki in astro?\n\nAssistant: To shiki in astro, here's what you do:\nApply the `shiki()` extension to your Markdoc config using the `extends` property. You can optionally pass a shiki configuration object:\n\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nimport shiki from '@astrojs/markdoc/shiki';\n\nexport default defineMarkdocConfig({\n  extends: [\n    shiki({\n      theme: 'dracula',\n      wrap: true,\n      langs: [],\n    }),\n  ],\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prism in astro?\n\nAssistant: To prism in astro, here's what you do:\nApply the `prism()` extension to your Markdoc config using the `extends` property.\n\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nimport prism from '@astrojs/markdoc/prism';\n\nexport default defineMarkdocConfig({\n  extends: [prism()],\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom markdoc nodes / elements in astro?\n\nAssistant: To custom markdoc nodes / elements in astro, here's what you do:\nYou may want to render standard Markdown elements, such as paragraphs and bolded text, as Astro components. This example renders blockquotes with a custom `Quote.astro` component:\n\n```\nimport { defineMarkdocConfig, nodes, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    blockquote: {\n      ...nodes.blockquote,\n      render: component('./src/components/Quote.astro'),\n    },\n  },\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom headings in astro?\n\nAssistant: To custom headings in astro, here's what you do:\n@astrojs/markdoc automatically adds anchor links to your headings, and generates a list of `headings` via the content collections API. To further customize how headings are rendered, you can apply an Astro component as a Markdoc node.\n\nThis example renders a `Heading.astro` component using the `render` property:\n\n```\nimport { defineMarkdocConfig, nodes, component } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    heading: {\n      ...nodes.heading,\n      render: component('./src/components/Heading.astro'),\n    },\n  },\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom image components in astro?\n\nAssistant: To custom image components in astro, here's what you do:\nAstro‚Äôs `<Image />` component cannot be used directly in Markdoc. However, you can configure an Astro component to override the default image node every time the native `![]()` image syntax is used..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I override markdoc‚Äôs default image node in astro?\n\nAssistant: To override markdoc‚Äôs default image node in astro, here's what you do:\nTo override the default image node, you can configure an `.astro` component to be rendered in place of a standard `<img>`.\n\n1. Build a custom `MarkdocImage.astro` component to pass the required `src` and `alt` properties from your image to the `<Image />` component:\n\n```\n---\nimport { Image } from \"astro:assets\";\ninterface Props {\n     src: ImageMetadata;\n     alt: string;\n}\nconst { src, alt } = Astro.props;\n---\n<Image src={src} alt={alt} />\n```\n\n2. The `<Image />` component requires a `width` and `height` for remote images which cannot be provided using the `![]()` syntax. To avoid errors when using remote images, update your component to render a standard HTML `<img>` tag when a remote URL `src` is found:\n\n```\n---\nimport { Image } from \"astro:assets\";\ninterface Props {\n     src: ImageMetadata | string;\n     alt: string;\n}\nconst { src, alt } = Astro.props;\n---\n<Image src={src} alt={alt} />\n{\n     typeof src === 'string' ? <img src={src} alt={alt} /> : <Image src={src} alt={alt} />\n}\n```\n\n3. Configure Markdoc to override the default image node and render `MarkdocImage.astro`:\n\n```\nimport { defineMarkdocConfig, nodes, component } from '@astrojs/markdoc/config';\nexport default defineMarkdocConfig({\n     nodes: {\n       image: {\n         ...nodes.image,\n         render: component('./src/components/MarkdocImage.astro'),\n       },\n     },\n});\n```\n\n4. The native image syntax in any `.mdoc` file will now use the `<Image />` component to optimize your local images..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a custom markdoc image tag in astro?\n\nAssistant: To create a custom markdoc image tag in astro, here's what you do:\nA Markdoc `image` tag allows you to set additional attributes on your image that are not possible with the `![]()` syntax. The following steps will create a custom Markdoc image tag to display a `<figure>` element with a caption, using the Astro `<Image />` component to optimize the image..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I advanced markdoc configuration in astro?\n\nAssistant: To advanced markdoc configuration in astro, here's what you do:\nThe `markdoc.config.mjs|ts` file accepts all Markdoc configuration options, including tags and functions. You can pass these options from the default export in your `markdoc.config.mjs|ts` file:\n\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nexport default defineMarkdocConfig({\n  functions: {\n    getCountryEmoji: {\n      transform(parameters) {\n        const [country] = Object.values(parameters);\n        const countryToEmojiMap = {\n          japan: 'üáØüáµ',\n          spain: 'üá™üá∏',\n          france: 'üá´üá∑',\n        };\n        return countryToEmojiMap[country] ?? 'üè≥';\n      },\n    },\n  },\n});\n```\n\nNow, you can call this function from any Markdoc content entry..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I set the root html element in astro?\n\nAssistant: To set the root html element in astro, here's what you do:\nMarkdoc wraps documents with an `<article>` tag by default. This can be changed from the `document` Markdoc node. This accepts an HTML element name or `null` if you prefer to remove the wrapper element:\n\n```\nimport { defineMarkdocConfig, nodes } from '@astrojs/markdoc/config';\nexport default defineMarkdocConfig({\n  nodes: {\n    document: {\n      ...nodes.document,\n      render: null,\n    },\n  },\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integration config options in astro?\n\nAssistant: To integration config options in astro, here's what you do:\nThe Astro Markdoc integration handles configuring Markdoc options and capabilities that are not available through the `markdoc.config.js` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I allowhtml in astro?\n\nAssistant: To allowhtml in astro, here's what you do:\nEnables writing HTML markup alongside Markdoc tags and nodes. By default, Markdoc will not recognize HTML markup as semantic content. To achieve a more Markdown-like experience, where HTML elements can be included alongside your content, set `allowHTML:true` as a `markdoc` integration option..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I ignoreindentation in astro?\n\nAssistant: To ignoreindentation in astro, here's what you do:\nBy default, any content that is indented by four spaces is treated as a code block. Unfortunately, this behavior makes it difficult to use arbitrary levels of indentation to improve the readability of documents with complex structure. When using nested tags in Markdoc, it can be helpful to indent the content inside of tags so that the level of depth is clear..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I examples in astro?\n\nAssistant: To examples in astro, here's what you do:\nThe Astro Markdoc starter template shows how to use Markdoc files in your Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "section_detail", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/markdoc in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add markdoc\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/markdoc.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/markdoc\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/markdoc.\n\n**VS Code Configuration**:\n\n```yaml\n[\n  {\n    \"id\": \"my-site\",\n    \"path\": \"src/content\",\n    \"schema\": {\n      \"path\": \"markdoc.config.mjs\",\n      \"type\": \"esm\",\n      \"property\": \"default\",\n      \"watch\": true\n    }\n  }\n]\n```\n\nThis snippet shows you how to vs code configuration, which is an important aspect of @astrojs/markdoc.\n\n**Astro Config Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport markdoc from '@astrojs/markdoc';\n\nexport default defineConfig({\n  integrations: [markdoc()],\n});\n```\n\nThis snippet shows you how to astro config example, which is an important aspect of @astrojs/markdoc.\n\n**Markdoc Config Example**:\n\n```yaml\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\n\nexport default defineMarkdocConfig({\n  tags: {\n    aside: {\n      render: component('./src/components/Aside.astro'),\n      attributes: {\n        type: { type: String },\n      },\n    },\n  },\n});\n```\n\nThis snippet shows you how to markdoc config example, which is an important aspect of @astrojs/markdoc.\n\n**Querying Collection Example**:\n\n```yaml\n---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('docs', 'why-markdoc');\n\nconst { Content } = await render(entry);\n---\n<h1>{entry.data.title}</h1>\n<Content />\n```\n\nThis snippet shows you how to querying collection example, which is an important aspect of @astrojs/markdoc.\n\n**Pass Variable Example**:\n\n```yaml\n<Content abTestGroup={Astro.params.abTestGroup} />\n```\n\nThis snippet shows you how to pass variable example, which is an important aspect of @astrojs/markdoc.\n\n**Access Frontmatter Example**:\n\n```yaml\n<Content frontmatter={entry.data} />\n```\n\nThis snippet shows you how to access frontmatter example, which is an important aspect of @astrojs/markdoc.\n\n**Custom Image Component Example**:\n\n```yaml\nimport { Image } from \"astro:assets\";\ninterface Props {\n     src: ImageMetadata;\n     alt: string;\n}\nconst { src, alt } = Astro.props;\n<Image src={src} alt={alt} />\n```\n\nThis snippet shows you how to custom image component example, which is an important aspect of @astrojs/markdoc.\n\n**Custom Image Tag Example**:\n\n```yaml\n{% image src=\"./astro-logo.png\" alt=\"Astro Logo\" width=\"100\" height=\"100\" caption=\"a caption!\" /%}\n```\n\nThis snippet shows you how to custom image tag example, which is an important aspect of @astrojs/markdoc.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "code_examples", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/markdoc in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub.\n\nUse the `allowHTML:true` option to enable HTML parsing in Markdoc markup.\n\nSet the `ignoreIndentation` option to support arbitrary indentation for better readability.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "title": "@astrojs/markdoc", "description": "This Astro integration enables the usage of Markdoc to create components, pages, and content collection entries.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-03-01 02:49:59", "type": "best_practices", "page_metadata": {"ogTitle": "@astrojs/markdoc", "language": "en", "og:locale": "en", "og:type": "article", "title": "@astrojs/markdoc | Docs", "og:description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "ogDescription": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "og:site_name": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "Learn how to use the @astrojs/markdoc integration in your Astro project.", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/markdoc.webp", "docsearch:language": "en", "og:url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/markdoc", "scrapeId": "02455c39-656e-4dbd-8a30-6a885b01f1be", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/markdoc", "url": "https://docs.astro.build/en/guides/integrations-guide/markdoc/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Legacy v0.x Upgrade Guide is in astro?\n\nAssistant: Sure, I'd be happy to explain Legacy v0.x Upgrade Guide in astro.\n\n# Legacy v0.x Upgrade Guide\n\nThis guide will help you upgrade through breaking changes in pre-v1 versions of Astro.Here's a quick rundown of what this is about:\n\n## Upgrade Instructions\n\nYou can update your project‚Äôs version of Astro to the latest version using your package manager. If you‚Äôre using Astro integrations, you‚Äôll also want to update those to the latest version.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v1/#tab-panel-1927)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v1/#tab-panel-1928)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v1/#tab-panel-1929)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v1", "title": "Legacy v0.x Upgrade Guide", "description": "This guide will help you upgrade through breaking changes in pre-v1 versions of Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:20", "type": "overview", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "title": "Legacy v0.x Upgrade Guide | Docs", "twitter:site": "astrodotbuild", "ogTitle": "Legacy v0.x Upgrade Guide", "ogSiteName": "Docs", "ogDescription": "Archived guide documenting changes between pre-v1 versions of Astro", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v1/", "og:title": "Legacy v0.x Upgrade Guide", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "Archived guide documenting changes between pre-v1 versions of Astro", "og:type": "article", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "og:description": "Archived guide documenting changes between pre-v1 versions of Astro", "scrapeId": "33861691-b217-47ba-b16f-6e5381dd41bc", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v1", "url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgrade instructions in astro?\n\nAssistant: To upgrade instructions in astro, here's what you do:\nYou can update your project‚Äôs version of Astro to the latest version using your package manager. If you‚Äôre using Astro integrations, you‚Äôll also want to update those to the latest version.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v1/#tab-panel-1927)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v1/#tab-panel-1928)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v1/#tab-panel-1929).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v1", "title": "Legacy v0.x Upgrade Guide", "description": "This guide will help you upgrade through breaking changes in pre-v1 versions of Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:20", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "title": "Legacy v0.x Upgrade Guide | Docs", "twitter:site": "astrodotbuild", "ogTitle": "Legacy v0.x Upgrade Guide", "ogSiteName": "Docs", "ogDescription": "Archived guide documenting changes between pre-v1 versions of Astro", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v1/", "og:title": "Legacy v0.x Upgrade Guide", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "Archived guide documenting changes between pre-v1 versions of Astro", "og:type": "article", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "og:description": "Archived guide documenting changes between pre-v1 versions of Astro", "scrapeId": "33861691-b217-47ba-b16f-6e5381dd41bc", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v1", "url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Legacy v0.x Upgrade Guide in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Update Astro Dependency with npm**:\n\n```yaml\nnpm upgrade astro\n```\n\nThis snippet shows you how to update astro dependency with npm, which is an important aspect of legacy v0.x upgrade guide.\n\n**Update All Dependencies with npm**:\n\n```yaml\nnpm upgrade\n```\n\nThis snippet shows you how to update all dependencies with npm, which is an important aspect of legacy v0.x upgrade guide.\n\n**Update Astro Dependency with pnpm**:\n\n```yaml\npnpm upgrade astro\n```\n\nThis snippet shows you how to update astro dependency with pnpm, which is an important aspect of legacy v0.x upgrade guide.\n\n**Update All Dependencies with pnpm**:\n\n```yaml\npnpm upgrade\n```\n\nThis snippet shows you how to update all dependencies with pnpm, which is an important aspect of legacy v0.x upgrade guide.\n\n**Update Astro Dependency with Yarn**:\n\n```yaml\nyarn upgrade astro\n```\n\nThis snippet shows you how to update astro dependency with yarn, which is an important aspect of legacy v0.x upgrade guide.\n\n**Update All Dependencies with Yarn**:\n\n```yaml\nyarn upgrade\n```\n\nThis snippet shows you how to update all dependencies with yarn, which is an important aspect of legacy v0.x upgrade guide.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v1", "title": "Legacy v0.x Upgrade Guide", "description": "This guide will help you upgrade through breaking changes in pre-v1 versions of Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:20", "type": "code_examples", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "title": "Legacy v0.x Upgrade Guide | Docs", "twitter:site": "astrodotbuild", "ogTitle": "Legacy v0.x Upgrade Guide", "ogSiteName": "Docs", "ogDescription": "Archived guide documenting changes between pre-v1 versions of Astro", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v1/", "og:title": "Legacy v0.x Upgrade Guide", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "Archived guide documenting changes between pre-v1 versions of Astro", "og:type": "article", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "og:description": "Archived guide documenting changes between pre-v1 versions of Astro", "scrapeId": "33861691-b217-47ba-b16f-6e5381dd41bc", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v1", "url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Legacy v0.x Upgrade Guide in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to read the guide below for major highlights and instructions on how to handle breaking changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v1", "title": "Legacy v0.x Upgrade Guide", "description": "This guide will help you upgrade through breaking changes in pre-v1 versions of Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:20", "type": "best_practices", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "title": "Legacy v0.x Upgrade Guide | Docs", "twitter:site": "astrodotbuild", "ogTitle": "Legacy v0.x Upgrade Guide", "ogSiteName": "Docs", "ogDescription": "Archived guide documenting changes between pre-v1 versions of Astro", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v1/", "og:title": "Legacy v0.x Upgrade Guide", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "language": "en", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "Archived guide documenting changes between pre-v1 versions of Astro", "og:type": "article", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v1.webp", "og:description": "Archived guide documenting changes between pre-v1 versions of Astro", "scrapeId": "33861691-b217-47ba-b16f-6e5381dd41bc", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v1", "url": "https://docs.astro.build/en/guides/upgrade-to/v1/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build it yourself - Header is in astro?\n\nAssistant: Sure, I'd be happy to explain Build it yourself - Header in astro.\n\n# Build it yourself - Header\n\nCreate a page navigation that can respond to multiple screen sizes by building a Header component that contains the Navigation component and making it responsive.Here's a quick rundown of what this is about:\n\n## Try it yourself - Build a new Header component\n\n1. Create a new Header component. Import and use your existing `Navigation.astro` component inside a `<nav>` element which is inside a `<header>` element.\nShow me the code!\n\nCreate a file named `Header.astro` in `src/components/`\n\n---\n\nimport Navigation from './Navigation.astro';\n\n---\n\n<header>\n\n     <nav>\n\n       <Navigation />\n\n     </nav>\n\n</header>\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/3", "title": "Build it yourself - Header", "description": "Create a page navigation that can respond to multiple screen sizes by building a Header component that contains the Navigation component and making it responsive.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:54", "type": "overview", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/3-components/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "og:title": "Build it yourself - Header", "ogTitle": "Build it yourself - Header", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "title": "Build it yourself - Header | Docs", "language": "en", "twitter:card": "summary_large_image", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/3/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "4c4d53bb-c12c-476e-86b8-b6ca725d75e7", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/3", "url": "https://docs.astro.build/en/tutorial/3-components/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - build a new header component in astro?\n\nAssistant: To try it yourself - build a new header component in astro, here's what you do:\n1. Create a new Header component. Import and use your existing `Navigation.astro` component inside a `<nav>` element which is inside a `<header>` element.\nShow me the code!\n\nCreate a file named `Header.astro` in `src/components/`\n\n---\n\nimport Navigation from './Navigation.astro';\n\n---\n\n<header>\n\n     <nav>\n\n       <Navigation />\n\n     </nav>\n\n</header>.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/3", "title": "Build it yourself - Header", "description": "Create a page navigation that can respond to multiple screen sizes by building a Header component that contains the Navigation component and making it responsive.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:54", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/3-components/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "og:title": "Build it yourself - Header", "ogTitle": "Build it yourself - Header", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "title": "Build it yourself - Header | Docs", "language": "en", "twitter:card": "summary_large_image", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/3/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "4c4d53bb-c12c-476e-86b8-b6ca725d75e7", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/3", "url": "https://docs.astro.build/en/tutorial/3-components/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Build it yourself - Header in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Header Component Code**:\n\n```yaml\n---\nimport Navigation from './Navigation.astro';\n---\n<header>\n     <nav>\n       <Navigation />\n     </nav>\n</header>\n```\n\nThis snippet shows you how to header component code, which is an important aspect of build it yourself - header.\n\n**Update Your Pages Code**:\n\n```yaml\n---\nimport Navigation from '../components/Navigation.astro';\nimport Header from '../components/Header.astro';\nimport Footer from '../components/Footer.astro';\nimport '../styles/global.css';\nconst pageTitle = \"Home Page\";\n---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <meta name=\"generator\" content={Astro.generator} />\n       <title>{pageTitle}</title>\n     </head>\n     <body>\n       <Navigation />\n       <Header />\n       <h1>{pageTitle}</h1>\n       <Footer />\n     </body>\n</html>\n```\n\nThis snippet shows you how to update your pages code, which is an important aspect of build it yourself - header.\n\n**Responsive Styles Code**:\n\n```yaml\n---\n<div class=\"nav-links\">\n     <a href=\"/\">Home</a>\n     <a href=\"/about\">About</a>\n     <a href=\"/blog\">Blog</a>\n</div>\n---\n\n/* CSS styles */\n\nhtml {\n  background-color: #f1f5f9;\n  font-family: sans-serif;\n}\n\nbody {\n  margin: 0 auto;\n  width: 100%;\n  max-width: 80ch;\n  padding: 1rem;\n  line-height: 1.5;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nh1 {\n  margin: 1rem 0;\n  font-size: 2.5rem;\n}\n\n/* nav styles */\n\n.nav-links {\n  width: 100%;\n  top: 5rem;\n  left: 48px;\n  background-color: #ff9776;\n  display: none;\n  margin: 0;\n}\n\n.nav-links a {\n  display: block;\n  text-align: center;\n  padding: 10px 0;\n  text-decoration: none;\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-transform: uppercase;\n}\n\n.nav-links a:hover,\n.nav-links a:focus {\n  background-color: #ff9776;\n}\n\n.expanded {\n  display: unset;\n}\n\n@media screen and (min-width: 636px) {\n  .nav-links {\n    margin-left: 5em;\n    display: block;\n    position: static;\n    width: auto;\n    background: none;\n  }\n  .nav-links a {\n    display: inline-block;\n    padding: 15px 20px;\n  }\n}\n```\n\nThis snippet shows you how to responsive styles code, which is an important aspect of build it yourself - header.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/3", "title": "Build it yourself - Header", "description": "Create a page navigation that can respond to multiple screen sizes by building a Header component that contains the Navigation component and making it responsive.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:54", "type": "code_examples", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/3-components/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "og:title": "Build it yourself - Header", "ogTitle": "Build it yourself - Header", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "title": "Build it yourself - Header | Docs", "language": "en", "twitter:card": "summary_large_image", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/3/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "4c4d53bb-c12c-476e-86b8-b6ca725d75e7", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/3", "url": "https://docs.astro.build/en/tutorial/3-components/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build it yourself - Header in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck your browser preview and verify that your header is displayed on every page.\n\nInspect your preview using dev tools to see the new elements like <header> and <nav> around your navigation links.\n\nResize your window to see different styles being applied at different screen widths.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/3", "title": "Build it yourself - Header", "description": "Create a page navigation that can respond to multiple screen sizes by building a Header component that contains the Navigation component and making it responsive.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:52:54", "type": "best_practices", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/3-components/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "og:title": "Build it yourself - Header", "ogTitle": "Build it yourself - Header", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "title": "Build it yourself - Header | Docs", "language": "en", "twitter:card": "summary_large_image", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/3/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/3.webp", "og:type": "article", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a header with responsive navigation", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "4c4d53bb-c12c-476e-86b8-b6ca725d75e7", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/3", "url": "https://docs.astro.build/en/tutorial/3-components/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/node is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/node in astro.\n\n# @astrojs/node\n\nThis adapter allows Astro to deploy your on-demand rendered routes to Node targets.Here's a quick rundown of what this is about:\n\n## Why Astro Node.js\n\nNode.js is a JavaScript runtime for server-side code. @astrojs/node can be used either in standalone mode or as middleware for other http servers, such as Express.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Node adapter to enable SSR in your Astro project with the `astro add` command. This will install `@astrojs/node` and make the appropriate changes to your `astro.config.*` file in one step.\n\n## Manual Install\n\nFirst, add the Node adapter to your project‚Äôs dependencies using your preferred package manager.\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.*` file.\n\n## Configuration\n\n@astrojs/node can be configured by passing options into the adapter function. The following options are available:\n\n### Mode\n\nControls whether the adapter builds to `middleware` or `standalone` mode.\n\n## Usage\n\nFirst, performing a build. Depending on which `mode` selected, follow the appropriate steps below.\n\n## Middleware\n\nThe server entrypoint is built to `./dist/server/entry.mjs` by default. This module exports a `handler` function that can be used with any framework that supports the Node `request` and `response` objects.\n\n## Standalone\n\nIn standalone mode a server starts when the server entrypoint is run. By default it is built to `./dist/server/entry.mjs`. You can run it with:\n\n## Custom host and port\n\nYou can override the host and port the standalone server runs on by passing them as environment variables at runtime.\n\n## HTTPS\n\nBy default the standalone server uses HTTP. If you need the standalone server to run HTTPS itself you need to provide your SSL key and certificate.\n\n## Runtime environment variables\n\nIf an `.env` file containing environment variables is present when the build process is run, these values will be hard-coded in the output.\n\n## Assets\n\nIn standalone mode, assets in your `dist/client/` folder are served via the standalone server.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "overview", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why astro node.js in astro?\n\nAssistant: To why astro node.js in astro, here's what you do:\nNode.js is a JavaScript runtime for server-side code. @astrojs/node can be used either in standalone mode or as middleware for other http servers, such as Express..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nAdd the Node adapter to enable SSR in your Astro project with the `astro add` command. This will install `@astrojs/node` and make the appropriate changes to your `astro.config.*` file in one step..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, add the Node adapter to your project‚Äôs dependencies using your preferred package manager.\n\nThen, add the adapter and your desired on-demand rendering mode to your `astro.config.*` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\n@astrojs/node can be configured by passing options into the adapter function. The following options are available:\n\n### Mode\n\nControls whether the adapter builds to `middleware` or `standalone` mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nFirst, performing a build. Depending on which `mode` selected, follow the appropriate steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I middleware in astro?\n\nAssistant: To middleware in astro, here's what you do:\nThe server entrypoint is built to `./dist/server/entry.mjs` by default. This module exports a `handler` function that can be used with any framework that supports the Node `request` and `response` objects..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I standalone in astro?\n\nAssistant: To standalone in astro, here's what you do:\nIn standalone mode a server starts when the server entrypoint is run. By default it is built to `./dist/server/entry.mjs`. You can run it with:.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom host and port in astro?\n\nAssistant: To custom host and port in astro, here's what you do:\nYou can override the host and port the standalone server runs on by passing them as environment variables at runtime..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I https in astro?\n\nAssistant: To https in astro, here's what you do:\nBy default the standalone server uses HTTP. If you need the standalone server to run HTTPS itself you need to provide your SSL key and certificate..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I runtime environment variables in astro?\n\nAssistant: To runtime environment variables in astro, here's what you do:\nIf an `.env` file containing environment variables is present when the build process is run, these values will be hard-coded in the output..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I assets in astro?\n\nAssistant: To assets in astro, here's what you do:\nIn standalone mode, assets in your `dist/client/` folder are served via the standalone server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "section_detail", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/node in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Node Adapter**:\n\n```yaml\nnpx astro add node\n```\n\nThis snippet shows you how to add node adapter, which is an important aspect of @astrojs/node.\n\n**Add Node Adapter with pnpm**:\n\n```yaml\npnpm astro add node\n```\n\nThis snippet shows you how to add node adapter with pnpm, which is an important aspect of @astrojs/node.\n\n**Add Node Adapter with Yarn**:\n\n```yaml\nyarn astro add node\n```\n\nThis snippet shows you how to add node adapter with yarn, which is an important aspect of @astrojs/node.\n\n**Install Node Adapter**:\n\n```yaml\nnpm install @astrojs/node\n```\n\nThis snippet shows you how to install node adapter, which is an important aspect of @astrojs/node.\n\n**Install Node Adapter with pnpm**:\n\n```yaml\npnpm add @astrojs/node\n```\n\nThis snippet shows you how to install node adapter with pnpm, which is an important aspect of @astrojs/node.\n\n**Install Node Adapter with Yarn**:\n\n```yaml\nyarn add @astrojs/node\n```\n\nThis snippet shows you how to install node adapter with yarn, which is an important aspect of @astrojs/node.\n\n**Configuration Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n  output: 'server',\n  adapter: node({\n    mode: 'standalone',\n  }),\n});\n```\n\nThis snippet shows you how to configuration example, which is an important aspect of @astrojs/node.\n\n**Middleware Example with Express**:\n\n```yaml\nimport express from 'express';\nimport { handler as ssrHandler } from './dist/server/entry.mjs';\n\nconst app = express();\nconst base = '/';\n\napp.use(base, express.static('dist/client/'));\napp.use(ssrHandler);\napp.listen(8080);\n```\n\nThis snippet shows you how to middleware example with express, which is an important aspect of @astrojs/node.\n\n**Middleware Example with Fastify**:\n\n```yaml\nimport Fastify from 'fastify';\nimport fastifyMiddie from '@fastify/middie';\nimport fastifyStatic from '@fastify/static';\nimport { fileURLToPath } from 'node:url';\nimport { handler as ssrHandler } from './dist/server/entry.mjs';\n\nconst app = Fastify({ logger: true });\n\nawait app\n  .register(fastifyStatic, {\n    root: fileURLToPath(new URL('./dist/client', import.meta.url)),\n  })\n  .register(fastifyMiddie);\n\napp.use(ssrHandler);\napp.listen({ port: 8080 });\n```\n\nThis snippet shows you how to middleware example with fastify, which is an important aspect of @astrojs/node.\n\n**Standalone Run Command**:\n\n```yaml\nnode ./dist/server/entry.mjs\n```\n\nThis snippet shows you how to standalone run command, which is an important aspect of @astrojs/node.\n\n**Custom Host and Port Command**:\n\n```yaml\nHOST=0.0.0.0 PORT=4321 node ./dist/server/entry.mjs\n```\n\nThis snippet shows you how to custom host and port command, which is an important aspect of @astrojs/node.\n\n**HTTPS Command**:\n\n```yaml\nSERVER_KEY_PATH=./private/key.pem SERVER_CERT_PATH=./private/cert.pem node ./dist/server/entry.mjs\n```\n\nThis snippet shows you how to https command, which is an important aspect of @astrojs/node.\n\n**Runtime Variables Command**:\n\n```yaml\nexport $(cat .env.runtime) && astro build\n```\n\nThis snippet shows you how to runtime variables command, which is an important aspect of @astrojs/node.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "code_examples", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/node in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf using middleware mode, configure your HTTP framework to serve static files as middleware mode does not do file serving.\n\nIn standalone mode, assets in your `dist/client/` folder are served via the standalone server.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/node", "title": "@astrojs/node", "description": "This adapter allows Astro to deploy your on-demand rendered routes to Node targets.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:04:40", "type": "best_practices", "page_metadata": {"language": "en", "title": "@astrojs/node | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "@astrojs/node", "twitter:site": "astrodotbuild", "og:description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "docsearch:language": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "favicon": "https://docs.astro.build/favicon.ico", "description": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "og:url": "https://docs.astro.build/en/guides/integrations-guide/node/", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/node.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "@astrojs/node", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/node/", "ogDescription": "Learn how to use the @astrojs/node SSR adapter to deploy your Astro project.", "scrapeId": "75e0eb3a-b124-4f96-82de-6bbe29724432", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/node", "url": "https://docs.astro.build/en/guides/integrations-guide/node/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Decap CMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Decap CMS & Astro in astro.\n\n# Decap CMS & Astro\n\nDecap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.Here's a quick rundown of what this is about:\n\n## Installing DecapCMS\n\nThere are two options for adding Decap to Astro:\n\n1. Install Decap via a package manager with the following command:\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm install decap-cms-app\n```\n\n```\npnpm add decap-cms-app\n```\n\n```\nyarn add decap-cms-app\n```\n\n2. Import the package into a `<script>` tag in your page `<body>`\n\n```\n<body>\n     <!-- Include the script that builds the page and powers Decap CMS -->\n     <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>\n```\n\n## Configuration\n\n1. Create a static admin folder at `public/admin/`\n\n2. Add `config.yml` to `public/admin/`:\n\n- Directorypublic\n- Directoryadmin\n- config.yml\n\n3. To add support for content collections, configure each schema in `config.yml`. The following example configures a `blog` collection, defining a `label` for each entry‚Äôs frontmatter property:\n\n```\ncollections:\n  - name: \"blog\" # Used in routes, e.g., /admin/collections/blog\n    label: \"Blog\" # Used in the UI\n    folder: \"src/content/blog\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields for each document, usually in frontmatter\n      - { label: \"Layout\", name: \"layout\", widget: \"hidden\", default: \"blog\" }\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\n      - { label: \"Publish Date\", name: \"date\", widget: \"datetime\" }\n      - { label: \"Featured Image\", name: \"thumbnail\", widget: \"image\" }\n      - { label: \"Rating (scale of 1-5)\", name: \"rating\", widget: \"number\" }\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\n```\n\n4. Add the `admin` route for your React app in `src/pages/admin.html`.\n\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <link href=\"/admin/config.yml\" type=\"text/yaml\" rel=\"cms-config-url\" />\n    <title>Content Manager</title>\n</head>\n<body>\n    <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>\n</html>\n```\n\n5. To enable media uploads to a specific folder via the Decap editor, add an appropriate path:\n\n```\nmedia_folder: \"src/assets/images\" # Location where files will be stored in the repo\npublic_folder: \"src/assets/images\" # The src attribute for uploaded media\n```\n\nSee the Decap CMS configuration documentation for full instructions and options.\n\n## Usage\n\nNavigate to `yoursite.com/admin/` to use the Decap CMS editor.\n\n## Authentication\n\n### Decap CMS with Netlify Identity\nDecap CMS was originally developed by Netlify and has first class support for Netlify Identity.\nWhen deploying to Netlify, configure Identity for your project via the Netlify dashboard and include the Netlify Identity Widget on the `admin` route of your project. Optionally include the Identity Widget on the homepage of your site if you plan to invite new users via email.\n\n### Decap CMS with External OAuth Clients\nWhen deploying to hosting providers other than Netlify, you must create your own OAuth routes.\nIn Astro, this can be done with on-demand rendered routes in your project configured with an adapter enabled.\nSee Decap‚Äôs OAuth Docs for a list of compatible community-maintained OAuth clients.\n\n## Community Resources\n\n- Netlify Identity Template: astro-decap-ssg-netlify\n- On-demand rendering OAuth Routes with Astro Template: astro-decap-starter-ssr\n- Blog Post: Author your Astro site‚Äôs content with Git-based CMSs by Aftab Alam\n- Youtube Tutorial: Create a Custom Blog with Astro & NetlifyCMS in MINUTES! by Kumail Pirzada\n\n## Production Sites\n\nThe following sites use Astro + Decap CMS in production:\n- yunielacosta.com by Yuniel Acosta ‚Äî source code on GitHub (Netlify CMS)\n- portfolioris.nl by Joris Hulsbosch ‚Äì source code on GitHub\n\n## Themes\n\n- Astros\n- Enhanced Astro Starter\n- Astro Decap CMS Starter\n\n## More CMS guides\n\n- Apostrophe\n- Builder.io\n- ButterCMS\n- Caisy\n- CloudCannon\n- Contentful\n- Cosmic\n- Craft CMS\n- Crystallize\n- DatoCMS\n- Decap CMS\n- Directus\n- Drupal\n- Flotiq\n- Front Matter CMS\n- Ghost\n- Hashnode\n- Hygraph\n- Keystatic\n- KeystoneJS\n- Kontent.ai\n- microCMS\n- Payload CMS\n- Prepr CMS\n- Prismic\n- Sanity\n- Sitecore XM\n- Spinal\n- Statamic\n- Storyblok\n- Strapi\n- Tina CMS\n- Umbraco\n- WordPress\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "overview", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installing decapcms in astro?\n\nAssistant: To installing decapcms in astro, here's what you do:\nThere are two options for adding Decap to Astro:\n\n1. Install Decap via a package manager with the following command:\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm install decap-cms-app\n```\n\n```\npnpm add decap-cms-app\n```\n\n```\nyarn add decap-cms-app\n```\n\n2. Import the package into a `<script>` tag in your page `<body>`\n\n```\n<body>\n     <!-- Include the script that builds the page and powers Decap CMS -->\n     <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\n1. Create a static admin folder at `public/admin/`\n\n2. Add `config.yml` to `public/admin/`:\n\n- Directorypublic\n- Directoryadmin\n- config.yml\n\n3. To add support for content collections, configure each schema in `config.yml`. The following example configures a `blog` collection, defining a `label` for each entry‚Äôs frontmatter property:\n\n```\ncollections:\n  - name: \"blog\" # Used in routes, e.g., /admin/collections/blog\n    label: \"Blog\" # Used in the UI\n    folder: \"src/content/blog\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields for each document, usually in frontmatter\n      - { label: \"Layout\", name: \"layout\", widget: \"hidden\", default: \"blog\" }\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\n      - { label: \"Publish Date\", name: \"date\", widget: \"datetime\" }\n      - { label: \"Featured Image\", name: \"thumbnail\", widget: \"image\" }\n      - { label: \"Rating (scale of 1-5)\", name: \"rating\", widget: \"number\" }\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\n```\n\n4. Add the `admin` route for your React app in `src/pages/admin.html`.\n\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <link href=\"/admin/config.yml\" type=\"text/yaml\" rel=\"cms-config-url\" />\n    <title>Content Manager</title>\n</head>\n<body>\n    <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>\n</html>\n```\n\n5. To enable media uploads to a specific folder via the Decap editor, add an appropriate path:\n\n```\nmedia_folder: \"src/assets/images\" # Location where files will be stored in the repo\npublic_folder: \"src/assets/images\" # The src attribute for uploaded media\n```\n\nSee the Decap CMS configuration documentation for full instructions and options..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nNavigate to `yoursite.com/admin/` to use the Decap CMS editor..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I authentication in astro?\n\nAssistant: To authentication in astro, here's what you do:\n### Decap CMS with Netlify Identity\nDecap CMS was originally developed by Netlify and has first class support for Netlify Identity.\nWhen deploying to Netlify, configure Identity for your project via the Netlify dashboard and include the Netlify Identity Widget on the `admin` route of your project. Optionally include the Identity Widget on the homepage of your site if you plan to invite new users via email.\n\n### Decap CMS with External OAuth Clients\nWhen deploying to hosting providers other than Netlify, you must create your own OAuth routes.\nIn Astro, this can be done with on-demand rendered routes in your project configured with an adapter enabled.\nSee Decap‚Äôs OAuth Docs for a list of compatible community-maintained OAuth clients..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community resources in astro?\n\nAssistant: To community resources in astro, here's what you do:\n- Netlify Identity Template: astro-decap-ssg-netlify\n- On-demand rendering OAuth Routes with Astro Template: astro-decap-starter-ssr\n- Blog Post: Author your Astro site‚Äôs content with Git-based CMSs by Aftab Alam\n- Youtube Tutorial: Create a Custom Blog with Astro & NetlifyCMS in MINUTES! by Kumail Pirzada.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I production sites in astro?\n\nAssistant: To production sites in astro, here's what you do:\nThe following sites use Astro + Decap CMS in production:\n- yunielacosta.com by Yuniel Acosta ‚Äî source code on GitHub (Netlify CMS)\n- portfolioris.nl by Joris Hulsbosch ‚Äì source code on GitHub.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I themes in astro?\n\nAssistant: To themes in astro, here's what you do:\n- Astros\n- Enhanced Astro Starter\n- Astro Decap CMS Starter.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I more cms guides in astro?\n\nAssistant: To more cms guides in astro, here's what you do:\n- Apostrophe\n- Builder.io\n- ButterCMS\n- Caisy\n- CloudCannon\n- Contentful\n- Cosmic\n- Craft CMS\n- Crystallize\n- DatoCMS\n- Decap CMS\n- Directus\n- Drupal\n- Flotiq\n- Front Matter CMS\n- Ghost\n- Hashnode\n- Hygraph\n- Keystatic\n- KeystoneJS\n- Kontent.ai\n- microCMS\n- Payload CMS\n- Prepr CMS\n- Prismic\n- Sanity\n- Sitecore XM\n- Spinal\n- Statamic\n- Storyblok\n- Strapi\n- Tina CMS\n- Umbraco\n- WordPress.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "section_detail", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Decap CMS & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Decap via npm**:\n\n```yaml\nnpm install decap-cms-app\n```\n\nThis snippet shows you how to install decap via npm, which is an important aspect of decap cms & astro.\n\n**Install Decap via pnpm**:\n\n```yaml\npnpm add decap-cms-app\n```\n\nThis snippet shows you how to install decap via pnpm, which is an important aspect of decap cms & astro.\n\n**Install Decap via Yarn**:\n\n```yaml\nyarn add decap-cms-app\n```\n\nThis snippet shows you how to install decap via yarn, which is an important aspect of decap cms & astro.\n\n**Include Decap CMS script in HTML**:\n\n```yaml\n<body>\n     <!-- Include the script that builds the page and powers Decap CMS -->\n     <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>\n```\n\nThis snippet shows you how to include decap cms script in html, which is an important aspect of decap cms & astro.\n\n**Decap CMS Configuration Example**:\n\n```yaml\ncollections:\n  - name: \"blog\" # Used in routes, e.g., /admin/collections/blog\n    label: \"Blog\" # Used in the UI\n    folder: \"src/content/blog\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields for each document, usually in frontmatter\n      - { label: \"Layout\", name: \"layout\", widget: \"hidden\", default: \"blog\" }\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\n      - { label: \"Publish Date\", name: \"date\", widget: \"datetime\" }\n      - { label: \"Featured Image\", name: \"thumbnail\", widget: \"image\" }\n      - { label: \"Rating (scale of 1-5)\", name: \"rating\", widget: \"number\" }\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\n```\n\nThis snippet shows you how to decap cms configuration example, which is an important aspect of decap cms & astro.\n\n**Admin HTML Example**:\n\n```yaml\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <link href=\"/admin/config.yml\" type=\"text/yaml\" rel=\"cms-config-url\" />\n    <title>Content Manager</title>\n</head>\n<body>\n    <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>\n</html>\n```\n\nThis snippet shows you how to admin html example, which is an important aspect of decap cms & astro.\n\n**Media Upload Configuration**:\n\n```yaml\nmedia_folder: \"src/assets/images\" # Location where files will be stored in the repo\npublic_folder: \"src/assets/images\" # The src attribute for uploaded media\n```\n\nThis snippet shows you how to media upload configuration, which is an important aspect of decap cms & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "code_examples", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Decap CMS & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen deploying to Netlify, configure Identity for your project via the Netlify dashboard.\n\nInclude the Netlify Identity Widget on the `admin` route of your project.\n\nFor hosting providers other than Netlify, create your own OAuth routes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/decap-cms", "title": "Decap CMS & Astro", "description": "Decap CMS (formerly Netlify CMS) is an open-source, Git-based content management system that allows you to take full advantage of all of Astro‚Äôs features, including image optimization and content collections.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:07:14", "type": "best_practices", "page_metadata": {"og:description": "Add content to your Astro project using Decap as a CMS", "description": "Add content to your Astro project using Decap as a CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "title": "Decap CMS & Astro | Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:site_name": "Docs", "ogLocale": "en", "og:locale": "en", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogDescription": "Add content to your Astro project using Decap as a CMS", "language": "en", "twitter:site": "astrodotbuild", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/decap-cms.webp", "og:title": "Decap CMS & Astro", "og:type": "article", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:url": "https://docs.astro.build/en/guides/cms/decap-cms/", "ogTitle": "Decap CMS & Astro", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "4d5ea7e4-a3da-4004-bcc9-693892760846", "sourceURL": "https://docs.astro.build/en/guides/cms/decap-cms", "url": "https://docs.astro.build/en/guides/cms/decap-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Lit is in astro?\n\nAssistant: Sure, I'd be happy to explain Lit in astro.\n\n# Lit\n\nYou can continue to use Lit for client components by adding a client-side script tag.Here's a quick rundown of what this is about:\n\n## Using Lit for Client Components\n\nYou can continue to use Lit for client components by adding a client-side script tag. For example:\n\n```html\n<script>\n  import \"../components/MyTabs\";\n</script>\n\n<my-tabs title=\"These are my tabs\">...</my-tabs>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/lit", "title": "Lit", "description": "You can continue to use Lit for client components by adding a client-side script tag.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:07:50", "type": "overview", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:description": "Using Lit to extend component support in your Astro project.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/lit/", "og:title": "Lit", "description": "Using Lit to extend component support in your Astro project.", "ogTitle": "Lit", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:locale": "en", "docsearch:language": "en", "language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "title": "Lit | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "ogDescription": "Using Lit to extend component support in your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "06b21f2f-d5a8-4205-b2c2-d919e75f200c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/lit", "url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using lit for client components in astro?\n\nAssistant: To using lit for client components in astro, here's what you do:\nYou can continue to use Lit for client components by adding a client-side script tag. For example:\n\n```html\n<script>\n  import \"../components/MyTabs\";\n</script>\n\n<my-tabs title=\"These are my tabs\">...</my-tabs>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/lit", "title": "Lit", "description": "You can continue to use Lit for client components by adding a client-side script tag.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:07:50", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:description": "Using Lit to extend component support in your Astro project.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/lit/", "og:title": "Lit", "description": "Using Lit to extend component support in your Astro project.", "ogTitle": "Lit", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:locale": "en", "docsearch:language": "en", "language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "title": "Lit | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "ogDescription": "Using Lit to extend component support in your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "06b21f2f-d5a8-4205-b2c2-d919e75f200c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/lit", "url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Lit in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Client Component Example**:\n\n```yaml\n<script>\n  import \"../components/MyTabs\";\n</script>\n\n<my-tabs title=\"These are my tabs\">...</my-tabs>\n```\n\nThis snippet shows you how to client component example, which is an important aspect of lit.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/lit", "title": "Lit", "description": "You can continue to use Lit for client components by adding a client-side script tag.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:07:50", "type": "code_examples", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:description": "Using Lit to extend component support in your Astro project.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/lit/", "og:title": "Lit", "description": "Using Lit to extend component support in your Astro project.", "ogTitle": "Lit", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:locale": "en", "docsearch:language": "en", "language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "title": "Lit | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "ogDescription": "Using Lit to extend component support in your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "06b21f2f-d5a8-4205-b2c2-d919e75f200c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/lit", "url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Lit in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you‚Äôre interested in maintaining a Lit integration yourself, you may wish to use the last published version of `@astrojs/lit` as a starting point and upgrade the relevant packages.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/lit", "title": "Lit", "description": "You can continue to use Lit for client components by adding a client-side script tag.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:07:50", "type": "best_practices", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:description": "Using Lit to extend component support in your Astro project.", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/lit/", "og:title": "Lit", "description": "Using Lit to extend component support in your Astro project.", "ogTitle": "Lit", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "og:locale": "en", "docsearch:language": "en", "language": "en", "og:type": "article", "twitter:site": "astrodotbuild", "title": "Lit | Docs", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/lit.webp", "ogDescription": "Using Lit to extend component support in your Astro project.", "ogSiteName": "Docs", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "scrapeId": "06b21f2f-d5a8-4205-b2c2-d919e75f200c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/lit", "url": "https://docs.astro.build/en/guides/integrations-guide/lit/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/sitemap is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/sitemap in astro.\n\n# @astrojs/sitemap\n\nThis Astro integration generates a sitemap based on your pages when you build your Astro project.Here's a quick rundown of what this is about:\n\n## Why Astro Sitemap\n\nA Sitemap is an XML file that outlines all of the pages, videos, and files on your site. Search engines like Google read this file to crawl your site more efficiently. See Google‚Äôs own advice on sitemaps to learn more.\n\nA sitemap file is recommended for large multi-page sites. If you don‚Äôt use a sitemap, most search engines will still be able to list your site‚Äôs pages, but a sitemap is a great way to ensure that your site is as search engine friendly as possible.\n\nWith Astro Sitemap, you don‚Äôt have to worry about creating this XML file yourself: the Astro Sitemap integration will crawl your statically-generated routes and create the sitemap file, including dynamic routes like [...slug] or src/pages/[lang]/[version]/info.astro generated by getStaticPaths().\n\nThis integration cannot generate sitemap entries for dynamic routes in SSR mode.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add sitemap\n```\n\n```\npnpm astro add sitemap\n```\n\n```\nyarn astro add sitemap\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/sitemap` package using your package manager.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm install @astrojs/sitemap\n```\n\n```\npnpm add @astrojs/sitemap\n```\n\n```\nyarn add @astrojs/sitemap\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport sitemap from '@astrojs/sitemap';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [sitemap()],\n\n});\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "title": "@astrojs/sitemap", "description": "This Astro integration generates a sitemap based on your pages when you build your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:10:27", "type": "overview", "page_metadata": {"description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/sitemap", "og:description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "ogSiteName": "Docs", "ogTitle": "@astrojs/sitemap", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "og:type": "article", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "title": "@astrojs/sitemap | Docs", "og:site_name": "Docs", "ogDescription": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "scrapeId": "0ec37b37-c379-4891-83a6-03747cf5780c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I why astro sitemap in astro?\n\nAssistant: To why astro sitemap in astro, here's what you do:\nA Sitemap is an XML file that outlines all of the pages, videos, and files on your site. Search engines like Google read this file to crawl your site more efficiently. See Google‚Äôs own advice on sitemaps to learn more.\n\nA sitemap file is recommended for large multi-page sites. If you don‚Äôt use a sitemap, most search engines will still be able to list your site‚Äôs pages, but a sitemap is a great way to ensure that your site is as search engine friendly as possible.\n\nWith Astro Sitemap, you don‚Äôt have to worry about creating this XML file yourself: the Astro Sitemap integration will crawl your statically-generated routes and create the sitemap file, including dynamic routes like [...slug] or src/pages/[lang]/[version]/info.astro generated by getStaticPaths().\n\nThis integration cannot generate sitemap entries for dynamic routes in SSR mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "title": "@astrojs/sitemap", "description": "This Astro integration generates a sitemap based on your pages when you build your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:10:27", "type": "section_detail", "page_metadata": {"description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/sitemap", "og:description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "ogSiteName": "Docs", "ogTitle": "@astrojs/sitemap", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "og:type": "article", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "title": "@astrojs/sitemap | Docs", "og:site_name": "Docs", "ogDescription": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "scrapeId": "0ec37b37-c379-4891-83a6-03747cf5780c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nRun one of the following commands in a new terminal window.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx astro add sitemap\n```\n\n```\npnpm astro add sitemap\n```\n\n```\nyarn astro add sitemap\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "title": "@astrojs/sitemap", "description": "This Astro integration generates a sitemap based on your pages when you build your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:10:27", "type": "section_detail", "page_metadata": {"description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/sitemap", "og:description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "ogSiteName": "Docs", "ogTitle": "@astrojs/sitemap", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "og:type": "article", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "title": "@astrojs/sitemap | Docs", "og:site_name": "Docs", "ogDescription": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "scrapeId": "0ec37b37-c379-4891-83a6-03747cf5780c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/sitemap` package using your package manager.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm install @astrojs/sitemap\n```\n\n```\npnpm add @astrojs/sitemap\n```\n\n```\nyarn add @astrojs/sitemap\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport sitemap from '@astrojs/sitemap';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [sitemap()],\n\n});\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "title": "@astrojs/sitemap", "description": "This Astro integration generates a sitemap based on your pages when you build your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:10:27", "type": "section_detail", "page_metadata": {"description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/sitemap", "og:description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "ogSiteName": "Docs", "ogTitle": "@astrojs/sitemap", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "og:type": "article", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "title": "@astrojs/sitemap | Docs", "og:site_name": "Docs", "ogDescription": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "scrapeId": "0ec37b37-c379-4891-83a6-03747cf5780c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/sitemap in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Installation Command**:\n\n```yaml\nnpx astro add sitemap\n```\n\nThis snippet shows you how to basic installation command, which is an important aspect of @astrojs/sitemap.\n\n**Manual Installation Command**:\n\n```yaml\nnpm install @astrojs/sitemap\n```\n\nThis snippet shows you how to manual installation command, which is an important aspect of @astrojs/sitemap.\n\n**Integration in astro.config.mjs**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport sitemap from '@astrojs/sitemap';\n\nexport default defineConfig({\n\n  integrations: [sitemap()],\n\n});\n```\n\nThis snippet shows you how to integration in astro.config.mjs, which is an important aspect of @astrojs/sitemap.\n\n**Usage Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport sitemap from '@astrojs/sitemap';\n\nexport default defineConfig({\n\n  site: 'https://stargazers.club',\n\n  integrations: [sitemap()],\n\n});\n```\n\nThis snippet shows you how to usage example, which is an important aspect of @astrojs/sitemap.\n\n**Generated Sitemap Example**:\n\n```yaml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n\n<sitemap>\n\n<loc>https://stargazers.club/sitemap-0.xml</loc>\n\n</sitemap>\n\n</sitemapindex>\n```\n\nThis snippet shows you how to generated sitemap example, which is an important aspect of @astrojs/sitemap.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "title": "@astrojs/sitemap", "description": "This Astro integration generates a sitemap based on your pages when you build your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:10:27", "type": "code_examples", "page_metadata": {"description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/sitemap", "og:description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "ogSiteName": "Docs", "ogTitle": "@astrojs/sitemap", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "og:type": "article", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "title": "@astrojs/sitemap | Docs", "og:site_name": "Docs", "ogDescription": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "scrapeId": "0ec37b37-c379-4891-83a6-03747cf5780c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/sitemap in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nA sitemap is recommended for large multi-page sites to ensure search engine friendliness.\n\nUse the `astro add` command for easy integration setup.\n\nMake sure to include your site's URL in the `astro.config.mjs` file for proper sitemap generation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "title": "@astrojs/sitemap", "description": "This Astro integration generates a sitemap based on your pages when you build your Astro project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:10:27", "type": "best_practices", "page_metadata": {"description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/sitemap", "og:description": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "ogSiteName": "Docs", "ogTitle": "@astrojs/sitemap", "docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "og:type": "article", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/sitemap.webp", "og:url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "title": "@astrojs/sitemap | Docs", "og:site_name": "Docs", "ogDescription": "Learn how to use the @astrojs/sitemap integration in your Astro project.", "scrapeId": "0ec37b37-c379-4891-83a6-03747cf5780c", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/sitemap", "url": "https://docs.astro.build/en/guides/integrations-guide/sitemap/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Tina CMS & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Tina CMS & Astro in astro.\n\n# Tina CMS & Astro\n\nTina CMS is a Git-backed headless content management system.Here's a quick rundown of what this is about:\n\n## Integrating with Astro\n\nTo get started, you‚Äôll need an existing Astro project.\n\n1. Run the following command to install Tina into your Astro project.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx @tinacms/cli@latest init\n```\n\n```\npnpm dlx @tinacms/cli@latest init\n```\n\n```\nyarn dlx @tinacms/cli@latest init\n```\n\n   - When prompted for a Cloud ID, press `Enter` to skip. You‚Äôll generate one later if you want to use Tina Cloud.\n   - When prompted ‚ÄúWhat framework are you using‚Äù, choose **Other**.\n   - When asked where public assets are stored, press `Enter`.\n\nAfter this has finished, you should now have a `.tina` folder in the root of your project and a generated `hello-world.md` file at `content/posts`.\n\n2. Change the `dev` script in `package.json`:\n\n- npm\n- pnpm\n- Yarn\n\n```\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\n```\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\n```\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\n3. TinaCMS is now set up in local mode. Test this by running the `dev` script, then navigating to `/admin/index.html#/collections/post`.\n\nEditing the ‚ÄúHello, World!‚Äù post will update the `content/posts/hello-world.md` file in your project directory.\n\n4. Set up your Tina collections by editing the `schema.collections` property in `.tina/config.ts`.\n\nFor example, you can add a required ‚Äúdate posted‚Äù frontmatter property to our posts:\n\n```\nimport { defineConfig } from \"tinacms\";\n\n// Your hosting provider likely exposes this as an environment variable\nconst branch = process.env.HEAD || process.env.VERCEL_GIT_COMMIT_REF || \"main\";\n\nexport default defineConfig({\n     branch,\n     clientId: null, // Get this from tina.io\n     token: null, // Get this from tina.io\n     build: {\n       outputFolder: \"admin\",\n       publicFolder: \"public\",\n     },\n     media: {\n       tina: {\n         mediaRoot: \"images\",\n         publicFolder: \"public\",\n       },\n     },\n     schema: {\n       collections: [\n         {\n           name: \"posts\",\n           label: \"Posts\",\n           path: \"src/content/posts\",\n           format: 'mdx',\n           fields: [\n             {\n               type: \"string\",\n               name: \"title\",\n               label: \"Title\",\n               isTitle: true,\n               required: true,\n             },\n             {\n               type: \"datetime\",\n               name: \"posted\",\n               label: \"Date Posted\",\n               required: true,\n             },\n             {\n               type: \"rich-text\",\n               name: \"body\",\n               label: \"Body\",\n               isBody: true,\n             },\n           ],\n         },\n       ],\n     },\n});\n```\n\nLearn more about Tina collections [in the Tina docs](https://tina.io/docs/reference/collections/).\n\n5. In production, TinaCMS can commit changes directly to your GitHub repository. To set up TinaCMS for production, you can choose to use [Tina Cloud](https://tina.io/docs/tina-cloud/) or self-host the [Tina Data Layer](https://tina.io/docs/self-hosted/overview/). You can [read more about registering for Tina Cloud](https://app.tina.io/register) in the Tina Docs.\n\n## Official Resources\n\n- [TinaCMS Astro integration guide](https://tina.io/docs/frameworks/astro/).\n\n## Community Resources\n\n- [Astro Tina Starter with visual editing](https://github.com/dawaltconley/tina-astro) by Jeff See + Dylan Awalt-Conley\n- [Astro Tina Starter with basic editing](https://github.com/tombennet/astro-tina-starter/tree/main) by Tom Bennet\n- [Using Astro‚Äôs Image Optimization with Tina](https://joschua.io/posts/2023/08/16/how-to-use-astro-assets-with-tina-cms/)\n\n## Themes\n\n- [Resume01](https://astro.build/themes/details/resume01/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrating with astro in astro?\n\nAssistant: To integrating with astro in astro, here's what you do:\nTo get started, you‚Äôll need an existing Astro project.\n\n1. Run the following command to install Tina into your Astro project.\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpx @tinacms/cli@latest init\n```\n\n```\npnpm dlx @tinacms/cli@latest init\n```\n\n```\nyarn dlx @tinacms/cli@latest init\n```\n\n   - When prompted for a Cloud ID, press `Enter` to skip. You‚Äôll generate one later if you want to use Tina Cloud.\n   - When prompted ‚ÄúWhat framework are you using‚Äù, choose **Other**.\n   - When asked where public assets are stored, press `Enter`.\n\nAfter this has finished, you should now have a `.tina` folder in the root of your project and a generated `hello-world.md` file at `content/posts`.\n\n2. Change the `dev` script in `package.json`:\n\n- npm\n- pnpm\n- Yarn\n\n```\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\n```\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\n```\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\n3. TinaCMS is now set up in local mode. Test this by running the `dev` script, then navigating to `/admin/index.html#/collections/post`.\n\nEditing the ‚ÄúHello, World!‚Äù post will update the `content/posts/hello-world.md` file in your project directory.\n\n4. Set up your Tina collections by editing the `schema.collections` property in `.tina/config.ts`.\n\nFor example, you can add a required ‚Äúdate posted‚Äù frontmatter property to our posts:\n\n```\nimport { defineConfig } from \"tinacms\";\n\n// Your hosting provider likely exposes this as an environment variable\nconst branch = process.env.HEAD || process.env.VERCEL_GIT_COMMIT_REF || \"main\";\n\nexport default defineConfig({\n     branch,\n     clientId: null, // Get this from tina.io\n     token: null, // Get this from tina.io\n     build: {\n       outputFolder: \"admin\",\n       publicFolder: \"public\",\n     },\n     media: {\n       tina: {\n         mediaRoot: \"images\",\n         publicFolder: \"public\",\n       },\n     },\n     schema: {\n       collections: [\n         {\n           name: \"posts\",\n           label: \"Posts\",\n           path: \"src/content/posts\",\n           format: 'mdx',\n           fields: [\n             {\n               type: \"string\",\n               name: \"title\",\n               label: \"Title\",\n               isTitle: true,\n               required: true,\n             },\n             {\n               type: \"datetime\",\n               name: \"posted\",\n               label: \"Date Posted\",\n               required: true,\n             },\n             {\n               type: \"rich-text\",\n               name: \"body\",\n               label: \"Body\",\n               isBody: true,\n             },\n           ],\n         },\n       ],\n     },\n});\n```\n\nLearn more about Tina collections [in the Tina docs](https://tina.io/docs/reference/collections/).\n\n5. In production, TinaCMS can commit changes directly to your GitHub repository. To set up TinaCMS for production, you can choose to use [Tina Cloud](https://tina.io/docs/tina-cloud/) or self-host the [Tina Data Layer](https://tina.io/docs/self-hosted/overview/). You can [read more about registering for Tina Cloud](https://app.tina.io/register) in the Tina Docs..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- [TinaCMS Astro integration guide](https://tina.io/docs/frameworks/astro/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community resources in astro?\n\nAssistant: To community resources in astro, here's what you do:\n- [Astro Tina Starter with visual editing](https://github.com/dawaltconley/tina-astro) by Jeff See + Dylan Awalt-Conley\n- [Astro Tina Starter with basic editing](https://github.com/tombennet/astro-tina-starter/tree/main) by Tom Bennet\n- [Using Astro‚Äôs Image Optimization with Tina](https://joschua.io/posts/2023/08/16/how-to-use-astro-assets-with-tina-cms/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I themes in astro?\n\nAssistant: To themes in astro, here's what you do:\n- [Resume01](https://astro.build/themes/details/resume01/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Tina CMS & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Tina into Astro project**:\n\n```yaml\nnpx @tinacms/cli@latest init\n```\n\nThis snippet shows you how to install tina into astro project, which is an important aspect of tina cms & astro.\n\n**Install Tina into Astro project with pnpm**:\n\n```yaml\npnpm dlx @tinacms/cli@latest init\n```\n\nThis snippet shows you how to install tina into astro project with pnpm, which is an important aspect of tina cms & astro.\n\n**Install Tina into Astro project with Yarn**:\n\n```yaml\nyarn dlx @tinacms/cli@latest init\n```\n\nThis snippet shows you how to install tina into astro project with yarn, which is an important aspect of tina cms & astro.\n\n**Change dev script in package.json**:\n\n```yaml\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}\n```\n\nThis snippet shows you how to change dev script in package.json, which is an important aspect of tina cms & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Tina CMS & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen prompted for a Cloud ID, press `Enter` to skip. You‚Äôll generate one later if you want to use Tina Cloud.\n\nWhen prompted 'What framework are you using', choose **Other**.\n\nWhen asked where public assets are stored, press `Enter`.\n\nIn production, TinaCMS can commit changes directly to your GitHub repository.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/tina-cms", "title": "Tina CMS & Astro", "description": "Tina CMS is a Git-backed headless content management system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:52", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "og:title": "Tina CMS & Astro", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/guides/cms/tina-cms/", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "ogDescription": "Add content to your Astro project using Tina as a CMS", "ogUrl": "https://docs.astro.build/en/guides/cms/tina-cms/", "og:type": "article", "og:description": "Add content to your Astro project using Tina as a CMS", "language": "en", "description": "Add content to your Astro project using Tina as a CMS", "title": "Tina CMS & Astro | Docs", "ogLocale": "en", "ogTitle": "Tina CMS & Astro", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/tina-cms.webp", "docsearch:language": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:locale": "en", "ogSiteName": "Docs", "scrapeId": "2cd48ad7-d10e-4e3e-a540-8173615d62bf", "sourceURL": "https://docs.astro.build/en/guides/cms/tina-cms", "url": "https://docs.astro.build/en/guides/cms/tina-cms/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Google Cloud is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Google Cloud in astro.\n\n# Deploy your Astro Site to Google Cloud\n\nGoogle Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.Here's a quick rundown of what this is about:\n\n## How to deploy\n\nThis section provides an overview of the deployment process for Astro sites on Google Cloud.\n\n## Cloud Storage (static only)\n\n1. Create a new GCP project, or select one you already have.\n\n2. Create a new bucket under Cloud Storage.\n\n3. Give it a name and the other required settings.\n\n4. Upload your `dist` folder into it or upload using Cloud Build.\n\n5. Enable public access by adding a new permission to `allUsers` called `Storage Object Viewer`.\n\n6. Edit the website configuration and add `index.html` as the entrypoint and `404.html` as the error page.\n\n## Cloud Run (SSR and static)\n\nCloud Run is a serverless platform that allows you to run a container without having to manage any infrastructure. It can be used to deploy both static and SSR sites.\n\n## Prepare the Service\n\n1. Create a new GCP project, or select one you already have.\n\n2. Make sure the Cloud Run API is enabled.\n\n3. Create a new service.\n\n## Create Dockerfile & Build the Container\n\nBefore you can deploy your Astro site to Cloud Run, you need to create a Dockerfile that will be used to build the container. Find more information about how to use Docker with Astro in our recipe section.\n\nOnce the Dockerfile is created, build it into an image and push it to Google Cloud. There are a few ways to accomplish this:\n\n**Build locally using Docker**:\n\nUse the `docker build` command to build the image, `docker tag` to give it a tag, then `docker push` to push it to a registry. In the case of Google Cloud, Artifact Registry is the easiest option, but you can also use Docker Hub.\n\n```\n# build your container\ndocker build .\n\ndocker tag SOURCE_IMAGE HOSTNAME/PROJECT-ID/TARGET-IMAGE:TAG\n\n# Push your image to a registry\ndocker push HOSTNAME/PROJECT-ID/IMAGE:TAG\n```\n\nChange the following values in the commands above to match your project:\n\n- `SOURCE_IMAGE`: the local image name or image ID.\n- `HOSTNAME`: the registry host ( `gcr.io`, `eu.gcr.io`, `asia.gcr.io`, `us.gcr.io`, `docker.io`).\n- `PROJECT`: your Google Cloud project ID.\n- `TARGET-IMAGE`: the name for the image when it‚Äôs stored in the registry.\n- `TAG` is the version associated with the image.\n\nRead more in the Google Cloud docs.\n\n**Using another tool**:\n\nYou can use a CI/CD tool that supports Docker, like GitHub Actions.\n\n**Build using Cloud Build**:\n\nInstead of building the Dockerfile locally, you can instruct Google Cloud to build the image remotely. See the Google Cloud Build documentation here.\n\n## Deploying the container\n\nDeployment can be handled manually in your terminal using `gcloud` or automatically using Cloud Build or any other CI/CD system.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "overview", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I how to deploy in astro?\n\nAssistant: To how to deploy in astro, here's what you do:\nThis section provides an overview of the deployment process for Astro sites on Google Cloud..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cloud storage (static only) in astro?\n\nAssistant: To cloud storage (static only) in astro, here's what you do:\n1. Create a new GCP project, or select one you already have.\n\n2. Create a new bucket under Cloud Storage.\n\n3. Give it a name and the other required settings.\n\n4. Upload your `dist` folder into it or upload using Cloud Build.\n\n5. Enable public access by adding a new permission to `allUsers` called `Storage Object Viewer`.\n\n6. Edit the website configuration and add `index.html` as the entrypoint and `404.html` as the error page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cloud run (ssr and static) in astro?\n\nAssistant: To cloud run (ssr and static) in astro, here's what you do:\nCloud Run is a serverless platform that allows you to run a container without having to manage any infrastructure. It can be used to deploy both static and SSR sites..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prepare the service in astro?\n\nAssistant: To prepare the service in astro, here's what you do:\n1. Create a new GCP project, or select one you already have.\n\n2. Make sure the Cloud Run API is enabled.\n\n3. Create a new service..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create dockerfile & build the container in astro?\n\nAssistant: To create dockerfile & build the container in astro, here's what you do:\nBefore you can deploy your Astro site to Cloud Run, you need to create a Dockerfile that will be used to build the container. Find more information about how to use Docker with Astro in our recipe section.\n\nOnce the Dockerfile is created, build it into an image and push it to Google Cloud. There are a few ways to accomplish this:\n\n**Build locally using Docker**:\n\nUse the `docker build` command to build the image, `docker tag` to give it a tag, then `docker push` to push it to a registry. In the case of Google Cloud, Artifact Registry is the easiest option, but you can also use Docker Hub.\n\n```\n# build your container\ndocker build .\n\ndocker tag SOURCE_IMAGE HOSTNAME/PROJECT-ID/TARGET-IMAGE:TAG\n\n# Push your image to a registry\ndocker push HOSTNAME/PROJECT-ID/IMAGE:TAG\n```\n\nChange the following values in the commands above to match your project:\n\n- `SOURCE_IMAGE`: the local image name or image ID.\n- `HOSTNAME`: the registry host ( `gcr.io`, `eu.gcr.io`, `asia.gcr.io`, `us.gcr.io`, `docker.io`).\n- `PROJECT`: your Google Cloud project ID.\n- `TARGET-IMAGE`: the name for the image when it‚Äôs stored in the registry.\n- `TAG` is the version associated with the image.\n\nRead more in the Google Cloud docs.\n\n**Using another tool**:\n\nYou can use a CI/CD tool that supports Docker, like GitHub Actions.\n\n**Build using Cloud Build**:\n\nInstead of building the Dockerfile locally, you can instruct Google Cloud to build the image remotely. See the Google Cloud Build documentation here..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I deploying the container in astro?\n\nAssistant: To deploying the container in astro, here's what you do:\nDeployment can be handled manually in your terminal using `gcloud` or automatically using Cloud Build or any other CI/CD system..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Google Cloud in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Build and Push Docker Image**:\n\n```yaml\n# build your container\ndocker build .\n\ndocker tag SOURCE_IMAGE HOSTNAME/PROJECT-ID/TARGET-IMAGE:TAG\n\n# Push your image to a registry\ndocker push HOSTNAME/PROJECT-ID/IMAGE:TAG\n```\n\nThis snippet shows you how to build and push docker image, which is an important aspect of deploy your astro site to google cloud.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "code_examples", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to Google Cloud in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure the Cloud Run API is enabled before creating a service.\n\nUse Artifact Registry for easier image management in Google Cloud.\n\nConsider using CI/CD tools like GitHub Actions for automated deployments.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/google-cloud", "title": "Deploy your Astro Site to Google Cloud", "description": "Google Cloud is a full-featured web app hosting platform that can be used to deploy an Astro site.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:11:13", "type": "best_practices", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "og:locale": "en", "ogUrl": "https://docs.astro.build/en/guides/deploy/google-cloud/", "docsearch:language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "og:site_name": "Docs", "og:title": "Deploy your Astro Site to Google Cloud", "language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/google-cloud.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:type": "article", "og:description": "How to deploy your Astro site to the web using Google Cloud.", "ogTitle": "Deploy your Astro Site to Google Cloud", "viewport": "width=device-width, initial-scale=1", "title": "Deploy your Astro Site to Google Cloud | Docs", "ogDescription": "How to deploy your Astro site to the web using Google Cloud.", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "description": "How to deploy your Astro site to the web using Google Cloud.", "scrapeId": "76ec7f6e-afa9-4c94-8a14-8a62fbcae05d", "sourceURL": "https://docs.astro.build/en/guides/deploy/google-cloud", "url": "https://docs.astro.build/en/guides/deploy/google-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Send your first script to the browser is in astro?\n\nAssistant: Sure, I'd be happy to explain Send your first script to the browser in astro.\n\n# Send your first script to the browser\n\nThis tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.Here's a quick rundown of what this is about:\n\n## Build a Hamburger component\n\nCreate a `<Hamburger />` component to open and close your mobile menu.\n\n1. Create a file named `Hamburger.astro` in `src/components/`\n\n2. Copy the following code into your component. This will represent your 3-line ‚Äúhamburger‚Äù menu to open and close your navigation links on mobile. (You will add the new CSS styles to `global.css` later.)\n\n```html\n<div class=\"hamburger\">\n     <span class=\"line\"></span>\n     <span class=\"line\"></span>\n     <span class=\"line\"></span>\n</div>\n```\n\n3. Place this new `<Hamburger />` component just before your `<Navigation />` component in `Header.astro`.\n\n```html\nimport Hamburger from './Hamburger.astro';\nimport Navigation from './Navigation.astro';\n\n<header>\n     <nav>\n       <Hamburger />\n       <Navigation />\n     </nav>\n</header>\n```\n\n4. Add the following styles for your Hamburger component:\n\n```css\n/* nav styles */\n.hamburger {\n     padding-right: 20px;\n     cursor: pointer;\n}\n\n.hamburger .line {\n     display: block;\n     width: 40px;\n     height: 5px;\n     margin-bottom: 10px;\n     background-color: #ff9776;\n}\n\n.nav-links {\n     width: 100%;\n     top: 5rem;\n     left: 48px;\n     background-color: #ff9776;\n     display: none;\n     margin: 0;\n}\n\n.nav-links a {\n     display: block;\n     text-align: center;\n     padding: 10px 0;\n     text-decoration: none;\n     font-size: 1.2rem;\n     font-weight: bold;\n     text-transform: uppercase;\n}\n\n.nav-links a:hover, a:focus {\n     background-color: #ff9776;\n}\n\n.expanded {\n     display: unset;\n}\n\n@media screen and (min-width: 636px) {\n     .nav-links {\n       margin-left: 5em;\n       display: block;\n       position: static;\n       width: auto;\n       background: none;\n     }\n\n     .nav-links a {\n       display: inline-block;\n       padding: 15px 20px;\n     }\n\n     .hamburger {\n       display: none;\n     }\n}\n```\n\n## Write your first script tag\n\nYour header is not yet **interactive** because it can‚Äôt respond to user input, like clicking on the hamburger menu to show or hide the navigation links.\n\nAdding a `<script>` tag provides client-side JavaScript to ‚Äúlisten‚Äù for a user event and then respond accordingly.\n\n1. Add the following `<script>` tag to `index.astro`, just before the closing `</body>` tag.\n\n```html\n     <Footer />\n     <script>\n       document.querySelector('.hamburger')?.addEventListener('click', () => {\n         document.querySelector('.nav-links')?.classList.toggle('expanded');\n       });\n     </script>\n</body>\n```\n\n2. Check your browser preview again at various sizes, and verify that you have a working navigation menu that is both responsive to screen size and responds to user input on this page.\n\n## Importing a .js file\n\nInstead of writing your JavaScript directly on each page, you can move the contents of your `<script>` tag into its own `.js` file in your project.\n\n1. Create `src/scripts/menu.js` (you will have to create a new `/scripts/` folder) and move your JavaScript into it.\n\n```javascript\ndocument.querySelector('.hamburger').addEventListener('click', () => {\n     document.querySelector('.nav-links').classList.toggle('expanded');\n});\n```\n\n2. Replace the contents of the `<script>` tag on `index.astro` with the following file import:\n\n```html\n     <Footer />\n     <script>\n       import \"../scripts/menu.js\";\n     </script>\n</body>\n```\n\n3. Check your browser preview again at a smaller size and verify that the hamburger menu still opens and closes your navigation links.\n\n4. Add the same `<script>` with import to your other two pages, `about.astro` and `blog.astro` and verify that you have a responsive, interactive header on each page.\n\n```html\n     <Footer />\n     <script>\n       import \"../scripts/menu.js\";\n     </script>\n</body>\n```\n\n## Test your knowledge\n\n1. When does Astro run any JavaScript written in a component‚Äôs frontmatter?\n   - Astro never runs JavaScript\n   - at build-time\n   - When a visitor clicks a button\n\n2. Optionally, Astro can send JavaScript to the browser to allow:\n   - users to click page links\n   - faster load times\n   - client-side interactivity\n\n3. The client-side JavaScript will be sent to a user‚Äôs browser when it is written or imported:\n   - in `<script>` tags\n   - between a `.astro` file‚Äôs code fences\n   - in `global.css`\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "overview", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build a hamburger component in astro?\n\nAssistant: To build a hamburger component in astro, here's what you do:\nCreate a `<Hamburger />` component to open and close your mobile menu.\n\n1. Create a file named `Hamburger.astro` in `src/components/`\n\n2. Copy the following code into your component. This will represent your 3-line ‚Äúhamburger‚Äù menu to open and close your navigation links on mobile. (You will add the new CSS styles to `global.css` later.)\n\n```html\n<div class=\"hamburger\">\n     <span class=\"line\"></span>\n     <span class=\"line\"></span>\n     <span class=\"line\"></span>\n</div>\n```\n\n3. Place this new `<Hamburger />` component just before your `<Navigation />` component in `Header.astro`.\n\n```html\nimport Hamburger from './Hamburger.astro';\nimport Navigation from './Navigation.astro';\n\n<header>\n     <nav>\n       <Hamburger />\n       <Navigation />\n     </nav>\n</header>\n```\n\n4. Add the following styles for your Hamburger component:\n\n```css\n/* nav styles */\n.hamburger {\n     padding-right: 20px;\n     cursor: pointer;\n}\n\n.hamburger .line {\n     display: block;\n     width: 40px;\n     height: 5px;\n     margin-bottom: 10px;\n     background-color: #ff9776;\n}\n\n.nav-links {\n     width: 100%;\n     top: 5rem;\n     left: 48px;\n     background-color: #ff9776;\n     display: none;\n     margin: 0;\n}\n\n.nav-links a {\n     display: block;\n     text-align: center;\n     padding: 10px 0;\n     text-decoration: none;\n     font-size: 1.2rem;\n     font-weight: bold;\n     text-transform: uppercase;\n}\n\n.nav-links a:hover, a:focus {\n     background-color: #ff9776;\n}\n\n.expanded {\n     display: unset;\n}\n\n@media screen and (min-width: 636px) {\n     .nav-links {\n       margin-left: 5em;\n       display: block;\n       position: static;\n       width: auto;\n       background: none;\n     }\n\n     .nav-links a {\n       display: inline-block;\n       padding: 15px 20px;\n     }\n\n     .hamburger {\n       display: none;\n     }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I write your first script tag in astro?\n\nAssistant: To write your first script tag in astro, here's what you do:\nYour header is not yet **interactive** because it can‚Äôt respond to user input, like clicking on the hamburger menu to show or hide the navigation links.\n\nAdding a `<script>` tag provides client-side JavaScript to ‚Äúlisten‚Äù for a user event and then respond accordingly.\n\n1. Add the following `<script>` tag to `index.astro`, just before the closing `</body>` tag.\n\n```html\n     <Footer />\n     <script>\n       document.querySelector('.hamburger')?.addEventListener('click', () => {\n         document.querySelector('.nav-links')?.classList.toggle('expanded');\n       });\n     </script>\n</body>\n```\n\n2. Check your browser preview again at various sizes, and verify that you have a working navigation menu that is both responsive to screen size and responds to user input on this page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I importing a .js file in astro?\n\nAssistant: To importing a .js file in astro, here's what you do:\nInstead of writing your JavaScript directly on each page, you can move the contents of your `<script>` tag into its own `.js` file in your project.\n\n1. Create `src/scripts/menu.js` (you will have to create a new `/scripts/` folder) and move your JavaScript into it.\n\n```javascript\ndocument.querySelector('.hamburger').addEventListener('click', () => {\n     document.querySelector('.nav-links').classList.toggle('expanded');\n});\n```\n\n2. Replace the contents of the `<script>` tag on `index.astro` with the following file import:\n\n```html\n     <Footer />\n     <script>\n       import \"../scripts/menu.js\";\n     </script>\n</body>\n```\n\n3. Check your browser preview again at a smaller size and verify that the hamburger menu still opens and closes your navigation links.\n\n4. Add the same `<script>` with import to your other two pages, `about.astro` and `blog.astro` and verify that you have a responsive, interactive header on each page.\n\n```html\n     <Footer />\n     <script>\n       import \"../scripts/menu.js\";\n     </script>\n</body>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. When does Astro run any JavaScript written in a component‚Äôs frontmatter?\n   - Astro never runs JavaScript\n   - at build-time\n   - When a visitor clicks a button\n\n2. Optionally, Astro can send JavaScript to the browser to allow:\n   - users to click page links\n   - faster load times\n   - client-side interactivity\n\n3. The client-side JavaScript will be sent to a user‚Äôs browser when it is written or imported:\n   - in `<script>` tags\n   - between a `.astro` file‚Äôs code fences\n   - in `global.css`.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Send your first script to the browser in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Hamburger Component HTML**:\n\n```yaml\n<div class=\"hamburger\">\n     <span class=\"line\"></span>\n     <span class=\"line\"></span>\n     <span class=\"line\"></span>\n</div>\n```\n\nThis snippet shows you how to hamburger component html, which is an important aspect of send your first script to the browser.\n\n**Header Component with Hamburger**:\n\n```yaml\nimport Hamburger from './Hamburger.astro';\nimport Navigation from './Navigation.astro';\n\n<header>\n     <nav>\n       <Hamburger />\n       <Navigation />\n     </nav>\n</header>\n```\n\nThis snippet shows you how to header component with hamburger, which is an important aspect of send your first script to the browser.\n\n**Hamburger Component CSS**:\n\n```yaml\n/* nav styles */\n.hamburger {\n     padding-right: 20px;\n     cursor: pointer;\n}\n\n.hamburger .line {\n     display: block;\n     width: 40px;\n     height: 5px;\n     margin-bottom: 10px;\n     background-color: #ff9776;\n}\n\n.nav-links {\n     width: 100%;\n     top: 5rem;\n     left: 48px;\n     background-color: #ff9776;\n     display: none;\n     margin: 0;\n}\n\n.nav-links a {\n     display: block;\n     text-align: center;\n     padding: 10px 0;\n     text-decoration: none;\n     font-size: 1.2rem;\n     font-weight: bold;\n     text-transform: uppercase;\n}\n\n.nav-links a:hover, a:focus {\n     background-color: #ff9776;\n}\n\n.expanded {\n     display: unset;\n}\n\n@media screen and (min-width: 636px) {\n     .nav-links {\n       margin-left: 5em;\n       display: block;\n       position: static;\n       width: auto;\n       background: none;\n     }\n\n     .nav-links a {\n       display: inline-block;\n       padding: 15px 20px;\n     }\n\n     .hamburger {\n       display: none;\n     }\n}\n```\n\nThis snippet shows you how to hamburger component css, which is an important aspect of send your first script to the browser.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Send your first script to the browser in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck your browser preview at various sizes to ensure responsiveness.\n\nMove JavaScript to a separate file for better organization and maintainability.\n\nEnsure the hamburger menu is functional on all pages where it is included.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/3-components/4", "title": "Send your first script to the browser", "description": "This tutorial covers how to create a hamburger menu component that allows users to open and close navigation links on mobile screen sizes, including adding client-side interactivity with JavaScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:47", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "ogTitle": "Send your first script to the browser", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "og:title": "Send your first script to the browser", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "title": "Send your first script to the browser | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/3-components/4/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/3-components/4/", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/3-components/4.webp", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd client-side interactivity to your mobile navigation with an Astro script tag", "scrapeId": "1056c59c-e122-48ad-ac76-9423c7e566aa", "sourceURL": "https://docs.astro.build/en/tutorial/3-components/4", "url": "https://docs.astro.build/en/tutorial/3-components/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build a tag index page is in astro?\n\nAssistant: Sure, I'd be happy to explain Build a tag index page in astro.\n\n# Build a tag index page\n\nThis page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.Here's a quick rundown of what this is about:\n\n## Use the `/pages/folder/index.astro` routing pattern\n\nTo add a Tag Index page to your website, you could create a new file at `src/pages/tags.astro`. But, since you already have the directory `/tags/`, you can take advantage of another routing pattern in Astro, and keep all your files related to tags together.\n\n## Try it yourself - Make a Tag Index page\n\n1. Create a new file `index.astro` in the directory `src/pages/tags/`.\n\n2. Navigate to `http://localhost:4321/tags` and verify that your site now contains a page at this URL. It will be empty, but it will exist.\n\n3. Create a minimal page at `src/pages/tags/index.astro` that uses your layout. You have done this before!\n\nExpand to see the steps\n\n1. Create a new page component in `src/pages/tags/`. Show the filename\n\n```index.astro``` \n\n2. Import and use your `<BaseLayout>`. Show the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\n---\n<BaseLayout></BaseLayout>```\n\n3. Define a page title, and pass it to your layout as a component attribute. Show the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}></BaseLayout>```\n\n4. Check your browser preview again and you should have a formatted page, ready to add content to!\n\n## Create an array of tags\n\nYou have previously displayed items in a list from an array using `map()`. What would it look like to define an array of all your tags, then display them in a list on this page?\n\nSee the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst tags = ['astro', 'blogging', 'learning in public', 'successes', 'setbacks', 'community']\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <ul>\n    {tags.map((tag) => <li>{tag}</li>)}\n  </ul>\n</BaseLayout>```\n\nYou could do this, but then you would need to come back to this file and update your array every time you use a new tag in a future blog post.\n\nFortunately, you already know a way to grab the data from all your Markdown files in one line of code, then return a list of all your tags.\n\n1. In `src/pages/tags/index.astro`, add the line of code to the frontmatter script that will give your page access to the data from every `.md` blog post file. See the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst pageTitle = \"Tag Index\";\n---``` \n\n2. Next, add the following line of JavaScript to your page component. This is the same code relying on Astro‚Äôs built-in TypeScript support you used in `src/pages/tags/[tag].astro` to return a list of unique tags.\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---```\n\n## Create your list of tags\n\nInstead of creating items in an unordered list this time, create one `<p>` for each item, inside a `<div>`. The pattern should look familiar!\n\n1. Add the following code to your component template:\n\n```<BaseLayout pageTitle={pageTitle}>\n     <div>{tags.map((tag) => <p>{tag}</p>)}</div>\n</BaseLayout>``` \n\nIn your browser preview, verify that you can see your tags listed. If any blog posts are missing tags, or they are improperly formatted, Astro‚Äôs built-in TypeScript support will show you errors so you can check and correct your code.\n\n2. To make each tag link to its own page, add the following `<a>` link to each tag name:\n\n```<BaseLayout pageTitle={pageTitle}>\n     <div>\n       {tags.map((tag) => (\n         <p><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n</BaseLayout>```\n\n## Add styles to your tag list\n\n1. Add the following CSS classes to style both your `<div>` and each `<p>` that will be generated. Note: Astro uses HTML syntax for adding class names!\n\n```<BaseLayout pageTitle={pageTitle}>\n     <div class=\"tags\">\n       {tags.map((tag) => (\n         <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n</BaseLayout>``` \n\n2. Define these new CSS classes by adding the following `<style>` tag to this page:\n\n```<style>\n     a {\n       color: #00539F;\n     }\n     .tags {\n       display: flex;\n       flex-wrap: wrap;\n     }\n     .tag {\n       margin: 0.25em;\n       border: dotted 1px #a1a1a1;\n       border-radius: .5em;\n       padding: .5em 1em;\n       font-size: 1.15em;\n       background-color: #F8FCFD;\n     }\n</style>``` \n\n3. Check your browser preview at `http://localhost:4321/tags` to verify that you have some new styles and that each of the tags on the page has a working link to its own individual tag page.\n\n## Code Check-In\n\nHere is what your new page should look like:\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <div class=\"tags\">\n    {tags.map((tag) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>```\n\n## Add this page to your navigation\n\nRight now, you can navigate to `http://localhost:4321/tags` and see this page. From this page, you can click on links to your individual tag pages.\n\nBut, you still need to make these pages discoverable from other pages on your website.\n\n1. In your `Navigation.astro` component, include a link to this new tag index page. Show me the code\n\n```<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<a href=\"/tags/\">Tags</a>```\n\n## Challenge: Include tags in your blog post layout\n\nYou have now written all the code you need to also display a list of tags on each blog post, and link them to their tag pages. You have existing work that you can reuse!\n\nFollow the steps below, then check your work by comparing it to the final code sample.\n\n1. Copy the `<div class=\"tags\">...</div>` and `<style>...</style>` from `src/pages/tags/index.astro` and reuse it inside `MarkdownPostLayout.astro`:\n\n```---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n     <p><em>{frontmatter.description}</em></p>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <div class=\"tags\">\n       {tags.map((tag: string) => (\n         <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n     <slot />\n</BaseLayout>\n<style>\n     a {\n       color: #00539F;\n     }\n     .tags {\n       display: flex;\n       flex-wrap: wrap;\n     }\n     .tag {\n       margin: 0.25em;\n       border: dotted 1px #a1a1a1;\n       border-radius: .5em;\n       padding: .5em 1em;\n       font-size: 1.15em;\n       background-color: #F8FCFD;\n     }\n</style>``` \n\nBefore this code will work, you need to make one small edit to the code you pasted into `MarkdownPostLayout.astro`. Can you figure out what it is?\n\n## Code Check-in: MarkdownPostLayout\n\nTo check your work, or if you just want complete, correct code to copy into `MarkdownPostLayout.astro`, here is what your Astro component should look like:\n\n```---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n  <p><em>{frontmatter.description}</em></p>\n  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n  <p>Written by: {frontmatter.author}</p>\n  <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n  <div class=\"tags\">\n    {frontmatter.tags.map((tag: string) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n  <slot />\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>```\n\n## Test your knowledge\n\nMatch each file path with a second file path that will create a page at the same route.\n\n1. `src/pages/categories.astro`\n\n1. `src/pages/posts/post.astro`\n2. `src/pages/posts/index.astro`\n3. `src/components/shoes/Shoe.astro`\n4. `src/pages/categories/index.astro`\n\n2. `src/pages/posts.astro`\n\n1. `src/pages/products/shoes.astro`\n2. `src/pages/posts/post.astro`\n3. `src/pages/posts/index.astro`\n4. `src/pages/categories/index.astro`\n\n3. `src/pages/products/shoes/index.astro`\n\n1. `src/pages/products/shoes.astro`\n2. `src/pages/posts/post.astro`\n3. `src/pages/posts/index.astro`\n4. `src/components/shoes/Shoe.astro`\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "overview", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I use the `/pages/folder/index.astro` routing pattern in astro?\n\nAssistant: To use the `/pages/folder/index.astro` routing pattern in astro, here's what you do:\nTo add a Tag Index page to your website, you could create a new file at `src/pages/tags.astro`. But, since you already have the directory `/tags/`, you can take advantage of another routing pattern in Astro, and keep all your files related to tags together..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - make a tag index page in astro?\n\nAssistant: To try it yourself - make a tag index page in astro, here's what you do:\n1. Create a new file `index.astro` in the directory `src/pages/tags/`.\n\n2. Navigate to `http://localhost:4321/tags` and verify that your site now contains a page at this URL. It will be empty, but it will exist.\n\n3. Create a minimal page at `src/pages/tags/index.astro` that uses your layout. You have done this before!\n\nExpand to see the steps\n\n1. Create a new page component in `src/pages/tags/`. Show the filename\n\n```index.astro``` \n\n2. Import and use your `<BaseLayout>`. Show the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\n---\n<BaseLayout></BaseLayout>```\n\n3. Define a page title, and pass it to your layout as a component attribute. Show the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}></BaseLayout>```\n\n4. Check your browser preview again and you should have a formatted page, ready to add content to!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create an array of tags in astro?\n\nAssistant: To create an array of tags in astro, here's what you do:\nYou have previously displayed items in a list from an array using `map()`. What would it look like to define an array of all your tags, then display them in a list on this page?\n\nSee the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst tags = ['astro', 'blogging', 'learning in public', 'successes', 'setbacks', 'community']\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <ul>\n    {tags.map((tag) => <li>{tag}</li>)}\n  </ul>\n</BaseLayout>```\n\nYou could do this, but then you would need to come back to this file and update your array every time you use a new tag in a future blog post.\n\nFortunately, you already know a way to grab the data from all your Markdown files in one line of code, then return a list of all your tags.\n\n1. In `src/pages/tags/index.astro`, add the line of code to the frontmatter script that will give your page access to the data from every `.md` blog post file. See the code\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst pageTitle = \"Tag Index\";\n---``` \n\n2. Next, add the following line of JavaScript to your page component. This is the same code relying on Astro‚Äôs built-in TypeScript support you used in `src/pages/tags/[tag].astro` to return a list of unique tags.\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create your list of tags in astro?\n\nAssistant: To create your list of tags in astro, here's what you do:\nInstead of creating items in an unordered list this time, create one `<p>` for each item, inside a `<div>`. The pattern should look familiar!\n\n1. Add the following code to your component template:\n\n```<BaseLayout pageTitle={pageTitle}>\n     <div>{tags.map((tag) => <p>{tag}</p>)}</div>\n</BaseLayout>``` \n\nIn your browser preview, verify that you can see your tags listed. If any blog posts are missing tags, or they are improperly formatted, Astro‚Äôs built-in TypeScript support will show you errors so you can check and correct your code.\n\n2. To make each tag link to its own page, add the following `<a>` link to each tag name:\n\n```<BaseLayout pageTitle={pageTitle}>\n     <div>\n       {tags.map((tag) => (\n         <p><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n</BaseLayout>```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add styles to your tag list in astro?\n\nAssistant: To add styles to your tag list in astro, here's what you do:\n1. Add the following CSS classes to style both your `<div>` and each `<p>` that will be generated. Note: Astro uses HTML syntax for adding class names!\n\n```<BaseLayout pageTitle={pageTitle}>\n     <div class=\"tags\">\n       {tags.map((tag) => (\n         <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n</BaseLayout>``` \n\n2. Define these new CSS classes by adding the following `<style>` tag to this page:\n\n```<style>\n     a {\n       color: #00539F;\n     }\n     .tags {\n       display: flex;\n       flex-wrap: wrap;\n     }\n     .tag {\n       margin: 0.25em;\n       border: dotted 1px #a1a1a1;\n       border-radius: .5em;\n       padding: .5em 1em;\n       font-size: 1.15em;\n       background-color: #F8FCFD;\n     }\n</style>``` \n\n3. Check your browser preview at `http://localhost:4321/tags` to verify that you have some new styles and that each of the tags on the page has a working link to its own individual tag page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I code check-in in astro?\n\nAssistant: To code check-in in astro, here's what you do:\nHere is what your new page should look like:\n\n```---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <div class=\"tags\">\n    {tags.map((tag) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I add this page to your navigation in astro?\n\nAssistant: To add this page to your navigation in astro, here's what you do:\nRight now, you can navigate to `http://localhost:4321/tags` and see this page. From this page, you can click on links to your individual tag pages.\n\nBut, you still need to make these pages discoverable from other pages on your website.\n\n1. In your `Navigation.astro` component, include a link to this new tag index page. Show me the code\n\n```<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<a href=\"/tags/\">Tags</a>```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I challenge: include tags in your blog post layout in astro?\n\nAssistant: To challenge: include tags in your blog post layout in astro, here's what you do:\nYou have now written all the code you need to also display a list of tags on each blog post, and link them to their tag pages. You have existing work that you can reuse!\n\nFollow the steps below, then check your work by comparing it to the final code sample.\n\n1. Copy the `<div class=\"tags\">...</div>` and `<style>...</style>` from `src/pages/tags/index.astro` and reuse it inside `MarkdownPostLayout.astro`:\n\n```---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n     <p><em>{frontmatter.description}</em></p>\n     <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n     <p>Written by: {frontmatter.author}</p>\n     <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n     <div class=\"tags\">\n       {tags.map((tag: string) => (\n         <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n     <slot />\n</BaseLayout>\n<style>\n     a {\n       color: #00539F;\n     }\n     .tags {\n       display: flex;\n       flex-wrap: wrap;\n     }\n     .tag {\n       margin: 0.25em;\n       border: dotted 1px #a1a1a1;\n       border-radius: .5em;\n       padding: .5em 1em;\n       font-size: 1.15em;\n       background-color: #F8FCFD;\n     }\n</style>``` \n\nBefore this code will work, you need to make one small edit to the code you pasted into `MarkdownPostLayout.astro`. Can you figure out what it is?.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I code check-in: markdownpostlayout in astro?\n\nAssistant: To code check-in: markdownpostlayout in astro, here's what you do:\nTo check your work, or if you just want complete, correct code to copy into `MarkdownPostLayout.astro`, here is what your Astro component should look like:\n\n```---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n  <p><em>{frontmatter.description}</em></p>\n  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n  <p>Written by: {frontmatter.author}</p>\n  <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n  <div class=\"tags\">\n    {frontmatter.tags.map((tag: string) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n  <slot />\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\nMatch each file path with a second file path that will create a page at the same route.\n\n1. `src/pages/categories.astro`\n\n1. `src/pages/posts/post.astro`\n2. `src/pages/posts/index.astro`\n3. `src/components/shoes/Shoe.astro`\n4. `src/pages/categories/index.astro`\n\n2. `src/pages/posts.astro`\n\n1. `src/pages/products/shoes.astro`\n2. `src/pages/posts/post.astro`\n3. `src/pages/posts/index.astro`\n4. `src/pages/categories/index.astro`\n\n3. `src/pages/products/shoes/index.astro`\n\n1. `src/pages/products/shoes.astro`\n2. `src/pages/posts/post.astro`\n3. `src/pages/posts/index.astro`\n4. `src/components/shoes/Shoe.astro`.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Build a tag index page in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a new page component**:\n\n```yaml\nindex.astro\n```\n\nThis snippet shows you how to create a new page component, which is an important aspect of build a tag index page.\n\n**Import and use your `<BaseLayout>`**:\n\n```yaml\n---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\n---\n<BaseLayout></BaseLayout>\n```\n\nThis snippet shows you how to import and use your `<baselayout>`, which is an important aspect of build a tag index page.\n\n**Define a page title**:\n\n```yaml\n---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}></BaseLayout>\n```\n\nThis snippet shows you how to define a page title, which is an important aspect of build a tag index page.\n\n**Create an array of tags**:\n\n```yaml\n---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst tags = ['astro', 'blogging', 'learning in public', 'successes', 'setbacks', 'community']\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <ul>\n    {tags.map((tag) => <li>{tag}</li>)}\n  </ul>\n</BaseLayout>\n```\n\nThis snippet shows you how to create an array of tags, which is an important aspect of build a tag index page.\n\n**Access data from Markdown files**:\n\n```yaml\n---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst pageTitle = \"Tag Index\";\n---\n```\n\nThis snippet shows you how to access data from markdown files, which is an important aspect of build a tag index page.\n\n**Get unique tags from posts**:\n\n```yaml\n---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n```\n\nThis snippet shows you how to get unique tags from posts, which is an important aspect of build a tag index page.\n\n**Create a list of tags**:\n\n```yaml\n<BaseLayout pageTitle={pageTitle}>\n     <div>{tags.map((tag) => <p>{tag}</p>)}</div>\n</BaseLayout>\n```\n\nThis snippet shows you how to create a list of tags, which is an important aspect of build a tag index page.\n\n**Link each tag to its own page**:\n\n```yaml\n<BaseLayout pageTitle={pageTitle}>\n     <div>\n       {tags.map((tag) => (\n         <p><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n</BaseLayout>\n```\n\nThis snippet shows you how to link each tag to its own page, which is an important aspect of build a tag index page.\n\n**Add styles to your tag list**:\n\n```yaml\n<BaseLayout pageTitle={pageTitle}>\n     <div class=\"tags\">\n       {tags.map((tag) => (\n         <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n       ))}\n     </div>\n</BaseLayout>\n```\n\nThis snippet shows you how to add styles to your tag list, which is an important aspect of build a tag index page.\n\n**Define CSS classes for styling**:\n\n```yaml\n<style>\n     a {\n       color: #00539F;\n     }\n     .tags {\n       display: flex;\n       flex-wrap: wrap;\n     }\n     .tag {\n       margin: 0.25em;\n       border: dotted 1px #a1a1a1;\n       border-radius: .5em;\n       padding: .5em 1em;\n       font-size: 1.15em;\n       background-color: #F8FCFD;\n     }\n</style>\n```\n\nThis snippet shows you how to define css classes for styling, which is an important aspect of build a tag index page.\n\n**Final code for Tag Index page**:\n\n```yaml\n---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <div class=\"tags\">\n    {tags.map((tag) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>\n```\n\nThis snippet shows you how to final code for tag index page, which is an important aspect of build a tag index page.\n\n**Add link to navigation**:\n\n```yaml\n<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<a href=\"/tags/\">Tags</a>\n```\n\nThis snippet shows you how to add link to navigation, which is an important aspect of build a tag index page.\n\n**Final code for MarkdownPostLayout**:\n\n```yaml\n---\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout pageTitle={frontmatter.title}>\n  <p><em>{frontmatter.description}</em></p>\n  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n  <p>Written by: {frontmatter.author}</p>\n  <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n  <div class=\"tags\">\n    {frontmatter.tags.map((tag: string) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n  <slot />\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>\n```\n\nThis snippet shows you how to final code for markdownpostlayout, which is an important aspect of build a tag index page.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "code_examples", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build a tag index page in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Astro‚Äôs `/pages/folder/index.astro` routing feature to keep related files together.\n\nAlways verify your page exists after creating it by navigating to the URL.\n\nUtilize Astro‚Äôs built-in TypeScript support to manage tags dynamically from Markdown files.\n\nStyle your tags for better visual presentation and usability.\n\nEnsure that each tag links to its respective page for easy navigation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/5-astro-api/3", "title": "Build a tag index page", "description": "This page covers how to create a tag index page in Astro, including routing patterns, creating a list of tags, and adding styles.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:21:02", "type": "best_practices", "page_metadata": {"ogSiteName": "Docs", "og:url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "description": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "og:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nUse everything you've learned so far to build a Tag Index page", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "language": "en", "favicon": "https://docs.astro.build/favicon.ico", "og:site_name": "Docs", "docsearch:language": "en", "twitter:site": "astrodotbuild", "og:title": "Build a tag index page", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Build a tag index page", "title": "Build a tag index page | Docs", "ogUrl": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/5-astro-api/3.webp", "ogLocale": "en", "og:locale": "en", "og:type": "article", "scrapeId": "16a22220-8f90-407f-b435-5b53452cbb25", "sourceURL": "https://docs.astro.build/en/tutorial/5-astro-api/3", "url": "https://docs.astro.build/en/tutorial/5-astro-api/3/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Using streaming to improve page performance is in astro?\n\nAssistant: Sure, I'd be happy to explain Using streaming to improve page performance in astro.\n\n# Using streaming to improve page performance\n\nAstro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.Here's a quick rundown of what this is about:\n\n## Introduction\n\nAstro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.\n\n## Refactoring Example\n\nThe following refactoring example demonstrates how to improve page performance by moving fetch calls to other components, moving them out of a component where they block page rendering.\n\n## Initial Page Example\n\nThe following page `await` s some data in its frontmatter. Astro will wait for all of the `fetch` calls to resolve before sending any HTML to the browser.\n\n## Optimized Page Example\n\nMoving the `await` calls into smaller components allows you to take advantage of Astro‚Äôs streaming. Using the following components to perform the data fetches, Astro can render some HTML first, such as the title, and then the paragraphs when the data is ready.\n\n## Including Promises directly\n\nYou can also include promises directly in the template. Instead of blocking the entire component, it will resolve the promise in parallel and only block the markup that comes after it.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "overview", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I introduction in astro?\n\nAssistant: To introduction in astro, here's what you do:\nAstro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "section_detail", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I refactoring example in astro?\n\nAssistant: To refactoring example in astro, here's what you do:\nThe following refactoring example demonstrates how to improve page performance by moving fetch calls to other components, moving them out of a component where they block page rendering..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "section_detail", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I initial page example in astro?\n\nAssistant: To initial page example in astro, here's what you do:\nThe following page `await` s some data in its frontmatter. Astro will wait for all of the `fetch` calls to resolve before sending any HTML to the browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "section_detail", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I optimized page example in astro?\n\nAssistant: To optimized page example in astro, here's what you do:\nMoving the `await` calls into smaller components allows you to take advantage of Astro‚Äôs streaming. Using the following components to perform the data fetches, Astro can render some HTML first, such as the title, and then the paragraphs when the data is ready..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "section_detail", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I including promises directly in astro?\n\nAssistant: To including promises directly in astro, here's what you do:\nYou can also include promises directly in the template. Instead of blocking the entire component, it will resolve the promise in parallel and only block the markup that comes after it..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "section_detail", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Using streaming to improve page performance in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initial Page Example**:\n\n```yaml\nconst personResponse = await fetch('https://randomuser.me/api/');\n\nconst personData = await personResponse.json();\n\nconst randomPerson = personData.results[0];\n\nconst factResponse = await fetch('https://catfact.ninja/fact');\n\nconst factData = await factResponse.json();\n\n<html>\n\n  <head>\n\n    <title>A name and a fact</title>\n\n  </head>\n\n  <body>\n\n    <h2>A name</h2>\n\n    <p>{randomPerson.name.first}</p>\n\n    <h2>A fact</h2>\n\n    <p>{factData.fact}</p>\n\n  </body>\n\n</html>\n```\n\nThis snippet shows you how to initial page example, which is an important aspect of using streaming to improve page performance.\n\n**Optimized Component for Name**:\n\n```yaml\nconst personResponse = await fetch('https://randomuser.me/api/');\n\nconst personData = await personResponse.json();\n\nconst randomPerson = personData.results[0];\n\n<p>{randomPerson.name.first}</p>\n```\n\nThis snippet shows you how to optimized component for name, which is an important aspect of using streaming to improve page performance.\n\n**Optimized Component for Fact**:\n\n```yaml\nconst factResponse = await fetch('https://catfact.ninja/fact');\n\nconst factData = await factResponse.json();\n\n<p>{factData.fact}</p>\n```\n\nThis snippet shows you how to optimized component for fact, which is an important aspect of using streaming to improve page performance.\n\n**Final Page Example**:\n\n```yaml\nimport RandomName from '../components/RandomName.astro';\n\nimport RandomFact from '../components/RandomFact.astro';\n\n<html>\n\n  <head>\n\n    <title>A name and a fact</title>\n\n  </head>\n\n  <body>\n\n    <h2>A name</h2>\n\n    <RandomName />\n\n    <h2>A fact</h2>\n\n    <RandomFact />\n\n  </body>\n\n</html>\n```\n\nThis snippet shows you how to final page example, which is an important aspect of using streaming to improve page performance.\n\n**Including Promises directly Example**:\n\n```yaml\nconst personPromise = fetch('https://randomuser.me/api/')\n\n  .then(response => response.json())\n\n  .then(personData => personData.results[0].name.first);\n\nconst factPromise = fetch('https://catfact.ninja/fact')\n\n  .then(response => response.json())\n\n  .then(factData => factData.fact);\n\n<html>\n\n  <head>\n\n    <title>A name and a fact</title>\n\n  </head>\n\n  <body>\n\n    <h2>A name</h2>\n\n    <p>{personPromise}</p>\n\n    <h2>A fact</h2>\n\n    <p>{factPromise}</p>\n\n  </body>\n\n</html>\n```\n\nThis snippet shows you how to including promises directly example, which is an important aspect of using streaming to improve page performance.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "code_examples", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Using streaming to improve page performance in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBuild components strategically to optimize loading by avoiding blocking data fetches.\n\nMove fetch calls to smaller components to take advantage of HTML streaming.\n\nInclude promises directly in the template to resolve them in parallel.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "title": "Using streaming to improve page performance", "description": "Astro‚Äôs SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page‚Äôs performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:25", "type": "best_practices", "page_metadata": {"og:locale": "en", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Using streaming to improve page performance", "ogUrl": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "og:description": "Learn how to use streaming to improve page performance.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Docs", "og:type": "article", "ogTitle": "Using streaming to improve page performance", "og:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "title": "Using streaming to improve page performance | Docs", "og:url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "ogSiteName": "Docs", "twitter:site": "astrodotbuild", "language": "en", "ogDescription": "Learn how to use streaming to improve page performance.", "ogImage": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "ogLocale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/streaming-improve-page-performance.webp", "description": "Learn how to use streaming to improve page performance.", "twitter:card": "summary_large_image", "favicon": "https://docs.astro.build/favicon.ico", "scrapeId": "112855bc-73f1-4bd6-8c73-897e5139bb9d", "sourceURL": "https://docs.astro.build/en/recipes/streaming-improve-page-performance", "url": "https://docs.astro.build/en/recipes/streaming-improve-page-performance/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Project structure is in astro?\n\nAssistant: Sure, I'd be happy to explain Project structure in astro.\n\n# Project structure\n\nYour new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro‚Äôs existing file structure.Here's a quick rundown of what this is about:\n\n## Directories and Files\n\nAstro leverages an opinionated folder layout for your project. Every Astro project root should include the following directories and files:\n\n- `src/*` \\- Your project source code (components, pages, styles, images, etc.)\n- `public/*` \\- Your non-code, unprocessed assets (fonts, icons, etc.)\n- `package.json` \\- A project manifest.\n- `astro.config.mjs` \\- An Astro configuration file. (recommended)\n- `tsconfig.json` \\- A TypeScript configuration file. (recommended)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/basics/project-structure", "title": "Project structure", "description": "Your new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro‚Äôs existing file structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:24:45", "type": "overview", "page_metadata": {"og:site_name": "Docs", "og:description": "An introduction to the basic file structure of an Astro project.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogTitle": "Project structure", "title": "Project structure | Docs", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "An introduction to the basic file structure of an Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "og:url": "https://docs.astro.build/en/basics/project-structure/", "ogSiteName": "Docs", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "An introduction to the basic file structure of an Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogUrl": "https://docs.astro.build/en/basics/project-structure/", "language": "en", "og:title": "Project structure", "scrapeId": "51ad5e1a-255f-42f4-a05e-e320aaf9a1eb", "sourceURL": "https://docs.astro.build/en/basics/project-structure", "url": "https://docs.astro.build/en/basics/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I directories and files in astro?\n\nAssistant: To directories and files in astro, here's what you do:\nAstro leverages an opinionated folder layout for your project. Every Astro project root should include the following directories and files:\n\n- `src/*` \\- Your project source code (components, pages, styles, images, etc.)\n- `public/*` \\- Your non-code, unprocessed assets (fonts, icons, etc.)\n- `package.json` \\- A project manifest.\n- `astro.config.mjs` \\- An Astro configuration file. (recommended)\n- `tsconfig.json` \\- A TypeScript configuration file. (recommended).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/project-structure", "title": "Project structure", "description": "Your new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro‚Äôs existing file structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:24:45", "type": "section_detail", "page_metadata": {"og:site_name": "Docs", "og:description": "An introduction to the basic file structure of an Astro project.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogTitle": "Project structure", "title": "Project structure | Docs", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "An introduction to the basic file structure of an Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "og:url": "https://docs.astro.build/en/basics/project-structure/", "ogSiteName": "Docs", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "An introduction to the basic file structure of an Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogUrl": "https://docs.astro.build/en/basics/project-structure/", "language": "en", "og:title": "Project structure", "scrapeId": "51ad5e1a-255f-42f4-a05e-e320aaf9a1eb", "sourceURL": "https://docs.astro.build/en/basics/project-structure", "url": "https://docs.astro.build/en/basics/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Project structure in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example Project Tree**:\n\n```yaml\nA common Astro project directory might look like this:\n\n- Directory public/\n  - robots.txt\n  - favicon.svg\n  - my-cv.pdf\n\n- Directory src/\n  - Directory blog/\n    - post1.md\n    - post2.md\n    - post3.md\n  - Directory components/\n    - Header.astro\n    - Button.jsx\n  - Directory images/\n    - image1.jpg\n    - image2.jpg\n    - image3.jpg\n  - Directory layouts/\n    - PostLayout.astro\n  - Directory pages/\n    - Directory posts/\n      - [post].astro\n    - about.astro\n    - index.astro\n    - rss.xml.js\n  - Directory styles/\n    - global.css\n\n- content.config.ts\n- astro.config.mjs\n- package.json\n- tsconfig.json\n```\n\nThis snippet shows you how to example project tree, which is an important aspect of project structure.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/basics/project-structure", "title": "Project structure", "description": "Your new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro‚Äôs existing file structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:24:45", "type": "code_examples", "page_metadata": {"og:site_name": "Docs", "og:description": "An introduction to the basic file structure of an Astro project.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogTitle": "Project structure", "title": "Project structure | Docs", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "An introduction to the basic file structure of an Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "og:url": "https://docs.astro.build/en/basics/project-structure/", "ogSiteName": "Docs", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "An introduction to the basic file structure of an Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogUrl": "https://docs.astro.build/en/basics/project-structure/", "language": "en", "og:title": "Project structure", "scrapeId": "51ad5e1a-255f-42f4-a05e-e320aaf9a1eb", "sourceURL": "https://docs.astro.build/en/basics/project-structure", "url": "https://docs.astro.build/en/basics/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Project structure in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAstro processes, optimizes, and bundles your `src/` files to create the final website that is shipped to the browser.\n\nIt is a common convention to store your CSS or Sass files in a `src/styles` directory, but this is not required.\n\nYou can place CSS and JavaScript in your `public/` directory, but be aware that those files will not be bundled or optimized in your final build.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/basics/project-structure", "title": "Project structure", "description": "Your new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro‚Äôs existing file structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:24:45", "type": "best_practices", "page_metadata": {"og:site_name": "Docs", "og:description": "An introduction to the basic file structure of an Astro project.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogTitle": "Project structure", "title": "Project structure | Docs", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "An introduction to the basic file structure of an Astro project.", "ogLocale": "en", "og:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "og:url": "https://docs.astro.build/en/basics/project-structure/", "ogSiteName": "Docs", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "twitter:site": "astrodotbuild", "description": "An introduction to the basic file structure of an Astro project.", "twitter:image": "https://docs.astro.build/open-graph/en/basics/project-structure.webp", "ogUrl": "https://docs.astro.build/en/basics/project-structure/", "language": "en", "og:title": "Project structure", "scrapeId": "51ad5e1a-255f-42f4-a05e-e320aaf9a1eb", "sourceURL": "https://docs.astro.build/en/basics/project-structure", "url": "https://docs.astro.build/en/basics/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Editor setup is in astro?\n\nAssistant: Sure, I'd be happy to explain Editor setup in astro.\n\n# Editor setup\n\nCustomize your code editor to improve the Astro developer experience and unlock new features.Here's a quick rundown of what this is about:\n\n## VS Code\n\n[VS Code](https://code.visualstudio.com/) is a popular code editor for web developers, built by Microsoft. The VS Code engine also powers popular in-browser code editors like [GitHub Codespaces](https://github.com/features/codespaces) and [Gitpod](https://gitpod.io/).\n\nAstro works with any code editor. However, VS Code is our recommended editor for Astro projects. We maintain an official [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) that unlocks several key features and developer experience improvements for Astro projects.\n\n- Syntax highlighting for `.astro` files.\n- TypeScript type information for `.astro` files.\n- [VS Code Intellisense](https://code.visualstudio.com/docs/editor/intellisense) for code completion, hints and more.\n\nTo get started, install the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) today.\n\nSee how to [set up TypeScript](https://docs.astro.build/en/guides/typescript/) in your Astro project.\n\n## Zed\n\n[Zed](https://zed.dev/) is an open-source code editor that added support for Astro in version 0.123.2. You can install the [Astro extension](https://github.com/zed-extensions/astro) in the IDE‚Äôs Extensions tab. This extension includes features like syntax highlighting, code completion, and formatting.\n\n## JetBrains IDEs\n\n[Webstorm](https://www.jetbrains.com/webstorm/) is a JavaScript and TypeScript IDE that added support for the Astro Language Server in version 2024.2. This update brings features like syntax highlighting, code completion, and formatting.\n\nInstall the official plugin through [JetBrains Marketplace](https://plugins.jetbrains.com/plugin/20959-astro) or by searching for ‚ÄúAstro‚Äù in the IDE‚Äôs Plugins tab. You can toggle the language server in `Settings | Languages & Frameworks | TypeScript | Astro`.\n\nFor more information on Astro support in Webstorm, check out [the official Webstorm Astro Documentation](https://www.jetbrains.com/help/webstorm/astro.html).\n\n## Other Code Editors\n\nOur amazing community maintains several extensions for other popular editors, including:\n\n- [VS Code Extension on Open VSX](https://open-vsx.org/extension/astro-build/astro-vscode) Official \\- The official Astro VS Code Extension, available on the Open VSX registry for open platforms like [VSCodium](https://vscodium.com/)\n- [Nova Extension](https://extensions.panic.com/extensions/sciencefidelity/sciencefidelity.astro/) Community \\- Provides syntax highlighting and code completion for Astro inside of Nova\n- [Vim Plugin](https://github.com/wuelnerdotexe/vim-astro) Community \\- Provides syntax highlighting, indentation, and code folding support for Astro inside of Vim or Neovim\n- Neovim [LSP](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#astro) and [TreeSitter](https://github.com/virchau13/tree-sitter-astro) Plugins Community \\- Provides syntax highlighting, treesitter parsing, and code completion for Astro inside of Neovim\n- Emacs - See instructions for [Configuring Emacs and Eglot](https://medium.com/@jrmjrm/configuring-emacs-and-eglot-to-work-with-astro-language-server-9408eb709ab0) Community to work with Astro\n- [Astro syntax highlighting for Sublime Text](https://packagecontrol.io/packages/Astro) Community \\- The Astro package for Sublime Text, available on the Sublime Text package manager.\n\n## In-Browser Editors\n\nIn addition to local editors, Astro also runs well on in-browser hosted editors, including:\n\n- [StackBlitz](https://stackblitz.com/) and [CodeSandbox](https://codesandbox.io/) \\- online editors that run in your browser, with built-in syntax highlighting support for `.astro` files. No installation or configuration required!\n- [GitHub.dev](https://github.dev/) \\- allows you to install the Astro VS Code extension as a [web extension](https://code.visualstudio.com/api/extension-guides/web-extensions), which gives you access to only some of the full extension features. Currently, only syntax highlighting is supported.\n- [IDX](https://idx.dev/) and [Gitpod](https://gitpod.io/) \\- a full dev environment in the cloud that can install the official Astro VS Code Extension from Open VSX.\n\n## Other tools\n\n### ESLint\n\n[ESLint](https://eslint.org/) is a popular linter for JavaScript and JSX. For Astro support, [a community maintained plugin](https://github.com/ota-meshi/eslint-plugin-astro) can be installed.\n\nSee [the project‚Äôs User Guide](https://ota-meshi.github.io/eslint-plugin-astro/user-guide/) for more information on how to install and set up ESLint for your project.\n\n### Stylelint\n\n[Stylelint](https://stylelint.io/) is a popular linter for CSS. [A community maintained Stylelint configuration](https://github.com/ota-meshi/stylelint-config-html) provides Astro support.\n\nInstallation instructions, editor integration, and additional information can be found in the project‚Äôs README.\n\n### Prettier\n\n[Prettier](https://prettier.io/) is a popular formatter for JavaScript, HTML, CSS, and more. If you‚Äôre using the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) or [the Astro language server within another editor](https://docs.astro.build/en/editor-setup/#other-code-editors), code formatting with Prettier is included.\n\nTo add support for formatting `.astro` files outside of the editor (e.g. CLI) or inside editors that don‚Äôt support our editor tooling, install [the official Astro Prettier plugin](https://github.com/withastro/prettier-plugin-astro).\n\n1. Install `prettier` and `prettier-plugin-astro`.\n\n\n- [npm](https://docs.astro.build/en/editor-setup/#tab-panel-24)\n- [pnpm](https://docs.astro.build/en/editor-setup/#tab-panel-25)\n- [Yarn](https://docs.astro.build/en/editor-setup/#tab-panel-26)\n\n```\nnpm install --save-dev --save-exact prettier prettier-plugin-astro\n```\n```\npnpm add --save-dev --save-exact prettier prettier-plugin-astro\n```\n```\nyarn add --dev --exact prettier prettier-plugin-astro\n```\n\n2. Create a `.prettierrc` configuration file (or `.prettierrc.json`, `.prettierrc.mjs`, or [other supported formats](https://prettier.io/docs/configuration)) in the root of your project and add `prettier-plugin-astro` to it.\n\nIn this file, also manually specify the parser for Astro files.\n\n```json\n{\n     \"plugins\": [\"prettier-plugin-astro\"],\n     \"overrides\": [\n       {\n         \"files\": \"*.astro\",\n         \"options\": {\n           \"parser\": \"astro\"\n         }\n       }\n     ]\n}\n```\n\n3. Run the following command in your terminal to format your files.\n\n\n- [npm](https://docs.astro.build/en/editor-setup/#tab-panel-27)\n- [pnpm](https://docs.astro.build/en/editor-setup/#tab-panel-28)\n- [Yarn](https://docs.astro.build/en/editor-setup/#tab-panel-29)\n\n```\nnpx prettier . --write\n```\n```\npnpm exec prettier . --write\n```\n```\nyarn exec prettier . --write\n```\n\nSee the [Prettier plugin‚Äôs README](https://github.com/withastro/prettier-plugin-astro/blob/main/README.md) for more information about its supported options, how to set up Prettier inside VS Code, and more.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "overview", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I vs code in astro?\n\nAssistant: To vs code in astro, here's what you do:\n[VS Code](https://code.visualstudio.com/) is a popular code editor for web developers, built by Microsoft. The VS Code engine also powers popular in-browser code editors like [GitHub Codespaces](https://github.com/features/codespaces) and [Gitpod](https://gitpod.io/).\n\nAstro works with any code editor. However, VS Code is our recommended editor for Astro projects. We maintain an official [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) that unlocks several key features and developer experience improvements for Astro projects.\n\n- Syntax highlighting for `.astro` files.\n- TypeScript type information for `.astro` files.\n- [VS Code Intellisense](https://code.visualstudio.com/docs/editor/intellisense) for code completion, hints and more.\n\nTo get started, install the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) today.\n\nSee how to [set up TypeScript](https://docs.astro.build/en/guides/typescript/) in your Astro project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I zed in astro?\n\nAssistant: To zed in astro, here's what you do:\n[Zed](https://zed.dev/) is an open-source code editor that added support for Astro in version 0.123.2. You can install the [Astro extension](https://github.com/zed-extensions/astro) in the IDE‚Äôs Extensions tab. This extension includes features like syntax highlighting, code completion, and formatting..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I jetbrains ides in astro?\n\nAssistant: To jetbrains ides in astro, here's what you do:\n[Webstorm](https://www.jetbrains.com/webstorm/) is a JavaScript and TypeScript IDE that added support for the Astro Language Server in version 2024.2. This update brings features like syntax highlighting, code completion, and formatting.\n\nInstall the official plugin through [JetBrains Marketplace](https://plugins.jetbrains.com/plugin/20959-astro) or by searching for ‚ÄúAstro‚Äù in the IDE‚Äôs Plugins tab. You can toggle the language server in `Settings | Languages & Frameworks | TypeScript | Astro`.\n\nFor more information on Astro support in Webstorm, check out [the official Webstorm Astro Documentation](https://www.jetbrains.com/help/webstorm/astro.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I other code editors in astro?\n\nAssistant: To other code editors in astro, here's what you do:\nOur amazing community maintains several extensions for other popular editors, including:\n\n- [VS Code Extension on Open VSX](https://open-vsx.org/extension/astro-build/astro-vscode) Official \\- The official Astro VS Code Extension, available on the Open VSX registry for open platforms like [VSCodium](https://vscodium.com/)\n- [Nova Extension](https://extensions.panic.com/extensions/sciencefidelity/sciencefidelity.astro/) Community \\- Provides syntax highlighting and code completion for Astro inside of Nova\n- [Vim Plugin](https://github.com/wuelnerdotexe/vim-astro) Community \\- Provides syntax highlighting, indentation, and code folding support for Astro inside of Vim or Neovim\n- Neovim [LSP](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#astro) and [TreeSitter](https://github.com/virchau13/tree-sitter-astro) Plugins Community \\- Provides syntax highlighting, treesitter parsing, and code completion for Astro inside of Neovim\n- Emacs - See instructions for [Configuring Emacs and Eglot](https://medium.com/@jrmjrm/configuring-emacs-and-eglot-to-work-with-astro-language-server-9408eb709ab0) Community to work with Astro\n- [Astro syntax highlighting for Sublime Text](https://packagecontrol.io/packages/Astro) Community \\- The Astro package for Sublime Text, available on the Sublime Text package manager..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I in-browser editors in astro?\n\nAssistant: To in-browser editors in astro, here's what you do:\nIn addition to local editors, Astro also runs well on in-browser hosted editors, including:\n\n- [StackBlitz](https://stackblitz.com/) and [CodeSandbox](https://codesandbox.io/) \\- online editors that run in your browser, with built-in syntax highlighting support for `.astro` files. No installation or configuration required!\n- [GitHub.dev](https://github.dev/) \\- allows you to install the Astro VS Code extension as a [web extension](https://code.visualstudio.com/api/extension-guides/web-extensions), which gives you access to only some of the full extension features. Currently, only syntax highlighting is supported.\n- [IDX](https://idx.dev/) and [Gitpod](https://gitpod.io/) \\- a full dev environment in the cloud that can install the official Astro VS Code Extension from Open VSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I other tools in astro?\n\nAssistant: To other tools in astro, here's what you do:\n### ESLint\n\n[ESLint](https://eslint.org/) is a popular linter for JavaScript and JSX. For Astro support, [a community maintained plugin](https://github.com/ota-meshi/eslint-plugin-astro) can be installed.\n\nSee [the project‚Äôs User Guide](https://ota-meshi.github.io/eslint-plugin-astro/user-guide/) for more information on how to install and set up ESLint for your project.\n\n### Stylelint\n\n[Stylelint](https://stylelint.io/) is a popular linter for CSS. [A community maintained Stylelint configuration](https://github.com/ota-meshi/stylelint-config-html) provides Astro support.\n\nInstallation instructions, editor integration, and additional information can be found in the project‚Äôs README.\n\n### Prettier\n\n[Prettier](https://prettier.io/) is a popular formatter for JavaScript, HTML, CSS, and more. If you‚Äôre using the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) or [the Astro language server within another editor](https://docs.astro.build/en/editor-setup/#other-code-editors), code formatting with Prettier is included.\n\nTo add support for formatting `.astro` files outside of the editor (e.g. CLI) or inside editors that don‚Äôt support our editor tooling, install [the official Astro Prettier plugin](https://github.com/withastro/prettier-plugin-astro).\n\n1. Install `prettier` and `prettier-plugin-astro`.\n\n\n- [npm](https://docs.astro.build/en/editor-setup/#tab-panel-24)\n- [pnpm](https://docs.astro.build/en/editor-setup/#tab-panel-25)\n- [Yarn](https://docs.astro.build/en/editor-setup/#tab-panel-26)\n\n```\nnpm install --save-dev --save-exact prettier prettier-plugin-astro\n```\n```\npnpm add --save-dev --save-exact prettier prettier-plugin-astro\n```\n```\nyarn add --dev --exact prettier prettier-plugin-astro\n```\n\n2. Create a `.prettierrc` configuration file (or `.prettierrc.json`, `.prettierrc.mjs`, or [other supported formats](https://prettier.io/docs/configuration)) in the root of your project and add `prettier-plugin-astro` to it.\n\nIn this file, also manually specify the parser for Astro files.\n\n```json\n{\n     \"plugins\": [\"prettier-plugin-astro\"],\n     \"overrides\": [\n       {\n         \"files\": \"*.astro\",\n         \"options\": {\n           \"parser\": \"astro\"\n         }\n       }\n     ]\n}\n```\n\n3. Run the following command in your terminal to format your files.\n\n\n- [npm](https://docs.astro.build/en/editor-setup/#tab-panel-27)\n- [pnpm](https://docs.astro.build/en/editor-setup/#tab-panel-28)\n- [Yarn](https://docs.astro.build/en/editor-setup/#tab-panel-29)\n\n```\nnpx prettier . --write\n```\n```\npnpm exec prettier . --write\n```\n```\nyarn exec prettier . --write\n```\n\nSee the [Prettier plugin‚Äôs README](https://github.com/withastro/prettier-plugin-astro/blob/main/README.md) for more information about its supported options, how to set up Prettier inside VS Code, and more..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Editor setup in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Prettier with npm**:\n\n```yaml\nnpm install --save-dev --save-exact prettier prettier-plugin-astro\n```\n\nThis snippet shows you how to install prettier with npm, which is an important aspect of editor setup.\n\n**Install Prettier with pnpm**:\n\n```yaml\npnpm add --save-dev --save-exact prettier prettier-plugin-astro\n```\n\nThis snippet shows you how to install prettier with pnpm, which is an important aspect of editor setup.\n\n**Install Prettier with Yarn**:\n\n```yaml\nyarn add --dev --exact prettier prettier-plugin-astro\n```\n\nThis snippet shows you how to install prettier with yarn, which is an important aspect of editor setup.\n\n**Prettier Configuration**:\n\n```yaml\n{\n     \"plugins\": [\"prettier-plugin-astro\"],\n     \"overrides\": [\n       {\n         \"files\": \"*.astro\",\n         \"options\": {\n           \"parser\": \"astro\"\n         }\n       }\n     ]\n}\n```\n\nThis snippet shows you how to prettier configuration, which is an important aspect of editor setup.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "code_examples", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Editor setup in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nInstall the Astro VS Code Extension for improved developer experience.\n\nUse the community maintained ESLint and Stylelint plugins for better code quality.\n\nFor formatting, use Prettier with the Astro plugin to ensure consistent code style.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/editor-setup", "title": "Editor setup", "description": "Customize your code editor to improve the Astro developer experience and unlock new features.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:25:39", "type": "best_practices", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:url": "https://docs.astro.build/en/editor-setup/", "ogSiteName": "Docs", "ogTitle": "Editor setup", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/editor-setup.webp", "ogUrl": "https://docs.astro.build/en/editor-setup/", "language": "en", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "title": "Editor setup | Docs", "ogImage": "https://docs.astro.build/open-graph/en/editor-setup.webp", "og:title": "Editor setup", "og:type": "article", "og:description": "Set up your code editor to build with Astro.", "ogDescription": "Set up your code editor to build with Astro.", "description": "Set up your code editor to build with Astro.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "scrapeId": "2e757676-f210-4f60-a9e6-ec94229e3649", "sourceURL": "https://docs.astro.build/en/editor-setup", "url": "https://docs.astro.build/en/editor-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Pages is in astro?\n\nAssistant: Sure, I'd be happy to explain Pages in astro.\n\n# Pages\n\nPages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.Here's a quick rundown of what this is about:\n\n## Supported page files\n\nAstro supports the following file types in the `src/pages/` directory:\n\n- [`.astro`](https://docs.astro.build/en/basics/astro-pages/#astro-pages)\n- [`.md`](https://docs.astro.build/en/basics/astro-pages/#markdownmdx-pages)\n- `.mdx` (with the [MDX Integration installed](https://docs.astro.build/en/guides/integrations-guide/mdx/#installation))\n- [`.html`](https://docs.astro.build/en/basics/astro-pages/#html-pages)\n- `.js`/ `.ts` (as [endpoints](https://docs.astro.build/en/guides/endpoints/))\n\n## File-based routing\n\nAstro leverages a routing strategy called **file-based routing**. Each file in your `src/pages/` directory becomes an endpoint on your site based on its file path.\n\nA single file can also generate multiple pages using [dynamic routing](https://docs.astro.build/en/guides/routing/#dynamic-routes). This allows you to create pages even if your content lives outside of the special `/pages/` directory, such as in a [content collection](https://docs.astro.build/en/guides/content-collections/) or a [CMS](https://docs.astro.build/en/guides/cms/).\n\nRead more about [Routing in Astro](https://docs.astro.build/en/guides/routing/).\n\n## Link between pages\n\nWrite standard HTML [`<a>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) in your Astro pages to link to other pages on your site. Use a **URL path relative to your root domain** as your link, not a relative file path.\n\nFor example, to link to `https://example.com/authors/sonali/` from any other page on `example.com`:\n\n```\nRead more <a href=\"/authors/sonali/\">about Sonali</a>.\n```\n\n## Astro Pages\n\nAstro pages use the `.astro` file extension and support the same features as [Astro components](https://docs.astro.build/en/basics/astro-components/).\n\n```\n<html lang=\"en\">\n  <head>\n    <title>My Homepage</title>\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>\n```\n\nA page must produce a full HTML document. If not explicitly included, Astro will add the necessary `<!DOCTYPE html>` declaration and `<head>` content to any `.astro` component located within `src/pages/` by default. You can opt-out of this behavior on a per-component basis by marking it as a [partial](https://docs.astro.build/en/basics/astro-pages/#page-partials) page.\n\nTo avoid repeating the same HTML elements on every page, you can move common `<head>` and `<body>` elements into your own [layout components](https://docs.astro.build/en/basics/layouts/). You can use as many or as few layout components as you‚Äôd like.\n\n```\nimport MySiteLayout from '../layouts/MySiteLayout.astro';\n\n<MySiteLayout>\n  <p>My page content, wrapped in a layout!</p>\n</MySiteLayout>\n```\n\n## Markdown/MDX Pages\n\nAstro also treats any Markdown ( `.md`) files inside of `src/pages/` as pages in your final website. If you have the [MDX Integration installed](https://docs.astro.build/en/guides/integrations-guide/mdx/#installation), it also treats MDX ( `.mdx`) files the same way.\n\nMarkdown files can use the special `layout` frontmatter property to specify a [layout component](https://docs.astro.build/en/basics/layouts/) that will wrap their Markdown content in a full `<html>...</html>` page document.\n\n```\nlayout: '../layouts/MySiteLayout.astro'\ntitle: 'My Markdown page'\n---\n# Title\nThis is my page, written in **Markdown.**\n```\n\n## HTML Pages\n\nFiles with the `.html` file extension can be placed in the `src/pages/` directory and used directly as pages on your site. Note that some key Astro features are not supported in [HTML Components](https://docs.astro.build/en/basics/astro-components/#html-components).\n\n## Custom 404 Error Page\n\nFor a custom 404 error page, you can create a `404.astro` or `404.md` file in `src/pages`.\n\nThis will build to a `404.html` page. Most [deploy services](https://docs.astro.build/en/guides/deploy/) will find and use it.\n\n## Custom 500 Error Page\n\nFor a custom 500 error page to show for pages that are [rendered on demand](https://docs.astro.build/en/guides/on-demand-rendering/), create the file `src/pages/500.astro`. This custom page is not available for prerendered pages and can‚Äôt be prerendered.\n\nIf an error occurs rendering this page, your host‚Äôs default 500 error page will be shown to your visitor.\n\n**Added in:** `astro@4.10.3`\n\nDuring development, if you have a `500.astro`, the error thrown at runtime is logged in your terminal, as opposed to being shown in the error overlay.\n\n## error\n\n**Added in:** `astro@4.11.0`\n\n`src/pages/500.astro` is a special page that is automatically passed an `error` prop for any error thrown during rendering. This allows you to use the details of an error (e.g. from a page, from middleware, etc.) to display information to your visitor.\n\nThe error prop‚Äôs data type can be anything, which may affect how you type or use the value in your code:\n\n```\ninterface Props {\n    error: unknown\n}\nconst { error } = Astro.props\n---\n<div>{error instanceof Error ? error.message : 'Unknown error'}</div>\n```\n\nTo avoid leaking sensitive information when displaying content from the `error` prop, consider evaluating the error first, and returning appropriate content based on the error thrown. For example, you should avoid displaying the error‚Äôs stack as it contains information about how your code is structured on the server.\n\n## Page Partials\n\n**Added in:** `astro@3.4.0`\n\nPartials are page components located within `src/pages/` that are not intended to render as full pages.\n\nLike components located outside of this folder, these files do not automatically include the `<!DOCTYPE html>` declaration, nor any `<head>` content such as scoped styles and scripts.\n\nHowever, because they are located in the special `src/pages/` directory, the generated HTML is available at a URL corresponding to its file path. This allows a rendering library (e.g. htmx, Stimulus, jQuery) to access it on the client and load sections of HTML dynamically on a page without a browser refresh or page navigation.\n\nPartials, when combined with a rendering library, provide an alternative to [Astro islands](https://docs.astro.build/en/concepts/islands/) and [`<script>` tags](https://docs.astro.build/en/guides/client-side-scripts/) for building dynamic content in Astro.\n\nPage files that can export a value for [`partial`](https://docs.astro.build/en/reference/routing-reference/#partial) (e.g. `.astro` and `.mdx`, but not `.md`) can be marked as partials.\n\n```\nexport const partial = true;\n---\n<li>I'm a partial!</li>\n```\n\n## Using with a library\n\nPartials are used to dynamically update a section of a page using a library such as [htmx](https://htmx.org/).\n\nThe following example shows an `hx-post` attribute set to a partial‚Äôs URL. The content from the partial page will be used to update the targeted HTML element on this page.\n\n```\n<html>\n  <head>\n    <title>My page</title>\n    <script src=\"https://unpkg.com/htmx.org@1.9.6\"\n      integrity=\"sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni\"\n      crossorigin=\"anonymous\"></script>\n  </head>\n</html>\n<section>\n  <div id=\"parent-div\">Target here</div>\n  <button hx-post=\"/partials/clicked/\"\n    hx-trigger=\"click\"\n    hx-target=\"#parent-div\"\n    hx-swap=\"innerHTML\"\n  >\n      Click Me!\n  </button>\n</section>\n```\n\nThe `.astro` partial must exist at the corresponding file path, and include an export defining the page as a partial:\n\n```\nexport const partial = true;\n---\n<div>I was clicked!</div>\n```\n\nSee the [htmx documentation](https://htmx.org/docs/) for more details on using htmx.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "overview", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I supported page files in astro?\n\nAssistant: To supported page files in astro, here's what you do:\nAstro supports the following file types in the `src/pages/` directory:\n\n- [`.astro`](https://docs.astro.build/en/basics/astro-pages/#astro-pages)\n- [`.md`](https://docs.astro.build/en/basics/astro-pages/#markdownmdx-pages)\n- `.mdx` (with the [MDX Integration installed](https://docs.astro.build/en/guides/integrations-guide/mdx/#installation))\n- [`.html`](https://docs.astro.build/en/basics/astro-pages/#html-pages)\n- `.js`/ `.ts` (as [endpoints](https://docs.astro.build/en/guides/endpoints/)).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I file-based routing in astro?\n\nAssistant: To file-based routing in astro, here's what you do:\nAstro leverages a routing strategy called **file-based routing**. Each file in your `src/pages/` directory becomes an endpoint on your site based on its file path.\n\nA single file can also generate multiple pages using [dynamic routing](https://docs.astro.build/en/guides/routing/#dynamic-routes). This allows you to create pages even if your content lives outside of the special `/pages/` directory, such as in a [content collection](https://docs.astro.build/en/guides/content-collections/) or a [CMS](https://docs.astro.build/en/guides/cms/).\n\nRead more about [Routing in Astro](https://docs.astro.build/en/guides/routing/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I link between pages in astro?\n\nAssistant: To link between pages in astro, here's what you do:\nWrite standard HTML [`<a>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) in your Astro pages to link to other pages on your site. Use a **URL path relative to your root domain** as your link, not a relative file path.\n\nFor example, to link to `https://example.com/authors/sonali/` from any other page on `example.com`:\n\n```\nRead more <a href=\"/authors/sonali/\">about Sonali</a>.\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro pages in astro?\n\nAssistant: To astro pages in astro, here's what you do:\nAstro pages use the `.astro` file extension and support the same features as [Astro components](https://docs.astro.build/en/basics/astro-components/).\n\n```\n<html lang=\"en\">\n  <head>\n    <title>My Homepage</title>\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>\n```\n\nA page must produce a full HTML document. If not explicitly included, Astro will add the necessary `<!DOCTYPE html>` declaration and `<head>` content to any `.astro` component located within `src/pages/` by default. You can opt-out of this behavior on a per-component basis by marking it as a [partial](https://docs.astro.build/en/basics/astro-pages/#page-partials) page.\n\nTo avoid repeating the same HTML elements on every page, you can move common `<head>` and `<body>` elements into your own [layout components](https://docs.astro.build/en/basics/layouts/). You can use as many or as few layout components as you‚Äôd like.\n\n```\nimport MySiteLayout from '../layouts/MySiteLayout.astro';\n\n<MySiteLayout>\n  <p>My page content, wrapped in a layout!</p>\n</MySiteLayout>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown/mdx pages in astro?\n\nAssistant: To markdown/mdx pages in astro, here's what you do:\nAstro also treats any Markdown ( `.md`) files inside of `src/pages/` as pages in your final website. If you have the [MDX Integration installed](https://docs.astro.build/en/guides/integrations-guide/mdx/#installation), it also treats MDX ( `.mdx`) files the same way.\n\nMarkdown files can use the special `layout` frontmatter property to specify a [layout component](https://docs.astro.build/en/basics/layouts/) that will wrap their Markdown content in a full `<html>...</html>` page document.\n\n```\nlayout: '../layouts/MySiteLayout.astro'\ntitle: 'My Markdown page'\n---\n# Title\nThis is my page, written in **Markdown.**\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I html pages in astro?\n\nAssistant: To html pages in astro, here's what you do:\nFiles with the `.html` file extension can be placed in the `src/pages/` directory and used directly as pages on your site. Note that some key Astro features are not supported in [HTML Components](https://docs.astro.build/en/basics/astro-components/#html-components)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom 404 error page in astro?\n\nAssistant: To custom 404 error page in astro, here's what you do:\nFor a custom 404 error page, you can create a `404.astro` or `404.md` file in `src/pages`.\n\nThis will build to a `404.html` page. Most [deploy services](https://docs.astro.build/en/guides/deploy/) will find and use it..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I custom 500 error page in astro?\n\nAssistant: To custom 500 error page in astro, here's what you do:\nFor a custom 500 error page to show for pages that are [rendered on demand](https://docs.astro.build/en/guides/on-demand-rendering/), create the file `src/pages/500.astro`. This custom page is not available for prerendered pages and can‚Äôt be prerendered.\n\nIf an error occurs rendering this page, your host‚Äôs default 500 error page will be shown to your visitor.\n\n**Added in:** `astro@4.10.3`\n\nDuring development, if you have a `500.astro`, the error thrown at runtime is logged in your terminal, as opposed to being shown in the error overlay..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I error in astro?\n\nAssistant: To error in astro, here's what you do:\n**Added in:** `astro@4.11.0`\n\n`src/pages/500.astro` is a special page that is automatically passed an `error` prop for any error thrown during rendering. This allows you to use the details of an error (e.g. from a page, from middleware, etc.) to display information to your visitor.\n\nThe error prop‚Äôs data type can be anything, which may affect how you type or use the value in your code:\n\n```\ninterface Props {\n    error: unknown\n}\nconst { error } = Astro.props\n---\n<div>{error instanceof Error ? error.message : 'Unknown error'}</div>\n```\n\nTo avoid leaking sensitive information when displaying content from the `error` prop, consider evaluating the error first, and returning appropriate content based on the error thrown. For example, you should avoid displaying the error‚Äôs stack as it contains information about how your code is structured on the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I page partials in astro?\n\nAssistant: To page partials in astro, here's what you do:\n**Added in:** `astro@3.4.0`\n\nPartials are page components located within `src/pages/` that are not intended to render as full pages.\n\nLike components located outside of this folder, these files do not automatically include the `<!DOCTYPE html>` declaration, nor any `<head>` content such as scoped styles and scripts.\n\nHowever, because they are located in the special `src/pages/` directory, the generated HTML is available at a URL corresponding to its file path. This allows a rendering library (e.g. htmx, Stimulus, jQuery) to access it on the client and load sections of HTML dynamically on a page without a browser refresh or page navigation.\n\nPartials, when combined with a rendering library, provide an alternative to [Astro islands](https://docs.astro.build/en/concepts/islands/) and [`<script>` tags](https://docs.astro.build/en/guides/client-side-scripts/) for building dynamic content in Astro.\n\nPage files that can export a value for [`partial`](https://docs.astro.build/en/reference/routing-reference/#partial) (e.g. `.astro` and `.mdx`, but not `.md`) can be marked as partials.\n\n```\nexport const partial = true;\n---\n<li>I'm a partial!</li>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I using with a library in astro?\n\nAssistant: To using with a library in astro, here's what you do:\nPartials are used to dynamically update a section of a page using a library such as [htmx](https://htmx.org/).\n\nThe following example shows an `hx-post` attribute set to a partial‚Äôs URL. The content from the partial page will be used to update the targeted HTML element on this page.\n\n```\n<html>\n  <head>\n    <title>My page</title>\n    <script src=\"https://unpkg.com/htmx.org@1.9.6\"\n      integrity=\"sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni\"\n      crossorigin=\"anonymous\"></script>\n  </head>\n</html>\n<section>\n  <div id=\"parent-div\">Target here</div>\n  <button hx-post=\"/partials/clicked/\"\n    hx-trigger=\"click\"\n    hx-target=\"#parent-div\"\n    hx-swap=\"innerHTML\"\n  >\n      Click Me!\n  </button>\n</section>\n```\n\nThe `.astro` partial must exist at the corresponding file path, and include an export defining the page as a partial:\n\n```\nexport const partial = true;\n---\n<div>I was clicked!</div>\n```\n\nSee the [htmx documentation](https://htmx.org/docs/) for more details on using htmx..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "section_detail", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Pages in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Astro Page Example**:\n\n```yaml\n<html lang=\"en\">\n  <head>\n    <title>My Homepage</title>\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>\n```\n\nThis snippet shows you how to astro page example, which is an important aspect of pages.\n\n**Astro Layout Example**:\n\n```yaml\nimport MySiteLayout from '../layouts/MySiteLayout.astro';\n\n<MySiteLayout>\n  <p>My page content, wrapped in a layout!</p>\n</MySiteLayout>\n```\n\nThis snippet shows you how to astro layout example, which is an important aspect of pages.\n\n**Markdown Page Example**:\n\n```yaml\nlayout: '../layouts/MySiteLayout.astro'\ntitle: 'My Markdown page'\n---\n# Title\nThis is my page, written in **Markdown.**\n```\n\nThis snippet shows you how to markdown page example, which is an important aspect of pages.\n\n**Partial Example**:\n\n```yaml\nexport const partial = true;\n---\n<li>I'm a partial!</li>\n```\n\nThis snippet shows you how to partial example, which is an important aspect of pages.\n\n**Using with a Library Example**:\n\n```yaml\n<html>\n  <head>\n    <title>My page</title>\n    <script src=\"https://unpkg.com/htmx.org@1.9.6\"\n      integrity=\"sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni\"\n      crossorigin=\"anonymous\"></script>\n  </head>\n</html>\n<section>\n  <div id=\"parent-div\">Target here</div>\n  <button hx-post=\"/partials/clicked/\"\n    hx-trigger=\"click\"\n    hx-target=\"#parent-div\"\n    hx-swap=\"innerHTML\"\n  >\n      Click Me!\n  </button>\n</section>\n\n```\n\nThis snippet shows you how to using with a library example, which is an important aspect of pages.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "code_examples", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Pages in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse URL paths relative to your root domain for linking between pages.\n\nTo avoid repeating HTML elements, move common <head> and <body> elements into layout components.\n\nEvaluate the error prop before displaying it to avoid leaking sensitive information.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/basics/astro-pages", "title": "Pages", "description": "Pages are files that live in the src/pages/ subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:31:30", "type": "best_practices", "page_metadata": {"ogTitle": "Pages", "description": "An introduction to Astro pages.", "favicon": "https://docs.astro.build/favicon.ico", "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "og:url": "https://docs.astro.build/en/basics/astro-pages/", "og:type": "article", "og:description": "An introduction to Astro pages.", "og:site_name": "Docs", "viewport": "width=device-width, initial-scale=1", "og:title": "Pages", "og:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "title": "Pages | Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogDescription": "An introduction to Astro pages.", "ogUrl": "https://docs.astro.build/en/basics/astro-pages/", "language": "en", "ogLocale": "en", "ogSiteName": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/basics/astro-pages.webp", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "og:locale": "en", "scrapeId": "134b9752-4c01-40a3-8989-2cb0ae2b4524", "sourceURL": "https://docs.astro.build/en/basics/astro-pages", "url": "https://docs.astro.build/en/basics/astro-pages/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Template expressions reference is in astro?\n\nAssistant: Sure, I'd be happy to explain Template expressions reference in astro.\n\n# Template expressions reference\n\nAstro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.Here's a quick rundown of what this is about:\n\n## JSX-like Expressions\n\nYou can define local JavaScript variables inside of the frontmatter component script between the two code fences ( `---`) of an Astro component. You can then inject these variables into the component‚Äôs HTML template using JSX-like expressions!\n\n## Variables\n\nLocal variables can be added into the HTML using the curly braces syntax:\n\n```\n---\nconst name = \"Astro\";\n---\n<div>\n  <h1>Hello {name}!</h1>  <!-- Outputs <h1>Hello Astro!</h1> -->\n</div>\n```\n\n## Dynamic Attributes\n\nLocal variables can be used in curly braces to pass attribute values to both HTML elements and components:\n\n```\n---\nconst name = \"Astro\";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```\n\n## Dynamic HTML\n\nLocal variables can be used in JSX-like functions to produce dynamically-generated HTML elements:\n\n```\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```\n\nAstro can conditionally display HTML using JSX logical operators and ternary expressions.\n\n```\n---\nconst visible = true;\n---\n{visible && <p>Show me!</p>}\n{visible ? <p>Show me!</p> : <p>Else show me!</p>}\n```\n\n## Dynamic Tags\n\nYou can also use dynamic tags by assigning an HTML tag name to a variable or with a component import reassignment:\n\n```\n---\nimport MyComponent from \"./MyComponent.astro\";\nconst Element = 'div'\nconst Component = MyComponent;\n---\n<Element>Hello!</Element> <!-- renders as <div>Hello!</div> -->\n<Component /> <!-- renders as <MyComponent /> -->\n```\n\nWhen using dynamic tags:\n\n- **Variable names must be capitalized.** For example, use `Element`, not `element`. Otherwise, Astro will try to render your variable name as a literal HTML tag.\n- **Hydration directives are not supported.** When using [`client:*` hydration directives](https://docs.astro.build/en/guides/framework-components/#hydrating-interactive-components), Astro needs to know which components to bundle for production, and the dynamic tag pattern prevents this from working.\n- **The [define:vars directive](https://docs.astro.build/en/reference/directives-reference/#definevars) is not supported.** If you cannot wrap the children with an extra element (e.g `<div>`), then you can manually add a ``style={`--myVar:${value}`}`` to your Element.\n\n## Fragments\n\nAstro supports `<> </>` notation and also provides a built-in `<Fragment />` component. This component can be useful to avoid wrapper elements when adding [`set:*` directives](https://docs.astro.build/en/reference/directives-reference/#sethtml) to inject an HTML string.\n\nThe following example renders paragraph text using the `<Fragment />` component:\n\n```\n---\nconst htmlString = '<p>Raw HTML content</p>';\n---\n<Fragment set:html={htmlString} />\n```\n\n## Differences between Astro and JSX\n\nAstro component syntax is a superset of HTML. It was designed to feel familiar to anyone with HTML or JSX experience, but there are a couple of key differences between `.astro` files and JSX.\n\n## Attributes\n\nIn Astro, you use the standard `kebab-case` format for all HTML attributes instead of the `camelCase` used in JSX. This even works for `class`, which is not supported by React.\n\n```\n<div className=\"box\" dataValue=\"3\" />\n<div class=\"box\" data-value=\"3\" />\n```\n\n## Multiple Elements\n\nAn Astro component template can render multiple elements with no need to wrap everything in a single `<div>` or `<>`, unlike JavaScript or JSX.\n\n```\n---\n// Template with multiple elements\n---\n<p>No need to wrap elements in a single containing element.</p>\n<p>Astro supports multiple root elements in a template.</p>\n```\n\n## Comments\n\nIn Astro, you can use standard HTML comments or JavaScript-style comments.\n\n```\n---\n---\n<!-- HTML comment syntax is valid in .astro files -->\n{/* JS comment syntax is also valid */}\n```\n\n## Component utilities\n\n### `Astro.slots`\n`Astro.slots` contains utility functions for modifying an Astro component‚Äôs slotted children.\n\n## Astro.slots.has()\n\n**Type:** `(slotName: string) => boolean`\n\nYou can check whether content for a specific slot name exists with `Astro.slots.has()`. This can be useful when you want to wrap slot contents but only want to render the wrapper elements when the slot is being used.\n\n```\n---\n---\n<slot />\n{Astro.slots.has('more') && (\n  <aside>\n    <h2>More</h2>\n    <slot name=\"more\" />\n  </aside>\n)}\n```\n\n## Astro.slots.render()\n\n**Type:** `(slotName: string, args?: any[]) => Promise<string>`\n\nYou can asynchronously render the contents of a slot to a string of HTML using `Astro.slots.render()`.\n\n```\n---\nconst html = await Astro.slots.render('default');\n---\n<Fragment set:html={html} />\n```\n`Astro.slots.render()` optionally accepts a second argument: an array of parameters that will be forwarded to any function children. This can be useful for custom utility components.\n\nFor example, this `<Shout />` component converts its `message` prop to uppercase and passes it to the default slot:\n\n```\n---\nconst message = Astro.props.message.toUpperCase();\nlet html = '';\nif (Astro.slots.has('default')) {\n  html = await Astro.slots.render('default', [message]);\n}\n---\n<Fragment set:html={html} />\n```\nA callback function passed as `<Shout />`‚Äôs child will receive the all-caps `message` parameter:\n\n```\n---\nimport Shout from \"../components/Shout.astro\";\n---\n<Shout message=\"slots!\">\n  {(message) => <div>{message}</div>}\n</Shout>\n<!-- renders as <div>SLOTS!</div> -->\n```\n\n## Astro.self\n\n`Astro.self` allows Astro components to be recursively called. This behavior lets you render an Astro component from within itself by using `<Astro.self>` in the component template. This can help iterate over large data stores and nested data structures.\n\n```\n---\nconst { items } = Astro.props;\n---\n<ul class=\"nested-list\">\n  {items.map((item) => (\n    <li>\n      <!-- If there is a nested data-structure we render `<Astro.self>` -->\n      <!-- and can pass props through with the recursive call -->\n      {Array.isArray(item) ? (\n        <Astro.self items={item} />\n      ) : (\n        item\n      )}\n    </li>\n  ))}\n</ul>\n```\nThis component could then be used like this:\n\n```\n---\nimport NestedList from './NestedList.astro';\n---\n<NestedList items={['A', ['B', 'C'], 'D']} />\n```\nAnd would render HTML like this:\n\n```\n<ul class=\"nested-list\">\n  <li>A</li>\n  <li>\n    <ul class=\"nested-list\">\n      <li>B</li>\n      <li>C</li>\n    </ul>\n  </li>\n  <li>D</li>\n</ul>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "overview", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I jsx-like expressions in astro?\n\nAssistant: To jsx-like expressions in astro, here's what you do:\nYou can define local JavaScript variables inside of the frontmatter component script between the two code fences ( `---`) of an Astro component. You can then inject these variables into the component‚Äôs HTML template using JSX-like expressions!.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I variables in astro?\n\nAssistant: To variables in astro, here's what you do:\nLocal variables can be added into the HTML using the curly braces syntax:\n\n```\n---\nconst name = \"Astro\";\n---\n<div>\n  <h1>Hello {name}!</h1>  <!-- Outputs <h1>Hello Astro!</h1> -->\n</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I dynamic attributes in astro?\n\nAssistant: To dynamic attributes in astro, here's what you do:\nLocal variables can be used in curly braces to pass attribute values to both HTML elements and components:\n\n```\n---\nconst name = \"Astro\";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I dynamic html in astro?\n\nAssistant: To dynamic html in astro, here's what you do:\nLocal variables can be used in JSX-like functions to produce dynamically-generated HTML elements:\n\n```\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```\n\nAstro can conditionally display HTML using JSX logical operators and ternary expressions.\n\n```\n---\nconst visible = true;\n---\n{visible && <p>Show me!</p>}\n{visible ? <p>Show me!</p> : <p>Else show me!</p>}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I dynamic tags in astro?\n\nAssistant: To dynamic tags in astro, here's what you do:\nYou can also use dynamic tags by assigning an HTML tag name to a variable or with a component import reassignment:\n\n```\n---\nimport MyComponent from \"./MyComponent.astro\";\nconst Element = 'div'\nconst Component = MyComponent;\n---\n<Element>Hello!</Element> <!-- renders as <div>Hello!</div> -->\n<Component /> <!-- renders as <MyComponent /> -->\n```\n\nWhen using dynamic tags:\n\n- **Variable names must be capitalized.** For example, use `Element`, not `element`. Otherwise, Astro will try to render your variable name as a literal HTML tag.\n- **Hydration directives are not supported.** When using [`client:*` hydration directives](https://docs.astro.build/en/guides/framework-components/#hydrating-interactive-components), Astro needs to know which components to bundle for production, and the dynamic tag pattern prevents this from working.\n- **The [define:vars directive](https://docs.astro.build/en/reference/directives-reference/#definevars) is not supported.** If you cannot wrap the children with an extra element (e.g `<div>`), then you can manually add a ``style={`--myVar:${value}`}`` to your Element..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I fragments in astro?\n\nAssistant: To fragments in astro, here's what you do:\nAstro supports `<> </>` notation and also provides a built-in `<Fragment />` component. This component can be useful to avoid wrapper elements when adding [`set:*` directives](https://docs.astro.build/en/reference/directives-reference/#sethtml) to inject an HTML string.\n\nThe following example renders paragraph text using the `<Fragment />` component:\n\n```\n---\nconst htmlString = '<p>Raw HTML content</p>';\n---\n<Fragment set:html={htmlString} />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I differences between astro and jsx in astro?\n\nAssistant: To differences between astro and jsx in astro, here's what you do:\nAstro component syntax is a superset of HTML. It was designed to feel familiar to anyone with HTML or JSX experience, but there are a couple of key differences between `.astro` files and JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I attributes in astro?\n\nAssistant: To attributes in astro, here's what you do:\nIn Astro, you use the standard `kebab-case` format for all HTML attributes instead of the `camelCase` used in JSX. This even works for `class`, which is not supported by React.\n\n```\n<div className=\"box\" dataValue=\"3\" />\n<div class=\"box\" data-value=\"3\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I multiple elements in astro?\n\nAssistant: To multiple elements in astro, here's what you do:\nAn Astro component template can render multiple elements with no need to wrap everything in a single `<div>` or `<>`, unlike JavaScript or JSX.\n\n```\n---\n// Template with multiple elements\n---\n<p>No need to wrap elements in a single containing element.</p>\n<p>Astro supports multiple root elements in a template.</p>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I comments in astro?\n\nAssistant: To comments in astro, here's what you do:\nIn Astro, you can use standard HTML comments or JavaScript-style comments.\n\n```\n---\n---\n<!-- HTML comment syntax is valid in .astro files -->\n{/* JS comment syntax is also valid */}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I component utilities in astro?\n\nAssistant: To component utilities in astro, here's what you do:\n### `Astro.slots`\n`Astro.slots` contains utility functions for modifying an Astro component‚Äôs slotted children..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro.slots.has() in astro?\n\nAssistant: To astro.slots.has() in astro, here's what you do:\n**Type:** `(slotName: string) => boolean`\n\nYou can check whether content for a specific slot name exists with `Astro.slots.has()`. This can be useful when you want to wrap slot contents but only want to render the wrapper elements when the slot is being used.\n\n```\n---\n---\n<slot />\n{Astro.slots.has('more') && (\n  <aside>\n    <h2>More</h2>\n    <slot name=\"more\" />\n  </aside>\n)}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro.slots.render() in astro?\n\nAssistant: To astro.slots.render() in astro, here's what you do:\n**Type:** `(slotName: string, args?: any[]) => Promise<string>`\n\nYou can asynchronously render the contents of a slot to a string of HTML using `Astro.slots.render()`.\n\n```\n---\nconst html = await Astro.slots.render('default');\n---\n<Fragment set:html={html} />\n```\n`Astro.slots.render()` optionally accepts a second argument: an array of parameters that will be forwarded to any function children. This can be useful for custom utility components.\n\nFor example, this `<Shout />` component converts its `message` prop to uppercase and passes it to the default slot:\n\n```\n---\nconst message = Astro.props.message.toUpperCase();\nlet html = '';\nif (Astro.slots.has('default')) {\n  html = await Astro.slots.render('default', [message]);\n}\n---\n<Fragment set:html={html} />\n```\nA callback function passed as `<Shout />`‚Äôs child will receive the all-caps `message` parameter:\n\n```\n---\nimport Shout from \"../components/Shout.astro\";\n---\n<Shout message=\"slots!\">\n  {(message) => <div>{message}</div>}\n</Shout>\n<!-- renders as <div>SLOTS!</div> -->\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro.self in astro?\n\nAssistant: To astro.self in astro, here's what you do:\n`Astro.self` allows Astro components to be recursively called. This behavior lets you render an Astro component from within itself by using `<Astro.self>` in the component template. This can help iterate over large data stores and nested data structures.\n\n```\n---\nconst { items } = Astro.props;\n---\n<ul class=\"nested-list\">\n  {items.map((item) => (\n    <li>\n      <!-- If there is a nested data-structure we render `<Astro.self>` -->\n      <!-- and can pass props through with the recursive call -->\n      {Array.isArray(item) ? (\n        <Astro.self items={item} />\n      ) : (\n        item\n      )}\n    </li>\n  ))}\n</ul>\n```\nThis component could then be used like this:\n\n```\n---\nimport NestedList from './NestedList.astro';\n---\n<NestedList items={['A', ['B', 'C'], 'D']} />\n```\nAnd would render HTML like this:\n\n```\n<ul class=\"nested-list\">\n  <li>A</li>\n  <li>\n    <ul class=\"nested-list\">\n      <li>B</li>\n      <li>C</li>\n    </ul>\n  </li>\n  <li>D</li>\n</ul>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Template expressions reference in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Variables**:\n\n```yaml\n---\nconst name = \"Astro\";\n---\n<div>\n  <h1>Hello {name}!</h1>  <!-- Outputs <h1>Hello Astro!</h1> -->\n</div>\n```\n\nThis snippet shows you how to variables, which is an important aspect of template expressions reference.\n\n**Dynamic Attributes**:\n\n```yaml\n---\nconst name = \"Astro\";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```\n\nThis snippet shows you how to dynamic attributes, which is an important aspect of template expressions reference.\n\n**Dynamic HTML**:\n\n```yaml\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```\n\nThis snippet shows you how to dynamic html, which is an important aspect of template expressions reference.\n\n**Conditional Rendering**:\n\n```yaml\n---\nconst visible = true;\n---\n{visible && <p>Show me!</p>}\n{visible ? <p>Show me!</p> : <p>Else show me!</p>}\n```\n\nThis snippet shows you how to conditional rendering, which is an important aspect of template expressions reference.\n\n**Dynamic Tags**:\n\n```yaml\n---\nimport MyComponent from \"./MyComponent.astro\";\nconst Element = 'div'\nconst Component = MyComponent;\n---\n<Element>Hello!</Element> <!-- renders as <div>Hello!</div> -->\n<Component /> <!-- renders as <MyComponent /> -->\n```\n\nThis snippet shows you how to dynamic tags, which is an important aspect of template expressions reference.\n\n**Fragments**:\n\n```yaml\n---\nconst htmlString = '<p>Raw HTML content</p>';\n---\n<Fragment set:html={htmlString} />\n```\n\nThis snippet shows you how to fragments, which is an important aspect of template expressions reference.\n\n**Attributes**:\n\n```yaml\n<div className=\"box\" dataValue=\"3\" />\n<div class=\"box\" data-value=\"3\" />\n```\n\nThis snippet shows you how to attributes, which is an important aspect of template expressions reference.\n\n**Multiple Elements**:\n\n```yaml\n---\n// Template with multiple elements\n---\n<p>No need to wrap elements in a single containing element.</p>\n<p>Astro supports multiple root elements in a template.</p>\n```\n\nThis snippet shows you how to multiple elements, which is an important aspect of template expressions reference.\n\n**Comments**:\n\n```yaml\n---\n---\n<!-- HTML comment syntax is valid in .astro files -->\n{/* JS comment syntax is also valid */}\n```\n\nThis snippet shows you how to comments, which is an important aspect of template expressions reference.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Template expressions reference in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nVariable names must be capitalized when using dynamic tags.\n\nHydration directives are not supported with dynamic tags.\n\nThe define:vars directive is not supported with dynamic tags.\n\nUse standard HTML comments or JavaScript-style comments in Astro.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/reference/astro-syntax", "title": "Template expressions reference", "description": "Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:35:18", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "twitter:site": "astrodotbuild", "favicon": "https://docs.astro.build/favicon.ico", "twitter:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "og:type": "article", "language": "en", "title": "Template expressions reference | Docs", "og:site_name": "Docs", "og:title": "Template expressions reference", "og:image": "https://docs.astro.build/open-graph/en/reference/astro-syntax.webp", "ogSiteName": "Docs", "og:locale": "en", "ogTitle": "Template expressions reference", "ogUrl": "https://docs.astro.build/en/reference/astro-syntax/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:url": "https://docs.astro.build/en/reference/astro-syntax/", "ogLocale": "en", "scrapeId": "614d030f-2e9f-43d2-bd26-d6d789d7903e", "sourceURL": "https://docs.astro.build/en/reference/astro-syntax", "url": "https://docs.astro.build/en/reference/astro-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Markdown in Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Markdown in Astro in astro.\n\n# Markdown in Astro\n\nMarkdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.Here's a quick rundown of what this is about:\n\n## Organizing Markdown files\n\nYour local Markdown files can be kept anywhere within your `src/` directory. Markdown files located within `src/pages/` will automatically generate Markdown pages on your site.\n\nYour Markdown content and frontmatter properties are available to use in components through local file imports or when queried and rendered from data fetched by a content collections helper function.\n\n## File imports vs content collections queries\n\nLocal Markdown can be imported into `.astro` components using an `import` statement for a single file and Vite‚Äôs `import.meta.glob()` to query multiple files at once. The exported data from these Markdown files can then be used in the `.astro` component.\n\nIf you have groups of related Markdown files, consider defining them as collections. This gives you several advantages, including the ability to store Markdown files anywhere on your filesystem or remotely.\n\n## Dynamic JSX-like expressions\n\nAfter importing or querying Markdown files, you can write dynamic HTML templates in your `.astro` components that include frontmatter data and body content.\n\n## Available Properties\n\nWhen fetching data from your collections with the helper functions `getCollection()` or `getEntry()`, your Markdown‚Äôs frontmatter properties are available on a `data` object (e.g. `post.data.title`). Additionally, `body` contains the raw, uncompiled body content as a string.\n\n## Importing Markdown\n\nThe following exported properties are available in your `.astro` component when importing Markdown using `import` or `import.meta.glob()`:\n\n- **`file`** - The absolute file path.\n- **`url`** - The URL of the page.\n- **`frontmatter`** - Contains any data specified in the file‚Äôs YAML (or TOML) frontmatter.\n- **`<Content />`** - A component that returns the full, rendered contents of the file.\n- **`rawContent()`** - A function that returns the raw Markdown document as a string.\n- **`compiledContent()`** - An async function that returns the Markdown document compiled to an HTML string.\n- **`getHeadings()`** - An async function that returns an array of all headings in the file.\n\n## The <Content /> Component\n\nThe `<Content />` component is available by importing `Content` from a Markdown file. This component returns the file‚Äôs full body content, rendered to HTML.\n\n## Heading IDs\n\nWriting headings in Markdown will automatically give you anchor links so you can link directly to certain sections of your page.\n\n## Heading IDs and plugins\n\nAstro injects an `id` attribute into all heading elements in Markdown and MDX files. You can retrieve this data from the `getHeadings()` utility available as a Markdown exported property from an imported file, or from the `render()` function when using Markdown returned from a content collections query.\n\n## Markdown Plugins\n\nMarkdown support in Astro is powered by remark, a powerful parsing and processing tool with an active ecosystem. Other Markdown parsers like Pandoc and markdown-it are not currently supported.\n\n## Adding remark and rehype plugins\n\nAstro supports adding third-party remark and rehype plugins for Markdown. These plugins allow you to extend your Markdown with new capabilities.\n\n## Customizing a plugin\n\nIn order to customize a plugin, provide an options object after it in a nested array.\n\n## Modifying frontmatter programmatically\n\nYou can add frontmatter properties to all of your Markdown and MDX files by using a remark or rehype plugin.\n\n## Extending Markdown config from MDX\n\nAstro‚Äôs MDX integration will extend your project‚Äôs existing Markdown configuration by default. To override individual options, you can specify their equivalent in your MDX configuration.\n\n## Individual Markdown pages\n\nAstro treats any supported file inside of the `/src/pages/` directory as a page, including `.md` and other Markdown file types.\n\n## Frontmatter layout property\n\nTo help with the limited functionality of individual Markdown pages, Astro provides a special frontmatter `layout` property which is a relative path to an Astro Markdown layout component.\n\n## Fetching Remote Markdown\n\nAstro does not include built-in support for remote Markdown outside of content collections.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "overview", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I organizing markdown files in astro?\n\nAssistant: To organizing markdown files in astro, here's what you do:\nYour local Markdown files can be kept anywhere within your `src/` directory. Markdown files located within `src/pages/` will automatically generate Markdown pages on your site.\n\nYour Markdown content and frontmatter properties are available to use in components through local file imports or when queried and rendered from data fetched by a content collections helper function..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I file imports vs content collections queries in astro?\n\nAssistant: To file imports vs content collections queries in astro, here's what you do:\nLocal Markdown can be imported into `.astro` components using an `import` statement for a single file and Vite‚Äôs `import.meta.glob()` to query multiple files at once. The exported data from these Markdown files can then be used in the `.astro` component.\n\nIf you have groups of related Markdown files, consider defining them as collections. This gives you several advantages, including the ability to store Markdown files anywhere on your filesystem or remotely..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I dynamic jsx-like expressions in astro?\n\nAssistant: To dynamic jsx-like expressions in astro, here's what you do:\nAfter importing or querying Markdown files, you can write dynamic HTML templates in your `.astro` components that include frontmatter data and body content..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I available properties in astro?\n\nAssistant: To available properties in astro, here's what you do:\nWhen fetching data from your collections with the helper functions `getCollection()` or `getEntry()`, your Markdown‚Äôs frontmatter properties are available on a `data` object (e.g. `post.data.title`). Additionally, `body` contains the raw, uncompiled body content as a string..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I importing markdown in astro?\n\nAssistant: To importing markdown in astro, here's what you do:\nThe following exported properties are available in your `.astro` component when importing Markdown using `import` or `import.meta.glob()`:\n\n- **`file`** - The absolute file path.\n- **`url`** - The URL of the page.\n- **`frontmatter`** - Contains any data specified in the file‚Äôs YAML (or TOML) frontmatter.\n- **`<Content />`** - A component that returns the full, rendered contents of the file.\n- **`rawContent()`** - A function that returns the raw Markdown document as a string.\n- **`compiledContent()`** - An async function that returns the Markdown document compiled to an HTML string.\n- **`getHeadings()`** - An async function that returns an array of all headings in the file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I the <content /> component in astro?\n\nAssistant: To the <content /> component in astro, here's what you do:\nThe `<Content />` component is available by importing `Content` from a Markdown file. This component returns the file‚Äôs full body content, rendered to HTML..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I heading ids in astro?\n\nAssistant: To heading ids in astro, here's what you do:\nWriting headings in Markdown will automatically give you anchor links so you can link directly to certain sections of your page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I heading ids and plugins in astro?\n\nAssistant: To heading ids and plugins in astro, here's what you do:\nAstro injects an `id` attribute into all heading elements in Markdown and MDX files. You can retrieve this data from the `getHeadings()` utility available as a Markdown exported property from an imported file, or from the `render()` function when using Markdown returned from a content collections query..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown plugins in astro?\n\nAssistant: To markdown plugins in astro, here's what you do:\nMarkdown support in Astro is powered by remark, a powerful parsing and processing tool with an active ecosystem. Other Markdown parsers like Pandoc and markdown-it are not currently supported..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding remark and rehype plugins in astro?\n\nAssistant: To adding remark and rehype plugins in astro, here's what you do:\nAstro supports adding third-party remark and rehype plugins for Markdown. These plugins allow you to extend your Markdown with new capabilities..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I customizing a plugin in astro?\n\nAssistant: To customizing a plugin in astro, here's what you do:\nIn order to customize a plugin, provide an options object after it in a nested array..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I modifying frontmatter programmatically in astro?\n\nAssistant: To modifying frontmatter programmatically in astro, here's what you do:\nYou can add frontmatter properties to all of your Markdown and MDX files by using a remark or rehype plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I extending markdown config from mdx in astro?\n\nAssistant: To extending markdown config from mdx in astro, here's what you do:\nAstro‚Äôs MDX integration will extend your project‚Äôs existing Markdown configuration by default. To override individual options, you can specify their equivalent in your MDX configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I individual markdown pages in astro?\n\nAssistant: To individual markdown pages in astro, here's what you do:\nAstro treats any supported file inside of the `/src/pages/` directory as a page, including `.md` and other Markdown file types..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I frontmatter layout property in astro?\n\nAssistant: To frontmatter layout property in astro, here's what you do:\nTo help with the limited functionality of individual Markdown pages, Astro provides a special frontmatter `layout` property which is a relative path to an Astro Markdown layout component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I fetching remote markdown in astro?\n\nAssistant: To fetching remote markdown in astro, here's what you do:\nAstro does not include built-in support for remote Markdown outside of content collections..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "section_detail", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Markdown in Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dynamic JSX-like expressions example**:\n\n```yaml\n---\n\ntitle: 'The greatest post of all time'\n\nauthor: 'Ben'\n\n---\n\nHere is my _great_ post!\n```\n\nThis snippet shows you how to dynamic jsx-like expressions example, which is an important aspect of markdown in astro.\n\n**Importing Markdown example**:\n\n```yaml\n---\n\nimport * as greatPost from './posts/great-post.md';\n\nconst posts = Object.values(import.meta.glob('./posts/*.md', { eager: true }));\n\n---\n\n<p>{greatPost.frontmatter.title}</p>\n\n<p>Written by: {greatPost.frontmatter.author}</p>\n\n<p>Post Archive:</p>\n\n<ul>\n\n  {posts.map(post => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n\n</ul>\n```\n\nThis snippet shows you how to importing markdown example, which is an important aspect of markdown in astro.\n\n**Example Markdown blog post**:\n\n```yaml\n---\n\nAstro.props = {\n\n  file: \"/home/user/projects/.../file.md\",\n\n  url: \"/en/guides/markdown-content/\",\n\n  frontmatter: {\n\n    /** Frontmatter from a blog post */\n\n    title: \"Astro 0.18 Release\",\n\n    date: \"Tuesday, July 27 2021\",\n\n    author: \"Matthew Phillips\",\n\n    description: \"Astro 0.18 is our biggest release since Astro launch.\",\n\n  },\n\n  getHeadings: () => [\n\n    {\"depth\": 1, \"text\": \"Astro 0.18 Release\", \"slug\": \"astro-018-release\"},\n\n    {\"depth\": 2, \"text\": \"Responsive partial hydration\", \"slug\": \"responsive-partial-hydration\"}\n\n    /* ... */\n\n  ],\n\n  rawContent: () => \"# Astro 0.18 Release\\nA little over a month ago, the first public beta [...]\",\n```\n\nThis snippet shows you how to example markdown blog post, which is an important aspect of markdown in astro.\n\n**Fetching Remote Markdown example**:\n\n```yaml\n---\n\n// Example: Fetch Markdown from a remote API\n\n// and render it to HTML, at runtime.\n// Using \"marked\" (https://github.com/markedjs/marked)\nimport { marked } from 'marked';\nconst response = await fetch('https://raw.githubusercontent.com/wiki/adam-p/markdown-here/Markdown-Cheatsheet.md');\nconst markdown = await response.text();\nconst content = marked.parse(markdown);\n---\n\n<article set:html={content} />\n```\n\nThis snippet shows you how to fetching remote markdown example, which is an important aspect of markdown in astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "code_examples", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Markdown in Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider defining groups of related Markdown files as collections for better organization and querying.\n\nUse the `<Content />` component to render full body content from Markdown files.\n\nWhen using the frontmatter `layout` property, ensure to include `<meta charset=\"utf-8\">` in your layout component.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/markdown-content", "title": "Markdown in Astro", "description": "Markdown is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include frontmatter YAML (or TOML) to define custom properties such as a title, description, and tags.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:37:18", "type": "best_practices", "page_metadata": {"title": "Markdown in Astro | Docs", "twitter:card": "summary_large_image", "og:url": "https://docs.astro.build/en/guides/markdown-content/", "og:locale": "en", "language": "en", "ogUrl": "https://docs.astro.build/en/guides/markdown-content/", "og:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogSiteName": "Docs", "docsearch:language": "en", "og:description": "Learn about Astro's built-in support for Markdown.", "twitter:site": "astrodotbuild", "ogTitle": "Markdown in Astro", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn about Astro's built-in support for Markdown.", "ogImage": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "Markdown in Astro", "twitter:image": "https://docs.astro.build/open-graph/en/guides/markdown-content.webp", "og:site_name": "Docs", "og:type": "article", "description": "Learn about Astro's built-in support for Markdown.", "scrapeId": "4eb6575e-b98c-4220-8545-974c6594be1e", "sourceURL": "https://docs.astro.build/en/guides/markdown-content", "url": "https://docs.astro.build/en/guides/markdown-content/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Invalid prerender export is in astro?\n\nAssistant: Sure, I'd be happy to explain Invalid prerender export in astro.\n\n# Invalid prerender export\n\nThis page covers the error related to invalid prerender exports in Astro, including what went wrong and how to fix it.Here's a quick rundown of what this is about:\n\n## What went wrong?\n\nThe `prerender` feature only supports a subset of valid JavaScript ‚Äî be sure to use exactly `export const prerender = true` so that our compiler can detect this directive at build time. Variables, `let`, and `var` declarations are not supported.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "title": "Invalid prerender export", "description": "This page covers the error related to invalid prerender exports in Astro, including what went wrong and how to fix it.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:32", "type": "overview", "page_metadata": {"ogSiteName": "Docs", "og:site_name": "Docs", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "title": "Invalid prerender export. | Docs", "ogImage": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "og:url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "og:locale": "en", "docsearch:language": "en", "og:title": "Invalid prerender export.", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "twitter:site": "astrodotbuild", "language": "en", "ogTitle": "Invalid prerender export.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "scrapeId": "3917163c-cea0-4f15-ac18-b43c908cb381", "sourceURL": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I what went wrong? in astro?\n\nAssistant: To what went wrong? in astro, here's what you do:\nThe `prerender` feature only supports a subset of valid JavaScript ‚Äî be sure to use exactly `export const prerender = true` so that our compiler can detect this directive at build time. Variables, `let`, and `var` declarations are not supported..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "title": "Invalid prerender export", "description": "This page covers the error related to invalid prerender exports in Astro, including what went wrong and how to fix it.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:32", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "og:site_name": "Docs", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "title": "Invalid prerender export. | Docs", "ogImage": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "og:url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "og:locale": "en", "docsearch:language": "en", "og:title": "Invalid prerender export.", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "twitter:site": "astrodotbuild", "language": "en", "ogTitle": "Invalid prerender export.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "scrapeId": "3917163c-cea0-4f15-ac18-b43c908cb381", "sourceURL": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Invalid prerender export in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Correct usage of prerender export**:\n\n```yaml\nexport const prerender = true\n```\n\nThis snippet shows you how to correct usage of prerender export, which is an important aspect of invalid prerender export.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "title": "Invalid prerender export", "description": "This page covers the error related to invalid prerender exports in Astro, including what went wrong and how to fix it.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:32", "type": "code_examples", "page_metadata": {"ogSiteName": "Docs", "og:site_name": "Docs", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "title": "Invalid prerender export. | Docs", "ogImage": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "og:url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "og:locale": "en", "docsearch:language": "en", "og:title": "Invalid prerender export.", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "twitter:site": "astrodotbuild", "language": "en", "ogTitle": "Invalid prerender export.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "scrapeId": "3917163c-cea0-4f15-ac18-b43c908cb381", "sourceURL": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Invalid prerender export in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse exactly `export const prerender = true` for prerender exports.\n\nAvoid using variables, `let`, and `var` declarations in prerender exports.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "title": "Invalid prerender export", "description": "This page covers the error related to invalid prerender exports in Astro, including what went wrong and how to fix it.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:39:32", "type": "best_practices", "page_metadata": {"ogSiteName": "Docs", "og:site_name": "Docs", "ogLocale": "en", "ogUrl": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "title": "Invalid prerender export. | Docs", "ogImage": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "og:url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "og:locale": "en", "docsearch:language": "en", "og:title": "Invalid prerender export.", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "twitter:site": "astrodotbuild", "language": "en", "ogTitle": "Invalid prerender export.", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://docs.astro.build/open-graph/en/reference/errors/invalid-prerender-export.webp", "scrapeId": "3917163c-cea0-4f15-ac18-b43c908cb381", "sourceURL": "https://docs.astro.build/en/reference/errors/invalid-prerender-export", "url": "https://docs.astro.build/en/reference/errors/invalid-prerender-export/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Astro Docs is in astro?\n\nAssistant: Sure, I'd be happy to explain Astro Docs in astro.\n\n# Astro Docs\n\nGuides, resources, and API references to help you build with Astro.Here's a quick rundown of what this is about:\n\n## Getting Started\n\nAstro v5 is here! Learn how to upgrade your site.\n\n## Installation\n\nOur installation guide has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually.\n\n## Creating a New Project\n\nTo create a new project with npm, use the following command:\n\n```\n# create a new project with npm\n\nnpm create astro@latest\n```\n\n\n## Learning Resources\n\nExplore Astro‚Äôs main features, Islands architecture, Astro components, and the Astro template syntax.\n\n## Extending Astro\n\nAdd integrations like React and Tailwind, create type safe content collections, enhance navigation with view transitions, and connect a headless CMS to your project.\n\n## Community and Support\n\nHave a question or want to get involved? Join our Discord.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "overview", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\nAstro v5 is here! Learn how to upgrade your site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nOur installation guide has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating a new project in astro?\n\nAssistant: To creating a new project in astro, here's what you do:\nTo create a new project with npm, use the following command:\n\n```\n# create a new project with npm\n\nnpm create astro@latest\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I learning resources in astro?\n\nAssistant: To learning resources in astro, here's what you do:\nExplore Astro‚Äôs main features, Islands architecture, Astro components, and the Astro template syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I extending astro in astro?\n\nAssistant: To extending astro in astro, here's what you do:\nAdd integrations like React and Tailwind, create type safe content collections, enhance navigation with view transitions, and connect a headless CMS to your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community and support in astro?\n\nAssistant: To community and support in astro, here's what you do:\nHave a question or want to get involved? Join our Discord..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Astro Docs in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a New Project with npm**:\n\n```yaml\nnpm create astro@latest\n```\n\nThis snippet shows you how to create a new project with npm, which is an important aspect of astro docs.\n\n", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "code_examples", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Astro Docs in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nExplore Astro starter themes for various types of sites.\n\nComplete the introductory Build a Blog Tutorial to learn the basics.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:49", "type": "best_practices", "page_metadata": {"og:url": "https://docs.astro.build/en/getting-started/", "og:site_name": "Docs", "ogSiteName": "Docs", "twitter:card": "summary_large_image", "language": "en", "title": "Getting started | Docs", "favicon": "https://docs.astro.build/favicon.ico", "twitter:site": "astrodotbuild", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogTitle": "Getting started", "viewport": "width=device-width, initial-scale=1", "og:title": "Getting started", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "ogUrl": "https://docs.astro.build/en/getting-started/", "scrapeId": "486b93d2-e172-4ae8-977c-2980d9caea4f", "sourceURL": "https://docs.astro.build/en", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Create your first Astro project is in astro?\n\nAssistant: Sure, I'd be happy to explain Create your first Astro project in astro.\n\n# Create your first Astro project\n\nGet ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.Here's a quick rundown of what this is about:\n\n## Launch the Astro setup wizard\n\nThe preferred way to create a new Astro site is through our `create astro` setup wizard.\n\n1. In the command line of your terminal, run the following command using your preferred package manager:\n\n- npm\n- pnpm\n- Yarn\n\n```\n# create a new project with npm\nnpm create astro@latest -- --template minimal\n```\n\n```\n# create a new project with pnpm\npnpm create astro@latest --template minimal\n```\n\n```\n# create a new project with yarn\nyarn create astro --template minimal\n```\n\n2. Confirm `y` to install `create-astro`\n\n3. When the prompt asks you where to create the project, type in the name of a folder to create a new directory for your project, e.g. `./tutorial`\n\n4. When the prompt asks you whether or not to install dependencies, type or select `y`.\n\n5. When the prompt asks you whether or not to initialize a new git repository, type or select `y`.\n\nWhen the install wizard is complete, you no longer need this terminal. You can now open VS Code to continue.\n\n## Open your project in VS Code\n\n6. Open VS Code. You will be prompted to open a folder. Choose the folder that you created during the setup wizard.\n\n7. If this is your first time opening an Astro project, you should see a notification asking if you would like to install recommended extensions. Click to see the recommended extensions, and choose the [Astro language support extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This will provide syntax highlighting and autocompletions for your Astro code.\n\n8. Make sure the terminal is visible and that you can see the command prompt, such as:\n\n```\nuser@machine:~/tutorial$\n```\n\nYou can now use the terminal built right into this window, instead of your computer‚Äôs Terminal app, for the rest of this tutorial.\n\n## Run Astro in dev mode\n\nIn order to preview your project files _as a website_ while you work, you will need Astro to be running in development (dev) mode.\n\n## Start the dev server\n\n9. Run the command to start the Astro dev server by typing into VS Code‚Äôs terminal:\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm run dev\n```\n\n```\npnpm run dev\n```\n\n```\nyarn run dev\n```\n\nNow you should see confirmation in the terminal that Astro is running in dev mode. üöÄ\n\n## View a preview of your website\n\nYour project files contain all the code necessary to display an Astro website, but the browser is responsible for displaying your code as web pages.\n\n10. Click on the `localhost` link in your terminal window to see a live preview of your new Astro website!\n\n(Astro uses `http://localhost:4321` by default if port `4321` is available.)\n\nHere‚Äôs what the Astro ‚ÄúEmpty Project‚Äù starter website should look like in the browser preview:\n\n![A blank white page with the word Astro at the top.](https://docs.astro.build/tutorial/minimal.png)\n\n## Checklist\n\n- I can create a new Astro project.\n- I can start the Astro dev server.\n\n## Resources\n\n- [Getting Started with Visual Studio Code](https://code.visualstudio.com/docs/introvideos/basics) external ‚Äî a video tutorial for installing, setting up and working with VS Code\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "overview", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I launch the astro setup wizard in astro?\n\nAssistant: To launch the astro setup wizard in astro, here's what you do:\nThe preferred way to create a new Astro site is through our `create astro` setup wizard.\n\n1. In the command line of your terminal, run the following command using your preferred package manager:\n\n- npm\n- pnpm\n- Yarn\n\n```\n# create a new project with npm\nnpm create astro@latest -- --template minimal\n```\n\n```\n# create a new project with pnpm\npnpm create astro@latest --template minimal\n```\n\n```\n# create a new project with yarn\nyarn create astro --template minimal\n```\n\n2. Confirm `y` to install `create-astro`\n\n3. When the prompt asks you where to create the project, type in the name of a folder to create a new directory for your project, e.g. `./tutorial`\n\n4. When the prompt asks you whether or not to install dependencies, type or select `y`.\n\n5. When the prompt asks you whether or not to initialize a new git repository, type or select `y`.\n\nWhen the install wizard is complete, you no longer need this terminal. You can now open VS Code to continue..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I open your project in vs code in astro?\n\nAssistant: To open your project in vs code in astro, here's what you do:\n6. Open VS Code. You will be prompted to open a folder. Choose the folder that you created during the setup wizard.\n\n7. If this is your first time opening an Astro project, you should see a notification asking if you would like to install recommended extensions. Click to see the recommended extensions, and choose the [Astro language support extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This will provide syntax highlighting and autocompletions for your Astro code.\n\n8. Make sure the terminal is visible and that you can see the command prompt, such as:\n\n```\nuser@machine:~/tutorial$\n```\n\nYou can now use the terminal built right into this window, instead of your computer‚Äôs Terminal app, for the rest of this tutorial..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I run astro in dev mode in astro?\n\nAssistant: To run astro in dev mode in astro, here's what you do:\nIn order to preview your project files _as a website_ while you work, you will need Astro to be running in development (dev) mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I start the dev server in astro?\n\nAssistant: To start the dev server in astro, here's what you do:\n9. Run the command to start the Astro dev server by typing into VS Code‚Äôs terminal:\n\n- npm\n- pnpm\n- Yarn\n\n```\nnpm run dev\n```\n\n```\npnpm run dev\n```\n\n```\nyarn run dev\n```\n\nNow you should see confirmation in the terminal that Astro is running in dev mode. üöÄ.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I view a preview of your website in astro?\n\nAssistant: To view a preview of your website in astro, here's what you do:\nYour project files contain all the code necessary to display an Astro website, but the browser is responsible for displaying your code as web pages.\n\n10. Click on the `localhost` link in your terminal window to see a live preview of your new Astro website!\n\n(Astro uses `http://localhost:4321` by default if port `4321` is available.)\n\nHere‚Äôs what the Astro ‚ÄúEmpty Project‚Äù starter website should look like in the browser preview:\n\n![A blank white page with the word Astro at the top.](https://docs.astro.build/tutorial/minimal.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can create a new Astro project.\n- I can start the Astro dev server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Getting Started with Visual Studio Code](https://code.visualstudio.com/docs/introvideos/basics) external ‚Äî a video tutorial for installing, setting up and working with VS Code.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Create your first Astro project in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a new project with npm**:\n\n```yaml\nnpm create astro@latest -- --template minimal\n```\n\nThis snippet shows you how to create a new project with npm, which is an important aspect of create your first astro project.\n\n**Create a new project with pnpm**:\n\n```yaml\npnpm create astro@latest --template minimal\n```\n\nThis snippet shows you how to create a new project with pnpm, which is an important aspect of create your first astro project.\n\n**Create a new project with yarn**:\n\n```yaml\nyarn create astro --template minimal\n```\n\nThis snippet shows you how to create a new project with yarn, which is an important aspect of create your first astro project.\n\n**Start the dev server with npm**:\n\n```yaml\nnpm run dev\n```\n\nThis snippet shows you how to start the dev server with npm, which is an important aspect of create your first astro project.\n\n**Start the dev server with pnpm**:\n\n```yaml\npnpm run dev\n```\n\nThis snippet shows you how to start the dev server with pnpm, which is an important aspect of create your first astro project.\n\n**Start the dev server with yarn**:\n\n```yaml\nyarn run dev\n```\n\nThis snippet shows you how to start the dev server with yarn, which is an important aspect of create your first astro project.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "code_examples", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Create your first Astro project in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConfirm 'y' to install 'create-astro' during setup.\n\nChoose the folder created during the setup wizard when opening in VS Code.\n\nInstall the Astro language support extension for better coding experience.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/1-setup/2", "title": "Create your first Astro project", "description": "Get ready to run the `create astro` setup wizard to create a new Astro project, start the Astro server in development (dev) mode, and view a live preview of your website in your browser.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:27", "type": "best_practices", "page_metadata": {"og:url": "https://docs.astro.build/en/tutorial/1-setup/2/", "og:site_name": "Docs", "twitter:card": "summary_large_image", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "og:type": "article", "twitter:site": "astrodotbuild", "ogSiteName": "Docs", "docsearch:language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogImage": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "favicon": "https://docs.astro.build/favicon.ico", "ogUrl": "https://docs.astro.build/en/tutorial/1-setup/2/", "viewport": "width=device-width, initial-scale=1", "title": "Create your first Astro project | Docs", "ogLocale": "en", "language": "en", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:locale": "en", "ogTitle": "Create your first Astro project", "og:title": "Create your first Astro project", "description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nCreate a new project for the Astro tutorial and get ready to code", "og:image": "https://docs.astro.build/open-graph/en/tutorial/1-setup/2.webp", "scrapeId": "1ed8b174-f369-4cf3-86ce-51a1de5c2463", "sourceURL": "https://docs.astro.build/en/tutorial/1-setup/2", "url": "https://docs.astro.build/en/tutorial/1-setup/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Deploy your Astro Site to Clever Cloud is in astro?\n\nAssistant: Sure, I'd be happy to explain Deploy your Astro Site to Clever Cloud in astro.\n\n# Deploy your Astro Site to Clever Cloud\n\nClever Cloud is a European cloud platform that provides automated, scalable services.Here's a quick rundown of what this is about:\n\n## Project Configuration\n\nYou can deploy both fully static and on-demand rendered Astro projects on Clever Cloud. Regardless of your `output` mode (pre-rendered or on-demand), you can choose to deploy as a **static application** which runs using a post-build hook, or as a **Node.js** application, which requires some manual configuration in your `package.json`.\n\n## Scripts\n\nIf you‚Äôre running an on-demand Node.js application, update your `start` script to run the Node server. Applications on Clever Cloud listen on port **8080**.\n\n## Deploy Astro from the Console\n\nTo deploy your Astro project to Clever Cloud, you will need to **create a new application**. The application wizard will walk you through the necessary configuration steps.\n\n1. From the lateral menubar, click **Create** \\> **An application**\n\n2. Choose how to deploy:\n\n   - **Create a brand new app**: to deploy from a local repository with Git\n\nor\n   - **Select a GitHub repository**: to deploy from GitHub\n3. Select a **Node.js** application, or a **static** one.\n\n4. Set up the minimal size for your instance and scalability options. Astro sites can typically be deployed using the **Nano** instance. Depending on your project‚Äôs specifications and dependencies, you may need to adjust accordingly as you watch the metrics from the **Overview** page.\n\n5. Select a **region** to deploy your instance.\n\n6. Skip connecting **Add-ons** to your Clever application unless you‚Äôre using a database or Keycloak.\n\n7. Inject **environment variables**:\n\n   - For **Node.js**, no specific environment variable is needed to deploy Astro if you‚Äôre using **npm**. If you‚Äôre using **yarn** or **pnpm**, set the following environment variables:\n\n   ```\n   CC_NODE_BUILD_TOOL=\"custom\"\n   CC_PRE_BUILD_HOOK=\"npm install -g pnpm && pnpm install\"\n   CC_CUSTOM_BUILD_TOOL=\"pnpm run astro telemetry disable && pnpm build\"\n   ```\n   ```\n   CC_NODE_BUILD_TOOL=\"yarn\"\n   CC_PRE_BUILD_HOOK=\"yarn && yarn run astro telemetry disable && yarn build\"\n   ```\n   - For a **static** application, add these variables:\n   ```\n   CC_POST_BUILD_HOOK=\"npm run build\"\n   CC_PRE_BUILD_HOOK=\"npm install && npm run astro telemetry disable\"\n   CC_WEBROOT=\"/dist\"\n   ```\n   ```\n   CC_POST_BUILD_HOOK=\"pnpm build\"\n   CC_PRE_BUILD_HOOK=\"npm install -g pnpm && pnpm install && pnpm run astro telemetry disable\"\n   CC_WEBROOT=\"/dist\"\n   ```\n   ```\n   CC_POST_BUILD_HOOK=\"yarn build\"\n   CC_PRE_BUILD_HOOK=\"yarn && yarn run astro telemetry disable\"\n   CC_WEBROOT=\"/dist\"\n   ```\n8. **Deploy!** If you‚Äôre deploying from **GitHub**, your deployment should start automatically. If you‚Äôre using **Git**, copy the remote and push on the **master** branch.\n\n## Official Resources\n\n- [Clever Cloud documentation for deploying a Node.js application](https://developers.clever-cloud.com/doc/applications/javascript/nodejs/)\n- [Clever Cloud documentation for deploying Astro as a static application](https://developers.clever-cloud.com/guides/astro/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "overview", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I project configuration in astro?\n\nAssistant: To project configuration in astro, here's what you do:\nYou can deploy both fully static and on-demand rendered Astro projects on Clever Cloud. Regardless of your `output` mode (pre-rendered or on-demand), you can choose to deploy as a **static application** which runs using a post-build hook, or as a **Node.js** application, which requires some manual configuration in your `package.json`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "section_detail", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I scripts in astro?\n\nAssistant: To scripts in astro, here's what you do:\nIf you‚Äôre running an on-demand Node.js application, update your `start` script to run the Node server. Applications on Clever Cloud listen on port **8080**..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "section_detail", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I deploy astro from the console in astro?\n\nAssistant: To deploy astro from the console in astro, here's what you do:\nTo deploy your Astro project to Clever Cloud, you will need to **create a new application**. The application wizard will walk you through the necessary configuration steps.\n\n1. From the lateral menubar, click **Create** \\> **An application**\n\n2. Choose how to deploy:\n\n   - **Create a brand new app**: to deploy from a local repository with Git\n\nor\n   - **Select a GitHub repository**: to deploy from GitHub\n3. Select a **Node.js** application, or a **static** one.\n\n4. Set up the minimal size for your instance and scalability options. Astro sites can typically be deployed using the **Nano** instance. Depending on your project‚Äôs specifications and dependencies, you may need to adjust accordingly as you watch the metrics from the **Overview** page.\n\n5. Select a **region** to deploy your instance.\n\n6. Skip connecting **Add-ons** to your Clever application unless you‚Äôre using a database or Keycloak.\n\n7. Inject **environment variables**:\n\n   - For **Node.js**, no specific environment variable is needed to deploy Astro if you‚Äôre using **npm**. If you‚Äôre using **yarn** or **pnpm**, set the following environment variables:\n\n   ```\n   CC_NODE_BUILD_TOOL=\"custom\"\n   CC_PRE_BUILD_HOOK=\"npm install -g pnpm && pnpm install\"\n   CC_CUSTOM_BUILD_TOOL=\"pnpm run astro telemetry disable && pnpm build\"\n   ```\n   ```\n   CC_NODE_BUILD_TOOL=\"yarn\"\n   CC_PRE_BUILD_HOOK=\"yarn && yarn run astro telemetry disable && yarn build\"\n   ```\n   - For a **static** application, add these variables:\n   ```\n   CC_POST_BUILD_HOOK=\"npm run build\"\n   CC_PRE_BUILD_HOOK=\"npm install && npm run astro telemetry disable\"\n   CC_WEBROOT=\"/dist\"\n   ```\n   ```\n   CC_POST_BUILD_HOOK=\"pnpm build\"\n   CC_PRE_BUILD_HOOK=\"npm install -g pnpm && pnpm install && pnpm run astro telemetry disable\"\n   CC_WEBROOT=\"/dist\"\n   ```\n   ```\n   CC_POST_BUILD_HOOK=\"yarn build\"\n   CC_PRE_BUILD_HOOK=\"yarn && yarn run astro telemetry disable\"\n   CC_WEBROOT=\"/dist\"\n   ```\n8. **Deploy!** If you‚Äôre deploying from **GitHub**, your deployment should start automatically. If you‚Äôre using **Git**, copy the remote and push on the **master** branch..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "section_detail", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- [Clever Cloud documentation for deploying a Node.js application](https://developers.clever-cloud.com/doc/applications/javascript/nodejs/)\n- [Clever Cloud documentation for deploying Astro as a static application](https://developers.clever-cloud.com/guides/astro/).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "section_detail", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Deploy your Astro Site to Clever Cloud in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Node.js Start Script**:\n\n```yaml\n\"scripts\": {\n  \"start\": \"node ./dist/server/entry.mjs --host 0.0.0.0 --port 8080\"\n}\n```\n\nThis snippet shows you how to node.js start script, which is an important aspect of deploy your astro site to clever cloud.\n\n**Node.js Environment Variables for pnpm**:\n\n```yaml\nCC_NODE_BUILD_TOOL=\"custom\"\nCC_PRE_BUILD_HOOK=\"npm install -g pnpm && pnpm install\"\nCC_CUSTOM_BUILD_TOOL=\"pnpm run astro telemetry disable && pnpm build\"\n```\n\nThis snippet shows you how to node.js environment variables for pnpm, which is an important aspect of deploy your astro site to clever cloud.\n\n**Node.js Environment Variables for yarn**:\n\n```yaml\nCC_NODE_BUILD_TOOL=\"yarn\"\nCC_PRE_BUILD_HOOK=\"yarn && yarn run astro telemetry disable && yarn build\"\n```\n\nThis snippet shows you how to node.js environment variables for yarn, which is an important aspect of deploy your astro site to clever cloud.\n\n**Static Application Environment Variables for npm**:\n\n```yaml\nCC_POST_BUILD_HOOK=\"npm run build\"\nCC_PRE_BUILD_HOOK=\"npm install && npm run astro telemetry disable\"\nCC_WEBROOT=\"/dist\"\n```\n\nThis snippet shows you how to static application environment variables for npm, which is an important aspect of deploy your astro site to clever cloud.\n\n**Static Application Environment Variables for pnpm**:\n\n```yaml\nCC_POST_BUILD_HOOK=\"pnpm build\"\nCC_PRE_BUILD_HOOK=\"npm install -g pnpm && pnpm install && pnpm run astro telemetry disable\"\nCC_WEBROOT=\"/dist\"\n```\n\nThis snippet shows you how to static application environment variables for pnpm, which is an important aspect of deploy your astro site to clever cloud.\n\n**Static Application Environment Variables for yarn**:\n\n```yaml\nCC_POST_BUILD_HOOK=\"yarn build\"\nCC_PRE_BUILD_HOOK=\"yarn && yarn run astro telemetry disable\"\nCC_WEBROOT=\"/dist\"\n```\n\nThis snippet shows you how to static application environment variables for yarn, which is an important aspect of deploy your astro site to clever cloud.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "code_examples", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Deploy your Astro Site to Clever Cloud in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAstro sites can typically be deployed using the Nano instance.\n\nMonitor the metrics from the Overview page to adjust instance size and scalability options as needed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/deploy/clever-cloud", "title": "Deploy your Astro Site to Clever Cloud", "description": "Clever Cloud is a European cloud platform that provides automated, scalable services.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:58", "type": "best_practices", "page_metadata": {"description": "How to deploy your Astro site to the web on Clever Cloud.", "og:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "og:type": "article", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "og:title": "Deploy your Astro Site to Clever Cloud", "title": "Deploy your Astro Site to Clever Cloud | Docs", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "ogLocale": "en", "ogDescription": "How to deploy your Astro site to the web on Clever Cloud.", "og:site_name": "Docs", "og:description": "How to deploy your Astro site to the web on Clever Cloud.", "ogSiteName": "Docs", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogTitle": "Deploy your Astro Site to Clever Cloud", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy/clever-cloud.webp", "scrapeId": "5e5b93b6-a18a-416c-b37d-65a2420ad0f3", "sourceURL": "https://docs.astro.build/en/guides/deploy/clever-cloud", "url": "https://docs.astro.build/en/guides/deploy/clever-cloud/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Firebase & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Firebase & Astro in astro.\n\n# Firebase & Astro\n\nFirebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.Here's a quick rundown of what this is about:\n\n## Initializing Firebase in Astro\n\nPrerequisites\n\n- A Firebase project with a web app configured.\n- An Astro project with `output: 'server'` for on-demand rendering enabled.\n- Firebase credentials: You will need two sets of credentials to connect Astro to Firebase:\n  - Web app credentials: These credentials will be used by the client side of your app. You can find them in the Firebase console under _Project settings > General_. Scroll down to the **Your apps** section and click on the **Web app** icon.\n  - Project credentials: These credentials will be used by the server side of your app. You can generate them in the Firebase console under _Project settings > Service accounts > Firebase Admin SDK > Generate new private key_.\n\n## Adding Firebase credentials\n\nTo add your Firebase credentials to Astro, create an `.env` file in the root of your project with the following variables:\n\n```\nFIREBASE_PRIVATE_KEY_ID=YOUR_PRIVATE_KEY_ID\nFIREBASE_PRIVATE_KEY=YOUR_PRIVATE_KEY\nFIREBASE_PROJECT_ID=YOUR_PROJECT_ID\nFIREBASE_CLIENT_EMAIL=YOUR_CLIENT_EMAIL\nFIREBASE_CLIENT_ID=YOUR_CLIENT_ID\nFIREBASE_AUTH_URI=YOUR_AUTH_URI\nFIREBASE_TOKEN_URI=YOUR_TOKEN_URI\nFIREBASE_AUTH_CERT_URL=YOUR_AUTH_CERT_URL\nFIREBASE_CLIENT_CERT_URL=YOUR_CLIENT_CERT_URL\n```\n\nNow, these environment variables are available for use in your project.\n\nIf you would like to have IntelliSense for your Firebase environment variables, edit or create the file `env.d.ts` in your `src/` directory and configure your types:\n\n```\ninterface ImportMetaEnv {\n  readonly FIREBASE_PRIVATE_KEY_ID: string;\n  readonly FIREBASE_PRIVATE_KEY: string;\n  readonly FIREBASE_PROJECT_ID: string;\n  readonly FIREBASE_CLIENT_EMAIL: string;\n  readonly FIREBASE_CLIENT_ID: string;\n  readonly FIREBASE_AUTH_URI: string;\n  readonly FIREBASE_TOKEN_URI: string;\n  readonly FIREBASE_AUTH_CERT_URL: string;\n  readonly FIREBASE_CLIENT_CERT_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\nYour project should now include these new files:\n- Directorysrc/\n- **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n\n## Installing dependencies\n\nTo connect Astro with Firebase, install the following packages using the single command below for your preferred package manager:\n- `firebase` - the Firebase SDK for the client side\n- `firebase-admin` - the Firebase Admin SDK for the server side\n\n```\nnpm install firebase firebase-admin\n```\n```\npnpm add firebase firebase-admin\n```\n```\nyarn add firebase firebase-admin\n```\n\nNext, create a folder named `firebase` in the `src/` directory and add two new files to this folder: `client.ts` and `server.ts`.\n\n## Adding authentication with Firebase\n\nPrerequisites\n\n- An Astro project initialized with Firebase.\n- A Firebase project with email/password authentication enabled in the Firebase console under _Authentication > Sign-in_ method.\n\n## Creating auth server endpoints\n\nFirebase authentication in Astro requires the following three Astro server endpoints:\n- `GET /api/auth/signin` - to sign in a user\n- `GET /api/auth/signout` - to sign out a user\n- `POST /api/auth/register` - to register a user\n\nCreate three endpoints related to authentication in a new directory `src/pages/api/auth/`: `signin.ts`, `signout.ts` and `register.ts`.\n\n## Creating pages\n\nCreate the pages that will use the Firebase endpoints:\n- `src/pages/register` - will contain a form to register a user\n- `src/pages/signin` - will contain a form to sign in a user\n- `src/pages/dashboard` - will contain a dashboard that can only be accessed by authenticated users.\n\n## Adding OAuth providers\n\nTo add OAuth providers to your app, you need to enable them in the Firebase console.\n\nIn the Firebase console, go to the **Authentication** section and click on the **Sign-in method** tab. Then, click on the **Add a new provider** button and enable the providers you want to use.\n\n## Connecting to Firestore database\n\nPrerequisites\n\n- An Astro project initialized with Firebase as described in the Initializing Firebase in Astro section.\n- A Firebase project with a Firestore database.\n\n## Creating the server endpoints\n\nCreate two new files in a new directory `src/pages/api/friends/`: `index.ts` and `[id].ts`. These will create two server endpoints to interact with the Firestore database.\n\n## Creating pages\n\nCreate the pages that will use the Firestore endpoints:\n- `src/pages/add.astro` - will contain a form to add a new friend.\n- `src/pages/edit/[id].astro` - will contain a form to edit a friend and a button to delete a friend.\n- `src/pages/friend/[id].astro` - will contain the details of a friend.\n- `src/pages/dashboard.astro` - will display a list of friends.\n\n## Community Resources\n\n- [Astro and Firebase SSR app example](https://github.com/kevinzunigacuellar/astro-firebase)\n- [Using Firebase Realtime Database in Astro with Vue: A Step-by-Step Guide](https://www.launchfa.st/blog/vue-astro-firebase-realtime-database)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "overview", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I initializing firebase in astro in astro?\n\nAssistant: To initializing firebase in astro in astro, here's what you do:\nPrerequisites\n\n- A Firebase project with a web app configured.\n- An Astro project with `output: 'server'` for on-demand rendering enabled.\n- Firebase credentials: You will need two sets of credentials to connect Astro to Firebase:\n  - Web app credentials: These credentials will be used by the client side of your app. You can find them in the Firebase console under _Project settings > General_. Scroll down to the **Your apps** section and click on the **Web app** icon.\n  - Project credentials: These credentials will be used by the server side of your app. You can generate them in the Firebase console under _Project settings > Service accounts > Firebase Admin SDK > Generate new private key_..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding firebase credentials in astro?\n\nAssistant: To adding firebase credentials in astro, here's what you do:\nTo add your Firebase credentials to Astro, create an `.env` file in the root of your project with the following variables:\n\n```\nFIREBASE_PRIVATE_KEY_ID=YOUR_PRIVATE_KEY_ID\nFIREBASE_PRIVATE_KEY=YOUR_PRIVATE_KEY\nFIREBASE_PROJECT_ID=YOUR_PROJECT_ID\nFIREBASE_CLIENT_EMAIL=YOUR_CLIENT_EMAIL\nFIREBASE_CLIENT_ID=YOUR_CLIENT_ID\nFIREBASE_AUTH_URI=YOUR_AUTH_URI\nFIREBASE_TOKEN_URI=YOUR_TOKEN_URI\nFIREBASE_AUTH_CERT_URL=YOUR_AUTH_CERT_URL\nFIREBASE_CLIENT_CERT_URL=YOUR_CLIENT_CERT_URL\n```\n\nNow, these environment variables are available for use in your project.\n\nIf you would like to have IntelliSense for your Firebase environment variables, edit or create the file `env.d.ts` in your `src/` directory and configure your types:\n\n```\ninterface ImportMetaEnv {\n  readonly FIREBASE_PRIVATE_KEY_ID: string;\n  readonly FIREBASE_PRIVATE_KEY: string;\n  readonly FIREBASE_PROJECT_ID: string;\n  readonly FIREBASE_CLIENT_EMAIL: string;\n  readonly FIREBASE_CLIENT_ID: string;\n  readonly FIREBASE_AUTH_URI: string;\n  readonly FIREBASE_TOKEN_URI: string;\n  readonly FIREBASE_AUTH_CERT_URL: string;\n  readonly FIREBASE_CLIENT_CERT_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\nYour project should now include these new files:\n- Directorysrc/\n- **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installing dependencies in astro?\n\nAssistant: To installing dependencies in astro, here's what you do:\nTo connect Astro with Firebase, install the following packages using the single command below for your preferred package manager:\n- `firebase` - the Firebase SDK for the client side\n- `firebase-admin` - the Firebase Admin SDK for the server side\n\n```\nnpm install firebase firebase-admin\n```\n```\npnpm add firebase firebase-admin\n```\n```\nyarn add firebase firebase-admin\n```\n\nNext, create a folder named `firebase` in the `src/` directory and add two new files to this folder: `client.ts` and `server.ts`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding authentication with firebase in astro?\n\nAssistant: To adding authentication with firebase in astro, here's what you do:\nPrerequisites\n\n- An Astro project initialized with Firebase.\n- A Firebase project with email/password authentication enabled in the Firebase console under _Authentication > Sign-in_ method..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating auth server endpoints in astro?\n\nAssistant: To creating auth server endpoints in astro, here's what you do:\nFirebase authentication in Astro requires the following three Astro server endpoints:\n- `GET /api/auth/signin` - to sign in a user\n- `GET /api/auth/signout` - to sign out a user\n- `POST /api/auth/register` - to register a user\n\nCreate three endpoints related to authentication in a new directory `src/pages/api/auth/`: `signin.ts`, `signout.ts` and `register.ts`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating pages in astro?\n\nAssistant: To creating pages in astro, here's what you do:\nCreate the pages that will use the Firebase endpoints:\n- `src/pages/register` - will contain a form to register a user\n- `src/pages/signin` - will contain a form to sign in a user\n- `src/pages/dashboard` - will contain a dashboard that can only be accessed by authenticated users..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding oauth providers in astro?\n\nAssistant: To adding oauth providers in astro, here's what you do:\nTo add OAuth providers to your app, you need to enable them in the Firebase console.\n\nIn the Firebase console, go to the **Authentication** section and click on the **Sign-in method** tab. Then, click on the **Add a new provider** button and enable the providers you want to use..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I connecting to firestore database in astro?\n\nAssistant: To connecting to firestore database in astro, here's what you do:\nPrerequisites\n\n- An Astro project initialized with Firebase as described in the Initializing Firebase in Astro section.\n- A Firebase project with a Firestore database..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating the server endpoints in astro?\n\nAssistant: To creating the server endpoints in astro, here's what you do:\nCreate two new files in a new directory `src/pages/api/friends/`: `index.ts` and `[id].ts`. These will create two server endpoints to interact with the Firestore database..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating pages in astro?\n\nAssistant: To creating pages in astro, here's what you do:\nCreate the pages that will use the Firestore endpoints:\n- `src/pages/add.astro` - will contain a form to add a new friend.\n- `src/pages/edit/[id].astro` - will contain a form to edit a friend and a button to delete a friend.\n- `src/pages/friend/[id].astro` - will contain the details of a friend.\n- `src/pages/dashboard.astro` - will display a list of friends..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community resources in astro?\n\nAssistant: To community resources in astro, here's what you do:\n- [Astro and Firebase SSR app example](https://github.com/kevinzunigacuellar/astro-firebase)\n- [Using Firebase Realtime Database in Astro with Vue: A Step-by-Step Guide](https://www.launchfa.st/blog/vue-astro-firebase-realtime-database).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Firebase & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding Firebase credentials**:\n\n```yaml\nFIREBASE_PRIVATE_KEY_ID=YOUR_PRIVATE_KEY_ID\nFIREBASE_PRIVATE_KEY=YOUR_PRIVATE_KEY\nFIREBASE_PROJECT_ID=YOUR_PROJECT_ID\nFIREBASE_CLIENT_EMAIL=YOUR_CLIENT_EMAIL\nFIREBASE_CLIENT_ID=YOUR_CLIENT_ID\nFIREBASE_AUTH_URI=YOUR_AUTH_URI\nFIREBASE_TOKEN_URI=YOUR_TOKEN_URI\nFIREBASE_AUTH_CERT_URL=YOUR_AUTH_CERT_URL\nFIREBASE_CLIENT_CERT_URL=YOUR_CLIENT_CERT_URL\n```\n\nThis snippet shows you how to adding firebase credentials, which is an important aspect of firebase & astro.\n\n**IntelliSense for Firebase environment variables**:\n\n```yaml\ninterface ImportMetaEnv {\n  readonly FIREBASE_PRIVATE_KEY_ID: string;\n  readonly FIREBASE_PRIVATE_KEY: string;\n  readonly FIREBASE_PROJECT_ID: string;\n  readonly FIREBASE_CLIENT_EMAIL: string;\n  readonly FIREBASE_CLIENT_ID: string;\n  readonly FIREBASE_AUTH_URI: string;\n  readonly FIREBASE_TOKEN_URI: string;\n  readonly FIREBASE_AUTH_CERT_URL: string;\n  readonly FIREBASE_CLIENT_CERT_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\nThis snippet shows you how to intellisense for firebase environment variables, which is an important aspect of firebase & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "code_examples", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Firebase & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have a Firebase project with a web app configured before starting.\n\nUse environment variables to store sensitive Firebase credentials securely.\n\nEnable email/password authentication in Firebase console for user management.\n\nCreate separate server endpoints for authentication and Firestore interactions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/backend/google-firebase", "title": "Firebase & Astro", "description": "Firebase is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:58:44", "type": "best_practices", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "title": "Firebase & Astro | Docs", "ogSiteName": "Docs", "og:description": "Add a backend to your project with Firebase", "ogUrl": "https://docs.astro.build/en/guides/backend/google-firebase/", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "language": "en", "ogLocale": "en", "ogTitle": "Firebase & Astro", "twitter:card": "summary_large_image", "ogImage": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "og:title": "Firebase & Astro", "og:locale": "en", "og:type": "article", "ogDescription": "Add a backend to your project with Firebase", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "description": "Add a backend to your project with Firebase", "docsearch:language": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/backend/google-firebase.webp", "twitter:site": "astrodotbuild", "og:url": "https://docs.astro.build/en/guides/backend/google-firebase/", "scrapeId": "1eabcee7-20a5-4818-b394-1ca4f56d977c", "sourceURL": "https://docs.astro.build/en/guides/backend/google-firebase", "url": "https://docs.astro.build/en/guides/backend/google-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Build a custom image component is in astro?\n\nAssistant: Sure, I'd be happy to explain Build a custom image component in astro.\n\n# Build a custom image component\n\nAstro provides two built-in components that you can use to display and optimize your images. The `<Picture>` component allows you to display responsive images and work with different formats and sizes. The `<Image>` component will optimize your images and allow you to pass in different formats and quality properties. When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create a custom component.Here's a quick rundown of what this is about:\n\n## Recipe\n\n1. Create a new Astro component and import the `getImage()` function\n\n```javascript\n---\nimport { getImage } from \"astro:assets\";\n---\n```\n\n2. Create a new component for your custom image. `MyCustomComponent.astro` will receive three `props` from `Astro.props`. The `mobileImgUrl` and `desktopImgUrl` props are used for creating your image at different viewport sizes. The `alt` prop is used for the image‚Äôs alt text. These props will be passed wherever you render your custom image components. Add the following imports and define the props that you will use in your component. You can also use TypeScript to type the props.\n\n```javascript\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n---\n```\n\n3. Define each of your responsive images by calling the `getImage()` function with your desired properties.\n\n```javascript\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n\nconst mobileImg = await getImage({\n    src: mobileImgUrl,\n    format: \"webp\",\n    width: 200,\n    height: 200,\n});\n\nconst desktopImg = await getImage({\n    src: desktopImgUrl,\n    format: \"webp\",\n    width: 800,\n    height: 200,\n});\n---\n```\n\n4. Create a `<picture>` element that generates a `srcset` with your different images based on your desired media queries.\n\n```javascript\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n\nconst mobileImg = await getImage({\n    src: mobileImgUrl,\n    format: \"webp\",\n    width: 200,\n    height: 200,\n});\n\nconst desktopImg = await getImage({\n    src: desktopImgUrl,\n    format: \"webp\",\n    width: 800,\n    height: 200,\n});\n---\n\n<picture>\n    <source media=\"(max-width: 799px)\" srcset={mobileImg.src} />\n    <source media=\"(min-width: 800px)\" srcset={desktopImg.src} />\n    <img src={desktopImg.src} alt={alt} />\n</picture>\n```\n\n5. Import and use `<MyCustomImageComponent />` in any `.astro` file. Be sure to pass the necessary props for generating two different images at the different viewport sizes:\n\n```javascript\n---\nimport MyCustomImageComponent from \"../components/MyCustomImageComponent.astro\";\nimport mobileImage from \"../images/mobile-profile-image.jpg\";\nimport desktopImage from \"../images/desktop-profile-image.jpg\";\n---\n\n<MyCustomImageComponent\n    mobileImgUrl={mobileImage}\n    desktopImgUrl={desktopImage}\n    alt=\"user profile picture\"\n/>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-custom-img-component", "title": "Build a custom image component", "description": "Astro provides two built-in components that you can use to display and optimize your images. The `<Picture>` component allows you to display responsive images and work with different formats and sizes. The `<Image>` component will optimize your images and allow you to pass in different formats and quality properties. When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create a custom component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:11:27", "type": "overview", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "twitter:card": "summary_large_image", "og:type": "article", "og:site_name": "Docs", "og:locale": "en", "og:url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to build a custom image component that supports media queries using the getImage function.", "og:title": "Build a custom image component", "ogTitle": "Build a custom image component", "ogLocale": "en", "description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogUrl": "https://docs.astro.build/en/recipes/build-custom-img-component/", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "language": "en", "title": "Build a custom image component | Docs", "scrapeId": "86894e73-40b8-4cfe-9973-bcd1dc65dbac", "sourceURL": "https://docs.astro.build/en/recipes/build-custom-img-component", "url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I recipe in astro?\n\nAssistant: To recipe in astro, here's what you do:\n1. Create a new Astro component and import the `getImage()` function\n\n```javascript\n---\nimport { getImage } from \"astro:assets\";\n---\n```\n\n2. Create a new component for your custom image. `MyCustomComponent.astro` will receive three `props` from `Astro.props`. The `mobileImgUrl` and `desktopImgUrl` props are used for creating your image at different viewport sizes. The `alt` prop is used for the image‚Äôs alt text. These props will be passed wherever you render your custom image components. Add the following imports and define the props that you will use in your component. You can also use TypeScript to type the props.\n\n```javascript\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n---\n```\n\n3. Define each of your responsive images by calling the `getImage()` function with your desired properties.\n\n```javascript\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n\nconst mobileImg = await getImage({\n    src: mobileImgUrl,\n    format: \"webp\",\n    width: 200,\n    height: 200,\n});\n\nconst desktopImg = await getImage({\n    src: desktopImgUrl,\n    format: \"webp\",\n    width: 800,\n    height: 200,\n});\n---\n```\n\n4. Create a `<picture>` element that generates a `srcset` with your different images based on your desired media queries.\n\n```javascript\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n\nconst mobileImg = await getImage({\n    src: mobileImgUrl,\n    format: \"webp\",\n    width: 200,\n    height: 200,\n});\n\nconst desktopImg = await getImage({\n    src: desktopImgUrl,\n    format: \"webp\",\n    width: 800,\n    height: 200,\n});\n---\n\n<picture>\n    <source media=\"(max-width: 799px)\" srcset={mobileImg.src} />\n    <source media=\"(min-width: 800px)\" srcset={desktopImg.src} />\n    <img src={desktopImg.src} alt={alt} />\n</picture>\n```\n\n5. Import and use `<MyCustomImageComponent />` in any `.astro` file. Be sure to pass the necessary props for generating two different images at the different viewport sizes:\n\n```javascript\n---\nimport MyCustomImageComponent from \"../components/MyCustomImageComponent.astro\";\nimport mobileImage from \"../images/mobile-profile-image.jpg\";\nimport desktopImage from \"../images/desktop-profile-image.jpg\";\n---\n\n<MyCustomImageComponent\n    mobileImgUrl={mobileImage}\n    desktopImgUrl={desktopImage}\n    alt=\"user profile picture\"\n/>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-custom-img-component", "title": "Build a custom image component", "description": "Astro provides two built-in components that you can use to display and optimize your images. The `<Picture>` component allows you to display responsive images and work with different formats and sizes. The `<Image>` component will optimize your images and allow you to pass in different formats and quality properties. When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create a custom component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:11:27", "type": "section_detail", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "twitter:card": "summary_large_image", "og:type": "article", "og:site_name": "Docs", "og:locale": "en", "og:url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to build a custom image component that supports media queries using the getImage function.", "og:title": "Build a custom image component", "ogTitle": "Build a custom image component", "ogLocale": "en", "description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogUrl": "https://docs.astro.build/en/recipes/build-custom-img-component/", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "language": "en", "title": "Build a custom image component | Docs", "scrapeId": "86894e73-40b8-4cfe-9973-bcd1dc65dbac", "sourceURL": "https://docs.astro.build/en/recipes/build-custom-img-component", "url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Build a custom image component in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Importing getImage function**:\n\n```yaml\n---\nimport { getImage } from \"astro:assets\";\n---\n```\n\nThis snippet shows you how to importing getimage function, which is an important aspect of build a custom image component.\n\n**Defining Props in MyCustomComponent.astro**:\n\n```yaml\n---\nimport type { ImageMetadata } from \"astro\";\nimport { getImage } from \"astro:assets\";\n\ninterface Props {\n    mobileImgUrl: string | ImageMetadata;\n    desktopImgUrl: string | ImageMetadata;\n    alt: string;\n}\n\nconst { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n---\n```\n\nThis snippet shows you how to defining props in mycustomcomponent.astro, which is an important aspect of build a custom image component.\n\n**Getting Responsive Images**:\n\n```yaml\n---\nconst mobileImg = await getImage({\n    src: mobileImgUrl,\n    format: \"webp\",\n    width: 200,\n    height: 200,\n});\n\nconst desktopImg = await getImage({\n    src: desktopImgUrl,\n    format: \"webp\",\n    width: 800,\n    height: 200,\n});\n---\n```\n\nThis snippet shows you how to getting responsive images, which is an important aspect of build a custom image component.\n\n**Creating Picture Element**:\n\n```yaml\n<picture>\n    <source media=\"(max-width: 799px)\" srcset={mobileImg.src} />\n    <source media=\"(min-width: 800px)\" srcset={desktopImg.src} />\n    <img src={desktopImg.src} alt={alt} />\n</picture>\n```\n\nThis snippet shows you how to creating picture element, which is an important aspect of build a custom image component.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-custom-img-component", "title": "Build a custom image component", "description": "Astro provides two built-in components that you can use to display and optimize your images. The `<Picture>` component allows you to display responsive images and work with different formats and sizes. The `<Image>` component will optimize your images and allow you to pass in different formats and quality properties. When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create a custom component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:11:27", "type": "code_examples", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "twitter:card": "summary_large_image", "og:type": "article", "og:site_name": "Docs", "og:locale": "en", "og:url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to build a custom image component that supports media queries using the getImage function.", "og:title": "Build a custom image component", "ogTitle": "Build a custom image component", "ogLocale": "en", "description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogUrl": "https://docs.astro.build/en/recipes/build-custom-img-component/", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "language": "en", "title": "Build a custom image component | Docs", "scrapeId": "86894e73-40b8-4cfe-9973-bcd1dc65dbac", "sourceURL": "https://docs.astro.build/en/recipes/build-custom-img-component", "url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Build a custom image component in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `getImage()` function to create custom image components when built-in components do not meet your needs.\n\nEnsure to pass the correct props for responsive images based on viewport sizes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/recipes/build-custom-img-component", "title": "Build a custom image component", "description": "Astro provides two built-in components that you can use to display and optimize your images. The `<Picture>` component allows you to display responsive images and work with different formats and sizes. The `<Image>` component will optimize your images and allow you to pass in different formats and quality properties. When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create a custom component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:11:27", "type": "best_practices", "page_metadata": {"twitter:site": "astrodotbuild", "og:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "twitter:card": "summary_large_image", "og:type": "article", "og:site_name": "Docs", "og:locale": "en", "og:url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "favicon": "https://docs.astro.build/favicon.ico", "ogDescription": "Learn how to build a custom image component that supports media queries using the getImage function.", "og:title": "Build a custom image component", "ogTitle": "Build a custom image component", "ogLocale": "en", "description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogSiteName": "Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to build a custom image component that supports media queries using the getImage function.", "ogUrl": "https://docs.astro.build/en/recipes/build-custom-img-component/", "twitter:image": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "docsearch:language": "en", "ogImage": "https://docs.astro.build/open-graph/en/recipes/build-custom-img-component.webp", "language": "en", "title": "Build a custom image component | Docs", "scrapeId": "86894e73-40b8-4cfe-9973-bcd1dc65dbac", "sourceURL": "https://docs.astro.build/en/recipes/build-custom-img-component", "url": "https://docs.astro.build/en/recipes/build-custom-img-component/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what @astrojs/solid-js is in astro?\n\nAssistant: Sure, I'd be happy to explain @astrojs/solid-js in astro.\n\n# @astrojs/solid-js\n\nThis Astro integration enables rendering and client-side hydration for your SolidJS components.Here's a quick rundown of what this is about:\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/solid-js`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add solid\n```\n\n```\n\npnpm astro add solid\n```\n\n```\n\nyarn astro add solid\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below.\n\n## Manual Install\n\nFirst, install the `@astrojs/solid-js` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/solid-js\n```\n\n```\n\npnpm add @astrojs/solid-js\n```\n\n```\n\nyarn add @astrojs/solid-js\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'solid-js'` (or similar) warning when you start up Astro, you‚Äôll need to install SolidJS:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install solid-js\n```\n\n```\n\npnpm add solid-js\n```\n\n```\n\nyarn add solid-js\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport solidJs from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [solidJs()],\n\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"preserve\",\n\n    \"jsxImportSource\": \"solid-js\"\n\n  }\n\n}\n```\n\n## Getting started\n\nTo use your first SolidJS component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together\n\n## Configuration\n\n\n\n## devtools\n\nYou can enable Solid DevTools in development by passing an object with `devtools: true` to your `solid()` integration config and adding `solid-devtools` to your project dependencies:\n\n```\nnpm install solid-devtools\n```\n\n```\npnpm add solid-devtools\n```\n\n```\nyarn add solid-devtools\n```\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [solid({ devtools: true })],\n\n});\n```\n\n## Options\n\n\n\n## Combining multiple JSX frameworks\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nimport react from '@astrojs/react';\n\nimport svelte from '@astrojs/svelte';\n\nimport vue from '@astrojs/vue';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // Enable many frameworks to support all different kinds of components.\n\n  // No `include` is needed if you are only using a single JSX framework!\n\n  integrations: [\n\n    preact({\n\n      include: ['**/preact/*'],\n\n    }),\n\n    react({\n\n      include: ['**/react/*'],\n\n    }),\n\n    solid({\n\n      include: ['**/solid/*', '**/node_modules/@suid/material/**'],\n\n    }),\n\n  ],\n\n});\n```\n\n## Usage\n\nUse a SolidJS component as you would any UI framework component.\n\n## Suspense Boundaries\n\nIn order to support Solid Resources and Lazy Components without excessive configuration, server-only and hydrating components are automatically wrapped in top-level Suspense boundaries and rendered on the server using the `renderToStringAsync` function. Therefore, you do not need to add a top-level Suspense boundary around async components.\n\nFor example, you can use Solid‚Äôs `createResource` to fetch async remote data on the server. The remote data will be included in the initial server-rendered HTML from Astro:\n\n```\nfunction CharacterName() {\n\n  const [name] = createResource(() =>\n\n    fetch('https://swapi.dev/api/people/1')\n\n      .then((result) => result.json())\n\n      .then((data) => data.name)\n\n  );\n\n  return (\n\n    <>\n\n      <h2>Name:</h2>\n\n      {/* Luke Skywalker */}\n\n      <div>{name()}</div>\n\n    </>\n\n  );\n\n}\n```\n\nSimilarly, Solid‚Äôs Lazy Components will also be resolved and their HTML will be included in the initial server-rendered page.\n\nNon-hydrating `client:only` components are not automatically wrapped in Suspense boundaries.\n\nFeel free to add additional Suspense boundaries according to your preference.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "overview", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can install integrations manually instead.\n\nTo install `@astrojs/solid-js`, run the following from your project directory and follow the prompts:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpx astro add solid\n```\n\n```\n\npnpm astro add solid\n```\n\n```\n\nyarn astro add solid\n```\n\nIf you run into any issues, feel free to report them to us on GitHub and try the manual installation steps below..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I manual install in astro?\n\nAssistant: To manual install in astro, here's what you do:\nFirst, install the `@astrojs/solid-js` package:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install @astrojs/solid-js\n```\n\n```\n\npnpm add @astrojs/solid-js\n```\n\n```\n\nyarn add @astrojs/solid-js\n```\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package 'solid-js'` (or similar) warning when you start up Astro, you‚Äôll need to install SolidJS:\n\n- npm\n- pnpm\n- Yarn\n\n```\n\nnpm install solid-js\n```\n\n```\n\npnpm add solid-js\n```\n\n```\n\nyarn add solid-js\n```\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport solidJs from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [solidJs()],\n\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"preserve\",\n\n    \"jsxImportSource\": \"solid-js\"\n\n  }\n\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\nTo use your first SolidJS component in Astro, head to our UI framework documentation. You‚Äôll explore:\n\n- üì¶ how framework components are loaded,\n- üíß client-side hydration options, and\n- ü§ù opportunities to mix and nest frameworks together.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I configuration in astro?\n\nAssistant: To configuration in astro, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I devtools in astro?\n\nAssistant: To devtools in astro, here's what you do:\nYou can enable Solid DevTools in development by passing an object with `devtools: true` to your `solid()` integration config and adding `solid-devtools` to your project dependencies:\n\n```\nnpm install solid-devtools\n```\n\n```\npnpm add solid-devtools\n```\n\n```\nyarn add solid-devtools\n```\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [solid({ devtools: true })],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I options in astro?\n\nAssistant: To options in astro, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I combining multiple jsx frameworks in astro?\n\nAssistant: To combining multiple jsx frameworks in astro, here's what you do:\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```\nimport { defineConfig } from 'astro/config';\n\nimport preact from '@astrojs/preact';\n\nimport react from '@astrojs/react';\n\nimport svelte from '@astrojs/svelte';\n\nimport vue from '@astrojs/vue';\n\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // Enable many frameworks to support all different kinds of components.\n\n  // No `include` is needed if you are only using a single JSX framework!\n\n  integrations: [\n\n    preact({\n\n      include: ['**/preact/*'],\n\n    }),\n\n    react({\n\n      include: ['**/react/*'],\n\n    }),\n\n    solid({\n\n      include: ['**/solid/*', '**/node_modules/@suid/material/**'],\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I usage in astro?\n\nAssistant: To usage in astro, here's what you do:\nUse a SolidJS component as you would any UI framework component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I suspense boundaries in astro?\n\nAssistant: To suspense boundaries in astro, here's what you do:\nIn order to support Solid Resources and Lazy Components without excessive configuration, server-only and hydrating components are automatically wrapped in top-level Suspense boundaries and rendered on the server using the `renderToStringAsync` function. Therefore, you do not need to add a top-level Suspense boundary around async components.\n\nFor example, you can use Solid‚Äôs `createResource` to fetch async remote data on the server. The remote data will be included in the initial server-rendered HTML from Astro:\n\n```\nfunction CharacterName() {\n\n  const [name] = createResource(() =>\n\n    fetch('https://swapi.dev/api/people/1')\n\n      .then((result) => result.json())\n\n      .then((data) => data.name)\n\n  );\n\n  return (\n\n    <>\n\n      <h2>Name:</h2>\n\n      {/* Luke Skywalker */}\n\n      <div>{name()}</div>\n\n    </>\n\n  );\n\n}\n```\n\nSimilarly, Solid‚Äôs Lazy Components will also be resolved and their HTML will be included in the initial server-rendered page.\n\nNon-hydrating `client:only` components are not automatically wrapped in Suspense boundaries.\n\nFeel free to add additional Suspense boundaries according to your preference..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "section_detail", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for @astrojs/solid-js in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Command**:\n\n```yaml\nnpx astro add solid\n```\n\nThis snippet shows you how to installation command, which is an important aspect of @astrojs/solid-js.\n\n**Manual Install Command**:\n\n```yaml\nnpm install @astrojs/solid-js\n```\n\nThis snippet shows you how to manual install command, which is an important aspect of @astrojs/solid-js.\n\n**SolidJS Installation Command**:\n\n```yaml\nnpm install solid-js\n```\n\nThis snippet shows you how to solidjs installation command, which is an important aspect of @astrojs/solid-js.\n\n**Integration Configuration**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport solidJs from '@astrojs/solid-js';\n\nexport default defineConfig({\n\n  // ...\n\n  integrations: [solidJs()],\n\n});\n```\n\nThis snippet shows you how to integration configuration, which is an important aspect of @astrojs/solid-js.\n\n**TypeScript Configuration**:\n\n```yaml\n{\n\n  \"extends\": \"astro/tsconfigs/strict\",\n\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n\n  \"exclude\": [\"dist\"],\n\n  \"compilerOptions\": {\n\n    \"jsx\": \"preserve\",\n\n    \"jsxImportSource\": \"solid-js\"\n\n  }\n\n}\n```\n\nThis snippet shows you how to typescript configuration, which is an important aspect of @astrojs/solid-js.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "code_examples", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using @astrojs/solid-js in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you run into any issues, feel free to report them to us on GitHub.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "title": "@astrojs/solid-js", "description": "This Astro integration enables rendering and client-side hydration for your SolidJS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:13:57", "type": "best_practices", "page_metadata": {"ogImage": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogSiteName": "Docs", "og:locale": "en", "description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "docsearch:language": "en", "twitter:site": "astrodotbuild", "ogTitle": "@astrojs/solid-js", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:title": "@astrojs/solid-js", "favicon": "https://docs.astro.build/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "ogLocale": "en", "og:site_name": "Docs", "language": "en", "og:type": "article", "ogUrl": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "og:url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "twitter:image": "https://docs.astro.build/open-graph/en/guides/integrations-guide/solid-js.webp", "title": "@astrojs/solid-js | Docs", "viewport": "width=device-width, initial-scale=1", "og:description": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "ogDescription": "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", "scrapeId": "5a91d222-0478-4c19-a531-17ca90aa6cfe", "sourceURL": "https://docs.astro.build/en/guides/integrations-guide/solid-js", "url": "https://docs.astro.build/en/guides/integrations-guide/solid-js/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what TypeScript is in astro?\n\nAssistant: Sure, I'd be happy to explain TypeScript in astro.\n\n# TypeScript\n\nAstro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.Here's a quick rundown of what this is about:\n\n## Setup\n\nAstro starter projects include a `tsconfig.json` file in your project. Even if you don‚Äôt write TypeScript code, this file is important so that tools like Astro and VS Code know how to understand your project. Some features (like npm package imports) aren‚Äôt fully supported in the editor without a `tsconfig.json` file. If you install Astro manually, be sure to create this file yourself.\n\n## TSConfig templates\n\nThree extensible `tsconfig.json` templates are included in Astro: `base`, `strict`, and `strictest`. The `base` template enables support for modern JavaScript features and is also used as a basis for the other templates. We recommend using `strict` or `strictest` if you plan to write TypeScript in your project. You can view and compare the three template configurations at [astro/tsconfigs/](https://github.com/withastro/astro/blob/main/packages/astro/tsconfigs/).\n\nTo inherit from one of the templates, use [the `extends` setting](https://www.typescriptlang.org/tsconfig#extends):\n\n```\n{\n  \"extends\": \"astro/tsconfigs/base\"\n}\n```\n\nAdditionally, we recommend setting `include` and `exclude` as follows to benefit from Astro types and avoid checking built files:\n\n```\n{\n  \"extends\": \"astro/tsconfigs/base\",\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n  \"exclude\": [\"dist\"]\n}\n```\n\nYou can create `src/env.d.ts` as a convention for adding custom types declarations, or to benefit from Astro types if you don‚Äôt have a `tsconfig.json`:\n\n```\n// Custom types declarations\ndeclare var myString: string;\n// Astro types, not necessary if you already have a tsconfig.json\n/// <reference path=\"../.astro/types.d.ts\" />\n```\n\n## TypeScript editor plugin\n\nThe [Astro TypeScript plugin](https://www.npmjs.com/package/@astrojs/ts-plugin) can be installed separately when you are not using the [official Astro VS Code extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This plugin is automatically installed and configured by the VSCode extension, and you do not need to install both.\nThis plugin runs only in the editor. When running `tsc` in the terminal, `.astro` files are ignored entirely. Instead, you can use [the `astro check` CLI command](https://docs.astro.build/en/reference/cli-reference/#astro-check) to check both `.astro` and `.ts` files.\nThis plugin also supports importing `.astro` files from `.ts` files (which can be useful for re-exporting).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/typescript", "title": "TypeScript", "description": "Astro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:14:25", "type": "overview", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:title": "TypeScript", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "TypeScript", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "og:site_name": "Docs", "og:description": "Learn how to use Astro's built-in TypeScript support.", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/typescript/", "ogDescription": "Learn how to use Astro's built-in TypeScript support.", "description": "Learn how to use Astro's built-in TypeScript support.", "title": "TypeScript | Docs", "language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/typescript/", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "1b97be50-28b1-4225-9ff5-4a3969006ad6", "sourceURL": "https://docs.astro.build/en/guides/typescript", "url": "https://docs.astro.build/en/guides/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I setup in astro?\n\nAssistant: To setup in astro, here's what you do:\nAstro starter projects include a `tsconfig.json` file in your project. Even if you don‚Äôt write TypeScript code, this file is important so that tools like Astro and VS Code know how to understand your project. Some features (like npm package imports) aren‚Äôt fully supported in the editor without a `tsconfig.json` file. If you install Astro manually, be sure to create this file yourself..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/typescript", "title": "TypeScript", "description": "Astro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:14:25", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:title": "TypeScript", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "TypeScript", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "og:site_name": "Docs", "og:description": "Learn how to use Astro's built-in TypeScript support.", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/typescript/", "ogDescription": "Learn how to use Astro's built-in TypeScript support.", "description": "Learn how to use Astro's built-in TypeScript support.", "title": "TypeScript | Docs", "language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/typescript/", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "1b97be50-28b1-4225-9ff5-4a3969006ad6", "sourceURL": "https://docs.astro.build/en/guides/typescript", "url": "https://docs.astro.build/en/guides/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I tsconfig templates in astro?\n\nAssistant: To tsconfig templates in astro, here's what you do:\nThree extensible `tsconfig.json` templates are included in Astro: `base`, `strict`, and `strictest`. The `base` template enables support for modern JavaScript features and is also used as a basis for the other templates. We recommend using `strict` or `strictest` if you plan to write TypeScript in your project. You can view and compare the three template configurations at [astro/tsconfigs/](https://github.com/withastro/astro/blob/main/packages/astro/tsconfigs/).\n\nTo inherit from one of the templates, use [the `extends` setting](https://www.typescriptlang.org/tsconfig#extends):\n\n```\n{\n  \"extends\": \"astro/tsconfigs/base\"\n}\n```\n\nAdditionally, we recommend setting `include` and `exclude` as follows to benefit from Astro types and avoid checking built files:\n\n```\n{\n  \"extends\": \"astro/tsconfigs/base\",\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n  \"exclude\": [\"dist\"]\n}\n```\n\nYou can create `src/env.d.ts` as a convention for adding custom types declarations, or to benefit from Astro types if you don‚Äôt have a `tsconfig.json`:\n\n```\n// Custom types declarations\ndeclare var myString: string;\n// Astro types, not necessary if you already have a tsconfig.json\n/// <reference path=\"../.astro/types.d.ts\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/typescript", "title": "TypeScript", "description": "Astro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:14:25", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:title": "TypeScript", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "TypeScript", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "og:site_name": "Docs", "og:description": "Learn how to use Astro's built-in TypeScript support.", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/typescript/", "ogDescription": "Learn how to use Astro's built-in TypeScript support.", "description": "Learn how to use Astro's built-in TypeScript support.", "title": "TypeScript | Docs", "language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/typescript/", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "1b97be50-28b1-4225-9ff5-4a3969006ad6", "sourceURL": "https://docs.astro.build/en/guides/typescript", "url": "https://docs.astro.build/en/guides/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I typescript editor plugin in astro?\n\nAssistant: To typescript editor plugin in astro, here's what you do:\nThe [Astro TypeScript plugin](https://www.npmjs.com/package/@astrojs/ts-plugin) can be installed separately when you are not using the [official Astro VS Code extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This plugin is automatically installed and configured by the VSCode extension, and you do not need to install both.\nThis plugin runs only in the editor. When running `tsc` in the terminal, `.astro` files are ignored entirely. Instead, you can use [the `astro check` CLI command](https://docs.astro.build/en/reference/cli-reference/#astro-check) to check both `.astro` and `.ts` files.\nThis plugin also supports importing `.astro` files from `.ts` files (which can be useful for re-exporting)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/typescript", "title": "TypeScript", "description": "Astro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:14:25", "type": "section_detail", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:title": "TypeScript", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "TypeScript", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "og:site_name": "Docs", "og:description": "Learn how to use Astro's built-in TypeScript support.", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/typescript/", "ogDescription": "Learn how to use Astro's built-in TypeScript support.", "description": "Learn how to use Astro's built-in TypeScript support.", "title": "TypeScript | Docs", "language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/typescript/", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "1b97be50-28b1-4225-9ff5-4a3969006ad6", "sourceURL": "https://docs.astro.build/en/guides/typescript", "url": "https://docs.astro.build/en/guides/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for TypeScript in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Astro TypeScript plugin**:\n\n```yaml\nnpm install @astrojs/ts-plugin\n```\n\nThis snippet shows you how to install astro typescript plugin, which is an important aspect of typescript.\n\n**Install Astro TypeScript plugin with pnpm**:\n\n```yaml\npnpm add @astrojs/ts-plugin\n```\n\nThis snippet shows you how to install astro typescript plugin with pnpm, which is an important aspect of typescript.\n\n**Install Astro TypeScript plugin with Yarn**:\n\n```yaml\nyarn add @astrojs/ts-plugin\n```\n\nThis snippet shows you how to install astro typescript plugin with yarn, which is an important aspect of typescript.\n\n**Add TypeScript plugin to tsconfig.json**:\n\n```yaml\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"name\": \"@astrojs/ts-plugin\"\n      }\n    ]\n  }\n}\n```\n\nThis snippet shows you how to add typescript plugin to tsconfig.json, which is an important aspect of typescript.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/typescript", "title": "TypeScript", "description": "Astro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:14:25", "type": "code_examples", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:title": "TypeScript", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "TypeScript", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "og:site_name": "Docs", "og:description": "Learn how to use Astro's built-in TypeScript support.", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/typescript/", "ogDescription": "Learn how to use Astro's built-in TypeScript support.", "description": "Learn how to use Astro's built-in TypeScript support.", "title": "TypeScript | Docs", "language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/typescript/", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "1b97be50-28b1-4225-9ff5-4a3969006ad6", "sourceURL": "https://docs.astro.build/en/guides/typescript", "url": "https://docs.astro.build/en/guides/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using TypeScript in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse strict or strictest tsconfig templates if you plan to write TypeScript in your project.\n\nSet include and exclude in tsconfig.json to benefit from Astro types and avoid checking built files.\n\nUse explicit type imports and exports whenever possible to avoid edge cases with Astro‚Äôs bundler.\n\nTo see type errors in your editor, ensure the Astro VS Code extension is installed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/typescript", "title": "TypeScript", "description": "Astro ships with built-in support for TypeScript. You can import .ts and .tsx files in your Astro project, write TypeScript code directly inside your Astro component, and even use an astro.config.ts file for your Astro configuration if you like.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:14:25", "type": "best_practices", "page_metadata": {"favicon": "https://docs.astro.build/favicon.ico", "og:title": "TypeScript", "ogLocale": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogTitle": "TypeScript", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "og:site_name": "Docs", "og:description": "Learn how to use Astro's built-in TypeScript support.", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/typescript/", "ogDescription": "Learn how to use Astro's built-in TypeScript support.", "description": "Learn how to use Astro's built-in TypeScript support.", "title": "TypeScript | Docs", "language": "en", "og:type": "article", "og:url": "https://docs.astro.build/en/guides/typescript/", "og:locale": "en", "og:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/typescript.webp", "docsearch:language": "en", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "scrapeId": "1b97be50-28b1-4225-9ff5-4a3969006ad6", "sourceURL": "https://docs.astro.build/en/guides/typescript", "url": "https://docs.astro.build/en/guides/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Astro render context is in astro?\n\nAssistant: Sure, I'd be happy to explain Astro render context in astro.\n\n# Astro render context\n\nWhen rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.Here's a quick rundown of what this is about:\n\n## The context object\n\nThe following properties are available on the `Astro` global (e.g. `Astro.props`, `Astro.redirect()`) and are also available on the context object (e.g. `context.props`, `context.redirect()`) passed to endpoint functions and middleware.\n\n## props\n\n`props` is an object containing any values that have been passed as [component attributes](https://docs.astro.build/en/basics/astro-components/#component-props). \n\n```\nconst { title, date } = Astro.props;\n<div>\n  <h1>{title}</h1>\n  <p>{date}</p>\n</div>\n```\n\n```\nimport Heading from '../components/Heading.astro';\n<Heading title=\"My First Post\" date=\"09 Aug 2022\" />\n```\n\nLearn more about how [Markdown and MDX layouts](https://docs.astro.build/en/guides/markdown-content/#frontmatter-layout-property) handle props.\n\nThe `props` object also contains any `props` passed from `getStaticPaths()` when rendering static routes.\n\n## params\n\n`params` is an object containing the values of dynamic route segments matched for a request. Its keys must match the [parameters](https://docs.astro.build/en/guides/routing/#dynamic-routes) in the page or endpoint file path.\n\nIn static builds, this will be the `params` returned by `getStaticPaths()` used for prerendering [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes):\n\n```\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' } },\n    { params: { id: '2' } },\n    { params: { id: '3' } }\n  ];\n}\nconst { id } = Astro.params;\n<h1>{id}</h1>\n```\n\nWhen routes are rendered on demand, `params` can be any value matching the path segments in the dynamic route pattern.\n\n## url\n\n**Type:** `URL`\n**Added in:** `astro@1.0.0`\n\n`url` is a [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) object constructed from the current `request.url` value. It is useful for interacting with individual properties of the request URL, like pathname and origin.\n\n```\n<h1>The current URL is: {Astro.url}</h1>\n<h1>The current URL pathname is: {Astro.url.pathname}</h1>\n<h1>The current URL origin is: {Astro.url.origin}</h1>\n```\n\nYou can also use `url` to create new URLs by passing it as an argument to [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL).\n\n## site\n\n**Type:** `URL | undefined`\n\n`site` returns a `URL` made from `site` in your Astro config. It returns `undefined` if you have not set a value for [`site`](https://docs.astro.build/en/reference/configuration-reference/#site) in your Astro config.\n\n## clientAddress\n\n**Type:** `string`\n**Added in:** `astro@1.0.0`\n\n`clientAddress` specifies the [IP address](https://en.wikipedia.org/wiki/IP_address) of the request. This property is only available for routes rendered on demand and cannot be used on prerendered pages.\n\n## isPrerendered\n\n**Type**: `boolean`\n**Added in:** `astro@5.0.0`\n\nA boolean representing whether or not the current page is prerendered.\n\n## generator\n\n**Type:** `string`\n**Added in:** `astro@1.0.0`\n\n`generator` provides the current version of Astro your project is running.\n\n## request\n\n**Type:** `Request`\n\n`request` is a standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. It can be used to get the `url`, `headers`, `method`, and even the body of the request.\n\n## response\n\n**Type:** `ResponseInit & { readonly headers: Headers }`\n\n`response` is a standard `ResponseInit` object.\n\n## redirect()\n\n**Type:** `(path: string, status?: number) => Response`\n**Added in:** `astro@1.5.0`\n\n`redirect()` returns a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object that allows you to redirect to another page.\n\n## rewrite()\n\n**Type:** `(rewritePayload: string | URL | Request) => Promise<Response>`\n**Added in:** `astro@4.13.0`\n\n`rewrite()` allows you to serve content from a different URL or path without redirecting the browser to a new page.\n\n## locals\n\n**Added in:** `astro@2.4.0`\n\n`locals` is an object used to store and access arbitrary information during the lifecycle of a request.\n\n## preferredLocale\n\n**Type:** `string | undefined`\n**Added in:** `astro@3.5.0`\n\n`preferredLocale` is a computed value to find the best match between your visitor‚Äôs browser language preferences and the locales supported by your site.\n\n## preferredLocaleList\n\n**Type:** `string[] | undefined`\n**Added in:** `astro@3.5.0`\n\n`preferredLocaleList` represents the array of all locales that are both requested by the browser and supported by your website.\n\n## currentLocale\n\n**Type:** `string | undefined`\n**Added in:** `astro@3.5.6`\n\nThe locale computed from the current URL.\n\n## getActionResult()\n\n**Type:** `(action: TAction) => ActionReturnType<TAction> | undefined`\n**Added in:** `astro@4.15.0`\n\n`getActionResult()` is a function that returns the result of an [Action](https://docs.astro.build/en/guides/actions/) submission.\n\n## callAction()\n\n**Added in:** `astro@4.15.0`\n\n`callAction()` is a function used to call an Action handler directly from your Astro component.\n\n## routePattern\n\n**Type**: `string`\n**Added in:** `astro@5.0.0`\n\nThe route pattern responsible for generating the current page or route.\n\n## cookies\n\n**Type:** `AstroCookies`\n**Added in:** `astro@1.4.0`\n\n`cookies` contains utilities for reading and manipulating cookies for [routes rendered on demand](https://docs.astro.build/en/guides/on-demand-rendering/).\n\n## Deprecated object properties\n\n#### Astro.glob()\n`Astro.glob()` is a way to load many local files into your static site setup.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "overview", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I the context object in astro?\n\nAssistant: To the context object in astro, here's what you do:\nThe following properties are available on the `Astro` global (e.g. `Astro.props`, `Astro.redirect()`) and are also available on the context object (e.g. `context.props`, `context.redirect()`) passed to endpoint functions and middleware..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I props in astro?\n\nAssistant: To props in astro, here's what you do:\n`props` is an object containing any values that have been passed as [component attributes](https://docs.astro.build/en/basics/astro-components/#component-props). \n\n```\nconst { title, date } = Astro.props;\n<div>\n  <h1>{title}</h1>\n  <p>{date}</p>\n</div>\n```\n\n```\nimport Heading from '../components/Heading.astro';\n<Heading title=\"My First Post\" date=\"09 Aug 2022\" />\n```\n\nLearn more about how [Markdown and MDX layouts](https://docs.astro.build/en/guides/markdown-content/#frontmatter-layout-property) handle props.\n\nThe `props` object also contains any `props` passed from `getStaticPaths()` when rendering static routes..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I params in astro?\n\nAssistant: To params in astro, here's what you do:\n`params` is an object containing the values of dynamic route segments matched for a request. Its keys must match the [parameters](https://docs.astro.build/en/guides/routing/#dynamic-routes) in the page or endpoint file path.\n\nIn static builds, this will be the `params` returned by `getStaticPaths()` used for prerendering [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes):\n\n```\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' } },\n    { params: { id: '2' } },\n    { params: { id: '3' } }\n  ];\n}\nconst { id } = Astro.params;\n<h1>{id}</h1>\n```\n\nWhen routes are rendered on demand, `params` can be any value matching the path segments in the dynamic route pattern..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I url in astro?\n\nAssistant: To url in astro, here's what you do:\n**Type:** `URL`\n**Added in:** `astro@1.0.0`\n\n`url` is a [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) object constructed from the current `request.url` value. It is useful for interacting with individual properties of the request URL, like pathname and origin.\n\n```\n<h1>The current URL is: {Astro.url}</h1>\n<h1>The current URL pathname is: {Astro.url.pathname}</h1>\n<h1>The current URL origin is: {Astro.url.origin}</h1>\n```\n\nYou can also use `url` to create new URLs by passing it as an argument to [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I site in astro?\n\nAssistant: To site in astro, here's what you do:\n**Type:** `URL | undefined`\n\n`site` returns a `URL` made from `site` in your Astro config. It returns `undefined` if you have not set a value for [`site`](https://docs.astro.build/en/reference/configuration-reference/#site) in your Astro config..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I clientaddress in astro?\n\nAssistant: To clientaddress in astro, here's what you do:\n**Type:** `string`\n**Added in:** `astro@1.0.0`\n\n`clientAddress` specifies the [IP address](https://en.wikipedia.org/wiki/IP_address) of the request. This property is only available for routes rendered on demand and cannot be used on prerendered pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I isprerendered in astro?\n\nAssistant: To isprerendered in astro, here's what you do:\n**Type**: `boolean`\n**Added in:** `astro@5.0.0`\n\nA boolean representing whether or not the current page is prerendered..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I generator in astro?\n\nAssistant: To generator in astro, here's what you do:\n**Type:** `string`\n**Added in:** `astro@1.0.0`\n\n`generator` provides the current version of Astro your project is running..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I request in astro?\n\nAssistant: To request in astro, here's what you do:\n**Type:** `Request`\n\n`request` is a standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. It can be used to get the `url`, `headers`, `method`, and even the body of the request..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I response in astro?\n\nAssistant: To response in astro, here's what you do:\n**Type:** `ResponseInit & { readonly headers: Headers }`\n\n`response` is a standard `ResponseInit` object..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I redirect() in astro?\n\nAssistant: To redirect() in astro, here's what you do:\n**Type:** `(path: string, status?: number) => Response`\n**Added in:** `astro@1.5.0`\n\n`redirect()` returns a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object that allows you to redirect to another page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I rewrite() in astro?\n\nAssistant: To rewrite() in astro, here's what you do:\n**Type:** `(rewritePayload: string | URL | Request) => Promise<Response>`\n**Added in:** `astro@4.13.0`\n\n`rewrite()` allows you to serve content from a different URL or path without redirecting the browser to a new page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I locals in astro?\n\nAssistant: To locals in astro, here's what you do:\n**Added in:** `astro@2.4.0`\n\n`locals` is an object used to store and access arbitrary information during the lifecycle of a request..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I preferredlocale in astro?\n\nAssistant: To preferredlocale in astro, here's what you do:\n**Type:** `string | undefined`\n**Added in:** `astro@3.5.0`\n\n`preferredLocale` is a computed value to find the best match between your visitor‚Äôs browser language preferences and the locales supported by your site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I preferredlocalelist in astro?\n\nAssistant: To preferredlocalelist in astro, here's what you do:\n**Type:** `string[] | undefined`\n**Added in:** `astro@3.5.0`\n\n`preferredLocaleList` represents the array of all locales that are both requested by the browser and supported by your website..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I currentlocale in astro?\n\nAssistant: To currentlocale in astro, here's what you do:\n**Type:** `string | undefined`\n**Added in:** `astro@3.5.6`\n\nThe locale computed from the current URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getactionresult() in astro?\n\nAssistant: To getactionresult() in astro, here's what you do:\n**Type:** `(action: TAction) => ActionReturnType<TAction> | undefined`\n**Added in:** `astro@4.15.0`\n\n`getActionResult()` is a function that returns the result of an [Action](https://docs.astro.build/en/guides/actions/) submission..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I callaction() in astro?\n\nAssistant: To callaction() in astro, here's what you do:\n**Added in:** `astro@4.15.0`\n\n`callAction()` is a function used to call an Action handler directly from your Astro component..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I routepattern in astro?\n\nAssistant: To routepattern in astro, here's what you do:\n**Type**: `string`\n**Added in:** `astro@5.0.0`\n\nThe route pattern responsible for generating the current page or route..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cookies in astro?\n\nAssistant: To cookies in astro, here's what you do:\n**Type:** `AstroCookies`\n**Added in:** `astro@1.4.0`\n\n`cookies` contains utilities for reading and manipulating cookies for [routes rendered on demand](https://docs.astro.build/en/guides/on-demand-rendering/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I deprecated object properties in astro?\n\nAssistant: To deprecated object properties in astro, here's what you do:\n#### Astro.glob()\n`Astro.glob()` is a way to load many local files into your static site setup..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "section_detail", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Astro render context in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Props Example**:\n\n```yaml\nconst { title, date } = Astro.props;\n<div>\n  <h1>{title}</h1>\n  <p>{date}</p>\n</div>\n```\n\nThis snippet shows you how to props example, which is an important aspect of astro render context.\n\n**Static Paths Example**:\n\n```yaml\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' }, props: { author: 'Blu' } },\n    { params: { id: '2' }, props: { author: 'Erika' } },\n    { params: { id: '3' }, props: { author: 'Matthew' } }\n  ];\n}\n```\n\nThis snippet shows you how to static paths example, which is an important aspect of astro render context.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "code_examples", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Astro render context in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `context` object in endpoint functions to serve static or live server endpoints and in middleware to inject behavior when a page or endpoint is about to be rendered.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/reference/api-reference", "title": "Astro render context", "description": "When rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 04:15:07", "type": "best_practices", "page_metadata": {"og:type": "article", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "ogLocale": "en", "title": "Astro render context | Docs", "og:url": "https://docs.astro.build/en/reference/api-reference/", "twitter:site": "astrodotbuild", "language": "en", "og:locale": "en", "ogTitle": "Astro render context", "ogUrl": "https://docs.astro.build/en/reference/api-reference/", "favicon": "https://docs.astro.build/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:title": "Astro render context", "twitter:card": "summary_large_image", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "og:image": "https://docs.astro.build/open-graph/en/reference/api-reference.webp", "docsearch:language": "en", "scrapeId": "7e9ad559-5caa-4f0d-bd8e-a5ada786fc9b", "sourceURL": "https://docs.astro.build/en/reference/api-reference", "url": "https://docs.astro.build/en/reference/api-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Astro Docs is in astro?\n\nAssistant: Sure, I'd be happy to explain Astro Docs in astro.\n\n# Astro Docs\n\nGuides, resources, and API references to help you build with Astro.Here's a quick rundown of what this is about:\n\n## Getting Started\n\nAstro v5 is here! Learn how to upgrade your site.\n\n## Installation\n\nOur installation guide has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually.\n\n## Creating a New Project\n\nTo create a new project with npm, use the following command:\n\n```\n# create a new project with npm\n\nnpm create astro@latest\n```\n\n\n## Learning Resources\n\nExplore Astro starter themes for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more! Complete our introductory Build a Blog Tutorial to learn the basics and create your first Astro site.\n\n## Features and Extensions\n\nLearn about Astro‚Äôs main features, Islands architecture, Astro components, and the Astro template syntax. Extend your project by adding integrations like React and Tailwind, creating type safe content collections, enhancing navigation with view transitions, and connecting a headless CMS to your project.\n\n## Community and Support\n\nHave a question or want to get involved? Join our Discord.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "overview", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I getting started in astro?\n\nAssistant: To getting started in astro, here's what you do:\nAstro v5 is here! Learn how to upgrade your site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installation in astro?\n\nAssistant: To installation in astro, here's what you do:\nOur installation guide has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating a new project in astro?\n\nAssistant: To creating a new project in astro, here's what you do:\nTo create a new project with npm, use the following command:\n\n```\n# create a new project with npm\n\nnpm create astro@latest\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I learning resources in astro?\n\nAssistant: To learning resources in astro, here's what you do:\nExplore Astro starter themes for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more! Complete our introductory Build a Blog Tutorial to learn the basics and create your first Astro site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I features and extensions in astro?\n\nAssistant: To features and extensions in astro, here's what you do:\nLearn about Astro‚Äôs main features, Islands architecture, Astro components, and the Astro template syntax. Extend your project by adding integrations like React and Tailwind, creating type safe content collections, enhancing navigation with view transitions, and connecting a headless CMS to your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I community and support in astro?\n\nAssistant: To community and support in astro, here's what you do:\nHave a question or want to get involved? Join our Discord..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "section_detail", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Astro Docs in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a New Project with npm**:\n\n```yaml\nnpm create astro@latest\n```\n\nThis snippet shows you how to create a new project with npm, which is an important aspect of astro docs.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "code_examples", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Astro Docs in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nExplore Astro starter themes for various types of sites.\n\nComplete the Build a Blog Tutorial to learn the basics.\n\nRefer to the installation guide for detailed setup instructions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/getting-started", "title": "Astro Docs", "description": "Guides, resources, and API references to help you build with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:15:20", "type": "best_practices", "page_metadata": {"ogSiteName": "Docs", "title": "Getting started | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/getting-started/", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/getting-started/", "og:locale": "en", "twitter:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:title": "Getting started", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogTitle": "Getting started", "twitter:site": "astrodotbuild", "og:type": "article", "description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "docsearch:language": "en", "ogDescription": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "og:site_name": "Docs", "og:image": "https://docs.astro.build/open-graph/en/getting-started.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp", "og:description": "Guides, resources, and API references to help you build with Astro ‚Äî the web framework for content-driven websites.", "scrapeId": "875c2131-c546-4a7f-822d-32e4a7133204", "sourceURL": "https://docs.astro.build/en/getting-started", "url": "https://docs.astro.build/en/getting-started/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Write your first Markdown blog post is in astro?\n\nAssistant: Sure, I'd be happy to explain Write your first Markdown blog post in astro.\n\n# Write your first Markdown blog post\n\nNow that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!Here's a quick rundown of what this is about:\n\n## Create your first .md file\n\n1. Create a new directory at `src/pages/posts/`.\n\n2. Add a new (empty) file `post-1.md` inside your new `/posts/` folder.\n\n3. Look for this page in your browser preview by adding `/posts/post-1` to the end of your existing preview URL. (e.g. `http://localhost:4321/posts/post-1`)\n\n4. Change the browser preview URL to view `/posts/post-2` instead. (This is a page you have not yet created.)\n\nNote the different output when previewing an ‚Äúempty‚Äù page, and one that doesn‚Äôt exist. This will help you troubleshoot in the future.\n\n## Write Markdown content\n\n1. Copy or type the following code into `post-1.md`\n\n\n```\n\n   ---\n\ntitle: 'My First Blog Post'\n\npubDate: 2022-07-01\n\ndescription: 'This is the first post of my new Astro blog.'\n\nauthor: 'Astro Learner'\n\nimage:\n\n       url: 'https://docs.astro.build/assets/rose.webp'\n\n       alt: 'The Astro logo on a dark background with a pink glow.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n\n   ---\n\n# My First Blog Post\n\n\n\nPublished on: 2022-07-01\n\n\n\nWelcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n\n\n\n## What I've accomplished\n\n\n\n1. **Installing Astro**: First, I created a new Astro project and set up my online accounts.\n\n2. **Making Pages**: I then learned how to make pages by creating new `.astro` files and placing them in the `src/pages/` folder.\n\n3. **Making Blog Posts**: This is my first blog post! I now have Astro pages and Markdown posts!\n\n## What's next\n\nI will finish the Astro tutorial, and then keep adding more posts. Watch this space for more to come.\n```\n\n2. Check your browser preview again at `http://localhost:4321/posts/post-1`. You should now see content on this page. It may not yet be properly formatted, but don‚Äôt worry, you will update this later in the tutorial!\n\n3. Use your browser‚Äôs Dev Tools to inspect this page. Notice that although you have not typed any HTML elements, your Markdown has been converted to HTML. You can see elements such as headings, paragraphs, and list items.\n\n## Link to your posts\n\n1. Link to your first post with an anchor tag in `src/pages/blog.astro`:\n\n\n```\n\n   ---\n   ---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\"/>\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n\n       <h1>My Astro Learning Blog</h1>\n       <p>This is where I will post about my journey learning Astro.</p>\n       <ul>\n         <li><a href=\"/posts/post-1/\">Post 1</a></li>\n       </ul>\n     </body>\n</html>\n```\n\n2. Now, add two more files in `src/pages/posts/`: `post-2.md` and `post-3.md`. Here is some sample code you can copy and paste into your files, or, you can create your own!\n\n\n```\n\n   ---\n\ntitle: My Second Blog Post\nauthor: Astro Learner\ndescription: \"After learning some Astro, I couldn't stop!\"\nimage:\n       url: \"https://docs.astro.build/assets/arc.webp\"\n       alt: \"The Astro logo on a dark background with a purple gradient arc.\"\npubDate: 2022-07-08\ntags: [\"astro\", \"blogging\", \"learning in public\", \"successes\"]\n   ---\n\nAfter a successful first week learning Astro, I decided to try some more. I wrote and imported a small component from memory!\n```\n\n\n```\n\n   ---\n\ntitle: My Third Blog Post\nauthor: Astro Learner\ndescription: \"I had some challenges, but asking in the community really helped!\"\nimage:\n       url: \"https://docs.astro.build/assets/rays.webp\"\n       alt: \"The Astro logo on a dark background with rainbow rays.\"\npubDate: 2022-07-15\ntags: [\"astro\", \"learning in public\", \"setbacks\", \"community\"]\n   ---\n\nIt wasn't always smooth sailing, but I'm enjoying building with Astro. And, the [Discord community](https://astro.build/chat) is really friendly and helpful!\n```\n\n3. Add links to these new posts:\n\n\n```\n\n   ---\n   ---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\"/>\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n\n       <h1>My Astro Learning Blog</h1>\n       <p>This is where I will post about my journey learning Astro.</p>\n       <ul>\n         <li><a href=\"/posts/post-1/\">Post 1</a></li>\n         <li><a href=\"/posts/post-2/\">Post 2</a></li>\n         <li><a href=\"/posts/post-3/\">Post 3</a></li>\n       </ul>\n     </body>\n</html>\n```\n\n4. Check your browser preview and make sure that:\n\nAll your links for Post 1, Post 2, and Post 3 lead to a working page on your site. (If you find a mistake, check your links on `blog.astro` or your Markdown file names.)\n\n## Test your knowledge\n\n1. Content in a Markdown ( `.md`) file is converted to:\n\n1. HTML\n2. CSS\n3. JavaScript\n\n## Checklist\n\n- I can create a new folder within `src/pages/` for my blog posts.\n- I can create a new Markdown ( `.md`) blog post file.\n- I understand that Markdown is another language that, like Astro, produces HTML in my browser.\n\n## Resources\n\n- [Markdown Cheat Sheet from The Markdown Guide](https://www.markdownguide.org/cheat-sheet/) external\n\n- [What are browser developer tools? MDN](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools) external\n\n- [YAML frontmatter](https://assemble.io/docs/YAML-front-matter.html) external\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "overview", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create your first .md file in astro?\n\nAssistant: To create your first .md file in astro, here's what you do:\n1. Create a new directory at `src/pages/posts/`.\n\n2. Add a new (empty) file `post-1.md` inside your new `/posts/` folder.\n\n3. Look for this page in your browser preview by adding `/posts/post-1` to the end of your existing preview URL. (e.g. `http://localhost:4321/posts/post-1`)\n\n4. Change the browser preview URL to view `/posts/post-2` instead. (This is a page you have not yet created.)\n\nNote the different output when previewing an ‚Äúempty‚Äù page, and one that doesn‚Äôt exist. This will help you troubleshoot in the future..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "section_detail", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I write markdown content in astro?\n\nAssistant: To write markdown content in astro, here's what you do:\n1. Copy or type the following code into `post-1.md`\n\n\n```\n\n   ---\n\ntitle: 'My First Blog Post'\n\npubDate: 2022-07-01\n\ndescription: 'This is the first post of my new Astro blog.'\n\nauthor: 'Astro Learner'\n\nimage:\n\n       url: 'https://docs.astro.build/assets/rose.webp'\n\n       alt: 'The Astro logo on a dark background with a pink glow.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n\n   ---\n\n# My First Blog Post\n\n\n\nPublished on: 2022-07-01\n\n\n\nWelcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n\n\n\n## What I've accomplished\n\n\n\n1. **Installing Astro**: First, I created a new Astro project and set up my online accounts.\n\n2. **Making Pages**: I then learned how to make pages by creating new `.astro` files and placing them in the `src/pages/` folder.\n\n3. **Making Blog Posts**: This is my first blog post! I now have Astro pages and Markdown posts!\n\n## What's next\n\nI will finish the Astro tutorial, and then keep adding more posts. Watch this space for more to come.\n```\n\n2. Check your browser preview again at `http://localhost:4321/posts/post-1`. You should now see content on this page. It may not yet be properly formatted, but don‚Äôt worry, you will update this later in the tutorial!\n\n3. Use your browser‚Äôs Dev Tools to inspect this page. Notice that although you have not typed any HTML elements, your Markdown has been converted to HTML. You can see elements such as headings, paragraphs, and list items..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "section_detail", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I link to your posts in astro?\n\nAssistant: To link to your posts in astro, here's what you do:\n1. Link to your first post with an anchor tag in `src/pages/blog.astro`:\n\n\n```\n\n   ---\n   ---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\"/>\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n\n       <h1>My Astro Learning Blog</h1>\n       <p>This is where I will post about my journey learning Astro.</p>\n       <ul>\n         <li><a href=\"/posts/post-1/\">Post 1</a></li>\n       </ul>\n     </body>\n</html>\n```\n\n2. Now, add two more files in `src/pages/posts/`: `post-2.md` and `post-3.md`. Here is some sample code you can copy and paste into your files, or, you can create your own!\n\n\n```\n\n   ---\n\ntitle: My Second Blog Post\nauthor: Astro Learner\ndescription: \"After learning some Astro, I couldn't stop!\"\nimage:\n       url: \"https://docs.astro.build/assets/arc.webp\"\n       alt: \"The Astro logo on a dark background with a purple gradient arc.\"\npubDate: 2022-07-08\ntags: [\"astro\", \"blogging\", \"learning in public\", \"successes\"]\n   ---\n\nAfter a successful first week learning Astro, I decided to try some more. I wrote and imported a small component from memory!\n```\n\n\n```\n\n   ---\n\ntitle: My Third Blog Post\nauthor: Astro Learner\ndescription: \"I had some challenges, but asking in the community really helped!\"\nimage:\n       url: \"https://docs.astro.build/assets/rays.webp\"\n       alt: \"The Astro logo on a dark background with rainbow rays.\"\npubDate: 2022-07-15\ntags: [\"astro\", \"learning in public\", \"setbacks\", \"community\"]\n   ---\n\nIt wasn't always smooth sailing, but I'm enjoying building with Astro. And, the [Discord community](https://astro.build/chat) is really friendly and helpful!\n```\n\n3. Add links to these new posts:\n\n\n```\n\n   ---\n   ---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\"/>\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n\n       <h1>My Astro Learning Blog</h1>\n       <p>This is where I will post about my journey learning Astro.</p>\n       <ul>\n         <li><a href=\"/posts/post-1/\">Post 1</a></li>\n         <li><a href=\"/posts/post-2/\">Post 2</a></li>\n         <li><a href=\"/posts/post-3/\">Post 3</a></li>\n       </ul>\n     </body>\n</html>\n```\n\n4. Check your browser preview and make sure that:\n\nAll your links for Post 1, Post 2, and Post 3 lead to a working page on your site. (If you find a mistake, check your links on `blog.astro` or your Markdown file names.).\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "section_detail", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. Content in a Markdown ( `.md`) file is converted to:\n\n1. HTML\n2. CSS\n3. JavaScript.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "section_detail", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can create a new folder within `src/pages/` for my blog posts.\n- I can create a new Markdown ( `.md`) blog post file.\n- I understand that Markdown is another language that, like Astro, produces HTML in my browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "section_detail", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I resources in astro?\n\nAssistant: To resources in astro, here's what you do:\n- [Markdown Cheat Sheet from The Markdown Guide](https://www.markdownguide.org/cheat-sheet/) external\n\n- [What are browser developer tools? MDN](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools) external\n\n- [YAML frontmatter](https://assemble.io/docs/YAML-front-matter.html) external.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "section_detail", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Write your first Markdown blog post in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create your first .md file**:\n\n```yaml\n1. Create a new directory at `src/pages/posts/`.\n\n2. Add a new (empty) file `post-1.md` inside your new `/posts/` folder.\n\n3. Look for this page in your browser preview by adding `/posts/post-1` to the end of your existing preview URL. (e.g. `http://localhost:4321/posts/post-1`)\n\n4. Change the browser preview URL to view `/posts/post-2` instead. (This is a page you have not yet created.)\n\nNote the different output when previewing an ‚Äúempty‚Äù page, and one that doesn‚Äôt exist. This will help you troubleshoot in the future.\n```\n\nThis snippet shows you how to create your first .md file, which is an important aspect of write your first markdown blog post.\n\n**Write Markdown content**:\n\n```yaml\n1. Copy or type the following code into `post-1.md`\n\n\n```\n\n   ---\n\ntitle: 'My First Blog Post'\n\npubDate: 2022-07-01\n\ndescription: 'This is the first post of my new Astro blog.'\n\nauthor: 'Astro Learner'\n\nimage:\n\n       url: 'https://docs.astro.build/assets/rose.webp'\n\n       alt: 'The Astro logo on a dark background with a pink glow.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n\n   ---\n\n# My First Blog Post\n\n\n\nPublished on: 2022-07-01\n\n\n\nWelcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n\n\n\n## What I've accomplished\n\n\n\n1. **Installing Astro**: First, I created a new Astro project and set up my online accounts.\n\n2. **Making Pages**: I then learned how to make pages by creating new `.astro` files and placing them in the `src/pages/` folder.\n\n3. **Making Blog Posts**: This is my first blog post! I now have Astro pages and Markdown posts!\n\n## What's next\n\nI will finish the Astro tutorial, and then keep adding more posts. Watch this space for more to come.\n```\n\n2. Check your browser preview again at `http://localhost:4321/posts/post-1`. You should now see content on this page. It may not yet be properly formatted, but don‚Äôt worry, you will update this later in the tutorial!\n\n3. Use your browser‚Äôs Dev Tools to inspect this page. Notice that although you have not typed any HTML elements, your Markdown has been converted to HTML. You can see elements such as headings, paragraphs, and list items.\n```\n\nThis snippet shows you how to write markdown content, which is an important aspect of write your first markdown blog post.\n\n**Link to your posts**:\n\n```yaml\n1. Link to your first post with an anchor tag in `src/pages/blog.astro`:\n\n\n```\n\n   ---\n   ---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\"/>\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n\n       <h1>My Astro Learning Blog</h1>\n       <p>This is where I will post about my journey learning Astro.</p>\n       <ul>\n         <li><a href=\"/posts/post-1/\">Post 1</a></li>\n       </ul>\n     </body>\n</html>\n```\n\n2. Now, add two more files in `src/pages/posts/`: `post-2.md` and `post-3.md`. Here is some sample code you can copy and paste into your files, or, you can create your own!\n\n\n```\n\n   ---\n\ntitle: My Second Blog Post\nauthor: Astro Learner\ndescription: \"After learning some Astro, I couldn't stop!\"\nimage:\n       url: \"https://docs.astro.build/assets/arc.webp\"\n       alt: \"The Astro logo on a dark background with a purple gradient arc.\"\npubDate: 2022-07-08\ntags: [\"astro\", \"blogging\", \"learning in public\", \"successes\"]\n   ---\n\nAfter a successful first week learning Astro, I decided to try some more. I wrote and imported a small component from memory!\n```\n\n\n```\n\n   ---\n\ntitle: My Third Blog Post\nauthor: Astro Learner\ndescription: \"I had some challenges, but asking in the community really helped!\"\nimage:\n       url: \"https://docs.astro.build/assets/rays.webp\"\n       alt: \"The Astro logo on a dark background with rainbow rays.\"\npubDate: 2022-07-15\ntags: [\"astro\", \"learning in public\", \"setbacks\", \"community\"]\n   ---\n\nIt wasn't always smooth sailing, but I'm enjoying building with Astro. And, the [Discord community](https://astro.build/chat) is really friendly and helpful!\n```\n\n3. Add links to these new posts:\n\n\n```\n\n   ---\n   ---\n<html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\"/>\n       <meta name=\"viewport\" content=\"width=device-width\" />\n       <title>Astro</title>\n     </head>\n     <body>\n       <a href=\"/\">Home</a>\n       <a href=\"/about/\">About</a>\n       <a href=\"/blog/\">Blog</a>\n\n       <h1>My Astro Learning Blog</h1>\n       <p>This is where I will post about my journey learning Astro.</p>\n       <ul>\n         <li><a href=\"/posts/post-1/\">Post 1</a></li>\n         <li><a href=\"/posts/post-2/\">Post 2</a></li>\n         <li><a href=\"/posts/post-3/\">Post 3</a></li>\n       </ul>\n     </body>\n</html>\n```\n\n4. Check your browser preview and make sure that:\n\nAll your links for Post 1, Post 2, and Post 3 lead to a working page on your site. (If you find a mistake, check your links on `blog.astro` or your Markdown file names).\n```\n\nThis snippet shows you how to link to your posts, which is an important aspect of write your first markdown blog post.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "code_examples", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Write your first Markdown blog post in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to check your browser preview after creating new posts to ensure they are displaying correctly.\n\nUse browser Dev Tools to inspect the HTML generated from your Markdown content.\n\nEnsure all links are correct and lead to the intended pages.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/2-pages/2", "title": "Write your first Markdown blog post", "description": "Now that you have built pages using .astro files, it‚Äôs time to make some blog posts using .md files!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:25:18", "type": "best_practices", "page_metadata": {"title": "Write your first Markdown blog post | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "og:site_name": "Docs", "og:url": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:type": "article", "ogUrl": "https://docs.astro.build/en/tutorial/2-pages/2/", "og:locale": "en", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "ogSiteName": "Docs", "docsearch:language": "en", "ogLocale": "en", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "ogTitle": "Write your first Markdown blog post", "twitter:card": "summary_large_image", "description": "Tutorial: Build your first Astro blog ‚Äî\nAdd Markdown pages to your site", "viewport": "width=device-width, initial-scale=1", "og:image": "https://docs.astro.build/open-graph/en/tutorial/2-pages/2.webp", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:site": "astrodotbuild", "og:title": "Write your first Markdown blog post", "scrapeId": "17aeda8b-58e3-435f-8b67-3eb8b3eb6590", "sourceURL": "https://docs.astro.build/en/tutorial/2-pages/2", "url": "https://docs.astro.build/en/tutorial/2-pages/2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Optional: Make a content collection is in astro?\n\nAssistant: Sure, I'd be happy to explain Optional: Make a content collection in astro.\n\n# Optional: Make a content collection\n\nThis page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.Here's a quick rundown of what this is about:\n\n## Learn: Pages vs Collections\n\nEven when using content collections, you will still use the `src/pages/` folder for individual pages, such as your About Me page. But, moving your blog posts outside of this special folder will allow you to use more powerful and performant APIs to generate your blog post index and display your individual blog posts.\n\nAt the same time, you‚Äôll receive better guidance and autocompletion in your code editor because you will have a **[schema](https://docs.astro.build/en/guides/content-collections/#defining-the-collection-schema)** to define a common structure for each post that Astro will help you enforce through [Zod](https://zod.dev/), a schema declaration and validation library for TypeScript. In your schema, you can specify when frontmatter properties are required, such as a description or an author, and which data type each property must be, such as a string or an array. This leads to catching many mistakes sooner, with descriptive error messages telling you exactly what the problem is.\n\nRead more about [Astro‚Äôs content collections](https://docs.astro.build/en/guides/content-collections/) in our guide, or get started with the instructions below to convert a basic blog from `src/pages/posts/` to `src/blog/`.\n\n## Test your knowledge\n\n1. Which type of page would you probably keep in `src/pages/`?\n   1. Blog posts that all contain the same basic structure and metadata\n   2. Product pages in an eCommerce site\n   3. A contact page, because you do not have multiple similar pages of this type\n\n2. Which is **not** a benefit of moving blog posts to a content collection?\n   1. Pages are automatically created for each file\n   2. Better error messages, because Astro knows more about each file\n   3. Better data fetching, with a more performant function\n\n3. Content collections uses TypeScript ‚Ä¶\n   1. To make me feel bad\n   2. To understand and validate my collections, and to provide editor tooling\n   3. Only if I have the `strictest` configuration set in `tsconfig.json`.\n\n## Upgrade dependencies\n\nUpgrade to the latest version of Astro, and upgrade all integrations to their latest versions by running the following commands in your terminal:\n\n- [npm](https://docs.astro.build/en/tutorial/6-islands/4/#tab-panel-1960)\n- [pnpm](https://docs.astro.build/en/tutorial/6-islands/4/#tab-panel-1961)\n- [Yarn](https://docs.astro.build/en/tutorial/6-islands/4/#tab-panel-1962)\n\n```\n# Upgrade Astro and official integrations together\nnpx @astrojs/upgrade\n```\n```\n# Upgrade Astro and official integrations together\npnpm dlx @astrojs/upgrade\n```\n```\n# Upgrade Astro and official integrations together\nyarn dlx @astrojs/upgrade\n```\n\n## Create a collection for your posts\n\n1. Create a new **collection** (folder) called `src/blog/`.\n\n2. Move all your existing blog posts ( `.md` files) from `src/pages/posts/` into this new collection.\n\n3. Create a `src/content.config.ts` file to [define a schema](https://docs.astro.build/en/guides/content-collections/#defining-the-collection-schema) for your `postsCollection`. For the existing blog tutorial code, add the following contents to the file to define all the frontmatter properties used in its blog posts:\n\n```javascript\n// Import the glob loader\nimport { glob } from \"astro/loaders\";\n// Import utilities from `astro:content`\nimport { z, defineCollection } from \"astro:content\";\n// Define a `loader` and `schema` for each collection\nconst blog = defineCollection({\n       loader: glob({ pattern: '**/[^_]*.md', base: \"./src/blog\" }),\n       schema: z.object({\n         title: z.string(),\n         pubDate: z.date(),\n         description: z.string(),\n         author: z.string(),\n         image: z.object({\n           url: z.string(),\n           alt: z.string()\n         }),\n         tags: z.array(z.string())\n       })\n});\n// Export a single `collections` object to register your collection(s)\nexport const collections = { blog };\n``` \n\n4. In order for Astro to recognize your schema, quit ( `CTRL + C`) and restart the dev server to continue with the tutorial. This will define the `astro:content` module.\n\n## Generate pages from a collection\n\n1. Create a page file called `src/pages/posts/[...slug].astro`. Your Markdown and MDX files no longer automatically become pages using Astro‚Äôs file-based routing when they are inside a collection, so you must create a page responsible for generating each individual blog post.\n\n2. Add the following code to [query your collection](https://docs.astro.build/en/guides/content-collections/#querying-collections) to make each blog post‚Äôs slug and page content available to each page it will generate:\n\n```javascript\n---\nimport { getCollection, render } from 'astro:content';\nexport async function getStaticPaths() {\n     const posts = await getCollection('blog');\n     return posts.map(post => ({\n       params: { slug: post.id }, props: { post },\n     }));\n}\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n``` \n\n3. Render your post `<Content />` within the layout for Markdown pages. This allows you to specify a common layout for all of your posts.\n\n```javascript\n---\nimport { getCollection, render } from 'astro:content';\nimport MarkdownPostLayout from '../../layouts/MarkdownPostLayout.astro';\nexport async function getStaticPaths() {\n     const posts = await getCollection('blog');\n     return posts.map(post => ({\n       params: { slug: post.id }, props: { post },\n     }));\n}\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n<MarkdownPostLayout frontmatter={post.data}>\n     <Content />\n</MarkdownPostLayout>\n``` \n\n4. Remove the `layout` definition in each individual post‚Äôs frontmatter. Your content is now wrapped in a layout when rendered, and this property is no longer needed.\n\n```javascript\n---\nlayout: ../../layouts/MarkdownPostLayout.astro\ntitle: 'My First Blog Post'\npubDate: 2022-07-01\n...\n---\n```\n\n## Replace import.meta.glob() with getCollection()\n\n5. Anywhere you have a list of blog posts, like the tutorial‚Äôs Blog page ( `src/pages/blog.astro/`), you will need to replace `import.meta.glob()` with [`getCollection()`](https://docs.astro.build/en/reference/modules/astro-content/#getcollection) as the way to fetch content and metadata from your Markdown files.\n\n```javascript\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../layouts/BaseLayout.astro\";\nimport BlogPost from \"../components/BlogPost.astro\";\nconst pageTitle = \"My Astro Learning Blog\";\nconst allPosts = Object.values(import.meta.glob(\"../pages/posts/*.md\", { eager: true }));\nconst allPosts = await getCollection(\"blog\");\n---\n``` \n\n6. You will also need to update references to the data returned for each `post`. You will now find your frontmatter values on the `data` property of each object. Also, when using collections each `post` object will have a page `slug`, not a full URL.\n\n```javascript\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../layouts/BaseLayout.astro\";\nimport BlogPost from \"../components/BlogPost.astro\";\nconst pageTitle = \"My Astro Learning Blog\";\nconst allPosts = await getCollection(\"blog\");\n---\n<BaseLayout pageTitle={pageTitle}>\n     <p>This is where I will post about my journey learning Astro.</p>\n     <ul>\n       {\n         allPosts.map((post) => (\n           <BlogPost url={post.url} title={post.frontmatter.title} />)}\n           <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />\n         ))\n       }\n     </ul>\n</BaseLayout>\n``` \n\n7. The tutorial blog project also dynamically generates a page for each tag using `src/pages/tags/[tag].astro` and displays a list of tags at `src/pages/tags/index.astro`.\nApply the same changes as above to these two files:\n   - fetch data about all your blog posts using `getCollection(\"blog\")` instead of using `import.meta.glob()`\n   - access all frontmatter values using `data` instead of `frontmatter`\n   - create a page URL by adding the post‚Äôs `slug` to the `/posts/` path\nThe page that generates individual tag pages now becomes:\n```javascript\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../../layouts/BaseLayout.astro\";\nimport BlogPost from \"../../components/BlogPost.astro\";\nexport async function getStaticPaths() {\n  const allPosts = await getCollection(\"blog\");\n  const uniqueTags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\n  return uniqueTags.map((tag) => {\n    const filteredPosts = allPosts.filter((post) =>\n      post.data.tags.includes(tag)\n    );\n    return {\n      params: { tag },\n      props: { posts: filteredPosts },\n    };\n  });\n}\nconst { tag } = Astro.params;\nconst { posts } = Astro.props;\n---\n<BaseLayout pageTitle={tag}>\n  <p>Posts tagged with {tag}</p>\n  <ul>\n    { posts.map((post) => <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />) }\n  </ul>\n</BaseLayout>\n```\n\n## Try it yourself - Update the query in the Tag Index page\n\nImport and use `getCollection` to fetch the tags used in the blog posts on `src/pages/tags/index.astro`, following the [same steps as above](https://docs.astro.build/en/tutorial/6-islands/4/#replace-importmetaglob-with-getcollection).\nShow me the code.\n```\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../../layouts/BaseLayout.astro\";\nconst allPosts = await getCollection(\"blog\");\nconst tags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n<!-- ... -->\n```\n\n## Update any frontmatter values to match your schema\n\nIf necessary, update any frontmatter values throughout your project, such as in your layout, that do not match your collections schema.\nIn the blog tutorial example, `pubDate` was a string. Now, according to the schema that defines types for the post frontmatter, `pubDate` will be a `Date` object. You can now take advantage of this to use the methods available for any `Date` object to format the date.\nTo render the date in the blog post layout, convert it to a string using `toLocaleDateString()` method:\n```\n<!-- ... -->\n<BaseLayout pageTitle={frontmatter.title}>\n    <p>{frontmatter.pubDate.toLocaleDateString()}</p>\n    <p><em>{frontmatter.description}</em></p>\n    <p>Written by: {frontmatter.author}</p>\n    <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n<!-- ... -->\n```\n\n## Update the RSS function\n\nThe tutorial blog project includes an RSS feed. This function must also use `getCollection()` to return information from your blog posts. You will then generate the RSS items using the `data` object returned.\n```\nimport rss from '@astrojs/rss';\nimport { pagesGlobToRssItems } from '@astrojs/rss';\nimport { getCollection } from 'astro:content';\nexport async function GET(context) {\n  const posts = await getCollection(\"blog\");\n  return rss({\n    title: 'Astro Learner | Blog',\n    description: 'My journey learning Astro',\n    site: context.site,\n    items: await pagesGlobToRssItems(import.meta.glob('./**/*.md')),\n    items: posts.map((post) => ({\n      title: post.data.title,\n      pubDate: post.data.pubDate,\n      description: post.data.description,\n      link: `/posts/${post.id}/`,\n    })),\n    customData: `<language>en-us</language>`,\n  })\n}\n``` \nFor the full example of the blog tutorial using content collections, see the [Content Collections branch](https://github.com/withastro/blog-tutorial-demo/tree/content-collections) of the tutorial repo.\n\n## Checklist\n\n- I can use content collections to manage groups of similar content for better performance and organization.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "overview", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I learn: pages vs collections in astro?\n\nAssistant: To learn: pages vs collections in astro, here's what you do:\nEven when using content collections, you will still use the `src/pages/` folder for individual pages, such as your About Me page. But, moving your blog posts outside of this special folder will allow you to use more powerful and performant APIs to generate your blog post index and display your individual blog posts.\n\nAt the same time, you‚Äôll receive better guidance and autocompletion in your code editor because you will have a **[schema](https://docs.astro.build/en/guides/content-collections/#defining-the-collection-schema)** to define a common structure for each post that Astro will help you enforce through [Zod](https://zod.dev/), a schema declaration and validation library for TypeScript. In your schema, you can specify when frontmatter properties are required, such as a description or an author, and which data type each property must be, such as a string or an array. This leads to catching many mistakes sooner, with descriptive error messages telling you exactly what the problem is.\n\nRead more about [Astro‚Äôs content collections](https://docs.astro.build/en/guides/content-collections/) in our guide, or get started with the instructions below to convert a basic blog from `src/pages/posts/` to `src/blog/`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I test your knowledge in astro?\n\nAssistant: To test your knowledge in astro, here's what you do:\n1. Which type of page would you probably keep in `src/pages/`?\n   1. Blog posts that all contain the same basic structure and metadata\n   2. Product pages in an eCommerce site\n   3. A contact page, because you do not have multiple similar pages of this type\n\n2. Which is **not** a benefit of moving blog posts to a content collection?\n   1. Pages are automatically created for each file\n   2. Better error messages, because Astro knows more about each file\n   3. Better data fetching, with a more performant function\n\n3. Content collections uses TypeScript ‚Ä¶\n   1. To make me feel bad\n   2. To understand and validate my collections, and to provide editor tooling\n   3. Only if I have the `strictest` configuration set in `tsconfig.json`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgrade dependencies in astro?\n\nAssistant: To upgrade dependencies in astro, here's what you do:\nUpgrade to the latest version of Astro, and upgrade all integrations to their latest versions by running the following commands in your terminal:\n\n- [npm](https://docs.astro.build/en/tutorial/6-islands/4/#tab-panel-1960)\n- [pnpm](https://docs.astro.build/en/tutorial/6-islands/4/#tab-panel-1961)\n- [Yarn](https://docs.astro.build/en/tutorial/6-islands/4/#tab-panel-1962)\n\n```\n# Upgrade Astro and official integrations together\nnpx @astrojs/upgrade\n```\n```\n# Upgrade Astro and official integrations together\npnpm dlx @astrojs/upgrade\n```\n```\n# Upgrade Astro and official integrations together\nyarn dlx @astrojs/upgrade\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I create a collection for your posts in astro?\n\nAssistant: To create a collection for your posts in astro, here's what you do:\n1. Create a new **collection** (folder) called `src/blog/`.\n\n2. Move all your existing blog posts ( `.md` files) from `src/pages/posts/` into this new collection.\n\n3. Create a `src/content.config.ts` file to [define a schema](https://docs.astro.build/en/guides/content-collections/#defining-the-collection-schema) for your `postsCollection`. For the existing blog tutorial code, add the following contents to the file to define all the frontmatter properties used in its blog posts:\n\n```javascript\n// Import the glob loader\nimport { glob } from \"astro/loaders\";\n// Import utilities from `astro:content`\nimport { z, defineCollection } from \"astro:content\";\n// Define a `loader` and `schema` for each collection\nconst blog = defineCollection({\n       loader: glob({ pattern: '**/[^_]*.md', base: \"./src/blog\" }),\n       schema: z.object({\n         title: z.string(),\n         pubDate: z.date(),\n         description: z.string(),\n         author: z.string(),\n         image: z.object({\n           url: z.string(),\n           alt: z.string()\n         }),\n         tags: z.array(z.string())\n       })\n});\n// Export a single `collections` object to register your collection(s)\nexport const collections = { blog };\n``` \n\n4. In order for Astro to recognize your schema, quit ( `CTRL + C`) and restart the dev server to continue with the tutorial. This will define the `astro:content` module..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I generate pages from a collection in astro?\n\nAssistant: To generate pages from a collection in astro, here's what you do:\n1. Create a page file called `src/pages/posts/[...slug].astro`. Your Markdown and MDX files no longer automatically become pages using Astro‚Äôs file-based routing when they are inside a collection, so you must create a page responsible for generating each individual blog post.\n\n2. Add the following code to [query your collection](https://docs.astro.build/en/guides/content-collections/#querying-collections) to make each blog post‚Äôs slug and page content available to each page it will generate:\n\n```javascript\n---\nimport { getCollection, render } from 'astro:content';\nexport async function getStaticPaths() {\n     const posts = await getCollection('blog');\n     return posts.map(post => ({\n       params: { slug: post.id }, props: { post },\n     }));\n}\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n``` \n\n3. Render your post `<Content />` within the layout for Markdown pages. This allows you to specify a common layout for all of your posts.\n\n```javascript\n---\nimport { getCollection, render } from 'astro:content';\nimport MarkdownPostLayout from '../../layouts/MarkdownPostLayout.astro';\nexport async function getStaticPaths() {\n     const posts = await getCollection('blog');\n     return posts.map(post => ({\n       params: { slug: post.id }, props: { post },\n     }));\n}\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n<MarkdownPostLayout frontmatter={post.data}>\n     <Content />\n</MarkdownPostLayout>\n``` \n\n4. Remove the `layout` definition in each individual post‚Äôs frontmatter. Your content is now wrapped in a layout when rendered, and this property is no longer needed.\n\n```javascript\n---\nlayout: ../../layouts/MarkdownPostLayout.astro\ntitle: 'My First Blog Post'\npubDate: 2022-07-01\n...\n---\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I replace import.meta.glob() with getcollection() in astro?\n\nAssistant: To replace import.meta.glob() with getcollection() in astro, here's what you do:\n5. Anywhere you have a list of blog posts, like the tutorial‚Äôs Blog page ( `src/pages/blog.astro/`), you will need to replace `import.meta.glob()` with [`getCollection()`](https://docs.astro.build/en/reference/modules/astro-content/#getcollection) as the way to fetch content and metadata from your Markdown files.\n\n```javascript\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../layouts/BaseLayout.astro\";\nimport BlogPost from \"../components/BlogPost.astro\";\nconst pageTitle = \"My Astro Learning Blog\";\nconst allPosts = Object.values(import.meta.glob(\"../pages/posts/*.md\", { eager: true }));\nconst allPosts = await getCollection(\"blog\");\n---\n``` \n\n6. You will also need to update references to the data returned for each `post`. You will now find your frontmatter values on the `data` property of each object. Also, when using collections each `post` object will have a page `slug`, not a full URL.\n\n```javascript\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../layouts/BaseLayout.astro\";\nimport BlogPost from \"../components/BlogPost.astro\";\nconst pageTitle = \"My Astro Learning Blog\";\nconst allPosts = await getCollection(\"blog\");\n---\n<BaseLayout pageTitle={pageTitle}>\n     <p>This is where I will post about my journey learning Astro.</p>\n     <ul>\n       {\n         allPosts.map((post) => (\n           <BlogPost url={post.url} title={post.frontmatter.title} />)}\n           <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />\n         ))\n       }\n     </ul>\n</BaseLayout>\n``` \n\n7. The tutorial blog project also dynamically generates a page for each tag using `src/pages/tags/[tag].astro` and displays a list of tags at `src/pages/tags/index.astro`.\nApply the same changes as above to these two files:\n   - fetch data about all your blog posts using `getCollection(\"blog\")` instead of using `import.meta.glob()`\n   - access all frontmatter values using `data` instead of `frontmatter`\n   - create a page URL by adding the post‚Äôs `slug` to the `/posts/` path\nThe page that generates individual tag pages now becomes:\n```javascript\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../../layouts/BaseLayout.astro\";\nimport BlogPost from \"../../components/BlogPost.astro\";\nexport async function getStaticPaths() {\n  const allPosts = await getCollection(\"blog\");\n  const uniqueTags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\n  return uniqueTags.map((tag) => {\n    const filteredPosts = allPosts.filter((post) =>\n      post.data.tags.includes(tag)\n    );\n    return {\n      params: { tag },\n      props: { posts: filteredPosts },\n    };\n  });\n}\nconst { tag } = Astro.params;\nconst { posts } = Astro.props;\n---\n<BaseLayout pageTitle={tag}>\n  <p>Posts tagged with {tag}</p>\n  <ul>\n    { posts.map((post) => <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />) }\n  </ul>\n</BaseLayout>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I try it yourself - update the query in the tag index page in astro?\n\nAssistant: To try it yourself - update the query in the tag index page in astro, here's what you do:\nImport and use `getCollection` to fetch the tags used in the blog posts on `src/pages/tags/index.astro`, following the [same steps as above](https://docs.astro.build/en/tutorial/6-islands/4/#replace-importmetaglob-with-getcollection).\nShow me the code.\n```\n---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../../layouts/BaseLayout.astro\";\nconst allPosts = await getCollection(\"blog\");\nconst tags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n<!-- ... -->\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I update any frontmatter values to match your schema in astro?\n\nAssistant: To update any frontmatter values to match your schema in astro, here's what you do:\nIf necessary, update any frontmatter values throughout your project, such as in your layout, that do not match your collections schema.\nIn the blog tutorial example, `pubDate` was a string. Now, according to the schema that defines types for the post frontmatter, `pubDate` will be a `Date` object. You can now take advantage of this to use the methods available for any `Date` object to format the date.\nTo render the date in the blog post layout, convert it to a string using `toLocaleDateString()` method:\n```\n<!-- ... -->\n<BaseLayout pageTitle={frontmatter.title}>\n    <p>{frontmatter.pubDate.toLocaleDateString()}</p>\n    <p><em>{frontmatter.description}</em></p>\n    <p>Written by: {frontmatter.author}</p>\n    <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n<!-- ... -->\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I update the rss function in astro?\n\nAssistant: To update the rss function in astro, here's what you do:\nThe tutorial blog project includes an RSS feed. This function must also use `getCollection()` to return information from your blog posts. You will then generate the RSS items using the `data` object returned.\n```\nimport rss from '@astrojs/rss';\nimport { pagesGlobToRssItems } from '@astrojs/rss';\nimport { getCollection } from 'astro:content';\nexport async function GET(context) {\n  const posts = await getCollection(\"blog\");\n  return rss({\n    title: 'Astro Learner | Blog',\n    description: 'My journey learning Astro',\n    site: context.site,\n    items: await pagesGlobToRssItems(import.meta.glob('./**/*.md')),\n    items: posts.map((post) => ({\n      title: post.data.title,\n      pubDate: post.data.pubDate,\n      description: post.data.description,\n      link: `/posts/${post.id}/`,\n    })),\n    customData: `<language>en-us</language>`,\n  })\n}\n``` \nFor the full example of the blog tutorial using content collections, see the [Content Collections branch](https://github.com/withastro/blog-tutorial-demo/tree/content-collections) of the tutorial repo..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I checklist in astro?\n\nAssistant: To checklist in astro, here's what you do:\n- I can use content collections to manage groups of similar content for better performance and organization..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "section_detail", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Optional: Make a content collection in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Upgrade Astro and official integrations together (npm)**:\n\n```yaml\nnpx @astrojs/upgrade\n```\n\nThis snippet shows you how to upgrade astro and official integrations together (npm), which is an important aspect of optional: make a content collection.\n\n**Upgrade Astro and official integrations together (pnpm)**:\n\n```yaml\npnpm dlx @astrojs/upgrade\n```\n\nThis snippet shows you how to upgrade astro and official integrations together (pnpm), which is an important aspect of optional: make a content collection.\n\n**Upgrade Astro and official integrations together (Yarn)**:\n\n```yaml\nyarn dlx @astrojs/upgrade\n```\n\nThis snippet shows you how to upgrade astro and official integrations together (yarn), which is an important aspect of optional: make a content collection.\n\n**Define a schema for your postsCollection**:\n\n```yaml\n// Import the glob loader\nimport { glob } from \"astro/loaders\";\n// Import utilities from `astro:content`\nimport { z, defineCollection } from \"astro:content\";\n// Define a `loader` and `schema` for each collection\nconst blog = defineCollection({\n       loader: glob({ pattern: '**/[^_]*.md', base: \"./src/blog\" }),\n       schema: z.object({\n         title: z.string(),\n         pubDate: z.date(),\n         description: z.string(),\n         author: z.string(),\n         image: z.object({\n           url: z.string(),\n           alt: z.string()\n         }),\n         tags: z.array(z.string())\n       })\n});\n// Export a single `collections` object to register your collection(s)\nexport const collections = { blog };\n```\n\nThis snippet shows you how to define a schema for your postscollection, which is an important aspect of optional: make a content collection.\n\n**Query your collection**:\n\n```yaml\n---\nimport { getCollection, render } from 'astro:content';\nexport async function getStaticPaths() {\n     const posts = await getCollection('blog');\n     return posts.map(post => ({\n       params: { slug: post.id }, props: { post },\n     }));\n}\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n```\n\nThis snippet shows you how to query your collection, which is an important aspect of optional: make a content collection.\n\n**Render your post within the layout**:\n\n```yaml\n---\nimport { getCollection, render } from 'astro:content';\nimport MarkdownPostLayout from '../../layouts/MarkdownPostLayout.astro';\nexport async function getStaticPaths() {\n     const posts = await getCollection('blog');\n     return posts.map(post => ({\n       params: { slug: post.id }, props: { post },\n     }));\n}\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n<MarkdownPostLayout frontmatter={post.data}>\n     <Content />\n</MarkdownPostLayout>\n```\n\nThis snippet shows you how to render your post within the layout, which is an important aspect of optional: make a content collection.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "code_examples", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Optional: Make a content collection in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse content collections to manage groups of similar content for better performance and organization.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/tutorial/6-islands/4", "title": "Optional: Make a content collection", "description": "This page covers how to update your blog using Astro‚Äôs content collections to manage groups of similar content, such as blog posts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 04:35:27", "type": "best_practices", "page_metadata": {"ogTitle": "Optional: Make a content collection", "og:url": "https://docs.astro.build/en/tutorial/6-islands/4/", "og:locale": "en", "og:title": "Optional: Make a content collection", "ogSiteName": "Docs", "ogUrl": "https://docs.astro.build/en/tutorial/6-islands/4/", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Optional: Make a content collection | Docs", "ogDescription": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "twitter:card": "summary_large_image", "og:description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "og:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "favicon": "https://docs.astro.build/favicon.ico", "language": "en", "ogLocale": "en", "og:type": "article", "og:site_name": "Docs", "twitter:image": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "twitter:site": "astrodotbuild", "ogImage": "https://docs.astro.build/open-graph/en/tutorial/6-islands/4.webp", "viewport": "width=device-width, initial-scale=1", "description": "Tutorial: Build your first Astro blog ‚Äî\nConvert your blog from file-based routing to content collections", "docsearch:language": "en", "scrapeId": "90f537a2-ae84-4e4f-b850-ce3e65736064", "sourceURL": "https://docs.astro.build/en/tutorial/6-islands/4", "url": "https://docs.astro.build/en/tutorial/6-islands/4/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Kontent.ai & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Kontent.ai & Astro in astro.\n\n# Kontent.ai & Astro\n\nKontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.Here's a quick rundown of what this is about:\n\n## Integrating with Astro\n\nIn this section, you‚Äôll use the Kontent.ai TypeScript SDK to connect your Kontent.ai project to your Astro application.\n\n## Prerequisites\n\nTo get started, you‚Äôll need the following:\n\n1. **Kontent.ai project** - If you don‚Äôt have a Kontent.ai account yet, sign up for free and create a new project.\n\n2. **Delivery API keys** - You will need the Environment ID for published content and the Preview API key for fetching drafts (optional). Both keys are located in the **Environment Settings -> API keys** tab in Kontent.ai.\n\n## Setting up credentials\n\nTo add your Kontent.ai credentials to Astro, create a `.env` file in the root of your project with the following variables:\n\n```\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\n```\n\nNow, these environment variables can be used in your Astro project.\n\nIf you would like to get TypeScript IntelliSense for these environment variables, you can create a new `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```\ninterface ImportMetaEnv {\n  readonly KONTENT_ENVIRONMENT_ID: string;\n  readonly KONTENT_PREVIEW_API_KEY: string;\n}\n```\n\nYour root directory should now include these new files:\n\n- Directorysrc/\n- **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n\n## Installing dependencies\n\nTo connect Astro with your Kontent.ai project, install the Kontent.ai TypeScript SDK:\n\n- [npm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1668)\n- [pnpm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1669)\n- [Yarn](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1670)\n\n```\n  npm install @kontent-ai/delivery-sdk\n```\n\n```\n  pnpm add @kontent-ai/delivery-sdk\n```\n\n```\n  yarn add @kontent-ai/delivery-sdk\n```\n\nNext, create a new file called `kontent.ts` in the `src/lib/` directory of your Astro project.\n\n```\nimport { createDeliveryClient } from \"@kontent-ai/delivery-sdk\";\n\nexport const deliveryClient = createDeliveryClient({\n    environmentId: import.meta.env.KONTENT_ENVIRONMENT_ID,\n    previewApiKey: import.meta.env.KONTENT_PREVIEW_API_KEY,\n});\n```\n\nThis implementation creates a new `DeliveryClient` object using credentials from the `.env` file.\n\nFinally, the root directory of your Astro project should now include these new files:\n\n- Directorysrc/\n- Directorylib/\n- **kontent.ts**\n- env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n\n## Fetching data\n\nThe `DeliveryClient` is now available to all components. To fetch content, use the `DeliveryClient` and method chaining to define your desired items. This example shows a basic fetch of blog posts and renders their titles in a list:\n\n```\n---\nimport { deliveryClient } from \"../lib/kontent\";\n\nconst blogPosts = await deliveryClient\n    .items()\n    .type(\"blogPost\")\n    .toPromise()\n---\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Astro</title>\n  </head>\n  <body>\n        <ul>\n        {blogPosts.data.items.map(blogPost => (\n            <li>{blogPost.elements.title.value}</li>\n        ))}\n        </ul>\n    </body>\n</html>\n```\n\nYou can find more querying options in the Kontent.ai documentation.\n\n## Making a blog with Astro and Kontent.ai\n\nWith the setup above, you are now able to create a blog that uses Kontent.ai as the source of content.\n\n## Prerequisites\n\n1. **Kontent.ai project** - For this tutorial, using a blank project is recommended. If you already have some content types in your content model, you may use them, but you will need to modify the code snippets to match your content model.\n\n2. **Astro project configured for content fetching from Kontent.ai** - see above for more details on how to set up an Astro project with Kontent.ai.\n\n## Setting up content model\n\nIn Kontent.ai, navigate to **Content model** and create a new content type with the following fields and values:\n\n- **Name:** Blog Post\n- Elements:\n  - Text field\n    - **Name:** Title\n    - **Element Required:** yes\n  - Rich text field\n    - **Name:** Teaser\n    - **Element Required:** yes\n    - **Allowed in this element:** only check Text\n  - Rich text field\n    - **Name:** Content\n    - **Element Required:** yes\n  - Date & time field\n    - **Name:** Date\n  - URL slug field\n    - **Name:** URL slug\n    - **Element Required:** yes\n    - **Auto-generate from:** select ‚ÄúTitle‚Äù\n\nThen, click on **Save Changes**.\n\n## Creating content\n\nNow, navigate to **Content & assets** tab and create a new content item of type **Blog Post**. Fill the fields using these values:\n\n- **Content item name:** Astro\n- **Title:** Astro is amazing\n- **Teaser:** Astro is an all-in-one framework for building fast websites faster.\n- **Content:** You can use JavaScript to implement the website functionality, but no client bundle is necessary.\n- **Date & time:** select today\n- **URL slug:** astro-is-amazing\n\nWhen you‚Äôre finished, publish the blog post using the **Publish** button at the top.\n\n_Note: Feel free to create as many blog posts as you like before moving to the next step._\n\n## Generating content model in TypeScript\n\nNext, you‚Äôll generate TypeScript types out of your content model.\n\nFirst, install the Kontent.ai JS model generator, ts-node, and dotenv:\n\n- [npm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1671)\n- [pnpm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1672)\n- [Yarn](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1673)\n\n```\n  npm install @kontent-ai/model-generator ts-node dotenv\n```\n\n```\n  pnpm add @kontent-ai/model-generator ts-node dotenv\n```\n\n```\n  yarn add @kontent-ai/model-generator ts-node dotenv\n```\n\nThen, add the following script to package.json:\n\n```\n{\n    ...\n    \"scripts\": {\n        ...\n        \"regenerate:models\": \"ts-node --esm ./generate-models.ts\"\n    },\n}\n```\n\nBecause the types require structural information about your project that is not available in the public API, you also need to add a Content Management API key to the `.env` file. You can generate the key under **Environment settings -> API keys -> Management API**.\n\n```\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\nKONTENT_MANAGEMENT_API_KEY=YOUR_MANAGEMENT_API_KEY\n```\n\nFinally, add the script `generate-models.ts` that configures the model generator to generate the models:\n\n```\nimport { generateModelsAsync, textHelper } from '@kontent-ai/model-generator'\nimport { rmSync, mkdirSync } from 'fs'\nimport * as dotenv from 'dotenv'\n\ndotenv.config()\n\nconst runAsync = async () => {\n  rmSync('./src/models', { force: true, recursive: true })\n  mkdirSync('./src/models')\n  // change working directory to models\n  process.chdir('./src/models')\n  await generateModelsAsync({\n    sdkType: 'delivery',\n    apiKey: process.env.KONTENT_MANAGEMENT_API_KEY ?? '',\n    environmentId: process.env.KONTENT_ENVIRONMENT_ID ?? '',\n    addTimestamp: false,\n    isEnterpriseSubscription: false,\n  })\n}\n// Self-invocation async function\n;(async () => {\n  await runAsync()\n})().catch(err => {\n  console.error(err)\n  throw err\n})\n```\n\nNow, execute it:\n\n- [npm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1674)\n- [pnpm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1675)\n- [Yarn](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1676)\n\n```\n  npm run regenerate:models\n```\n\n```\n  pnpm run regenerate:models\n```\n\n```\n  yarn run regenerate:models\n```\n\n\n## Displaying a list of blog posts\n\nNow you‚Äôre ready to fetch some content. Go to the Astro page where you want to display a list of all blog posts, for example, the homepage `index.astro` in `src/pages`.\n\nFetch all blog posts in the frontmatter of the Astro page:\n\n```\n---\nimport { deliveryClient } from '../lib/kontent';\nimport type { BlogPost } from '../models';\nimport { contentTypes } from '../models/project/contentTypes';\nconst blogPosts = await deliveryClient\n    .items<BlogPost>\n    .type(contentTypes.blog_post.codename)\n    .toPromise()\n---\n```\n\nIf you skipped the model generation, you can also use an untyped object and string literal to define the type:\n\n```\nconst blogPosts = await deliveryClient\n    .items()\n    .type(\"blogPost\")\n    .toPromise()\n```\n\nThe fetch call will return a `response` object which contains a list of all blog posts in `data.items`. In the HTML section of the Astro page, you can use the `map()` function to list the blog posts:\n\n```\n---\nimport { deliveryClient } from '../lib/kontent';\nimport type { BlogPost } from '../models';\nimport { contentTypes } from '../models/project/contentTypes';\nconst blogPosts = await deliveryClient\n    .items<BlogPost>\n    .type(contentTypes.blog_post.codename)\n    .toPromise()\n---\n\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>Astro</title>\n    </head>\n    <body>\n        <h1>Blog posts</h1>\n        <ul>\n            {blogPosts.data.items.map(blogPost => (\n                <li>\n                    <a href={`/blog/${blogPost.elements.url_slug.value}/`} title={blogPost.elements.title.value}>\n                        {blogPost.elements.title.value}\n                    </a>\n                </li>\n            ))}\n        </ul>\n    </body>\n</html>\n```\n\n## Generating individual blog posts\n\nThe last step of the tutorial is to generate detailed blog post pages.\n\n## Static site generation\n\nIn this section, you‚Äôll use the Static (SSG) Mode with Astro.\n\nFirst, create a file `[slug].astro` in `/src/pages/blog/` which needs to export a function `getStaticPaths` that collects all data from the CMS:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n---\n```\n\nSo far, the function fetches all blog posts from Kontent.ai. The code snippet is exactly the same as what you used on the home page.\n\nNext, the function must export paths and data for each blog post. You named the file `[slug].astro`, so the param which represents the URL slug is called `slug`:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n---\n```\n\nThe last part is to provide the HTML template and display each blog post:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n\nconst blogPost: BlogPost = Astro.props.blogPost\n---\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? \"\")}</time>\n    </body>\n</html>\n```\n\n## On-demand rendering\n\nIf your routes are rendered on demand, you will use dynamic routes to fetch the page data from Kontent.ai.\n\nCreate a new file `[slug].astro` in `/src/pages/blog/` and add the following code. The data fetching is very similar to previous use cases but adds an `equalsFilter` that lets us find the right blog post based on the used URL:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---\n```\n\nIf you‚Äôre not using generated types, you can instead use string literals to define the content item type and the filtered element codename:\n\n```\nconst data = await deliveryClient\n        .items()\n        .equalsFilter(\"url_slug\", slug ?? '')\n        .type(\"blog_post\")\n        .limitParameter(1)\n        .toPromise()\n```\n\nLastly, add the HTML code to render the blog post. This part is the same as with static generation:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? '')}</time>\n    </body>\n</html>\n```\n\n## Publishing your site\n\nTo deploy your website, visit the deployment guides and follow the instructions for your preferred hosting provider.\n\n## Rebuild on Kontent.ai changes\n\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Kontent.ai events.\n\n## Netlify\n\nTo set up a webhook in Netlify:\n\n1. Go to your site dashboard and click on **Build & deploy**.\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n\n## Vercel\n\nTo set up a webhook in Vercel:\n\n1. Go to your project dashboard and click on **Settings**.\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n\n## Adding a webhook to Kontent.ai\n\nIn the Kontent.ai app, go to **Environment settings -> Webhooks**. Click on **Create new webhook** and provide a name for your new webhook. Paste in the URL you copied from Netlify or Vercel and select which events should trigger the webhook. By default, for rebuilding your site when published content changes, you only need **Publish** and **Unpublish** events under **Delivery API triggers**. When you‚Äôre finished, click on Save.\n\nNow, whenever you publish a new blog post in Kontent.ai, a new build will be triggered and your blog will be updated.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "overview", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrating with astro in astro?\n\nAssistant: To integrating with astro in astro, here's what you do:\nIn this section, you‚Äôll use the Kontent.ai TypeScript SDK to connect your Kontent.ai project to your Astro application..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nTo get started, you‚Äôll need the following:\n\n1. **Kontent.ai project** - If you don‚Äôt have a Kontent.ai account yet, sign up for free and create a new project.\n\n2. **Delivery API keys** - You will need the Environment ID for published content and the Preview API key for fetching drafts (optional). Both keys are located in the **Environment Settings -> API keys** tab in Kontent.ai..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I setting up credentials in astro?\n\nAssistant: To setting up credentials in astro, here's what you do:\nTo add your Kontent.ai credentials to Astro, create a `.env` file in the root of your project with the following variables:\n\n```\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\n```\n\nNow, these environment variables can be used in your Astro project.\n\nIf you would like to get TypeScript IntelliSense for these environment variables, you can create a new `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```\ninterface ImportMetaEnv {\n  readonly KONTENT_ENVIRONMENT_ID: string;\n  readonly KONTENT_PREVIEW_API_KEY: string;\n}\n```\n\nYour root directory should now include these new files:\n\n- Directorysrc/\n- **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I installing dependencies in astro?\n\nAssistant: To installing dependencies in astro, here's what you do:\nTo connect Astro with your Kontent.ai project, install the Kontent.ai TypeScript SDK:\n\n- [npm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1668)\n- [pnpm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1669)\n- [Yarn](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1670)\n\n```\n  npm install @kontent-ai/delivery-sdk\n```\n\n```\n  pnpm add @kontent-ai/delivery-sdk\n```\n\n```\n  yarn add @kontent-ai/delivery-sdk\n```\n\nNext, create a new file called `kontent.ts` in the `src/lib/` directory of your Astro project.\n\n```\nimport { createDeliveryClient } from \"@kontent-ai/delivery-sdk\";\n\nexport const deliveryClient = createDeliveryClient({\n    environmentId: import.meta.env.KONTENT_ENVIRONMENT_ID,\n    previewApiKey: import.meta.env.KONTENT_PREVIEW_API_KEY,\n});\n```\n\nThis implementation creates a new `DeliveryClient` object using credentials from the `.env` file.\n\nFinally, the root directory of your Astro project should now include these new files:\n\n- Directorysrc/\n- Directorylib/\n- **kontent.ts**\n- env.d.ts\n- .env\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I fetching data in astro?\n\nAssistant: To fetching data in astro, here's what you do:\nThe `DeliveryClient` is now available to all components. To fetch content, use the `DeliveryClient` and method chaining to define your desired items. This example shows a basic fetch of blog posts and renders their titles in a list:\n\n```\n---\nimport { deliveryClient } from \"../lib/kontent\";\n\nconst blogPosts = await deliveryClient\n    .items()\n    .type(\"blogPost\")\n    .toPromise()\n---\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Astro</title>\n  </head>\n  <body>\n        <ul>\n        {blogPosts.data.items.map(blogPost => (\n            <li>{blogPost.elements.title.value}</li>\n        ))}\n        </ul>\n    </body>\n</html>\n```\n\nYou can find more querying options in the Kontent.ai documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I making a blog with astro and kontent.ai in astro?\n\nAssistant: To making a blog with astro and kontent.ai in astro, here's what you do:\nWith the setup above, you are now able to create a blog that uses Kontent.ai as the source of content..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\n1. **Kontent.ai project** - For this tutorial, using a blank project is recommended. If you already have some content types in your content model, you may use them, but you will need to modify the code snippets to match your content model.\n\n2. **Astro project configured for content fetching from Kontent.ai** - see above for more details on how to set up an Astro project with Kontent.ai..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I setting up content model in astro?\n\nAssistant: To setting up content model in astro, here's what you do:\nIn Kontent.ai, navigate to **Content model** and create a new content type with the following fields and values:\n\n- **Name:** Blog Post\n- Elements:\n  - Text field\n    - **Name:** Title\n    - **Element Required:** yes\n  - Rich text field\n    - **Name:** Teaser\n    - **Element Required:** yes\n    - **Allowed in this element:** only check Text\n  - Rich text field\n    - **Name:** Content\n    - **Element Required:** yes\n  - Date & time field\n    - **Name:** Date\n  - URL slug field\n    - **Name:** URL slug\n    - **Element Required:** yes\n    - **Auto-generate from:** select ‚ÄúTitle‚Äù\n\nThen, click on **Save Changes**..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating content in astro?\n\nAssistant: To creating content in astro, here's what you do:\nNow, navigate to **Content & assets** tab and create a new content item of type **Blog Post**. Fill the fields using these values:\n\n- **Content item name:** Astro\n- **Title:** Astro is amazing\n- **Teaser:** Astro is an all-in-one framework for building fast websites faster.\n- **Content:** You can use JavaScript to implement the website functionality, but no client bundle is necessary.\n- **Date & time:** select today\n- **URL slug:** astro-is-amazing\n\nWhen you‚Äôre finished, publish the blog post using the **Publish** button at the top.\n\n_Note: Feel free to create as many blog posts as you like before moving to the next step._.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I generating content model in typescript in astro?\n\nAssistant: To generating content model in typescript in astro, here's what you do:\nNext, you‚Äôll generate TypeScript types out of your content model.\n\nFirst, install the Kontent.ai JS model generator, ts-node, and dotenv:\n\n- [npm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1671)\n- [pnpm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1672)\n- [Yarn](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1673)\n\n```\n  npm install @kontent-ai/model-generator ts-node dotenv\n```\n\n```\n  pnpm add @kontent-ai/model-generator ts-node dotenv\n```\n\n```\n  yarn add @kontent-ai/model-generator ts-node dotenv\n```\n\nThen, add the following script to package.json:\n\n```\n{\n    ...\n    \"scripts\": {\n        ...\n        \"regenerate:models\": \"ts-node --esm ./generate-models.ts\"\n    },\n}\n```\n\nBecause the types require structural information about your project that is not available in the public API, you also need to add a Content Management API key to the `.env` file. You can generate the key under **Environment settings -> API keys -> Management API**.\n\n```\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\nKONTENT_MANAGEMENT_API_KEY=YOUR_MANAGEMENT_API_KEY\n```\n\nFinally, add the script `generate-models.ts` that configures the model generator to generate the models:\n\n```\nimport { generateModelsAsync, textHelper } from '@kontent-ai/model-generator'\nimport { rmSync, mkdirSync } from 'fs'\nimport * as dotenv from 'dotenv'\n\ndotenv.config()\n\nconst runAsync = async () => {\n  rmSync('./src/models', { force: true, recursive: true })\n  mkdirSync('./src/models')\n  // change working directory to models\n  process.chdir('./src/models')\n  await generateModelsAsync({\n    sdkType: 'delivery',\n    apiKey: process.env.KONTENT_MANAGEMENT_API_KEY ?? '',\n    environmentId: process.env.KONTENT_ENVIRONMENT_ID ?? '',\n    addTimestamp: false,\n    isEnterpriseSubscription: false,\n  })\n}\n// Self-invocation async function\n;(async () => {\n  await runAsync()\n})().catch(err => {\n  console.error(err)\n  throw err\n})\n```\n\nNow, execute it:\n\n- [npm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1674)\n- [pnpm](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1675)\n- [Yarn](https://docs.astro.build/en/guides/cms/kontent-ai/#tab-panel-1676)\n\n```\n  npm run regenerate:models\n```\n\n```\n  pnpm run regenerate:models\n```\n\n```\n  yarn run regenerate:models\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I displaying a list of blog posts in astro?\n\nAssistant: To displaying a list of blog posts in astro, here's what you do:\nNow you‚Äôre ready to fetch some content. Go to the Astro page where you want to display a list of all blog posts, for example, the homepage `index.astro` in `src/pages`.\n\nFetch all blog posts in the frontmatter of the Astro page:\n\n```\n---\nimport { deliveryClient } from '../lib/kontent';\nimport type { BlogPost } from '../models';\nimport { contentTypes } from '../models/project/contentTypes';\nconst blogPosts = await deliveryClient\n    .items<BlogPost>\n    .type(contentTypes.blog_post.codename)\n    .toPromise()\n---\n```\n\nIf you skipped the model generation, you can also use an untyped object and string literal to define the type:\n\n```\nconst blogPosts = await deliveryClient\n    .items()\n    .type(\"blogPost\")\n    .toPromise()\n```\n\nThe fetch call will return a `response` object which contains a list of all blog posts in `data.items`. In the HTML section of the Astro page, you can use the `map()` function to list the blog posts:\n\n```\n---\nimport { deliveryClient } from '../lib/kontent';\nimport type { BlogPost } from '../models';\nimport { contentTypes } from '../models/project/contentTypes';\nconst blogPosts = await deliveryClient\n    .items<BlogPost>\n    .type(contentTypes.blog_post.codename)\n    .toPromise()\n---\n\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>Astro</title>\n    </head>\n    <body>\n        <h1>Blog posts</h1>\n        <ul>\n            {blogPosts.data.items.map(blogPost => (\n                <li>\n                    <a href={`/blog/${blogPost.elements.url_slug.value}/`} title={blogPost.elements.title.value}>\n                        {blogPost.elements.title.value}\n                    </a>\n                </li>\n            ))}\n        </ul>\n    </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I generating individual blog posts in astro?\n\nAssistant: To generating individual blog posts in astro, here's what you do:\nThe last step of the tutorial is to generate detailed blog post pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I static site generation in astro?\n\nAssistant: To static site generation in astro, here's what you do:\nIn this section, you‚Äôll use the Static (SSG) Mode with Astro.\n\nFirst, create a file `[slug].astro` in `/src/pages/blog/` which needs to export a function `getStaticPaths` that collects all data from the CMS:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n---\n```\n\nSo far, the function fetches all blog posts from Kontent.ai. The code snippet is exactly the same as what you used on the home page.\n\nNext, the function must export paths and data for each blog post. You named the file `[slug].astro`, so the param which represents the URL slug is called `slug`:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n---\n```\n\nThe last part is to provide the HTML template and display each blog post:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n\nconst blogPost: BlogPost = Astro.props.blogPost\n---\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? \"\")}</time>\n    </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I on-demand rendering in astro?\n\nAssistant: To on-demand rendering in astro, here's what you do:\nIf your routes are rendered on demand, you will use dynamic routes to fetch the page data from Kontent.ai.\n\nCreate a new file `[slug].astro` in `/src/pages/blog/` and add the following code. The data fetching is very similar to previous use cases but adds an `equalsFilter` that lets us find the right blog post based on the used URL:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---\n```\n\nIf you‚Äôre not using generated types, you can instead use string literals to define the content item type and the filtered element codename:\n\n```\nconst data = await deliveryClient\n        .items()\n        .equalsFilter(\"url_slug\", slug ?? '')\n        .type(\"blog_post\")\n        .limitParameter(1)\n        .toPromise()\n```\n\nLastly, add the HTML code to render the blog post. This part is the same as with static generation:\n\n```\n---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? '')}</time>\n    </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publishing your site in astro?\n\nAssistant: To publishing your site in astro, here's what you do:\nTo deploy your website, visit the deployment guides and follow the instructions for your preferred hosting provider..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I rebuild on kontent.ai changes in astro?\n\nAssistant: To rebuild on kontent.ai changes in astro, here's what you do:\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Kontent.ai events..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I netlify in astro?\n\nAssistant: To netlify in astro, here's what you do:\nTo set up a webhook in Netlify:\n\n1. Go to your site dashboard and click on **Build & deploy**.\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I vercel in astro?\n\nAssistant: To vercel in astro, here's what you do:\nTo set up a webhook in Vercel:\n\n1. Go to your project dashboard and click on **Settings**.\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding a webhook to kontent.ai in astro?\n\nAssistant: To adding a webhook to kontent.ai in astro, here's what you do:\nIn the Kontent.ai app, go to **Environment settings -> Webhooks**. Click on **Create new webhook** and provide a name for your new webhook. Paste in the URL you copied from Netlify or Vercel and select which events should trigger the webhook. By default, for rebuilding your site when published content changes, you only need **Publish** and **Unpublish** events under **Delivery API triggers**. When you‚Äôre finished, click on Save.\n\nNow, whenever you publish a new blog post in Kontent.ai, a new build will be triggered and your blog will be updated..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Kontent.ai & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setting up credentials**:\n\n```yaml\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\n```\n\nThis snippet shows you how to setting up credentials, which is an important aspect of kontent.ai & astro.\n\n**TypeScript IntelliSense**:\n\n```yaml\ninterface ImportMetaEnv {\n  readonly KONTENT_ENVIRONMENT_ID: string;\n  readonly KONTENT_PREVIEW_API_KEY: string;\n}\n```\n\nThis snippet shows you how to typescript intellisense, which is an important aspect of kontent.ai & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Kontent.ai & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you would like to get TypeScript IntelliSense for these environment variables, create a new `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv`.\n\nFeel free to create as many blog posts as you like before moving to the next step.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/kontent-ai", "title": "Kontent.ai & Astro", "description": "Kontent.ai is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:53:05", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://docs.astro.build/en/guides/cms/kontent-ai/", "language": "en", "og:description": "Add content to your Astro project using Kontent.ai as CMS", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "twitter:card": "summary_large_image", "ogDescription": "Add content to your Astro project using Kontent.ai as CMS", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.astro.build/favicon.ico", "description": "Add content to your Astro project using Kontent.ai as CMS", "og:image": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "title": "Kontent.ai & Astro | Docs", "ogLocale": "en", "og:url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "og:locale": "en", "og:site_name": "Docs", "twitter:site": "astrodotbuild", "og:title": "Kontent.ai & Astro", "og:type": "article", "ogTitle": "Kontent.ai & Astro", "ogSiteName": "Docs", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/kontent-ai.webp", "scrapeId": "4b40ad0e-2ed6-41a5-944a-f5225d69953e", "sourceURL": "https://docs.astro.build/en/guides/cms/kontent-ai", "url": "https://docs.astro.build/en/guides/cms/kontent-ai/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Strapi & Astro is in astro?\n\nAssistant: Sure, I'd be happy to explain Strapi & Astro in astro.\n\n# Strapi & Astro\n\nThis guide will build a wrapper function to connect Strapi with Astro.Here's a quick rundown of what this is about:\n\n## Integrating with Astro\n\nThis guide will build a wrapper function to connect Strapi with Astro.\n\n## Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don‚Äôt have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.\n2. **A Strapi CMS server** - You can [set up a Strapi server on a local environment](https://docs.strapi.io/dev-docs/quick-start).\n\n## Adding the Strapi URL in `.env`\n\nTo add your Strapi URL to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variable:\n\n```\nSTRAPI_URL=\"http://127.0.0.1:1337\" # or use your IP address\n```\n\nRestart the dev server to use this environment variable in your Astro project.\n\nIf you would like to have IntelliSense for your environment variable, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```\ninterface ImportMetaEnv {\n  readonly STRAPI_URL: string;\n}\n```\n\nYour root directory should now include the new file(s):\n\n- Directorysrc/\n- **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n\n## Creating the API wrapper\n\nCreate a new file at `src/lib/strapi.ts` and add the following wrapper function to interact with the Strapi API:\n\n```\ninterface Props {\n  endpoint: string;\n  query?: Record<string, string>;\n  wrappedByKey?: string;\n  wrappedByList?: boolean;\n}\n\n/**\n * Fetches data from the Strapi API\n * @param endpoint - The endpoint to fetch from\n * @param query - The query parameters to add to the url\n * @param wrappedByKey - The key to unwrap the response from\n * @param wrappedByList - If the response is a list, unwrap it\n * @returns\n */\nexport default async function fetchApi<T>({\n  endpoint,\n  query,\n  wrappedByKey,\n  wrappedByList,\n}: Props): Promise<T> {\n  if (endpoint.startsWith('/')) {\n    endpoint = endpoint.slice(1);\n  }\n  const url = new URL(`${import.meta.env.STRAPI_URL}/api/${endpoint}`);\n  if (query) {\n    Object.entries(query).forEach(([key, value]) => {\n      url.searchParams.append(key, value);\n    });\n  }\n  const res = await fetch(url.toString());\n  let data = await res.json();\n  if (wrappedByKey) {\n    data = data[wrappedByKey];\n  }\n  if (wrappedByList) {\n    data = data[0];\n  }\n  return data as T;\n}\n```\n\nThis function requires an object with the following properties:\n\n1. `endpoint` - The endpoint you are fetching.\n2. `query` - The query parameters to add to the end of URL\n3. `wrappedByKey` - The `data` key in the object that wraps your `Response`.\n4. `wrappedByList` - A parameter to ‚Äúunwrap‚Äù the list returned by Strapi, and return only the first item.\n\n## Optional: Creating the Article interface\n\nIf you are using TypeScript, create the following Article interface to correspond to the Strapi content types at `src/interfaces/article.ts`:\n\n```\nexport default interface Article {\n  id: number;\n  attributes: {\n    title: string;\n    description: string;\n    content: string;\n    slug: string;\n    createdAt: string;\n    updatedAt: string;\n    publishedAt: string;\n  };\n}\n```\n\n- Directorysrc/\n- Directoryinterfaces/\n- **article.ts**\n- Directorylib/\n- strapi.ts\n- env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n\n## Displaying a list of articles\n\n1. Update your home page `src/pages/index.astro` to display a list of blog posts, each with a description and a link to its own page.\n\n2. Import the wrapper function and the interface. Add the following API call to fetch your articles and return a list:\n\n```\n---\nimport fetchApi from '../lib/strapi';\nimport type Article from '../interfaces/article';\n\nconst articles = await fetchApi<Article[]>({\n     endpoint: 'articles', // the content type to fetch\n     wrappedByKey: 'data', // the key to unwrap the response\n});\n---\n```\n\nThe API call requests data from `http://localhost:1337/api/articles` and returns `articles`: an array of json objects representing your data:\n\n```\n[\n     {\n       id: 1,\n       attributes: {\n         title: \"What's inside a Black Hole\",\n         description: \"Maybe the answer is in this article, or not...\",\n         content: \"Well, we don't know yet...\",\n         slug: \"what-s-inside-a-black-hole\",\n         createdAt: \"2023-05-28T13:19:46.421Z\",\n         updatedAt: \"2023-05-28T13:19:46.421Z\",\n         publishedAt: \"2023-05-28T13:19:45.826Z\"\n       }\n     },\n     // ...\n]\n```\n\n3. Using data from the `articles` array returned by the API, display your Strapi blog posts in a list. These posts will link to their own individual pages, which you will create in the next step.\n\n```\n---\nimport fetchApi from '../lib/strapi';\nimport type Article from '../interfaces/article';\n\nconst articles = await fetchApi<Article[]>({\n     endpoint: 'articles?populate=image',\n     wrappedByKey: 'data',\n});\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n     <head>\n       <title>Strapi & Astro</title>\n     </head>\n     <body>\n       <main>\n         <ul>\n           {\n             articles.map((article) => (\n               <li>\n                 <a href={`/blog/${article.attributes.slug}/`}>\n                   {article.attributes.title}\n                 </a>\n               </li>\n             ))\n           }\n         </ul>\n       </main>\n     </body>\n</html>\n```\n\n## Generating article pages\n\nCreate the file `src/pages/blog/[slug].astro` to [dynamically generate a page](https://docs.astro.build/en/guides/routing/#dynamic-routes) for each article.\n\n- Directorysrc/\n- Directoryinterfaces/\n- article.ts\n- Directorylib/\n- strapi.ts\n- Directorypages/\n- index.astro\n- Directoryblog/\n- **[slug].astro**\n- env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n\n## Static site generation\n\nIn Astro‚Äôs default static mode (SSG), use [`getStaticPaths()`](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths) to fetch your list of articles from Strapi.\n\n```\n---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\n\ntype Props = Article;\nconst article = Astro.props;\n---\n```\n\nCreate the template for each page using the properties of each post object.\n\n```\n---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\n\ntype Props = Article;\nconst article = Astro.props;\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n      <h1>{article.attributes.title}</h1>\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>\n```\n\n## On-demand rendering\n\nIf you‚Äôve [opted into on-demand rendering with an adapter](https://docs.astro.build/en/guides/on-demand-rendering/), [generate your dynamic routes](https://docs.astro.build/en/guides/routing/#server-ssr-mode) using the following code:\nCreate the `src/pages/blog/[slug].astro` file:\n\n```\n---\nimport fetchApi from '../../../lib/strapi';\nimport type Article from '../../../interfaces/article';\nconst { slug } = Astro.params;\nlet article: Article;\ntry {\n  article = await fetchApi<Article>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n    wrappedByList: true,\n    query: {\n      'filters[slug][$eq]': slug || '',\n    },\n  });\n} catch (error) {\n  return Astro.redirect('/404');\n}\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n      <h1>{article.attributes.title}</h1>\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>\n```\n\nThis file will fetch and render the page data from Strapi that matches the dynamic `slug` parameter.\n\nSince you are using a redirect to `/404`, create a 404 page in `src/pages`:\n\n```\n<html lang=\"en\">\n  <head>\n    <title>Not found</title>\n  </head>\n  <body>\n    <p>Sorry, this page does not exist.</p>\n    <img src=\"https://http.cat/404\" />\n  </body>\n</html>\n```\n\nIf the article is not found, the user will be redirected to this 404 page and be greeted by a lovely cat.\n\n## Publishing your site\n\nTo deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Rebuild on changes\n\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Strapi.\n\n## Netlify\n\nTo set up a webhook in Netlify:\n1. Go to your site dashboard and click on **Build & deploy**.\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n\n## Vercel\n\nTo set up a webhook in Vercel:\n1. Go to your project dashboard and click on **Settings**.\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n\n## Adding a webhook to Strapi\n\nFollow [the Strapi webhooks guide](https://strapi.io/blog/webhooks) to create a webhook in your Strapi admin panel.\n\n## Official Resources\n\n- [Strapi Blog Guide For React](https://strapi.io/blog/build-a-blog-with-next-react-js-strapi) by Strapi\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "overview", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrating with astro in astro?\n\nAssistant: To integrating with astro in astro, here's what you do:\nThis guide will build a wrapper function to connect Strapi with Astro..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prerequisites in astro?\n\nAssistant: To prerequisites in astro, here's what you do:\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don‚Äôt have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.\n2. **A Strapi CMS server** - You can [set up a Strapi server on a local environment](https://docs.strapi.io/dev-docs/quick-start)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding the strapi url in `.env` in astro?\n\nAssistant: To adding the strapi url in `.env` in astro, here's what you do:\nTo add your Strapi URL to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variable:\n\n```\nSTRAPI_URL=\"http://127.0.0.1:1337\" # or use your IP address\n```\n\nRestart the dev server to use this environment variable in your Astro project.\n\nIf you would like to have IntelliSense for your environment variable, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```\ninterface ImportMetaEnv {\n  readonly STRAPI_URL: string;\n}\n```\n\nYour root directory should now include the new file(s):\n\n- Directorysrc/\n- **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I creating the api wrapper in astro?\n\nAssistant: To creating the api wrapper in astro, here's what you do:\nCreate a new file at `src/lib/strapi.ts` and add the following wrapper function to interact with the Strapi API:\n\n```\ninterface Props {\n  endpoint: string;\n  query?: Record<string, string>;\n  wrappedByKey?: string;\n  wrappedByList?: boolean;\n}\n\n/**\n * Fetches data from the Strapi API\n * @param endpoint - The endpoint to fetch from\n * @param query - The query parameters to add to the url\n * @param wrappedByKey - The key to unwrap the response from\n * @param wrappedByList - If the response is a list, unwrap it\n * @returns\n */\nexport default async function fetchApi<T>({\n  endpoint,\n  query,\n  wrappedByKey,\n  wrappedByList,\n}: Props): Promise<T> {\n  if (endpoint.startsWith('/')) {\n    endpoint = endpoint.slice(1);\n  }\n  const url = new URL(`${import.meta.env.STRAPI_URL}/api/${endpoint}`);\n  if (query) {\n    Object.entries(query).forEach(([key, value]) => {\n      url.searchParams.append(key, value);\n    });\n  }\n  const res = await fetch(url.toString());\n  let data = await res.json();\n  if (wrappedByKey) {\n    data = data[wrappedByKey];\n  }\n  if (wrappedByList) {\n    data = data[0];\n  }\n  return data as T;\n}\n```\n\nThis function requires an object with the following properties:\n\n1. `endpoint` - The endpoint you are fetching.\n2. `query` - The query parameters to add to the end of URL\n3. `wrappedByKey` - The `data` key in the object that wraps your `Response`.\n4. `wrappedByList` - A parameter to ‚Äúunwrap‚Äù the list returned by Strapi, and return only the first item..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I optional: creating the article interface in astro?\n\nAssistant: To optional: creating the article interface in astro, here's what you do:\nIf you are using TypeScript, create the following Article interface to correspond to the Strapi content types at `src/interfaces/article.ts`:\n\n```\nexport default interface Article {\n  id: number;\n  attributes: {\n    title: string;\n    description: string;\n    content: string;\n    slug: string;\n    createdAt: string;\n    updatedAt: string;\n    publishedAt: string;\n  };\n}\n```\n\n- Directorysrc/\n- Directoryinterfaces/\n- **article.ts**\n- Directorylib/\n- strapi.ts\n- env.d.ts\n- .env\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I displaying a list of articles in astro?\n\nAssistant: To displaying a list of articles in astro, here's what you do:\n1. Update your home page `src/pages/index.astro` to display a list of blog posts, each with a description and a link to its own page.\n\n2. Import the wrapper function and the interface. Add the following API call to fetch your articles and return a list:\n\n```\n---\nimport fetchApi from '../lib/strapi';\nimport type Article from '../interfaces/article';\n\nconst articles = await fetchApi<Article[]>({\n     endpoint: 'articles', // the content type to fetch\n     wrappedByKey: 'data', // the key to unwrap the response\n});\n---\n```\n\nThe API call requests data from `http://localhost:1337/api/articles` and returns `articles`: an array of json objects representing your data:\n\n```\n[\n     {\n       id: 1,\n       attributes: {\n         title: \"What's inside a Black Hole\",\n         description: \"Maybe the answer is in this article, or not...\",\n         content: \"Well, we don't know yet...\",\n         slug: \"what-s-inside-a-black-hole\",\n         createdAt: \"2023-05-28T13:19:46.421Z\",\n         updatedAt: \"2023-05-28T13:19:46.421Z\",\n         publishedAt: \"2023-05-28T13:19:45.826Z\"\n       }\n     },\n     // ...\n]\n```\n\n3. Using data from the `articles` array returned by the API, display your Strapi blog posts in a list. These posts will link to their own individual pages, which you will create in the next step.\n\n```\n---\nimport fetchApi from '../lib/strapi';\nimport type Article from '../interfaces/article';\n\nconst articles = await fetchApi<Article[]>({\n     endpoint: 'articles?populate=image',\n     wrappedByKey: 'data',\n});\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n     <head>\n       <title>Strapi & Astro</title>\n     </head>\n     <body>\n       <main>\n         <ul>\n           {\n             articles.map((article) => (\n               <li>\n                 <a href={`/blog/${article.attributes.slug}/`}>\n                   {article.attributes.title}\n                 </a>\n               </li>\n             ))\n           }\n         </ul>\n       </main>\n     </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I generating article pages in astro?\n\nAssistant: To generating article pages in astro, here's what you do:\nCreate the file `src/pages/blog/[slug].astro` to [dynamically generate a page](https://docs.astro.build/en/guides/routing/#dynamic-routes) for each article.\n\n- Directorysrc/\n- Directoryinterfaces/\n- article.ts\n- Directorylib/\n- strapi.ts\n- Directorypages/\n- index.astro\n- Directoryblog/\n- **[slug].astro**\n- env.d.ts\n- .env\n- astro.config.mjs\n- package.json.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I static site generation in astro?\n\nAssistant: To static site generation in astro, here's what you do:\nIn Astro‚Äôs default static mode (SSG), use [`getStaticPaths()`](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths) to fetch your list of articles from Strapi.\n\n```\n---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\n\ntype Props = Article;\nconst article = Astro.props;\n---\n```\n\nCreate the template for each page using the properties of each post object.\n\n```\n---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\n\ntype Props = Article;\nconst article = Astro.props;\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n      <h1>{article.attributes.title}</h1>\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I on-demand rendering in astro?\n\nAssistant: To on-demand rendering in astro, here's what you do:\nIf you‚Äôve [opted into on-demand rendering with an adapter](https://docs.astro.build/en/guides/on-demand-rendering/), [generate your dynamic routes](https://docs.astro.build/en/guides/routing/#server-ssr-mode) using the following code:\nCreate the `src/pages/blog/[slug].astro` file:\n\n```\n---\nimport fetchApi from '../../../lib/strapi';\nimport type Article from '../../../interfaces/article';\nconst { slug } = Astro.params;\nlet article: Article;\ntry {\n  article = await fetchApi<Article>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n    wrappedByList: true,\n    query: {\n      'filters[slug][$eq]': slug || '',\n    },\n  });\n} catch (error) {\n  return Astro.redirect('/404');\n}\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n      <h1>{article.attributes.title}</h1>\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>\n```\n\nThis file will fetch and render the page data from Strapi that matches the dynamic `slug` parameter.\n\nSince you are using a redirect to `/404`, create a 404 page in `src/pages`:\n\n```\n<html lang=\"en\">\n  <head>\n    <title>Not found</title>\n  </head>\n  <body>\n    <p>Sorry, this page does not exist.</p>\n    <img src=\"https://http.cat/404\" />\n  </body>\n</html>\n```\n\nIf the article is not found, the user will be redirected to this 404 page and be greeted by a lovely cat..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publishing your site in astro?\n\nAssistant: To publishing your site in astro, here's what you do:\nTo deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I rebuild on changes in astro?\n\nAssistant: To rebuild on changes in astro, here's what you do:\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Strapi..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I netlify in astro?\n\nAssistant: To netlify in astro, here's what you do:\nTo set up a webhook in Netlify:\n1. Go to your site dashboard and click on **Build & deploy**.\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I vercel in astro?\n\nAssistant: To vercel in astro, here's what you do:\nTo set up a webhook in Vercel:\n1. Go to your project dashboard and click on **Settings**.\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adding a webhook to strapi in astro?\n\nAssistant: To adding a webhook to strapi in astro, here's what you do:\nFollow [the Strapi webhooks guide](https://strapi.io/blog/webhooks) to create a webhook in your Strapi admin panel..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I official resources in astro?\n\nAssistant: To official resources in astro, here's what you do:\n- [Strapi Blog Guide For React](https://strapi.io/blog/build-a-blog-with-next-react-js-strapi) by Strapi.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "section_detail", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Strapi & Astro in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding the Strapi URL in `.env`**:\n\n```yaml\nSTRAPI_URL=\"http://127.0.0.1:1337\" # or use your IP address\n```\n\nThis snippet shows you how to adding the strapi url in `.env`, which is an important aspect of strapi & astro.\n\n**Creating the API wrapper**:\n\n```yaml\ninterface Props {\n  endpoint: string;\n  query?: Record<string, string>;\n  wrappedByKey?: string;\n  wrappedByList?: boolean;\n}\n\nexport default async function fetchApi<T>({\n  endpoint,\n  query,\n  wrappedByKey,\n  wrappedByList,\n}: Props): Promise<T> {\n  if (endpoint.startsWith('/')) {\n    endpoint = endpoint.slice(1);\n  }\n  const url = new URL(`${import.meta.env.STRAPI_URL}/api/${endpoint}`);\n  if (query) {\n    Object.entries(query).forEach(([key, value]) => {\n      url.searchParams.append(key, value);\n    });\n  }\n  const res = await fetch(url.toString());\n  let data = await res.json();\n  if (wrappedByKey) {\n    data = data[wrappedByKey];\n  }\n  if (wrappedByList) {\n    data = data[0];\n  }\n  return data as T;\n}\n```\n\nThis snippet shows you how to creating the api wrapper, which is an important aspect of strapi & astro.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "code_examples", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Strapi & Astro in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you would like to have IntelliSense for your environment variable, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv`.\n\nIf your project is using Astro‚Äôs default static mode, you will need to set up a webhook to trigger a new build when your content changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/cms/strapi", "title": "Strapi & Astro", "description": "This guide will build a wrapper function to connect Strapi with Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:01:14", "type": "best_practices", "page_metadata": {"ogLocale": "en", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogSiteName": "Docs", "description": "Add content to your Astro project using Strapi Headless CMS", "og:title": "Strapi & Astro", "twitter:card": "summary_large_image", "twitter:site": "astrodotbuild", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Strapi & Astro", "og:locale": "en", "language": "en", "og:description": "Add content to your Astro project using Strapi Headless CMS", "twitter:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:site_name": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "og:image": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "ogImage": "https://docs.astro.build/open-graph/en/guides/cms/strapi.webp", "og:type": "article", "title": "Strapi & Astro | Docs", "og:url": "https://docs.astro.build/en/guides/cms/strapi/", "ogUrl": "https://docs.astro.build/en/guides/cms/strapi/", "ogDescription": "Add content to your Astro project using Strapi Headless CMS", "scrapeId": "64b6a005-d583-4892-8864-2f84c2d14b83", "sourceURL": "https://docs.astro.build/en/guides/cms/strapi", "url": "https://docs.astro.build/en/guides/cms/strapi/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Upgrade to Astro v2 is in astro?\n\nAssistant: Sure, I'd be happy to explain Upgrade to Astro v2 in astro.\n\n# Upgrade to Astro v2\n\nThis guide will help you migrate from Astro v1 to Astro v2.Here's a quick rundown of what this is about:\n\n## Upgrade Astro\n\nUpdate your project‚Äôs version of Astro to the latest version using your package manager. If you‚Äôre using Astro integrations, please also update those to the latest version.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v2/#tab-panel-1930)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v2/#tab-panel-1931)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v2/#tab-panel-1932)\n\n```bash\n# Upgrade to Astro v2.x\nnpm install astro@latest\n\n# Example: upgrade React and Tailwind integrations\nnpm install @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v2.x\npnpm add astro@latest\n\n# Example: upgrade React and Tailwind integrations\npnpm add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v2.x\nyarn add astro@latest\n\n# Example: upgrade React and Tailwind integrations\nyarn add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n## Astro v2.0 Breaking Changes\n\nAstro v2.0 includes some breaking changes, as well as the removal of some previously deprecated features. If your project doesn‚Äôt work as expected after upgrading to v2.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n## Removed: Support for Node 14\n\nNode 14 is scheduled to reach its End of Life in April 2023.\n\nAstro v2.0 drops Node 14 support entirely, so that all Astro users can take advantage of Node‚Äôs more modern features.\n\n#### What should I do?\n\nCheck that both your development environment and your deployment environment are using **Node `16.12.0` or later**.\n\n1. Check your local version of Node using:\n\n```bash\nnode -v\n```\n\nIf your local development environment needs upgrading, [install Node](https://nodejs.org/en/download/).\n\n2. Check your [deployment environment‚Äôs](https://docs.astro.build/en/guides/deploy/) own documentation to verify that they support Node 16.\n\nYou can specify Node `16.12.0` for your Astro project either in a dashboard configuration setting, or a `.nvmrc` file.\n\n## Reserved: src/content/\n\nAstro v2.0 now includes the Collections API for organizing your Markdown and MDX files into [content collections](https://docs.astro.build/en/guides/content-collections/). This API reserves `src/content/` as a special folder.\n\n#### What should I do?\n\nRename an existing `src/content/` folder to avoid conflicts. This folder, if it exists, can now only be used for [content collections](https://docs.astro.build/en/guides/content-collections/).\n\n## Changed: Astro.site trailing slash\n\nIn v1.x, Astro ensured the URL you set as `site` in `astro.config.mjs` always had a trailing slash when accessed using `Astro.site`.\n\nAstro v2.0 no longer modifies the value of `site`. `Astro.site` will use the exact value defined, and a trailing slash must be specified if desired.\n\n#### What should I do?\n\nIn `astro.config.mjs`, add a trailing slash to the URL set in `site`.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  site: 'https://example.com',\n\n  site: 'https://example.com/',\n\n});\n```\n\n## Changed: _astro/ folder for build assets\n\nIn v1.x, assets were built to various locations, including `assets/`, `chunks/`, and to the root of the build output.\n\nAstro v2.0 moves and unifies the location of all build output assets to a new `_astro/` folder.\n\n- Directorydist/\n- Directory_astro\n- client.9218e799.js\n- index.df3f880e0.css\n\nYou can control this location with the [new `build.assets` configuration option](https://docs.astro.build/en/reference/configuration-reference/#buildassets).\n\n#### What should I do?\n\nUpdate your deployment platform configuration if it relies on the location of these assets.\n\n## Changed: Markdown plugin configuration\n\n#### Removed: extendDefaultPlugins\n\nIn v1.x, Astro used `markdown.extendDefaultPlugins` to re-enable Astro‚Äôs default plugins when adding your own Markdown plugins.\n\nAstro v2.0 removes this configuration option entirely because its behavior is now the default.\n\nApplying remark and rehype plugins in your Markdown configuration **no longer disables Astro‚Äôs default plugins**. GitHub-Flavored Markdown and Smartypants are now applied whether or not custom `remarkPlugins` or `rehypePlugins` are configured.\n\n##### What should I do?\n\nRemove `extendDefaultPlugins` in your configuration. This is now Astro‚Äôs default behavior in v2.0, and you can delete this line without any replacement.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  markdown: {\n\n    extendDefaultPlugins,\n\n  }\n\n});\n```\n\n#### Added: gfm and smartypants\n\nIn v1.x, you could choose to disable both of Astro‚Äôs default Markdown plugins (GitHub-Flavored Markdown and SmartyPants) by setting `markdown.extendDefaultPlugins: false`.\n\nAstro v2.0 replaces `markdown.extendDefaultPlugins: false` with separate Boolean options to individually control each of Astro‚Äôs built-in default Markdown plugins. These are enabled by default and can be set to `false` independently.\n\n##### What should I do?\n\nRemove `extendDefaultPlugins: false` and add the flags to disable each plugin individually instead.\n\n- `markdown.gfm: false` disables GitHub-Flavored Markdown\n- `markdown.smartypants: false` disables SmartyPants\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  markdown: {\n\n    extendDefaultPlugins: false,\n\n    smartypants: false,\n\n    gfm: false,\n\n  }\n\n});\n```\n\n## Changed: MDX plugin configuration\n\n#### Replaced: extendPlugins changed to extendMarkdownConfig\n\nIn v1.x, the MDX integration‚Äôs `extendPlugins` option managed how your MDX files should inherit your Markdown configuration: all your Markdown configuration ( `markdown`), or Astro‚Äôs default plugins only ( `default`).\n\nAstro v2.0 replaces the behavior controlled by `mdx.extendPlugins` with three new, independently-configurable options that are `true` by default:\n\n- **[`mdx.extendMarkdownConfig`](https://docs.astro.build/en/guides/integrations-guide/mdx/#extendmarkdownconfig)** to inherit all or none of your Markdown configuration\n- **`mdx.gfm`** to enable or disable GitHub-Flavored Markdown in MDX\n- **`mdx.smartypants`** to enable or disable SmartyPants in MDX\n\n##### What should I do?\n\nDelete `extendPlugins: 'markdown'` in your configuration. This is now the default behavior.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  integrations: [\n\n    mdx({\n\n      extendPlugins: 'markdown',\n\n    }),\n\n  ],\n\n});\n```\n\nReplace `extendPlugins: 'defaults'` with `extendMarkdownConfig: false` and add the separate options for GitHub-Flavored Markdown and SmartyPants to enable these default plugins individually in MDX.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  integrations: [\n\n    mdx({\n\n      extendPlugins: 'defaults',\n\n      extendMarkdownConfig: false,\n\n      smartypants: true,\n\n      gfm: true,\n\n    }),\n\n  ],\n\n});\n```\n\n## Added: More MDX config options to match Markdown\n\nAstro v2.0 allows you to now individually set [every available Markdown configuration option](https://docs.astro.build/en/reference/configuration-reference/#markdown-options) (except `drafts`) separately in your MDX integration configuration.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  markdown: {\n\n    remarkPlugins: [remarkPlugin1],\n\n    gfm: true,\n\n  },\n\n  integrations: [\n\n    mdx({\n\n      remarkPlugins: [remarkPlugin2],\n\n      gfm: false,\n\n    })\n\n  ]\n\n});\n```\n\n##### What should I do?\n\nRevisit your Markdown and MDX configuration and compare your existing config with the new options available.\n\n## Changed: Plugin access to frontmatter\n\nIn v1.x, remark and rehype plugins did not have access to user frontmatter. Astro merged plugin frontmatter with your file‚Äôs frontmatter, without passing the file frontmatter to your plugins.\n\nAstro v2.0 gives remark and rehype plugins access to user frontmatter via frontmatter injection. This allows plugin authors to modify a user‚Äôs existing frontmatter, or compute new properties based on other properties.\n\n#### What should I do?\n\nCheck any remark and rehype plugins you have written to see whether their behavior has changed. Note that `data.astro.frontmatter` is now the _complete_ Markdown or MDX document‚Äôs frontmatter, rather than an empty object.\n\n## Changed: RSS Configuration\n\nIn v1.x, Astro‚Äôs RSS package allowed you to use `items: import.meta.glob(...)` to generate a list of RSS feed items. This usage is now deprecated and will eventually be removed.\n\nAstro v2.0 introduces a `pagesGlobToRssItems()` wrapper to the `items` property.\n\n#### What should I do?\n\nImport, then wrap your existing function containing `import.meta.glob()` with the `pagesGlobToRssItems()` helper.\n\n```javascript\nimport rss, {\n\n  pagesGlobToRssItems\n\n} from '@astrojs/rss';\n\nexport async function get(context) {\n\n  return rss({\n\n    items: await pagesGlobToRssItems(\n\n      import.meta.glob('./blog/*.{md,mdx}'),\n\n    ),\n\n  });\n}\n```\n\n## Changed: Svelte IDE support\n\nAstro v2.0 requires a `svelte.config.js` file in your project if you are using [the `@astrojs/svelte` integration](https://docs.astro.build/en/guides/integrations-guide/svelte/). This is needed to provide IDE autocompletion.\n\n#### What should I do?\n\nAdd a `svelte.config.js` file to the root of your project:\n\n```javascript\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n};\n```\n\nFor new users, this file will be added automatically when running `astro add svelte`.\n\n## Removed: legacy.astroFlavoredMarkdown\n\nIn v1.0, Astro moved the old Astro-Flavored Markdown (also known as Components in Markdown) to a legacy feature.\n\nAstro v2.0 removes the `legacy.astroFlavoredMarkdown` option completely. Importing and using components in `.md` files will no longer work.\n\n#### What should I do?\n\nRemove this legacy flag. It is no longer available in Astro.\n\n```javascript\nexport default defineConfig({\n\n  legacy: {\n\n    astroFlavoredMarkdown: true,\n\n  },\n\n})\n```\n\nIf you were using this feature in v1.x, we recommend [using the MDX integration](https://docs.astro.build/en/guides/integrations-guide/mdx/) which allows you to combine components and JSX expressions with Markdown syntax.\n\n## Removed: Astro.resolve()\n\nIn v0.24, Astro deprecated `Astro.resolve()` for getting resolved URLs to assets that you might want to reference in the browser.\n\nAstro v2.0 removes this option entirely. `Astro.resolve()` in your code will cause an error.\n\n#### What should I do?\n\nResolve asset paths using `import` instead. For example:\n\n```markdown\n---\nimport 'style.css';\nimport imageUrl from './image.png';\n---\n\n<img src={imageUrl} />\n```\n\n## Removed: Astro.fetchContent()\n\nIn v0.26, Astro deprecated `Astro.fetchContent()` for fetching data from your local Markdown files.\n\nAstro v2.0 removes this option entirely. `Astro.fetchContent()` in your code will cause an error.\n\n#### What should I do?\n\nUse `Astro.glob()` to fetch Markdown files, or convert to the [Content Collections](https://docs.astro.build/en/guides/content-collections/) feature.\n\n```markdown\n---\nconst allPosts = await Astro.glob('./posts/*.md');\n---\n```\n\n## Removed: Astro.canonicalURL\n\nIn v1.0, Astro deprecated `Astro.canonicalURL` for constructing a canonical URL.\n\nAstro v2.0 removes this option entirely. `Astro.canonicalURL` in your code will cause an error.\n\n#### What should I do?\n\nUse `Astro.url` to construct a canonical URL.\n\n```markdown\n---\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n---\n```\n\n## Updated: Vite 4\n\nAstro v2.0 upgrades from Vite 3 to [Vite 4](https://vite.dev/), released in December 2022.\n\n#### What should I do?\n\nThere should be no changes to your code necessary! We‚Äôve handled most of the upgrade for you inside of Astro; however, some subtle Vite behaviors may still change between versions.\n\nRefer to the official [Vite Migration Guide](https://vite.dev/guide/migration.html) if you run into trouble.\n\n## Astro v2.0 Experimental Flags Removed\n\nRemove the following experimental flags from `astro.config.mjs`:\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    contentCollections: true,\n\n    prerender: true,\n\n    errorOverlay: true,\n\n  },\n\n})\n```\n\nThese features are now available by default:\n\n- [Content collections](https://docs.astro.build/en/guides/content-collections/) as a way to manage your Markdown and MDX files with type-safety.\n- [Prerendering individual pages to static HTML](https://docs.astro.build/en/guides/on-demand-rendering/) when using SSR to improve speed and cacheability.\n- A redesigned error message overlay.\n\n## Known Issues\n\nThere are currently no known issues.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "overview", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I upgrade astro in astro?\n\nAssistant: To upgrade astro in astro, here's what you do:\nUpdate your project‚Äôs version of Astro to the latest version using your package manager. If you‚Äôre using Astro integrations, please also update those to the latest version.\n\n- [npm](https://docs.astro.build/en/guides/upgrade-to/v2/#tab-panel-1930)\n- [pnpm](https://docs.astro.build/en/guides/upgrade-to/v2/#tab-panel-1931)\n- [Yarn](https://docs.astro.build/en/guides/upgrade-to/v2/#tab-panel-1932)\n\n```bash\n# Upgrade to Astro v2.x\nnpm install astro@latest\n\n# Example: upgrade React and Tailwind integrations\nnpm install @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v2.x\npnpm add astro@latest\n\n# Example: upgrade React and Tailwind integrations\npnpm add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\n```bash\n# Upgrade to Astro v2.x\nyarn add astro@latest\n\n# Example: upgrade React and Tailwind integrations\nyarn add @astrojs/react@latest @astrojs/tailwind@latest\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro v2.0 breaking changes in astro?\n\nAssistant: To astro v2.0 breaking changes in astro, here's what you do:\nAstro v2.0 includes some breaking changes, as well as the removal of some previously deprecated features. If your project doesn‚Äôt work as expected after upgrading to v2.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: support for node 14 in astro?\n\nAssistant: To removed: support for node 14 in astro, here's what you do:\nNode 14 is scheduled to reach its End of Life in April 2023.\n\nAstro v2.0 drops Node 14 support entirely, so that all Astro users can take advantage of Node‚Äôs more modern features.\n\n#### What should I do?\n\nCheck that both your development environment and your deployment environment are using **Node `16.12.0` or later**.\n\n1. Check your local version of Node using:\n\n```bash\nnode -v\n```\n\nIf your local development environment needs upgrading, [install Node](https://nodejs.org/en/download/).\n\n2. Check your [deployment environment‚Äôs](https://docs.astro.build/en/guides/deploy/) own documentation to verify that they support Node 16.\n\nYou can specify Node `16.12.0` for your Astro project either in a dashboard configuration setting, or a `.nvmrc` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I reserved: src/content/ in astro?\n\nAssistant: To reserved: src/content/ in astro, here's what you do:\nAstro v2.0 now includes the Collections API for organizing your Markdown and MDX files into [content collections](https://docs.astro.build/en/guides/content-collections/). This API reserves `src/content/` as a special folder.\n\n#### What should I do?\n\nRename an existing `src/content/` folder to avoid conflicts. This folder, if it exists, can now only be used for [content collections](https://docs.astro.build/en/guides/content-collections/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: astro.site trailing slash in astro?\n\nAssistant: To changed: astro.site trailing slash in astro, here's what you do:\nIn v1.x, Astro ensured the URL you set as `site` in `astro.config.mjs` always had a trailing slash when accessed using `Astro.site`.\n\nAstro v2.0 no longer modifies the value of `site`. `Astro.site` will use the exact value defined, and a trailing slash must be specified if desired.\n\n#### What should I do?\n\nIn `astro.config.mjs`, add a trailing slash to the URL set in `site`.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  site: 'https://example.com',\n\n  site: 'https://example.com/',\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: _astro/ folder for build assets in astro?\n\nAssistant: To changed: _astro/ folder for build assets in astro, here's what you do:\nIn v1.x, assets were built to various locations, including `assets/`, `chunks/`, and to the root of the build output.\n\nAstro v2.0 moves and unifies the location of all build output assets to a new `_astro/` folder.\n\n- Directorydist/\n- Directory_astro\n- client.9218e799.js\n- index.df3f880e0.css\n\nYou can control this location with the [new `build.assets` configuration option](https://docs.astro.build/en/reference/configuration-reference/#buildassets).\n\n#### What should I do?\n\nUpdate your deployment platform configuration if it relies on the location of these assets..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: markdown plugin configuration in astro?\n\nAssistant: To changed: markdown plugin configuration in astro, here's what you do:\n#### Removed: extendDefaultPlugins\n\nIn v1.x, Astro used `markdown.extendDefaultPlugins` to re-enable Astro‚Äôs default plugins when adding your own Markdown plugins.\n\nAstro v2.0 removes this configuration option entirely because its behavior is now the default.\n\nApplying remark and rehype plugins in your Markdown configuration **no longer disables Astro‚Äôs default plugins**. GitHub-Flavored Markdown and Smartypants are now applied whether or not custom `remarkPlugins` or `rehypePlugins` are configured.\n\n##### What should I do?\n\nRemove `extendDefaultPlugins` in your configuration. This is now Astro‚Äôs default behavior in v2.0, and you can delete this line without any replacement.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  markdown: {\n\n    extendDefaultPlugins,\n\n  }\n\n});\n```\n\n#### Added: gfm and smartypants\n\nIn v1.x, you could choose to disable both of Astro‚Äôs default Markdown plugins (GitHub-Flavored Markdown and SmartyPants) by setting `markdown.extendDefaultPlugins: false`.\n\nAstro v2.0 replaces `markdown.extendDefaultPlugins: false` with separate Boolean options to individually control each of Astro‚Äôs built-in default Markdown plugins. These are enabled by default and can be set to `false` independently.\n\n##### What should I do?\n\nRemove `extendDefaultPlugins: false` and add the flags to disable each plugin individually instead.\n\n- `markdown.gfm: false` disables GitHub-Flavored Markdown\n- `markdown.smartypants: false` disables SmartyPants\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  markdown: {\n\n    extendDefaultPlugins: false,\n\n    smartypants: false,\n\n    gfm: false,\n\n  }\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: mdx plugin configuration in astro?\n\nAssistant: To changed: mdx plugin configuration in astro, here's what you do:\n#### Replaced: extendPlugins changed to extendMarkdownConfig\n\nIn v1.x, the MDX integration‚Äôs `extendPlugins` option managed how your MDX files should inherit your Markdown configuration: all your Markdown configuration ( `markdown`), or Astro‚Äôs default plugins only ( `default`).\n\nAstro v2.0 replaces the behavior controlled by `mdx.extendPlugins` with three new, independently-configurable options that are `true` by default:\n\n- **[`mdx.extendMarkdownConfig`](https://docs.astro.build/en/guides/integrations-guide/mdx/#extendmarkdownconfig)** to inherit all or none of your Markdown configuration\n- **`mdx.gfm`** to enable or disable GitHub-Flavored Markdown in MDX\n- **`mdx.smartypants`** to enable or disable SmartyPants in MDX\n\n##### What should I do?\n\nDelete `extendPlugins: 'markdown'` in your configuration. This is now the default behavior.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  integrations: [\n\n    mdx({\n\n      extendPlugins: 'markdown',\n\n    }),\n\n  ],\n\n});\n```\n\nReplace `extendPlugins: 'defaults'` with `extendMarkdownConfig: false` and add the separate options for GitHub-Flavored Markdown and SmartyPants to enable these default plugins individually in MDX.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  integrations: [\n\n    mdx({\n\n      extendPlugins: 'defaults',\n\n      extendMarkdownConfig: false,\n\n      smartypants: true,\n\n      gfm: true,\n\n    }),\n\n  ],\n\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I added: more mdx config options to match markdown in astro?\n\nAssistant: To added: more mdx config options to match markdown in astro, here's what you do:\nAstro v2.0 allows you to now individually set [every available Markdown configuration option](https://docs.astro.build/en/reference/configuration-reference/#markdown-options) (except `drafts`) separately in your MDX integration configuration.\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  markdown: {\n\n    remarkPlugins: [remarkPlugin1],\n\n    gfm: true,\n\n  },\n\n  integrations: [\n\n    mdx({\n\n      remarkPlugins: [remarkPlugin2],\n\n      gfm: false,\n\n    })\n\n  ]\n\n});\n```\n\n##### What should I do?\n\nRevisit your Markdown and MDX configuration and compare your existing config with the new options available..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: plugin access to frontmatter in astro?\n\nAssistant: To changed: plugin access to frontmatter in astro, here's what you do:\nIn v1.x, remark and rehype plugins did not have access to user frontmatter. Astro merged plugin frontmatter with your file‚Äôs frontmatter, without passing the file frontmatter to your plugins.\n\nAstro v2.0 gives remark and rehype plugins access to user frontmatter via frontmatter injection. This allows plugin authors to modify a user‚Äôs existing frontmatter, or compute new properties based on other properties.\n\n#### What should I do?\n\nCheck any remark and rehype plugins you have written to see whether their behavior has changed. Note that `data.astro.frontmatter` is now the _complete_ Markdown or MDX document‚Äôs frontmatter, rather than an empty object..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: rss configuration in astro?\n\nAssistant: To changed: rss configuration in astro, here's what you do:\nIn v1.x, Astro‚Äôs RSS package allowed you to use `items: import.meta.glob(...)` to generate a list of RSS feed items. This usage is now deprecated and will eventually be removed.\n\nAstro v2.0 introduces a `pagesGlobToRssItems()` wrapper to the `items` property.\n\n#### What should I do?\n\nImport, then wrap your existing function containing `import.meta.glob()` with the `pagesGlobToRssItems()` helper.\n\n```javascript\nimport rss, {\n\n  pagesGlobToRssItems\n\n} from '@astrojs/rss';\n\nexport async function get(context) {\n\n  return rss({\n\n    items: await pagesGlobToRssItems(\n\n      import.meta.glob('./blog/*.{md,mdx}'),\n\n    ),\n\n  });\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I changed: svelte ide support in astro?\n\nAssistant: To changed: svelte ide support in astro, here's what you do:\nAstro v2.0 requires a `svelte.config.js` file in your project if you are using [the `@astrojs/svelte` integration](https://docs.astro.build/en/guides/integrations-guide/svelte/). This is needed to provide IDE autocompletion.\n\n#### What should I do?\n\nAdd a `svelte.config.js` file to the root of your project:\n\n```javascript\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n\n  preprocess: vitePreprocess(),\n\n};\n```\n\nFor new users, this file will be added automatically when running `astro add svelte`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: legacy.astroflavoredmarkdown in astro?\n\nAssistant: To removed: legacy.astroflavoredmarkdown in astro, here's what you do:\nIn v1.0, Astro moved the old Astro-Flavored Markdown (also known as Components in Markdown) to a legacy feature.\n\nAstro v2.0 removes the `legacy.astroFlavoredMarkdown` option completely. Importing and using components in `.md` files will no longer work.\n\n#### What should I do?\n\nRemove this legacy flag. It is no longer available in Astro.\n\n```javascript\nexport default defineConfig({\n\n  legacy: {\n\n    astroFlavoredMarkdown: true,\n\n  },\n\n})\n```\n\nIf you were using this feature in v1.x, we recommend [using the MDX integration](https://docs.astro.build/en/guides/integrations-guide/mdx/) which allows you to combine components and JSX expressions with Markdown syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: astro.resolve() in astro?\n\nAssistant: To removed: astro.resolve() in astro, here's what you do:\nIn v0.24, Astro deprecated `Astro.resolve()` for getting resolved URLs to assets that you might want to reference in the browser.\n\nAstro v2.0 removes this option entirely. `Astro.resolve()` in your code will cause an error.\n\n#### What should I do?\n\nResolve asset paths using `import` instead. For example:\n\n```markdown\n---\nimport 'style.css';\nimport imageUrl from './image.png';\n---\n\n<img src={imageUrl} />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: astro.fetchcontent() in astro?\n\nAssistant: To removed: astro.fetchcontent() in astro, here's what you do:\nIn v0.26, Astro deprecated `Astro.fetchContent()` for fetching data from your local Markdown files.\n\nAstro v2.0 removes this option entirely. `Astro.fetchContent()` in your code will cause an error.\n\n#### What should I do?\n\nUse `Astro.glob()` to fetch Markdown files, or convert to the [Content Collections](https://docs.astro.build/en/guides/content-collections/) feature.\n\n```markdown\n---\nconst allPosts = await Astro.glob('./posts/*.md');\n---\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I removed: astro.canonicalurl in astro?\n\nAssistant: To removed: astro.canonicalurl in astro, here's what you do:\nIn v1.0, Astro deprecated `Astro.canonicalURL` for constructing a canonical URL.\n\nAstro v2.0 removes this option entirely. `Astro.canonicalURL` in your code will cause an error.\n\n#### What should I do?\n\nUse `Astro.url` to construct a canonical URL.\n\n```markdown\n---\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n---\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I updated: vite 4 in astro?\n\nAssistant: To updated: vite 4 in astro, here's what you do:\nAstro v2.0 upgrades from Vite 3 to [Vite 4](https://vite.dev/), released in December 2022.\n\n#### What should I do?\n\nThere should be no changes to your code necessary! We‚Äôve handled most of the upgrade for you inside of Astro; however, some subtle Vite behaviors may still change between versions.\n\nRefer to the official [Vite Migration Guide](https://vite.dev/guide/migration.html) if you run into trouble..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I astro v2.0 experimental flags removed in astro?\n\nAssistant: To astro v2.0 experimental flags removed in astro, here's what you do:\nRemove the following experimental flags from `astro.config.mjs`:\n\n```javascript\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  experimental: {\n\n    contentCollections: true,\n\n    prerender: true,\n\n    errorOverlay: true,\n\n  },\n\n})\n```\n\nThese features are now available by default:\n\n- [Content collections](https://docs.astro.build/en/guides/content-collections/) as a way to manage your Markdown and MDX files with type-safety.\n- [Prerendering individual pages to static HTML](https://docs.astro.build/en/guides/on-demand-rendering/) when using SSR to improve speed and cacheability.\n- A redesigned error message overlay..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I known issues in astro?\n\nAssistant: To known issues in astro, here's what you do:\nThere are currently no known issues..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "section_detail", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Upgrade to Astro v2 in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Upgrade to Astro v2.x (npm)**:\n\n```yaml\nnpm install astro@latest\n\n# Example: upgrade React and Tailwind integrations\nnpm install @astrojs/react@latest @astrojs/tailwind@latest\n```\n\nThis snippet shows you how to upgrade to astro v2.x (npm), which is an important aspect of upgrade to astro v2.\n\n**Upgrade to Astro v2.x (pnpm)**:\n\n```yaml\npnpm add astro@latest\n\n# Example: upgrade React and Tailwind integrations\npnpm add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\nThis snippet shows you how to upgrade to astro v2.x (pnpm), which is an important aspect of upgrade to astro v2.\n\n**Upgrade to Astro v2.x (Yarn)**:\n\n```yaml\nyarn add astro@latest\n\n# Example: upgrade React and Tailwind integrations\nyarn add @astrojs/react@latest @astrojs/tailwind@latest\n```\n\nThis snippet shows you how to upgrade to astro v2.x (yarn), which is an important aspect of upgrade to astro v2.\n\n**Check Node version**:\n\n```yaml\nnode -v\n```\n\nThis snippet shows you how to check node version, which is an important aspect of upgrade to astro v2.\n\n**Add trailing slash in astro.config.mjs**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  site: 'https://example.com/',\n\n});\n```\n\nThis snippet shows you how to add trailing slash in astro.config.mjs, which is an important aspect of upgrade to astro v2.\n\n**Update build assets location**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  build: {\n    assets: '_astro/',\n  },\n\n});\n```\n\nThis snippet shows you how to update build assets location, which is an important aspect of upgrade to astro v2.\n\n**Remove extendDefaultPlugins**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\n  markdown: {\n    extendDefaultPlugins,\n  }\n});\n```\n\nThis snippet shows you how to remove extenddefaultplugins, which is an important aspect of upgrade to astro v2.\n\n**Remove extendPlugins in MDX**:\n\n```yaml\nimport { defineConfig } from 'astro/config';\n\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n\n  integrations: [\n    mdx({\n      extendPlugins: 'markdown',\n    }),\n  ],\n});\n```\n\nThis snippet shows you how to remove extendplugins in mdx, which is an important aspect of upgrade to astro v2.\n\n**Wrap import.meta.glob with pagesGlobToRssItems**:\n\n```yaml\nimport rss, {\n  pagesGlobToRssItems\n} from '@astrojs/rss';\n\nexport async function get(context) {\n  return rss({\n    items: await pagesGlobToRssItems(\n      import.meta.glob('./blog/*.{md,mdx}'),\n    ),\n  });\n}\n```\n\nThis snippet shows you how to wrap import.meta.glob with pagesglobtorssitems, which is an important aspect of upgrade to astro v2.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "code_examples", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Upgrade to Astro v2 in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck your local version of Node using `node -v` and ensure it's `16.12.0` or later.\n\nRename any existing `src/content/` folder to avoid conflicts with the new Collections API.\n\nIn `astro.config.mjs`, ensure the `site` URL has a trailing slash if desired.\n\nUpdate your deployment platform configuration if it relies on the location of build assets.\n\nRemove `extendDefaultPlugins` in your Markdown configuration as it's now the default behavior in v2.0.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/guides/upgrade-to/v2", "title": "Upgrade to Astro v2", "description": "This guide will help you migrate from Astro v1 to Astro v2.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 05:02:12", "type": "best_practices", "page_metadata": {"og:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "og:url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "ogDescription": "How to upgrade your project to the latest version of Astro.", "og:type": "article", "language": "en", "og:site_name": "Docs", "description": "How to upgrade your project to the latest version of Astro.", "favicon": "https://docs.astro.build/favicon.ico", "ogLocale": "en", "ogSiteName": "Docs", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "title": "Upgrade to Astro v2 | Docs", "ogTitle": "Upgrade to Astro v2", "og:description": "How to upgrade your project to the latest version of Astro.", "ogImage": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:image": "https://docs.astro.build/open-graph/en/guides/upgrade-to/v2.webp", "twitter:site": "astrodotbuild", "og:locale": "en", "og:title": "Upgrade to Astro v2", "twitter:card": "summary_large_image", "ogUrl": "https://docs.astro.build/en/guides/upgrade-to/v2/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "9c75943f-06b3-4601-b175-e4b639aa9918", "sourceURL": "https://docs.astro.build/en/guides/upgrade-to/v2", "url": "https://docs.astro.build/en/guides/upgrade-to/v2/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you explain what Configuration Reference is in astro?\n\nAssistant: Sure, I'd be happy to explain Configuration Reference in astro.\n\n# Configuration Reference\n\nThe following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.Here's a quick rundown of what this is about:\n\n## Top-Level Options\n\nThe top-level options for configuring Astro.\n\n## site\n\n**Type:** `string`\n\nYour final, deployed URL. Astro uses this full URL to generate your sitemap and canonical URLs in your final build. It is strongly recommended that you set this configuration to get the most out of Astro.\n\n```\n{\n  site: 'https://www.my-site.dev'\n}\n```\n\n## base\n\n**Type:** `string`\n\nThe base path to deploy to. Astro will use this path as the root for your pages and assets both in development and in production build.\n\nIn the example below, `astro dev` will start your server at `/docs`.\n\n```\n{\n  base: '/docs'\n}\n```\n\nWhen using this option, all of your static asset imports and URLs should add the base as a prefix. You can access this value via `import.meta.env.BASE_URL`.\n\n## trailingSlash\n\n**Type:** `'always' | 'never' | 'ignore'`\n\n**Default:** `'ignore'`\n\nSet the route matching behavior for trailing slashes in the dev server and on-demand rendered pages. Choose from the following options:\n\n- `'ignore'` - Match URLs regardless of whether a trailing ‚Äù/‚Äù exists.\n- `'always'` - Only match URLs that include a trailing slash (e.g: ‚Äú/about/‚Äù).\n- `'never'` - Only match URLs that do not include a trailing slash (e.g: ‚Äú/about‚Äù).\n\nWhen redirects occur in production for GET requests, the redirect will be a 301 (permanent) redirect.\n\n## redirects\n\n**Type:** `Record.<string, RedirectConfig>`\n\n**Default:** `{}`\n\nSpecify a mapping of redirects where the key is the route to match and the value is the path to redirect to.\n\n```\nexport default defineConfig({\n  redirects: {\n   '/old': '/new',\n   '/blog/[...slug]': '/articles/[...slug]',\n   '/about': 'https://example.com/about',\n   '/news': {\n     status: 302,\n     destination: 'https://example.com/news'\n   }\n  }\n})\n```\n\n## output\n\n**Type:** `'static' | 'server'`\n\n**Default:** `'static'`\n\nSpecifies the output target for builds.\n\n## adapter\n\n**Type:** `AstroIntegration`\n\nDeploy to your favorite server, serverless, or edge host with build adapters.\n\n## integrations\n\n**Type:** `AstroIntegration[]`\n\nExtend Astro with custom integrations.\n\n## root\n\n**Type:** `string`\n\n**CLI:** `--root`\n\n**Default:** `\".\"` (current working directory)\n\nYou should only provide this option if you run the `astro` CLI commands in a directory other than the project root directory.\n\n## srcDir\n\n**Type:** `string`\n\n**Default:** `\"./src\"`\n\nSet the directory that Astro will read your site from.\n\n## publicDir\n\n**Type:** `string`\n\n**Default:** `\"./public\"`\n\nSet the directory for your static assets.\n\n## outDir\n\n**Type:** `string`\n\n**Default:** `\"./dist\"`\n\nSet the directory that `astro build` writes your final build to.\n\n## cacheDir\n\n**Type:** `string`\n\n**Default:** `\"./node_modules/.astro\"`\n\nSet the directory for caching build artifacts.\n\n## compressHTML\n\n**Type:** `boolean`\n\n**Default:** `true`\n\nThis is an option to minify your HTML output and reduce the size of your HTML files.\n\n## scopedStyleStrategy\n\n**Type:** `'where' | 'class' | 'attribute'`\n\n**Default:** `'attribute'`\n\nSpecify the strategy used for scoping styles within Astro components.\n\n## security\n\n**Type:** `Record.<\"checkOrigin\", boolean> | undefined`\n\n**Default:** `{checkOrigin: true}`\n\nEnables security measures for an Astro website.\n\n## session\n\n**Type:** `SessionConfig`\n\nConfigures experimental session support by specifying a storage `driver` as well as any associated `options`.\n\n## vite\n\n**Type:** `ViteUserConfig`\n\nPass additional configuration options to Vite.\n\n## Build Options\n\nThe options for configuring the build process.\n\n## build.format\n\n**Type:** `('file' | 'directory' | 'preserve')`\n\n**Default:** `'directory'`\n\nControl the output file format of each page.\n\n## build.client\n\n**Type:** `string`\n\n**Default:** `'./client'`\n\nControls the output directory of your client-side CSS and JavaScript.\n\n## build.server\n\n**Type:** `string`\n\n**Default:** `'./server'`\n\nControls the output directory of server JavaScript when building to SSR.\n\n## build.assets\n\n**Type:** `string`\n\n**Default:** `'_astro'`\n\nSpecifies the directory in the build output where Astro-generated assets should live.\n\n## build.assetsPrefix\n\n**Type:** `string | Record.<string, string>`\n\n**Default:** `undefined`\n\nSpecifies the prefix for Astro-generated asset links.\n\n## build.serverEntry\n\n**Type:** `string`\n\n**Default:** `'entry.mjs'`\n\nSpecifies the file name of the server entrypoint when building to SSR.\n\n## build.redirects\n\n**Type:** `boolean`\n\n**Default:** `true`\n\nSpecifies whether redirects will be output to HTML during the build.\n\n## build.inlineStylesheets\n\n**Type:** `'always' | 'auto' | 'never'`\n\n**Default:** `auto`\n\nControl whether project styles are sent to the browser in a separate css file or inlined into `<style>` tags.\n\n## build.concurrency\n\n**Type:** `number`\n\n**Default:** `1`\n\nThe number of pages to build in parallel.\n\n## Server Options\n\nCustomize the Astro dev server.\n\n## server.host\n\n**Type:** `string | boolean`\n\n**Default:** `false`\n\nSet which network IP addresses the server should listen on.\n\n## server.port\n\n**Type:** `number`\n\n**Default:** `4321`\n\nSet which port the server should listen on.\n\n## server.open\n\n**Type:** `string | boolean`\n\n**Default:** `false`\n\nControls whether the dev server should open in your browser window on startup.\n\n## server.headers\n\n**Type:** `OutgoingHttpHeaders`\n\n**Default:** `{}`\n\nSet custom HTTP response headers to be sent in `astro dev` and `astro preview`.\n\n## Dev Toolbar Options\n\nOptions for the Astro Dev Toolbar.\n\n## devToolbar.enabled\n\n**Type:** `boolean`\n\n**Default:** `true`\n\nWhether to enable the Astro Dev Toolbar.\n\n## Prefetch Options\n\nOptions for prefetching links on your site.\n\n## prefetch.prefetchAll\n\n**Type:** `boolean`\n\nEnable prefetching for all links.\n\n## prefetch.defaultStrategy\n\n**Type:** `'tap' | 'hover' | 'viewport' | 'load'`\n\n**Default:** `'hover'`\n\nThe default prefetch strategy to use.\n\n## Image Options\n\nOptions for image optimization.\n\n## image.endpoint\n\n**Type:** `Object`\n\n**Default:** `{route: '/_image', entrypoint: undefined}`\n\nSet the endpoint to use for image optimization.\n\n## image.service\n\n**Type:** `Object`\n\n**Default:** `{entrypoint: 'astro/assets/services/sharp', config?: {}}`\n\nSet which image service is used for Astro‚Äôs assets support.\n\n## image.domains\n\n**Type:** `Array.<string>`\n\n**Default:** `{domains: []}`\n\nDefines a list of permitted image source domains for remote image optimization.\n\n## Markdown Options\n\nOptions for configuring Markdown.\n\n## markdown.shikiConfig\n\n**Type:** `Partial<ShikiConfig>`\n\nShiki is our default syntax highlighter.\n\n## markdown.syntaxHighlight\n\n**Type:** `'shiki' | 'prism' | false`\n\n**Default:** `shiki`\n\nWhich syntax highlighter to use for Markdown code blocks.\n\n## markdown.remarkPlugins\n\n**Type:** `RemarkPlugins`\n\nPass remark plugins to customize how your Markdown is built.\n\n## markdown.rehypePlugins\n\n**Type:** `RehypePlugins`\n\nPass rehype plugins to customize how your Markdown‚Äôs output HTML is processed.\n\n## i18n\n\nOptions for internationalization.\n\n## i18n.locales\n\n**Type:** `Locales`\n\nA list of all locales supported by the website.\n\n## i18n.defaultLocale\n\n**Type:** `string`\n\nThe default locale of your website/application.\n\n## i18n.fallback\n\n**Type:** `Record.<string, string>`\n\nThe fallback strategy when navigating to pages that do not exist.\n\n## env\n\n**Type:** `object`\n\n**Default:** `{}`\n\nConfiguration options for type-safe environment variables.\n\n## env.schema\n\n**Type:** `EnvSchema`\n\n**Default:** `{}`\n\nAn object that uses `envField` to define the data type and properties of your environment variables.\n\n## env.validateSecrets\n\n**Type:** `boolean`\n\n**Default:** `false`\n\nWhether or not to validate secrets on the server when starting the dev server or running a build.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "overview", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I top-level options in astro?\n\nAssistant: To top-level options in astro, here's what you do:\nThe top-level options for configuring Astro..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I site in astro?\n\nAssistant: To site in astro, here's what you do:\n**Type:** `string`\n\nYour final, deployed URL. Astro uses this full URL to generate your sitemap and canonical URLs in your final build. It is strongly recommended that you set this configuration to get the most out of Astro.\n\n```\n{\n  site: 'https://www.my-site.dev'\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I base in astro?\n\nAssistant: To base in astro, here's what you do:\n**Type:** `string`\n\nThe base path to deploy to. Astro will use this path as the root for your pages and assets both in development and in production build.\n\nIn the example below, `astro dev` will start your server at `/docs`.\n\n```\n{\n  base: '/docs'\n}\n```\n\nWhen using this option, all of your static asset imports and URLs should add the base as a prefix. You can access this value via `import.meta.env.BASE_URL`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I trailingslash in astro?\n\nAssistant: To trailingslash in astro, here's what you do:\n**Type:** `'always' | 'never' | 'ignore'`\n\n**Default:** `'ignore'`\n\nSet the route matching behavior for trailing slashes in the dev server and on-demand rendered pages. Choose from the following options:\n\n- `'ignore'` - Match URLs regardless of whether a trailing ‚Äù/‚Äù exists.\n- `'always'` - Only match URLs that include a trailing slash (e.g: ‚Äú/about/‚Äù).\n- `'never'` - Only match URLs that do not include a trailing slash (e.g: ‚Äú/about‚Äù).\n\nWhen redirects occur in production for GET requests, the redirect will be a 301 (permanent) redirect..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I redirects in astro?\n\nAssistant: To redirects in astro, here's what you do:\n**Type:** `Record.<string, RedirectConfig>`\n\n**Default:** `{}`\n\nSpecify a mapping of redirects where the key is the route to match and the value is the path to redirect to.\n\n```\nexport default defineConfig({\n  redirects: {\n   '/old': '/new',\n   '/blog/[...slug]': '/articles/[...slug]',\n   '/about': 'https://example.com/about',\n   '/news': {\n     status: 302,\n     destination: 'https://example.com/news'\n   }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I output in astro?\n\nAssistant: To output in astro, here's what you do:\n**Type:** `'static' | 'server'`\n\n**Default:** `'static'`\n\nSpecifies the output target for builds..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I adapter in astro?\n\nAssistant: To adapter in astro, here's what you do:\n**Type:** `AstroIntegration`\n\nDeploy to your favorite server, serverless, or edge host with build adapters..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I integrations in astro?\n\nAssistant: To integrations in astro, here's what you do:\n**Type:** `AstroIntegration[]`\n\nExtend Astro with custom integrations..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I root in astro?\n\nAssistant: To root in astro, here's what you do:\n**Type:** `string`\n\n**CLI:** `--root`\n\n**Default:** `\".\"` (current working directory)\n\nYou should only provide this option if you run the `astro` CLI commands in a directory other than the project root directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I srcdir in astro?\n\nAssistant: To srcdir in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `\"./src\"`\n\nSet the directory that Astro will read your site from..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I publicdir in astro?\n\nAssistant: To publicdir in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `\"./public\"`\n\nSet the directory for your static assets..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I outdir in astro?\n\nAssistant: To outdir in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `\"./dist\"`\n\nSet the directory that `astro build` writes your final build to..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I cachedir in astro?\n\nAssistant: To cachedir in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `\"./node_modules/.astro\"`\n\nSet the directory for caching build artifacts..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I compresshtml in astro?\n\nAssistant: To compresshtml in astro, here's what you do:\n**Type:** `boolean`\n\n**Default:** `true`\n\nThis is an option to minify your HTML output and reduce the size of your HTML files..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I scopedstylestrategy in astro?\n\nAssistant: To scopedstylestrategy in astro, here's what you do:\n**Type:** `'where' | 'class' | 'attribute'`\n\n**Default:** `'attribute'`\n\nSpecify the strategy used for scoping styles within Astro components..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I security in astro?\n\nAssistant: To security in astro, here's what you do:\n**Type:** `Record.<\"checkOrigin\", boolean> | undefined`\n\n**Default:** `{checkOrigin: true}`\n\nEnables security measures for an Astro website..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I session in astro?\n\nAssistant: To session in astro, here's what you do:\n**Type:** `SessionConfig`\n\nConfigures experimental session support by specifying a storage `driver` as well as any associated `options`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I vite in astro?\n\nAssistant: To vite in astro, here's what you do:\n**Type:** `ViteUserConfig`\n\nPass additional configuration options to Vite..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build options in astro?\n\nAssistant: To build options in astro, here's what you do:\nThe options for configuring the build process..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.format in astro?\n\nAssistant: To build.format in astro, here's what you do:\n**Type:** `('file' | 'directory' | 'preserve')`\n\n**Default:** `'directory'`\n\nControl the output file format of each page..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.client in astro?\n\nAssistant: To build.client in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `'./client'`\n\nControls the output directory of your client-side CSS and JavaScript..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.server in astro?\n\nAssistant: To build.server in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `'./server'`\n\nControls the output directory of server JavaScript when building to SSR..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.assets in astro?\n\nAssistant: To build.assets in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `'_astro'`\n\nSpecifies the directory in the build output where Astro-generated assets should live..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.assetsprefix in astro?\n\nAssistant: To build.assetsprefix in astro, here's what you do:\n**Type:** `string | Record.<string, string>`\n\n**Default:** `undefined`\n\nSpecifies the prefix for Astro-generated asset links..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.serverentry in astro?\n\nAssistant: To build.serverentry in astro, here's what you do:\n**Type:** `string`\n\n**Default:** `'entry.mjs'`\n\nSpecifies the file name of the server entrypoint when building to SSR..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.redirects in astro?\n\nAssistant: To build.redirects in astro, here's what you do:\n**Type:** `boolean`\n\n**Default:** `true`\n\nSpecifies whether redirects will be output to HTML during the build..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.inlinestylesheets in astro?\n\nAssistant: To build.inlinestylesheets in astro, here's what you do:\n**Type:** `'always' | 'auto' | 'never'`\n\n**Default:** `auto`\n\nControl whether project styles are sent to the browser in a separate css file or inlined into `<style>` tags..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I build.concurrency in astro?\n\nAssistant: To build.concurrency in astro, here's what you do:\n**Type:** `number`\n\n**Default:** `1`\n\nThe number of pages to build in parallel..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server options in astro?\n\nAssistant: To server options in astro, here's what you do:\nCustomize the Astro dev server..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server.host in astro?\n\nAssistant: To server.host in astro, here's what you do:\n**Type:** `string | boolean`\n\n**Default:** `false`\n\nSet which network IP addresses the server should listen on..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server.port in astro?\n\nAssistant: To server.port in astro, here's what you do:\n**Type:** `number`\n\n**Default:** `4321`\n\nSet which port the server should listen on..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server.open in astro?\n\nAssistant: To server.open in astro, here's what you do:\n**Type:** `string | boolean`\n\n**Default:** `false`\n\nControls whether the dev server should open in your browser window on startup..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I server.headers in astro?\n\nAssistant: To server.headers in astro, here's what you do:\n**Type:** `OutgoingHttpHeaders`\n\n**Default:** `{}`\n\nSet custom HTTP response headers to be sent in `astro dev` and `astro preview`..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I dev toolbar options in astro?\n\nAssistant: To dev toolbar options in astro, here's what you do:\nOptions for the Astro Dev Toolbar..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I devtoolbar.enabled in astro?\n\nAssistant: To devtoolbar.enabled in astro, here's what you do:\n**Type:** `boolean`\n\n**Default:** `true`\n\nWhether to enable the Astro Dev Toolbar..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prefetch options in astro?\n\nAssistant: To prefetch options in astro, here's what you do:\nOptions for prefetching links on your site..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prefetch.prefetchall in astro?\n\nAssistant: To prefetch.prefetchall in astro, here's what you do:\n**Type:** `boolean`\n\nEnable prefetching for all links..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I prefetch.defaultstrategy in astro?\n\nAssistant: To prefetch.defaultstrategy in astro, here's what you do:\n**Type:** `'tap' | 'hover' | 'viewport' | 'load'`\n\n**Default:** `'hover'`\n\nThe default prefetch strategy to use..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I image options in astro?\n\nAssistant: To image options in astro, here's what you do:\nOptions for image optimization..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I image.endpoint in astro?\n\nAssistant: To image.endpoint in astro, here's what you do:\n**Type:** `Object`\n\n**Default:** `{route: '/_image', entrypoint: undefined}`\n\nSet the endpoint to use for image optimization..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I image.service in astro?\n\nAssistant: To image.service in astro, here's what you do:\n**Type:** `Object`\n\n**Default:** `{entrypoint: 'astro/assets/services/sharp', config?: {}}`\n\nSet which image service is used for Astro‚Äôs assets support..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I image.domains in astro?\n\nAssistant: To image.domains in astro, here's what you do:\n**Type:** `Array.<string>`\n\n**Default:** `{domains: []}`\n\nDefines a list of permitted image source domains for remote image optimization..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown options in astro?\n\nAssistant: To markdown options in astro, here's what you do:\nOptions for configuring Markdown..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown.shikiconfig in astro?\n\nAssistant: To markdown.shikiconfig in astro, here's what you do:\n**Type:** `Partial<ShikiConfig>`\n\nShiki is our default syntax highlighter..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown.syntaxhighlight in astro?\n\nAssistant: To markdown.syntaxhighlight in astro, here's what you do:\n**Type:** `'shiki' | 'prism' | false`\n\n**Default:** `shiki`\n\nWhich syntax highlighter to use for Markdown code blocks..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown.remarkplugins in astro?\n\nAssistant: To markdown.remarkplugins in astro, here's what you do:\n**Type:** `RemarkPlugins`\n\nPass remark plugins to customize how your Markdown is built..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I markdown.rehypeplugins in astro?\n\nAssistant: To markdown.rehypeplugins in astro, here's what you do:\n**Type:** `RehypePlugins`\n\nPass rehype plugins to customize how your Markdown‚Äôs output HTML is processed..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I i18n in astro?\n\nAssistant: To i18n in astro, here's what you do:\nOptions for internationalization..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I i18n.locales in astro?\n\nAssistant: To i18n.locales in astro, here's what you do:\n**Type:** `Locales`\n\nA list of all locales supported by the website..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I i18n.defaultlocale in astro?\n\nAssistant: To i18n.defaultlocale in astro, here's what you do:\n**Type:** `string`\n\nThe default locale of your website/application..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I i18n.fallback in astro?\n\nAssistant: To i18n.fallback in astro, here's what you do:\n**Type:** `Record.<string, string>`\n\nThe fallback strategy when navigating to pages that do not exist..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I env in astro?\n\nAssistant: To env in astro, here's what you do:\n**Type:** `object`\n\n**Default:** `{}`\n\nConfiguration options for type-safe environment variables..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I env.schema in astro?\n\nAssistant: To env.schema in astro, here's what you do:\n**Type:** `EnvSchema`\n\n**Default:** `{}`\n\nAn object that uses `envField` to define the data type and properties of your environment variables..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: How do I env.validatesecrets in astro?\n\nAssistant: To env.validatesecrets in astro, here's what you do:\n**Type:** `boolean`\n\n**Default:** `false`\n\nWhether or not to validate secrets on the server when starting the dev server or running a build..\nPretty straightforward, right?", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "section_detail", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: Can you give me some code examples for Configuration Reference in astro?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Configuration Example**:\n\n```yaml\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // your configuration options here...\n})\n```\n\nThis snippet shows you how to basic configuration example, which is an important aspect of configuration reference.\n\n**Site Configuration Example**:\n\n```yaml\n{\n  site: 'https://www.my-site.dev'\n}\n```\n\nThis snippet shows you how to site configuration example, which is an important aspect of configuration reference.\n\n", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "code_examples", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
{"text": "System: You are a helpful astro expert.\n\nUser: What are some tips for using Configuration Reference in astro effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is strongly recommended that you set the site configuration to get the most out of Astro.\n\nWhen using the base option, all of your static asset imports and URLs should add the base as a prefix.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://docs.astro.build/en/reference/configuration-reference", "title": "Configuration Reference", "description": "The following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on Configuring Astro.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-03-01 08:14:02", "type": "best_practices", "page_metadata": {"ogUrl": "https://docs.astro.build/en/reference/configuration-reference/", "twitter:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "favicon": "https://docs.astro.build/favicon.ico", "docsearch:language": "en", "ogLocale": "en", "title": "Configuration Reference | Docs", "og:image": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "ogTitle": "Configuration Reference", "ogImage": "https://docs.astro.build/open-graph/en/reference/configuration-reference.webp", "og:title": "Configuration Reference", "og:locale": "en", "language": "en", "generator": ["Astro v5.3.0", "Starlight v0.31.1"], "ogSiteName": "Docs", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "astrodotbuild", "og:site_name": "Docs", "og:type": "article", "og:url": "https://docs.astro.build/en/reference/configuration-reference/", "scrapeId": "e6e97525-a211-4013-abcc-a0545c37b1b9", "sourceURL": "https://docs.astro.build/en/reference/configuration-reference", "url": "https://docs.astro.build/en/reference/configuration-reference/", "statusCode": 200}}}
