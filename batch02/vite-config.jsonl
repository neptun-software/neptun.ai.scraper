{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Configuring Vite is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Configuring Vite in vite-config.\n\n# Configuring Vite\n\nThis page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.Here's a quick rundown of what this is about:\n\n## Configuring Vite\n\nWhen running `vite` from the command line, Vite will automatically try to resolve a config file named `vite.config.js` inside project root (other JS and TS extensions are also supported).\n\nThe most basic config file looks like this:\n\n```javascript\nexport default {\n  // config options\n}\n```\n\nNote Vite supports using ES modules syntax in the config file even if the project is not using native Node ESM, e.g. `type: \"module\"` in `package.json`. In this case, the config file is auto pre-processed before load.\n\nYou can also explicitly specify a config file to use with the `--config` CLI option (resolved relative to `cwd`):\n\n```bash\nvite --config my-config.js\n```\n\nCONFIG LOADING\n\nBy default, Vite uses `esbuild` to bundle the config into a temporary file and load it. This may cause issues when importing TypeScript files in a monorepo. If you encounter any issues with this approach, you can specify `--configLoader runner` to use the module runner instead, which will not create a temporary config and will transform any files on the fly. Note that module runner doesn't support CJS in config files, but external CJS packages should work as usual.\n\nAlternatively, if you're using an environment that supports TypeScript (e.g. `node --experimental-strip-types`), or if you're only writing plain JavaScript, you can specify `--configLoader native` to use the environment's native runtime to load the config file. Note that updates to modules imported by the config file are not detected and hence would not auto-restart the Vite server.\n\n## Config Intellisense\n\nSince Vite ships with TypeScript typings, you can leverage your IDE's intellisense with jsdoc type hints:\n\n```javascript\n/** @type {import('vite').UserConfig} */\nexport default {\n  // ...\n}\n```\n\nAlternatively, you can use the `defineConfig` helper which should provide intellisense without the need for jsdoc annotations:\n\n```javascript\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n})\n```\n\nVite also supports TypeScript config files. You can use `vite.config.ts` with the `defineConfig` helper function above, or with the `satisfies` operator:\n\n```typescript\nimport type { UserConfig } from 'vite'\n\nexport default {\n  // ...\n} satisfies UserConfig\n```\n\n## Conditional Config\n\nIf the config needs to conditionally determine options based on the command ( `serve` or `build`), the mode being used, if it's an SSR build ( `isSsrBuild`), or is previewing the build ( `isPreview`), it can export a function instead:\n\n```javascript\nexport default defineConfig(({ command, mode, isSsrBuild, isPreview }) => {\n  if (command === 'serve') {\n    return {\n      // dev specific config\n    }\n  } else {\n    // command === 'build'\n    return {\n      // build specific config\n    }\n  }\n})\n```\n\nIt is important to note that in Vite's API the `command` value is `serve` during dev (in the cli `vite`, `vite dev`, and `vite serve` are aliases), and `build` when building for production (`vite build`).\n\n`isSsrBuild` and `isPreview` are additional optional flags to differentiate the kind of `build` and `serve` commands respectively. Some tools that load the Vite config may not support these flags and will pass `undefined` instead. Hence, it's recommended to use explicit comparison against `true` and `false.`\n\n## Async Config\n\nIf the config needs to call async functions, it can export an async function instead. And this async function can also be passed through `defineConfig` for improved intellisense support:\n\n```javascript\nexport default defineConfig(async ({ command, mode }) => {\n  const data = await asyncFunction()\n  return {\n    // vite config\n  }\n})\n```\n\n## Using Environment Variables in Config\n\nEnvironmental Variables can be obtained from `process.env` as usual.\n\nNote that Vite doesn't load `.env` files by default as the files to load can only be determined after evaluating the Vite config, for example, the `root` and `envDir` options affect the loading behaviour. However, you can use the exported `loadEnv` helper to load the specific `.env` file if needed.\n\n```javascript\nimport { defineConfig, loadEnv } from 'vite'\n\nexport default defineConfig(({ mode }) => {\n  // Load env file based on `mode` in the current working directory.\n  // Set the third parameter to '' to load all env regardless of the\n  // `VITE_` prefix.\n  const env = loadEnv(mode, process.cwd(), '')\n  return {\n    // vite config\n    define: {\n      __APP_ENV__: JSON.stringify(env.APP_ENV),\n    },\n  }\n})\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "overview", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I configuring vite in vite-config?\n\nAssistant: To configuring vite in vite-config, here's what you do:\nWhen running `vite` from the command line, Vite will automatically try to resolve a config file named `vite.config.js` inside project root (other JS and TS extensions are also supported).\n\nThe most basic config file looks like this:\n\n```javascript\nexport default {\n  // config options\n}\n```\n\nNote Vite supports using ES modules syntax in the config file even if the project is not using native Node ESM, e.g. `type: \"module\"` in `package.json`. In this case, the config file is auto pre-processed before load.\n\nYou can also explicitly specify a config file to use with the `--config` CLI option (resolved relative to `cwd`):\n\n```bash\nvite --config my-config.js\n```\n\nCONFIG LOADING\n\nBy default, Vite uses `esbuild` to bundle the config into a temporary file and load it. This may cause issues when importing TypeScript files in a monorepo. If you encounter any issues with this approach, you can specify `--configLoader runner` to use the module runner instead, which will not create a temporary config and will transform any files on the fly. Note that module runner doesn't support CJS in config files, but external CJS packages should work as usual.\n\nAlternatively, if you're using an environment that supports TypeScript (e.g. `node --experimental-strip-types`), or if you're only writing plain JavaScript, you can specify `--configLoader native` to use the environment's native runtime to load the config file. Note that updates to modules imported by the config file are not detected and hence would not auto-restart the Vite server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "section_detail", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I config intellisense in vite-config?\n\nAssistant: To config intellisense in vite-config, here's what you do:\nSince Vite ships with TypeScript typings, you can leverage your IDE's intellisense with jsdoc type hints:\n\n```javascript\n/** @type {import('vite').UserConfig} */\nexport default {\n  // ...\n}\n```\n\nAlternatively, you can use the `defineConfig` helper which should provide intellisense without the need for jsdoc annotations:\n\n```javascript\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n})\n```\n\nVite also supports TypeScript config files. You can use `vite.config.ts` with the `defineConfig` helper function above, or with the `satisfies` operator:\n\n```typescript\nimport type { UserConfig } from 'vite'\n\nexport default {\n  // ...\n} satisfies UserConfig\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "section_detail", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I conditional config in vite-config?\n\nAssistant: To conditional config in vite-config, here's what you do:\nIf the config needs to conditionally determine options based on the command ( `serve` or `build`), the mode being used, if it's an SSR build ( `isSsrBuild`), or is previewing the build ( `isPreview`), it can export a function instead:\n\n```javascript\nexport default defineConfig(({ command, mode, isSsrBuild, isPreview }) => {\n  if (command === 'serve') {\n    return {\n      // dev specific config\n    }\n  } else {\n    // command === 'build'\n    return {\n      // build specific config\n    }\n  }\n})\n```\n\nIt is important to note that in Vite's API the `command` value is `serve` during dev (in the cli `vite`, `vite dev`, and `vite serve` are aliases), and `build` when building for production (`vite build`).\n\n`isSsrBuild` and `isPreview` are additional optional flags to differentiate the kind of `build` and `serve` commands respectively. Some tools that load the Vite config may not support these flags and will pass `undefined` instead. Hence, it's recommended to use explicit comparison against `true` and `false.`.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "section_detail", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I async config in vite-config?\n\nAssistant: To async config in vite-config, here's what you do:\nIf the config needs to call async functions, it can export an async function instead. And this async function can also be passed through `defineConfig` for improved intellisense support:\n\n```javascript\nexport default defineConfig(async ({ command, mode }) => {\n  const data = await asyncFunction()\n  return {\n    // vite config\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "section_detail", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I using environment variables in config in vite-config?\n\nAssistant: To using environment variables in config in vite-config, here's what you do:\nEnvironmental Variables can be obtained from `process.env` as usual.\n\nNote that Vite doesn't load `.env` files by default as the files to load can only be determined after evaluating the Vite config, for example, the `root` and `envDir` options affect the loading behaviour. However, you can use the exported `loadEnv` helper to load the specific `.env` file if needed.\n\n```javascript\nimport { defineConfig, loadEnv } from 'vite'\n\nexport default defineConfig(({ mode }) => {\n  // Load env file based on `mode` in the current working directory.\n  // Set the third parameter to '' to load all env regardless of the\n  // `VITE_` prefix.\n  const env = loadEnv(mode, process.cwd(), '')\n  return {\n    // vite config\n    define: {\n      __APP_ENV__: JSON.stringify(env.APP_ENV),\n    },\n  }\n})\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "section_detail", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you give me some code examples for Configuring Vite in vite-config?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Vite Config**:\n\n```yaml\nexport default {\n  // config options\n}\n```\n\nThis snippet shows you how to basic vite config, which is an important aspect of configuring vite.\n\n**Specifying Config File**:\n\n```yaml\nvite --config my-config.js\n```\n\nThis snippet shows you how to specifying config file, which is an important aspect of configuring vite.\n\n**Using JSDoc for Intellisense**:\n\n```yaml\n/** @type {import('vite').UserConfig} */\nexport default {\n  // ...\n}\n```\n\nThis snippet shows you how to using jsdoc for intellisense, which is an important aspect of configuring vite.\n\n**Using defineConfig for Intellisense**:\n\n```yaml\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n})\n```\n\nThis snippet shows you how to using defineconfig for intellisense, which is an important aspect of configuring vite.\n\n**Conditional Config Example**:\n\n```yaml\nexport default defineConfig(({ command, mode, isSsrBuild, isPreview }) => {\n  if (command === 'serve') {\n    return {\n      // dev specific config\n    }\n  } else {\n    return {\n      // build specific config\n    }\n  }\n})\n```\n\nThis snippet shows you how to conditional config example, which is an important aspect of configuring vite.\n\n**Async Config Example**:\n\n```yaml\nexport default defineConfig(async ({ command, mode }) => {\n  const data = await asyncFunction()\n  return {\n    // vite config\n  }\n})\n```\n\nThis snippet shows you how to async config example, which is an important aspect of configuring vite.\n\n**Loading Environment Variables**:\n\n```yaml\nimport { defineConfig, loadEnv } from 'vite'\n\nexport default defineConfig(({ mode }) => {\n  const env = loadEnv(mode, process.cwd(), '')\n  return {\n    define: {\n      __APP_ENV__: JSON.stringify(env.APP_ENV),\n    },\n  }\n})\n```\n\nThis snippet shows you how to loading environment variables, which is an important aspect of configuring vite.\n\n", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "code_examples", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: What are some tips for using Configuring Vite in vite-config effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse ES modules syntax in the config file even if the project is not using native Node ESM.\n\nSpecify a config file using the `--config` CLI option if needed.\n\nUse `--configLoader runner` to avoid issues with TypeScript files in a monorepo.\n\nUse `defineConfig` for better intellisense support in your IDE.\n\nWhen using conditional config, compare flags explicitly against `true` and `false`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/config", "title": "Configuring Vite", "description": "This page covers how to configure Vite, including setting up config files, using TypeScript, conditional and async configurations, and handling environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:00:18", "type": "best_practices", "page_metadata": {"og:title": "Configuring Vite", "og:image": "https://vite.dev/og-image.jpg", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "theme-color": "#646cff", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "ogTitle": "Configuring Vite", "title": "Configuring Vite | Vite", "ogDescription": "Next Generation Frontend Tooling", "ogUrl": "https://vite.dev", "og:site_name": "vitejs", "language": "en-US", "scrapeId": "fa9f8f81-54b9-4257-82f0-eb6c05a84979", "sourceURL": "https://vite.dev/config", "url": "https://vite.dev/config/", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what SSR Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain SSR Options in vite-config.\n\n# SSR Options\n\nOptions for configuring Server-Side Rendering (SSR) in Vite.Here's a quick rundown of what this is about:\n\n## ssr.external\n\n- **Type:** `string[] | true`\n- **Related:** [SSR Externals](https://vite.dev/guide/ssr#ssr-externals)\n\nExternalize the given dependencies and their transitive dependencies for SSR. By default, all dependencies are externalized except for linked dependencies (for HMR). If you prefer to externalize the linked dependency, you can pass its name to this option.\n\nIf `true`, all dependencies including linked dependencies are externalized.\n\nNote that the explicitly listed dependencies (using `string[]` type) will always take priority if they're also listed in `ssr.noExternal` (using any type).\n\n## ssr.noExternal\n\n- **Type:** `string | RegExp | (string | RegExp)[] | true`\n- **Related:** [SSR Externals](https://vite.dev/guide/ssr#ssr-externals)\n\nPrevent listed dependencies from being externalized for SSR, which they will get bundled in build. By default, only linked dependencies are not externalized (for HMR). If you prefer to externalize the linked dependency, you can pass its name to the `ssr.external` option.\n\nIf `true`, no dependencies are externalized. However, dependencies explicitly listed in `ssr.external` (using `string[]` type) can take priority and still be externalized. If `ssr.target: 'node'` is set, Node.js built-ins will also be externalized by default.\n\nNote that if both `ssr.noExternal: true` and `ssr.external: true` are configured, `ssr.noExternal` takes priority and no dependencies are externalized.\n\n## ssr.target\n\n- **Type:** `'node' | 'webworker'`\n- **Default:** `node`\n\nBuild target for the SSR server.\n\n## ssr.resolve.conditions\n\n- **Type:** `string[]`\n- **Default:** `['module', 'node', 'development|production']` ( `defaultServerConditions`) ( `['module', 'browser', 'development|production']` ( `defaultClientConditions`) for `ssr.target === 'webworker'`)\n- **Related:** [Resolve Conditions](https://vite.dev/config/shared-options#resolve-conditions)\n\nThese conditions are used in the plugin pipeline, and only affect non-externalized dependencies during the SSR build. Use `ssr.resolve.externalConditions` to affect externalized imports.\n\n## ssr.resolve.externalConditions\n\n- **Type:** `string[]`\n- **Default:** `['node']`\n\nConditions that are used during ssr import (including `ssrLoadModule`) of externalized direct dependencies (external dependencies imported by Vite).\n\n## ssr.resolve.mainFields\n\n- **Type:** `string[]`\n- **Default:** `['module', 'jsnext:main', 'jsnext']`\n\nList of fields in `package.json` to try when resolving a package's entry point. Note this takes lower precedence than conditional exports resolved from the `exports` field: if an entry point is successfully resolved from `exports`, the main field will be ignored. This setting only affect non-externalized dependencies.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "overview", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I ssr.external in vite-config?\n\nAssistant: To ssr.external in vite-config, here's what you do:\n- **Type:** `string[] | true`\n- **Related:** [SSR Externals](https://vite.dev/guide/ssr#ssr-externals)\n\nExternalize the given dependencies and their transitive dependencies for SSR. By default, all dependencies are externalized except for linked dependencies (for HMR). If you prefer to externalize the linked dependency, you can pass its name to this option.\n\nIf `true`, all dependencies including linked dependencies are externalized.\n\nNote that the explicitly listed dependencies (using `string[]` type) will always take priority if they're also listed in `ssr.noExternal` (using any type)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I ssr.noexternal in vite-config?\n\nAssistant: To ssr.noexternal in vite-config, here's what you do:\n- **Type:** `string | RegExp | (string | RegExp)[] | true`\n- **Related:** [SSR Externals](https://vite.dev/guide/ssr#ssr-externals)\n\nPrevent listed dependencies from being externalized for SSR, which they will get bundled in build. By default, only linked dependencies are not externalized (for HMR). If you prefer to externalize the linked dependency, you can pass its name to the `ssr.external` option.\n\nIf `true`, no dependencies are externalized. However, dependencies explicitly listed in `ssr.external` (using `string[]` type) can take priority and still be externalized. If `ssr.target: 'node'` is set, Node.js built-ins will also be externalized by default.\n\nNote that if both `ssr.noExternal: true` and `ssr.external: true` are configured, `ssr.noExternal` takes priority and no dependencies are externalized..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I ssr.target in vite-config?\n\nAssistant: To ssr.target in vite-config, here's what you do:\n- **Type:** `'node' | 'webworker'`\n- **Default:** `node`\n\nBuild target for the SSR server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I ssr.resolve.conditions in vite-config?\n\nAssistant: To ssr.resolve.conditions in vite-config, here's what you do:\n- **Type:** `string[]`\n- **Default:** `['module', 'node', 'development|production']` ( `defaultServerConditions`) ( `['module', 'browser', 'development|production']` ( `defaultClientConditions`) for `ssr.target === 'webworker'`)\n- **Related:** [Resolve Conditions](https://vite.dev/config/shared-options#resolve-conditions)\n\nThese conditions are used in the plugin pipeline, and only affect non-externalized dependencies during the SSR build. Use `ssr.resolve.externalConditions` to affect externalized imports..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I ssr.resolve.externalconditions in vite-config?\n\nAssistant: To ssr.resolve.externalconditions in vite-config, here's what you do:\n- **Type:** `string[]`\n- **Default:** `['node']`\n\nConditions that are used during ssr import (including `ssrLoadModule`) of externalized direct dependencies (external dependencies imported by Vite)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I ssr.resolve.mainfields in vite-config?\n\nAssistant: To ssr.resolve.mainfields in vite-config, here's what you do:\n- **Type:** `string[]`\n- **Default:** `['module', 'jsnext:main', 'jsnext']`\n\nList of fields in `package.json` to try when resolving a package's entry point. Note this takes lower precedence than conditional exports resolved from the `exports` field: if an entry point is successfully resolved from `exports`, the main field will be ignored. This setting only affect non-externalized dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "section_detail", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: What are some tips for using SSR Options in vite-config effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen using the `ssr.resolve.externalConditions` option, make sure to run Node with the `--conditions` flag with the same values in both dev and build to get a consistent behavior.\n\nFor example, when setting `['node', 'custom']`, you should run `NODE_OPTIONS='--conditions custom' vite` in dev and `NODE_OPTIONS=\"--conditions custom\" node ./dist/server.js` after build.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/config/ssr-options", "title": "SSR Options", "description": "Options for configuring Server-Side Rendering (SSR) in Vite.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:03:45", "type": "best_practices", "page_metadata": {"favicon": "https://vite.dev/logo.svg", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "ogDescription": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogSiteName": "vitejs", "title": "SSR Options | Vite", "og:site_name": "vitejs", "og:url": "https://vite.dev", "ogImage": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "description": "Next Generation Frontend Tooling", "og:title": "SSR Options", "language": "en-US", "og:image": "https://vite.dev/og-image.jpg", "ogTitle": "SSR Options", "scrapeId": "b45f0a8a-e157-4523-93c6-f25051295b7c", "sourceURL": "https://vite.dev/config/ssr-options", "url": "https://vite.dev/config/ssr-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Server Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Server Options in vite-config.\n\n# Server Options\n\nConfiguration options for the Vite development server.Here's a quick rundown of what this is about:\n\n## server.host\n\n- **Type:** `string | boolean`  \n- **Default:** `'localhost'`  \n\nSpecify which IP addresses the server should listen on. Set this to `0.0.0.0` or `true` to listen on all addresses, including LAN and public addresses.\n\nThis can be set via the CLI using `--host 0.0.0.0` or `--host`.\n\nNOTE\n\nThere are cases when other servers might respond instead of Vite.\n\nThe first case is when `localhost` is used. Node.js under v17 reorders the result of DNS-resolved addresses by default. When accessing `localhost`, browsers use DNS to resolve the address and that address might differ from the address which Vite is listening to. Vite prints the resolved address when it differs.\n\nYou can set [`dns.setDefaultResultOrder('verbatim')`](https://nodejs.org/api/dns.html#dns_dns_setdefaultresultorder_order) to disable the reordering behavior. Vite will then print the address as `localhost`.\n\nThe second case is when wildcard hosts (e.g. `0.0.0.0`) are used. This is because servers listening on non-wildcard hosts take priority over those listening on wildcard hosts.\n\nAccessing the server on WSL2 from your LAN\n\nWhen running Vite on WSL2, it is not sufficient to set `host: true` to access the server from your LAN. See [the WSL document](https://learn.microsoft.com/en-us/windows/wsl/networking#accessing-a-wsl-2-distribution-from-your-local-area-network-lan) for more details.\n\n## server.allowedHosts\n\n- **Type:** `string[] | true`  \n- **Default:** `[]`  \n\nThe hostnames that Vite is allowed to respond to. `localhost` and domains under `.localhost` and all IP addresses are allowed by default. When using HTTPS, this check is skipped.\n\nIf a string starts with `.`, it will allow that hostname without the `.` and all subdomains under the hostname. For example, `.example.com` will allow `example.com`, `foo.example.com`, and `foo.bar.example.com`. If set to `true`, the server is allowed to respond to requests for any hosts.\n\nWhat hosts are safe to be added?\n\nHosts that you have control over which IP addresses they resolve to are safe to add to the list of allowed hosts.\n\nFor example, if you own a domain `vite.dev`, you can add `vite.dev` and `.vite.dev` to the list. If you don't own that domain and you cannot trust the owner of that domain, you should not add it.\n\nEspecially, you should never add Top-Level Domains like `.com` to the list. This is because anyone can purchase a domain like `example.com` and control the IP address it resolves to.\n\nDANGER\n\nSetting `server.allowedHosts` to `true` allows any website to send requests to your dev server through DNS rebinding attacks, allowing them to download your source code and content. We recommend always using an explicit list of allowed hosts. See [GHSA-vg6x-rcgg-rjx6](https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6) for more details.\n\nConfigure via environment variable\n\nYou can set the environment variable `__VITE_ADDITIONAL_SERVER_ALLOWED_HOSTS` to add an additional allowed host.\n\n## server.port\n\n- **Type:** `number`  \n- **Default:** `5173`  \n\nSpecify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on.\n\n## server.strictPort\n\n- **Type:** `boolean`  \n\nSet to `true` to exit if port is already in use, instead of automatically trying the next available port.\n\n## server.https\n\n- **Type:** `https.ServerOptions`  \n\nEnable TLS + HTTP/2. Note this downgrades to TLS only when the [`server.proxy` option](https://vite.dev/config/server-options#server-proxy) is also used.\n\nThe value can also be an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.\n\nA valid certificate is needed. For a basic setup, you can add [@vitejs/plugin-basic-ssl](https://github.com/vitejs/vite-plugin-basic-ssl) to the project plugins, which will automatically create and cache a self-signed certificate. But we recommend creating your own certificates.\n\n## server.open\n\n- **Type:** `boolean | string`  \n\nAutomatically open the app in the browser on server start. When the value is a string, it will be used as the URL's pathname. If you want to open the server in a specific browser you like, you can set the env `process.env.BROWSER` (e.g. `firefox`). You can also set `process.env.BROWSER_ARGS` to pass additional arguments (e.g. `--incognito`).\n\n`BROWSER` and `BROWSER_ARGS` are also special environment variables you can set in the `.env` file to configure it. See [the `open` package](https://github.com/sindresorhus/open#app) for more details.\n\n**Example:**\n\n```js\nexport default defineConfig({\n  server: {\n    open: '/docs/index.html',\n  },\n})\n```\n\n## server.proxy\n\n- **Type:** `Record<string, string | ProxyOptions>`  \n\nConfigure custom proxy rules for the dev server. Expects an object of `{ key: options }` pairs. Any requests that request path starts with that key will be proxied to that specified target. If the key starts with `^`, it will be interpreted as a `RegExp`. The `configure` option can be used to access the proxy instance. If a request matches any of the configured proxy rules, the request won't be transformed by Vite.\n\nNote that if you are using non-relative [`base`](https://vite.dev/config/shared-options#base), you must prefix each key with that `base`.\n\nExtends [`http-proxy`](https://github.com/http-party/node-http-proxy#options). Additional options are [here](https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/middlewares/proxy.ts#L13).\n\nIn some cases, you might also want to configure the underlying dev server (e.g. to add custom middlewares to the internal [connect](https://github.com/senchalabs/connect) app). In order to do that, you need to write your own [plugin](https://vite.dev/guide/using-plugins) and use [configureServer](https://vite.dev/guide/api-plugin#configureserver) function.\n\n**Example:**\n\n```js\nexport default defineConfig({\n  server: {\n    proxy: {\n      // string shorthand:\n      // http://localhost:5173/foo\n      //   -> http://localhost:4567/foo\n      '/foo': 'http://localhost:4567',\n      // with options:\n      // http://localhost:5173/api/bar\n      //   -> http://jsonplaceholder.typicode.com/bar\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n      },\n      // with RegExp:\n      // http://localhost:5173/fallback/\n      //   -> http://jsonplaceholder.typicode.com/\n      '^/fallback/.*': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/fallback/, ''),\n      },\n      // Using the proxy instance\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        configure: (proxy, options) => {\n          // proxy will be an instance of 'http-proxy'\n        },\n      },\n      // Proxying websockets or socket.io:\n      // ws://localhost:5173/socket.io\n      //   -> ws://localhost:5174/socket.io\n      // Exercise caution using `rewriteWsOrigin` as it can leave the\n      // proxying open to CSRF attacks.\n      '/socket.io': {\n        target: 'ws://localhost:5174',\n        ws: true,\n        rewriteWsOrigin: true,\n      },\n    },\n  },\n})\n```\n\n## server.cors\n\n- **Type:** `boolean | CorsOptions`  \n- **Default:** `{ origin: /^https?:\\/\\/(?:(?:[^:]+\\.)?localhost|127\\.0\\.0\\.1|\\[::1\\])(?::\\d+)?$/ }` (allows localhost, `127.0.0.1` and `::1`)  \n\nConfigure CORS for the dev server. Pass an [options object](https://github.com/expressjs/cors#configuration-options) to fine tune the behavior or `true` to allow any origin.\n\nDANGER\n\nSetting `server.cors` to `true` allows any website to send requests to your dev server and download your source code and content. We recommend always using an explicit list of allowed origins.\n\n## server.headers\n\n- **Type:** `OutgoingHttpHeaders`  \n\nSpecify server response headers.\n\n## server.hmr\n\n- **Type:** `boolean | { protocol?: string, host?: string, port?: number, path?: string, timeout?: number, overlay?: boolean, clientPort?: number, server?: Server }`  \n\nDisable or configure HMR connection (in cases where the HMR websocket must use a different address from the http server).\n\nSet `server.hmr.overlay` to `false` to disable the server error overlay.\n\n`protocol` sets the WebSocket protocol used for the HMR connection: `ws` (WebSocket) or `wss` (WebSocket Secure).\n\n`clientPort` is an advanced option that overrides the port only on the client side, allowing you to serve the websocket on a different port than the client code looks for it on.\n\nWhen `server.hmr.server` is defined, Vite will process the HMR connection requests through the provided server. If not in middleware mode, Vite will attempt to process HMR connection requests through the existing server. This can be helpful when using self-signed certificates or when you want to expose Vite over a network on a single port.\n\nCheck out [`vite-setup-catalogue`](https://github.com/sapphi-red/vite-setup-catalogue) for some examples.\n\nNOTE\n\nWith the default configuration, reverse proxies in front of Vite are expected to support proxying WebSocket. If the Vite HMR client fails to connect WebSocket, the client will fall back to connecting the WebSocket directly to the Vite HMR server bypassing the reverse proxies:\n\n```\nDirect websocket connection fallback. Check out https://vite.dev/config/server-options.html#server-hmr to remove the previous connection error.\n```\n\nThe error that appears in the Browser when the fallback happens can be ignored. To avoid the error by directly bypassing reverse proxies, you could either:\n\n- configure the reverse proxy to proxy WebSocket too\n- set [`server.strictPort = true`](https://vite.dev/config/server-options#server-strictport) and set `server.hmr.clientPort` to the same value with `server.port`\n- set `server.hmr.port` to a different value from [`server.port`](https://vite.dev/config/server-options#server-port)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "overview", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.host in vite-config?\n\nAssistant: To server.host in vite-config, here's what you do:\n- **Type:** `string | boolean`  \n- **Default:** `'localhost'`  \n\nSpecify which IP addresses the server should listen on. Set this to `0.0.0.0` or `true` to listen on all addresses, including LAN and public addresses.\n\nThis can be set via the CLI using `--host 0.0.0.0` or `--host`.\n\nNOTE\n\nThere are cases when other servers might respond instead of Vite.\n\nThe first case is when `localhost` is used. Node.js under v17 reorders the result of DNS-resolved addresses by default. When accessing `localhost`, browsers use DNS to resolve the address and that address might differ from the address which Vite is listening to. Vite prints the resolved address when it differs.\n\nYou can set [`dns.setDefaultResultOrder('verbatim')`](https://nodejs.org/api/dns.html#dns_dns_setdefaultresultorder_order) to disable the reordering behavior. Vite will then print the address as `localhost`.\n\nThe second case is when wildcard hosts (e.g. `0.0.0.0`) are used. This is because servers listening on non-wildcard hosts take priority over those listening on wildcard hosts.\n\nAccessing the server on WSL2 from your LAN\n\nWhen running Vite on WSL2, it is not sufficient to set `host: true` to access the server from your LAN. See [the WSL document](https://learn.microsoft.com/en-us/windows/wsl/networking#accessing-a-wsl-2-distribution-from-your-local-area-network-lan) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.allowedhosts in vite-config?\n\nAssistant: To server.allowedhosts in vite-config, here's what you do:\n- **Type:** `string[] | true`  \n- **Default:** `[]`  \n\nThe hostnames that Vite is allowed to respond to. `localhost` and domains under `.localhost` and all IP addresses are allowed by default. When using HTTPS, this check is skipped.\n\nIf a string starts with `.`, it will allow that hostname without the `.` and all subdomains under the hostname. For example, `.example.com` will allow `example.com`, `foo.example.com`, and `foo.bar.example.com`. If set to `true`, the server is allowed to respond to requests for any hosts.\n\nWhat hosts are safe to be added?\n\nHosts that you have control over which IP addresses they resolve to are safe to add to the list of allowed hosts.\n\nFor example, if you own a domain `vite.dev`, you can add `vite.dev` and `.vite.dev` to the list. If you don't own that domain and you cannot trust the owner of that domain, you should not add it.\n\nEspecially, you should never add Top-Level Domains like `.com` to the list. This is because anyone can purchase a domain like `example.com` and control the IP address it resolves to.\n\nDANGER\n\nSetting `server.allowedHosts` to `true` allows any website to send requests to your dev server through DNS rebinding attacks, allowing them to download your source code and content. We recommend always using an explicit list of allowed hosts. See [GHSA-vg6x-rcgg-rjx6](https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6) for more details.\n\nConfigure via environment variable\n\nYou can set the environment variable `__VITE_ADDITIONAL_SERVER_ALLOWED_HOSTS` to add an additional allowed host..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.port in vite-config?\n\nAssistant: To server.port in vite-config, here's what you do:\n- **Type:** `number`  \n- **Default:** `5173`  \n\nSpecify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.strictport in vite-config?\n\nAssistant: To server.strictport in vite-config, here's what you do:\n- **Type:** `boolean`  \n\nSet to `true` to exit if port is already in use, instead of automatically trying the next available port..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.https in vite-config?\n\nAssistant: To server.https in vite-config, here's what you do:\n- **Type:** `https.ServerOptions`  \n\nEnable TLS + HTTP/2. Note this downgrades to TLS only when the [`server.proxy` option](https://vite.dev/config/server-options#server-proxy) is also used.\n\nThe value can also be an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.\n\nA valid certificate is needed. For a basic setup, you can add [@vitejs/plugin-basic-ssl](https://github.com/vitejs/vite-plugin-basic-ssl) to the project plugins, which will automatically create and cache a self-signed certificate. But we recommend creating your own certificates..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.open in vite-config?\n\nAssistant: To server.open in vite-config, here's what you do:\n- **Type:** `boolean | string`  \n\nAutomatically open the app in the browser on server start. When the value is a string, it will be used as the URL's pathname. If you want to open the server in a specific browser you like, you can set the env `process.env.BROWSER` (e.g. `firefox`). You can also set `process.env.BROWSER_ARGS` to pass additional arguments (e.g. `--incognito`).\n\n`BROWSER` and `BROWSER_ARGS` are also special environment variables you can set in the `.env` file to configure it. See [the `open` package](https://github.com/sindresorhus/open#app) for more details.\n\n**Example:**\n\n```js\nexport default defineConfig({\n  server: {\n    open: '/docs/index.html',\n  },\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.proxy in vite-config?\n\nAssistant: To server.proxy in vite-config, here's what you do:\n- **Type:** `Record<string, string | ProxyOptions>`  \n\nConfigure custom proxy rules for the dev server. Expects an object of `{ key: options }` pairs. Any requests that request path starts with that key will be proxied to that specified target. If the key starts with `^`, it will be interpreted as a `RegExp`. The `configure` option can be used to access the proxy instance. If a request matches any of the configured proxy rules, the request won't be transformed by Vite.\n\nNote that if you are using non-relative [`base`](https://vite.dev/config/shared-options#base), you must prefix each key with that `base`.\n\nExtends [`http-proxy`](https://github.com/http-party/node-http-proxy#options). Additional options are [here](https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/middlewares/proxy.ts#L13).\n\nIn some cases, you might also want to configure the underlying dev server (e.g. to add custom middlewares to the internal [connect](https://github.com/senchalabs/connect) app). In order to do that, you need to write your own [plugin](https://vite.dev/guide/using-plugins) and use [configureServer](https://vite.dev/guide/api-plugin#configureserver) function.\n\n**Example:**\n\n```js\nexport default defineConfig({\n  server: {\n    proxy: {\n      // string shorthand:\n      // http://localhost:5173/foo\n      //   -> http://localhost:4567/foo\n      '/foo': 'http://localhost:4567',\n      // with options:\n      // http://localhost:5173/api/bar\n      //   -> http://jsonplaceholder.typicode.com/bar\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n      },\n      // with RegExp:\n      // http://localhost:5173/fallback/\n      //   -> http://jsonplaceholder.typicode.com/\n      '^/fallback/.*': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/fallback/, ''),\n      },\n      // Using the proxy instance\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        configure: (proxy, options) => {\n          // proxy will be an instance of 'http-proxy'\n        },\n      },\n      // Proxying websockets or socket.io:\n      // ws://localhost:5173/socket.io\n      //   -> ws://localhost:5174/socket.io\n      // Exercise caution using `rewriteWsOrigin` as it can leave the\n      // proxying open to CSRF attacks.\n      '/socket.io': {\n        target: 'ws://localhost:5174',\n        ws: true,\n        rewriteWsOrigin: true,\n      },\n    },\n  },\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.cors in vite-config?\n\nAssistant: To server.cors in vite-config, here's what you do:\n- **Type:** `boolean | CorsOptions`  \n- **Default:** `{ origin: /^https?:\\/\\/(?:(?:[^:]+\\.)?localhost|127\\.0\\.0\\.1|\\[::1\\])(?::\\d+)?$/ }` (allows localhost, `127.0.0.1` and `::1`)  \n\nConfigure CORS for the dev server. Pass an [options object](https://github.com/expressjs/cors#configuration-options) to fine tune the behavior or `true` to allow any origin.\n\nDANGER\n\nSetting `server.cors` to `true` allows any website to send requests to your dev server and download your source code and content. We recommend always using an explicit list of allowed origins..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.headers in vite-config?\n\nAssistant: To server.headers in vite-config, here's what you do:\n- **Type:** `OutgoingHttpHeaders`  \n\nSpecify server response headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I server.hmr in vite-config?\n\nAssistant: To server.hmr in vite-config, here's what you do:\n- **Type:** `boolean | { protocol?: string, host?: string, port?: number, path?: string, timeout?: number, overlay?: boolean, clientPort?: number, server?: Server }`  \n\nDisable or configure HMR connection (in cases where the HMR websocket must use a different address from the http server).\n\nSet `server.hmr.overlay` to `false` to disable the server error overlay.\n\n`protocol` sets the WebSocket protocol used for the HMR connection: `ws` (WebSocket) or `wss` (WebSocket Secure).\n\n`clientPort` is an advanced option that overrides the port only on the client side, allowing you to serve the websocket on a different port than the client code looks for it on.\n\nWhen `server.hmr.server` is defined, Vite will process the HMR connection requests through the provided server. If not in middleware mode, Vite will attempt to process HMR connection requests through the existing server. This can be helpful when using self-signed certificates or when you want to expose Vite over a network on a single port.\n\nCheck out [`vite-setup-catalogue`](https://github.com/sapphi-red/vite-setup-catalogue) for some examples.\n\nNOTE\n\nWith the default configuration, reverse proxies in front of Vite are expected to support proxying WebSocket. If the Vite HMR client fails to connect WebSocket, the client will fall back to connecting the WebSocket directly to the Vite HMR server bypassing the reverse proxies:\n\n```\nDirect websocket connection fallback. Check out https://vite.dev/config/server-options.html#server-hmr to remove the previous connection error.\n```\n\nThe error that appears in the Browser when the fallback happens can be ignored. To avoid the error by directly bypassing reverse proxies, you could either:\n\n- configure the reverse proxy to proxy WebSocket too\n- set [`server.strictPort = true`](https://vite.dev/config/server-options#server-strictport) and set `server.hmr.clientPort` to the same value with `server.port`\n- set `server.hmr.port` to a different value from [`server.port`](https://vite.dev/config/server-options#server-port).\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "section_detail", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you give me some code examples for Server Options in vite-config?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setting DNS Result Order**:\n\n```yaml\nimport { defineConfig } from 'vite'\nimport dns from 'node:dns'\n\ndns.setDefaultResultOrder('verbatim')\n\nexport default defineConfig({\n  // omit\n})\n```\n\nThis snippet shows you how to setting dns result order, which is an important aspect of server options.\n\n**Opening a Specific Path on Server Start**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    open: '/docs/index.html',\n  },\n})\n```\n\nThis snippet shows you how to opening a specific path on server start, which is an important aspect of server options.\n\n**Configuring Proxy Rules**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    proxy: {\n      '/foo': 'http://localhost:4567',\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n      },\n      '^/fallback/.*': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/fallback/, ''),\n      },\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        configure: (proxy, options) => {\n          // proxy will be an instance of 'http-proxy'\n        },\n      },\n      '/socket.io': {\n        target: 'ws://localhost:5174',\n        ws: true,\n        rewriteWsOrigin: true,\n      },\n    },\n  },\n})\n```\n\nThis snippet shows you how to configuring proxy rules, which is an important aspect of server options.\n\n**File System Allow Configuration**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    fs: {\n      allow: ['..'],\n    },\n  },\n})\n```\n\nThis snippet shows you how to file system allow configuration, which is an important aspect of server options.\n\n**Sourcemap Ignore List Configuration**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    sourcemapIgnoreList(sourcePath, sourcemapPath) {\n      return sourcePath.includes('node_modules')\n    },\n  },\n})\n```\n\nThis snippet shows you how to sourcemap ignore list configuration, which is an important aspect of server options.\n\n", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "code_examples", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: What are some tips for using Server Options in vite-config effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways use an explicit list of allowed hosts instead of setting `server.allowedHosts` to `true` to prevent DNS rebinding attacks.\n\nWhen using WSL2, ensure to follow the guidelines for accessing the server from your LAN.\n\nFor CORS, always use an explicit list of allowed origins instead of setting `server.cors` to `true` to prevent unauthorized access.\n\nWhen configuring file system access, be cautious with `server.fs.allow` and `server.fs.deny` to protect sensitive files.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/config/server-options", "title": "Server Options", "description": "Configuration options for the Vite development server.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 22:07:41", "type": "best_practices", "page_metadata": {"title": "Server Options | Vite", "description": "Next Generation Frontend Tooling", "og:title": "Server Options", "theme-color": "#646cff", "ogImage": "https://vite.dev/og-image.jpg", "ogTitle": "Server Options", "generator": "VitePress v1.6.3", "ogUrl": "https://vite.dev", "twitter:site": "@vite_js", "og:url": "https://vite.dev", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "language": "en-US", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "scrapeId": "dfd50913-37d1-4fc2-85ac-0afe2adc46e0", "sourceURL": "https://vite.dev/config/server-options", "url": "https://vite.dev/config/server-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Preview Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Preview Options in vite-config.\n\n# Preview Options\n\nOptions that are only applied to preview in Vite.Here's a quick rundown of what this is about:\n\n## preview.host\n\n- **Type:** `string | boolean`  \n- **Default:** [`server.host`](https://vite.dev/config/server-options#server-host)  \n\nSpecify which IP addresses the server should listen on. Set this to `0.0.0.0` or `true` to listen on all addresses, including LAN and public addresses.\n\nThis can be set via the CLI using `--host 0.0.0.0` or `--host`.\n\nNOTE\n\nThere are cases when other servers might respond instead of Vite. See [`server.host`](https://vite.dev/config/server-options#server-host) for more details.\n\n## preview.allowedHosts\n\n- **Type:** `string | true`  \n- **Default:** [`server.allowedHosts`](https://vite.dev/config/server-options#server-allowedhosts)  \n\nThe hostnames that Vite is allowed to respond to.\n\nSee [`server.allowedHosts`](https://vite.dev/config/server-options#server-allowedhosts) for more details.\n\n## preview.port\n\n- **Type:** `number`  \n- **Default:** `4173`  \n\nSpecify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on.\n\n## preview.strictPort\n\n- **Type:** `boolean`  \n- **Default:** [`server.strictPort`](https://vite.dev/config/server-options#server-strictport)  \n\nSet to `true` to exit if port is already in use, instead of automatically trying the next available port.\n\n## preview.https\n\n- **Type:** `https.ServerOptions`  \n- **Default:** [`server.https`](https://vite.dev/config/server-options#server-https)  \n\nEnable TLS + HTTP/2. Note this downgrades to TLS only when the [`server.proxy` option](https://vite.dev/config/server-options#server-proxy) is also used.\n\nThe value can also be an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.\n\n## preview.open\n\n- **Type:** `boolean | string`  \n- **Default:** [`server.open`](https://vite.dev/config/server-options#server-open)  \n\nAutomatically open the app in the browser on server start. When the value is a string, it will be used as the URL's pathname. If you want to open the server in a specific browser you like, you can set the env `process.env.BROWSER` (e.g. `firefox`). You can also set `process.env.BROWSER_ARGS` to pass additional arguments (e.g. `--incognito`).\n\n`BROWSER` and `BROWSER_ARGS` are also special environment variables you can set in the `.env` file to configure it. See [the `open` package](https://github.com/sindresorhus/open#app) for more details.\n\n## preview.proxy\n\n- **Type:** `Record<string, string | ProxyOptions>`  \n- **Default:** [`server.proxy`](https://vite.dev/config/server-options#server-proxy)  \n\nConfigure custom proxy rules for the preview server. Expects an object of `{ key: options }` pairs. If the key starts with `^`, it will be interpreted as a `RegExp`. The `configure` option can be used to access the proxy instance.\n\nUses [`http-proxy`](https://github.com/http-party/node-http-proxy). Full options [here](https://github.com/http-party/node-http-proxy#options).\n\n## preview.cors\n\n- **Type:** `boolean | CorsOptions`  \n- **Default:** [`server.cors`](https://vite.dev/config/server-options#server-cors)  \n\nConfigure CORS for the preview server.\n\nSee [`server.cors`](https://vite.dev/config/server-options#server-cors) for more details.\n\n## preview.headers\n\n- **Type:** `OutgoingHttpHeaders`  \n\nSpecify server response headers.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "overview", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.host in vite-config?\n\nAssistant: To preview.host in vite-config, here's what you do:\n- **Type:** `string | boolean`  \n- **Default:** [`server.host`](https://vite.dev/config/server-options#server-host)  \n\nSpecify which IP addresses the server should listen on. Set this to `0.0.0.0` or `true` to listen on all addresses, including LAN and public addresses.\n\nThis can be set via the CLI using `--host 0.0.0.0` or `--host`.\n\nNOTE\n\nThere are cases when other servers might respond instead of Vite. See [`server.host`](https://vite.dev/config/server-options#server-host) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.allowedhosts in vite-config?\n\nAssistant: To preview.allowedhosts in vite-config, here's what you do:\n- **Type:** `string | true`  \n- **Default:** [`server.allowedHosts`](https://vite.dev/config/server-options#server-allowedhosts)  \n\nThe hostnames that Vite is allowed to respond to.\n\nSee [`server.allowedHosts`](https://vite.dev/config/server-options#server-allowedhosts) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.port in vite-config?\n\nAssistant: To preview.port in vite-config, here's what you do:\n- **Type:** `number`  \n- **Default:** `4173`  \n\nSpecify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.strictport in vite-config?\n\nAssistant: To preview.strictport in vite-config, here's what you do:\n- **Type:** `boolean`  \n- **Default:** [`server.strictPort`](https://vite.dev/config/server-options#server-strictport)  \n\nSet to `true` to exit if port is already in use, instead of automatically trying the next available port..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.https in vite-config?\n\nAssistant: To preview.https in vite-config, here's what you do:\n- **Type:** `https.ServerOptions`  \n- **Default:** [`server.https`](https://vite.dev/config/server-options#server-https)  \n\nEnable TLS + HTTP/2. Note this downgrades to TLS only when the [`server.proxy` option](https://vite.dev/config/server-options#server-proxy) is also used.\n\nThe value can also be an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.open in vite-config?\n\nAssistant: To preview.open in vite-config, here's what you do:\n- **Type:** `boolean | string`  \n- **Default:** [`server.open`](https://vite.dev/config/server-options#server-open)  \n\nAutomatically open the app in the browser on server start. When the value is a string, it will be used as the URL's pathname. If you want to open the server in a specific browser you like, you can set the env `process.env.BROWSER` (e.g. `firefox`). You can also set `process.env.BROWSER_ARGS` to pass additional arguments (e.g. `--incognito`).\n\n`BROWSER` and `BROWSER_ARGS` are also special environment variables you can set in the `.env` file to configure it. See [the `open` package](https://github.com/sindresorhus/open#app) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.proxy in vite-config?\n\nAssistant: To preview.proxy in vite-config, here's what you do:\n- **Type:** `Record<string, string | ProxyOptions>`  \n- **Default:** [`server.proxy`](https://vite.dev/config/server-options#server-proxy)  \n\nConfigure custom proxy rules for the preview server. Expects an object of `{ key: options }` pairs. If the key starts with `^`, it will be interpreted as a `RegExp`. The `configure` option can be used to access the proxy instance.\n\nUses [`http-proxy`](https://github.com/http-party/node-http-proxy). Full options [here](https://github.com/http-party/node-http-proxy#options)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.cors in vite-config?\n\nAssistant: To preview.cors in vite-config, here's what you do:\n- **Type:** `boolean | CorsOptions`  \n- **Default:** [`server.cors`](https://vite.dev/config/server-options#server-cors)  \n\nConfigure CORS for the preview server.\n\nSee [`server.cors`](https://vite.dev/config/server-options#server-cors) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I preview.headers in vite-config?\n\nAssistant: To preview.headers in vite-config, here's what you do:\n- **Type:** `OutgoingHttpHeaders`  \n\nSpecify server response headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "section_detail", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you give me some code examples for Preview Options in vite-config?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example**:\n\n```yaml\nexport default defineConfig({\n  server: {\n    port: 3030,\n  },\n  preview: {\n    port: 8080,\n  },\n})\n```\n\nThis snippet shows you how to example, which is an important aspect of preview options.\n\n", "metadata": {"source_url": "https://vite.dev/config/preview-options", "title": "Preview Options", "description": "Options that are only applied to preview in Vite.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-02-28 22:07:58", "type": "code_examples", "page_metadata": {"og:site_name": "vitejs", "ogTitle": "Preview Options", "description": "Next Generation Frontend Tooling", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "ogUrl": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Preview Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "og:url": "https://vite.dev", "og:title": "Preview Options", "ogSiteName": "vitejs", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Next Generation Frontend Tooling", "twitter:site": "@vite_js", "twitter:card": "summary_large_image", "scrapeId": "809a839f-4b9f-4931-8ad1-3fc5ba347a4d", "sourceURL": "https://vite.dev/config/preview-options", "url": "https://vite.dev/config/preview-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Worker Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Worker Options in vite-config.\n\n# Worker Options\n\nOptions applied to all dev, build, and preview for worker configurations.Here's a quick rundown of what this is about:\n\n## worker.format\n\n- **Type:** 'es' | 'iife'\\n- **Default:** 'iife'\\n\\nOutput format for worker bundle.\n\n## worker.plugins\n\n- **Type:** `() => (Plugin | Plugin[])[]`\\n\\nVite plugins that apply to the worker bundles. Note that [config.plugins](https://vite.dev/config/shared-options#plugins) only applies to workers in dev, it should be configured here instead for build. The function should return new plugin instances as they are used in parallel rollup worker builds. As such, modifying `config.worker` options in the `config` hook will be ignored.\n\n## worker.rollupOptions\n\n- **Type:** `RollupOptions`\\n\\nRollup options to build worker bundle.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/worker-options", "title": "Worker Options", "description": "Options applied to all dev, build, and preview for worker configurations.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 22:08:03", "type": "overview", "page_metadata": {"ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "language": "en-US", "ogTitle": "Worker Options", "theme-color": "#646cff", "description": "Next Generation Frontend Tooling", "og:title": "Worker Options", "twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "title": "Worker Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "9812a335-4c05-4cac-a7f4-5bb1bc9fde55", "sourceURL": "https://vite.dev/config/worker-options", "url": "https://vite.dev/config/worker-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I worker.format in vite-config?\n\nAssistant: To worker.format in vite-config, here's what you do:\n- **Type:** 'es' | 'iife'\\n- **Default:** 'iife'\\n\\nOutput format for worker bundle..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/worker-options", "title": "Worker Options", "description": "Options applied to all dev, build, and preview for worker configurations.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 22:08:03", "type": "section_detail", "page_metadata": {"ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "language": "en-US", "ogTitle": "Worker Options", "theme-color": "#646cff", "description": "Next Generation Frontend Tooling", "og:title": "Worker Options", "twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "title": "Worker Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "9812a335-4c05-4cac-a7f4-5bb1bc9fde55", "sourceURL": "https://vite.dev/config/worker-options", "url": "https://vite.dev/config/worker-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I worker.plugins in vite-config?\n\nAssistant: To worker.plugins in vite-config, here's what you do:\n- **Type:** `() => (Plugin | Plugin[])[]`\\n\\nVite plugins that apply to the worker bundles. Note that [config.plugins](https://vite.dev/config/shared-options#plugins) only applies to workers in dev, it should be configured here instead for build. The function should return new plugin instances as they are used in parallel rollup worker builds. As such, modifying `config.worker` options in the `config` hook will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/worker-options", "title": "Worker Options", "description": "Options applied to all dev, build, and preview for worker configurations.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 22:08:03", "type": "section_detail", "page_metadata": {"ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "language": "en-US", "ogTitle": "Worker Options", "theme-color": "#646cff", "description": "Next Generation Frontend Tooling", "og:title": "Worker Options", "twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "title": "Worker Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "9812a335-4c05-4cac-a7f4-5bb1bc9fde55", "sourceURL": "https://vite.dev/config/worker-options", "url": "https://vite.dev/config/worker-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I worker.rollupoptions in vite-config?\n\nAssistant: To worker.rollupoptions in vite-config, here's what you do:\n- **Type:** `RollupOptions`\\n\\nRollup options to build worker bundle..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/worker-options", "title": "Worker Options", "description": "Options applied to all dev, build, and preview for worker configurations.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 22:08:03", "type": "section_detail", "page_metadata": {"ogUrl": "https://vite.dev", "generator": "VitePress v1.6.3", "language": "en-US", "ogTitle": "Worker Options", "theme-color": "#646cff", "description": "Next Generation Frontend Tooling", "og:title": "Worker Options", "twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vite.dev/logo.svg", "og:image": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "og:type": "website", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "title": "Worker Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "ogSiteName": "vitejs", "ogDescription": "Next Generation Frontend Tooling", "og:url": "https://vite.dev", "scrapeId": "9812a335-4c05-4cac-a7f4-5bb1bc9fde55", "sourceURL": "https://vite.dev/config/worker-options", "url": "https://vite.dev/config/worker-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Dep Optimization Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Dep Optimization Options in vite-config.\n\n# Dep Optimization Options\n\nThis page covers the options available for dependency optimization in Vite, specifically for the dependency optimizer used in development.Here's a quick rundown of what this is about:\n\n## optimizeDeps.entries\n\nBy default, Vite will crawl all your `.html` files to detect dependencies that need to be pre-bundled (ignoring `node_modules`, `build.outDir`, `__tests__` and `coverage`). If `build.rollupOptions.input` is specified, Vite will crawl those entry points instead.\n\nIf neither of these fit your needs, you can specify custom entries using this option - the value should be a [`tinyglobby` pattern](https://github.com/SuperchupuDev/tinyglobby) or array of patterns that are relative from Vite project root. This will overwrite default entries inference. Only `node_modules` and `build.outDir` folders will be ignored by default when `optimizeDeps.entries` is explicitly defined. If other folders need to be ignored, you can use an ignore pattern as part of the entries list, marked with an initial `!`. If you don't want to ignore `node_modules` and `build.outDir`, you can specify using literal string paths (without `tinyglobby` patterns) instead.\n\n## optimizeDeps.exclude\n\nDependencies to exclude from pre-bundling.\n\nCommonJS dependencies should not be excluded from optimization. If an ESM dependency is excluded from optimization, but has a nested CommonJS dependency, the CommonJS dependency should be added to `optimizeDeps.include`. Example:\n\n```js\nexport default\ndefineConfig({\n\noptimizeDeps: {\n\ninclude: ['esm-dep > cjs-dep'],\n  },\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/dep-optimization-options", "title": "Dep Optimization Options", "description": "This page covers the options available for dependency optimization in Vite, specifically for the dependency optimizer used in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 22:08:10", "type": "overview", "page_metadata": {"ogTitle": "Dep Optimization Options", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Dep Optimization Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Dep Optimization Options", "twitter:site": "@vite_js", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "scrapeId": "134fbbb3-2c00-463a-a974-f37666102e32", "sourceURL": "https://vite.dev/config/dep-optimization-options", "url": "https://vite.dev/config/dep-optimization-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I optimizedeps.entries in vite-config?\n\nAssistant: To optimizedeps.entries in vite-config, here's what you do:\nBy default, Vite will crawl all your `.html` files to detect dependencies that need to be pre-bundled (ignoring `node_modules`, `build.outDir`, `__tests__` and `coverage`). If `build.rollupOptions.input` is specified, Vite will crawl those entry points instead.\n\nIf neither of these fit your needs, you can specify custom entries using this option - the value should be a [`tinyglobby` pattern](https://github.com/SuperchupuDev/tinyglobby) or array of patterns that are relative from Vite project root. This will overwrite default entries inference. Only `node_modules` and `build.outDir` folders will be ignored by default when `optimizeDeps.entries` is explicitly defined. If other folders need to be ignored, you can use an ignore pattern as part of the entries list, marked with an initial `!`. If you don't want to ignore `node_modules` and `build.outDir`, you can specify using literal string paths (without `tinyglobby` patterns) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/dep-optimization-options", "title": "Dep Optimization Options", "description": "This page covers the options available for dependency optimization in Vite, specifically for the dependency optimizer used in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 22:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Dep Optimization Options", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Dep Optimization Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Dep Optimization Options", "twitter:site": "@vite_js", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "scrapeId": "134fbbb3-2c00-463a-a974-f37666102e32", "sourceURL": "https://vite.dev/config/dep-optimization-options", "url": "https://vite.dev/config/dep-optimization-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I optimizedeps.exclude in vite-config?\n\nAssistant: To optimizedeps.exclude in vite-config, here's what you do:\nDependencies to exclude from pre-bundling.\n\nCommonJS dependencies should not be excluded from optimization. If an ESM dependency is excluded from optimization, but has a nested CommonJS dependency, the CommonJS dependency should be added to `optimizeDeps.include`. Example:\n\n```js\nexport default\ndefineConfig({\n\noptimizeDeps: {\n\ninclude: ['esm-dep > cjs-dep'],\n  },\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/dep-optimization-options", "title": "Dep Optimization Options", "description": "This page covers the options available for dependency optimization in Vite, specifically for the dependency optimizer used in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 22:08:10", "type": "section_detail", "page_metadata": {"ogTitle": "Dep Optimization Options", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Dep Optimization Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Dep Optimization Options", "twitter:site": "@vite_js", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "scrapeId": "134fbbb3-2c00-463a-a974-f37666102e32", "sourceURL": "https://vite.dev/config/dep-optimization-options", "url": "https://vite.dev/config/dep-optimization-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you give me some code examples for Dep Optimization Options in vite-config?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of optimizeDeps.include**:\n\n```yaml\n```js\nexport default\ndefineConfig({\n\noptimizeDeps: {\n\ninclude: ['my-lib/components/**/*.vue'],\n  },\n})\n```\n```\n\nThis snippet shows you how to example of optimizedeps.include, which is an important aspect of dep optimization options.\n\n", "metadata": {"source_url": "https://vite.dev/config/dep-optimization-options", "title": "Dep Optimization Options", "description": "This page covers the options available for dependency optimization in Vite, specifically for the dependency optimizer used in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 22:08:10", "type": "code_examples", "page_metadata": {"ogTitle": "Dep Optimization Options", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Dep Optimization Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Dep Optimization Options", "twitter:site": "@vite_js", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "scrapeId": "134fbbb3-2c00-463a-a974-f37666102e32", "sourceURL": "https://vite.dev/config/dep-optimization-options", "url": "https://vite.dev/config/dep-optimization-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: What are some tips for using Dep Optimization Options in vite-config effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you are using a library with many deep imports, specify a trailing glob pattern to pre-bundle all deep imports at once to avoid constant pre-bundling.\n\nTo disable the optimizer completely, use optimizeDeps.noDiscovery: true to disallow automatic discovery of dependencies and leave optimizeDeps.include undefined or empty.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/config/dep-optimization-options", "title": "Dep Optimization Options", "description": "This page covers the options available for dependency optimization in Vite, specifically for the dependency optimizer used in development.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 22:08:10", "type": "best_practices", "page_metadata": {"ogTitle": "Dep Optimization Options", "ogDescription": "Next Generation Frontend Tooling", "og:site_name": "vitejs", "ogUrl": "https://vite.dev", "description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "og:type": "website", "title": "Dep Optimization Options | Vite", "ogImage": "https://vite.dev/og-image.jpg", "viewport": "width=device-width,initial-scale=1", "ogSiteName": "vitejs", "og:image": "https://vite.dev/og-image.jpg", "og:description": "Next Generation Frontend Tooling", "twitter:card": "summary_large_image", "theme-color": "#646cff", "og:title": "Dep Optimization Options", "twitter:site": "@vite_js", "language": "en-US", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "scrapeId": "134fbbb3-2c00-463a-a974-f37666102e32", "sourceURL": "https://vite.dev/config/dep-optimization-options", "url": "https://vite.dev/config/dep-optimization-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Build Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Build Options in vite-config.\n\n# Build Options\n\nOptions related to the build configuration in Vite.Here's a quick rundown of what this is about:\n\n## build.target\n\n- **Type:** `string | string[]`\\n- **Default:** `'modules'`\\n- **Related:** [Browser Compatibility](https://vite.dev/guide/build#browser-compatibility)\\n\\nBrowser compatibility target for the final bundle. The default value is a Vite special value, `'modules'`, which targets browsers with [native ES Modules](https://caniuse.com/es6-module), [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), and [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta) support. Vite will replace `'modules'` to `['es2020', 'edge88', 'firefox78', 'chrome87', 'safari14']`\\n\\nAnother special value is `'esnext'` - which assumes native dynamic imports support and will only perform minimal transpiling.\\n\\nThe transform is performed with esbuild and the value should be a valid [esbuild target option](https://esbuild.github.io/api/#target). Custom targets can either be an ES version (e.g. `es2015`), a browser with version (e.g. `chrome58`), or an array of multiple target strings.\\n\\nNote the build will fail if the code contains features that cannot be safely transpiled by esbuild. See [esbuild docs](https://esbuild.github.io/content-types/#javascript) for more details.\n\n## build.modulePreload\n\n- **Type:** `boolean | { polyfill?: boolean, resolveDependencies?: ResolveModulePreloadDependenciesFn }`\\n- **Default:** `{ polyfill: true }`\\n\\nBy default, a [module preload polyfill](https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill) is automatically injected. The polyfill is auto injected into the proxy module of each `index.html` entry. If the build is configured to use a non-HTML custom entry via `build.rollupOptions.input`, then it is necessary to manually import the polyfill in your custom entry:\\n\\n```js\\nimport 'vite/modulepreload-polyfill'\\n```\\n\\nNote: the polyfill does **not** apply to [Library Mode](https://vite.dev/guide/build#library-mode). If you need to support browsers without native dynamic import, you should probably avoid using it in your library.\\n\\nThe polyfill can be disabled using `{ polyfill: false }`.\\n\\nThe list of chunks to preload for each dynamic import is computed by Vite. By default, an absolute path including the `base` will be used when loading these dependencies. If the `base` is relative ( `''` or `'./'`), `import.meta.url` is used at runtime to avoid absolute paths that depend on the final deployed base.\\n\\nThere is experimental support for fine grained control over the dependencies list and their paths using the `resolveDependencies` function. [Give Feedback](https://github.com/vitejs/vite/discussions/13841). It expects a function of type `ResolveModulePreloadDependenciesFn`:\\n\\n```ts\\ntype ResolveModulePreloadDependenciesFn = (\\n  url: string,\\n  deps: string[],\\n  context: {\\n    hostId: string\\n    hostType: 'html' | 'js'\\n  },\\n) => string[]\\n```\\n\\nThe `resolveDependencies` function will be called for each dynamic import with a list of the chunks it depends on, and it will also be called for each chunk imported in entry HTML files. A new dependencies array can be returned with these filtered or more dependencies injected, and their paths modified. The `deps` paths are relative to the `build.outDir`. The return value should be a relative path to the `build.outDir`.\\n\\n```js\\nmodulePreload: {\\n  resolveDependencies: (\\n    filename,\\n    deps, {\\n      hostId,\\n      hostType }) => {\\n        return deps.filter(condition)\\n      },\\n  },\\n}\\n```\\n\\nThe resolved dependency paths can be further modified using [`experimental.renderBuiltUrl`](https://vite.dev/guide/build#advanced-base-options).\n\n## build.polyfillModulePreload\n\n- **Type:** `boolean`\\n- **Default:** `true`\\n- **Deprecated** use `build.modulePreload.polyfill` instead\\n\\nWhether to automatically inject a [module preload polyfill](https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill).\n\n## build.outDir\n\n- **Type:** `string`\\n- **Default:** `dist`\\n\\nSpecify the output directory (relative to [project root](https://vite.dev/guide/#index-html-and-project-root)).\n\n## build.assetsDir\n\n- **Type:** `string`\\n- **Default:** `assets`\\n\\nSpecify the directory to nest generated assets under (relative to `build.outDir`. This is not used in [Library Mode](https://vite.dev/guide/build#library-mode)).\n\n## build.assetsInlineLimit\n\n- **Type:** `number` | `((filePath: string, content: Buffer) => boolean | undefined)`\\n- **Default:** `4096` (4 KiB)\\n\\nImported or referenced assets that are smaller than this threshold will be inlined as base64 URLs to avoid extra http requests. Set to `0` to disable inlining altogether.\\n\\nIf a callback is passed, a boolean can be returned to opt-in or opt-out. If nothing is returned the default logic applies.\\n\\nGit LFS placeholders are automatically excluded from inlining because they do not contain the content of the file they represent.\\n\\nNote\\nIf you specify `build.lib`, `build.assetsInlineLimit` will be ignored and assets will always be inlined, regardless of file size or being a Git LFS placeholder.\n\n## build.cssCodeSplit\n\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nEnable/disable CSS code splitting. When enabled, CSS imported in async JS chunks will be preserved as chunks and fetched together when the chunk is fetched.\\n\\nIf disabled, all CSS in the entire project will be extracted into a single CSS file.\\n\\nNote\\nIf you specify `build.lib`, `build.cssCodeSplit` will be `false` as default.\n\n## build.cssTarget\n\n- **Type:** `string | string[]`\\n- **Default:** the same as [`build.target`](https://vite.dev/config/build-options#build-target)\\n\\nThis option allows users to set a different browser target for CSS minification from the one used for JavaScript transpilation.\\n\\nIt should only be used when you are targeting a non-mainstream browser. One example is Android WeChat WebView, which supports most modern JavaScript features but not the [`#RGBA` hexadecimal color notation in CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_colors). In this case, you need to set `build.cssTarget` to `chrome61` to prevent vite from transform `rgba()` colors into `#RGBA` hexadecimal notations.\n\n## build.cssMinify\n\n- **Type:** `boolean | 'esbuild' | 'lightningcss'`\\n- **Default:** the same as [`build.minify`](https://vite.dev/config/build-options#build-minify) for client, `'esbuild'` for SSR\\n\\nThis option allows users to override CSS minification specifically instead of defaulting to `build.minify`, so you can configure minification for JS and CSS separately. Vite uses `esbuild` by default to minify CSS. Set the option to `'lightningcss'` to use [Lightning CSS](https://lightningcss.dev/minification.html) instead. If selected, it can be configured using [`css.lightningcss`](https://vite.dev/config/shared-options#css-lightningcss).\n\n## build.sourcemap\n\n- **Type:** `boolean | 'inline' | 'hidden'`\\n- **Default:** `false`\\n\\nGenerate production source maps. If `true`, a separate sourcemap file will be created. If `'inline'`, the sourcemap will be appended to the resulting output file as a data URI. `'hidden'` works like `true` except that the corresponding sourcemap comments in the bundled files are suppressed.\n\n## build.rollupOptions\n\n- **Type:** [`RollupOptions`](https://rollupjs.org/configuration-options/)\\n\\nDirectly customize the underlying Rollup bundle. This is the same as options that can be exported from a Rollup config file and will be merged with Vite's internal Rollup options. See [Rollup options docs](https://rollupjs.org/configuration-options/) for more details.\n\n## build.commonjsOptions\n\n- **Type:** [`RollupCommonJSOptions`](https://github.com/rollup/plugins/tree/master/packages/commonjs#options)\\n\\nOptions to pass on to [@rollup/plugin-commonjs](https://github.com/rollup/plugins/tree/master/packages/commonjs).\n\n## build.dynamicImportVarsOptions\n\n- **Type:** [`RollupDynamicImportVarsOptions`](https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#options)\\n- **Related:** [Dynamic Import](https://vite.dev/guide/features#dynamic-import)\\n\\nOptions to pass on to [@rollup/plugin-dynamic-import-vars](https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars).\n\n## build.lib\n\n- **Type:** `{ entry: string | string[] | { [entryAlias: string]: string }, name?: string, formats?: ('es' | 'cjs' | 'umd' | 'iife')[], fileName?: string | ((format: ModuleFormat, entryName: string) => string), cssFileName?: string }`\\n- **Related:** [Library Mode](https://vite.dev/guide/build#library-mode)\\n\\nBuild as a library. `entry` is required since the library cannot use HTML as entry. `name` is the exposed global variable and is required when `formats` includes `'umd'` or `'iife'`. Default `formats` are `['es', 'umd']`, or `['es', 'cjs']`, if multiple entries are used.\\n\\n`fileName` is the name of the package file output, which defaults to the \"name\" in `package.json`. It can also be defined as a function taking the `format` and `entryName` as arguments, and returning the file name.\\n\\nIf your package imports CSS, `cssFileName` can be used to specify the name of the CSS file output. It defaults to the same value as `fileName` if it's set a string, otherwise it also falls back to the \"name\" in `package.json`.\\n\\n```js\\nimport { defineConfig } from 'vite'\\n\\nexport default defineConfig({\\n  build: {\\n    lib: {\\n      entry: ['src/main.js'],\\n      fileName: (format, entryName) => `my-lib-${entryName}.${format}.js`,\\n      cssFileName: 'my-lib-style',\\n    },\\n  },\\n})\\n```\n\n## build.manifest\n\n- **Type:** `boolean | string`\\n- **Default:** `false`\\n- **Related:** [Backend Integration](https://vite.dev/guide/backend-integration)\\n\\nWhen set to `true`, the build will also generate a `.vite/manifest.json` file that contains a mapping of non-hashed asset filenames to their hashed versions, which can then be used by a server framework to render the correct asset links. When the value is a string, it will be used as the manifest file name.\n\n## build.ssrManifest\n\n- **Type:** `boolean | string`\\n- **Default:** `false`\\n- **Related:** [Server-Side Rendering](https://vite.dev/guide/ssr)\\n\\nWhen set to `true`, the build will also generate an SSR manifest for determining style links and asset preload directives in production. When the value is a string, it will be used as the manifest file name.\n\n## build.ssr\n\n- **Type:** `boolean | string`\\n- **Default:** `false`\\n- **Related:** [Server-Side Rendering](https://vite.dev/guide/ssr)\\n\\nProduce SSR-oriented build. The value can be a string to directly specify the SSR entry, or `true`, which requires specifying the SSR entry via `rollupOptions.input`.\n\n## build.emitAssets\n\n- **Type:** `boolean`\\n- **Default:** `false`\\n\\nDuring non-client builds, static assets aren't emitted as it is assumed they would be emitted as part of the client build. This option allows frameworks to force emitting them in other environments build. It is responsibility of the framework to merge the assets with a post build step.\n\n## build.ssrEmitAssets\n\n- **Type:** `boolean`\\n- **Default:** `false`\\n\\nDuring the SSR build, static assets aren't emitted as it is assumed they would be emitted as part of the client build. This option allows frameworks to force emitting them in both the client and SSR build. It is responsibility of the framework to merge the assets with a post build step. This option will be replaced by `build.emitAssets` once Environment API is stable.\n\n## build.minify\n\n- **Type:** `boolean | 'terser' | 'esbuild'`\\n- **Default:** `'esbuild'` for client build, `false` for SSR build\\n\\nSet to `false` to disable minification, or specify the minifier to use. The default is [esbuild](https://github.com/evanw/esbuild) which is 20 ~ 40x faster than terser and only 1 ~ 2% worse compression. [Benchmarks](https://github.com/privatenumber/minification-benchmarks)\\n\\nNote the `build.minify` option does not minify whitespaces when using the `'es'` format in lib mode, as it removes pure annotations and breaks tree-shaking.\\n\\nTerser must be installed when it is set to `'terser'`.\\n\\n```sh\\nnpm add -D terser\\n```\n\n## build.terserOptions\n\n- **Type:** `TerserOptions`\\n\\nAdditional [minify options](https://terser.org/docs/api-reference#minify-options) to pass on to Terser.\\n\\nIn addition, you can also pass a `maxWorkers: number` option to specify the max number of workers to spawn. Defaults to the number of CPUs minus 1.\n\n## build.write\n\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nSet to `false` to disable writing the bundle to disk. This is mostly used in [programmatic `build()` calls](https://vite.dev/guide/api-javascript#build) where further post processing of the bundle is needed before writing to disk.\n\n## build.emptyOutDir\n\n- **Type:** `boolean`\\n- **Default:** `true` if `outDir` is inside `root`\\n\\nBy default, Vite will empty the `outDir` on build if it is inside project root. It will emit a warning if `outDir` is outside of root to avoid accidentally removing important files. You can explicitly set this option to suppress the warning. This is also available via command line as `--emptyOutDir`.\n\n## build.copyPublicDir\n\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nBy default, Vite will copy files from the `publicDir` into the `outDir` on build. Set to `false` to disable this.\n\n## build.reportCompressedSize\n\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nEnable/disable gzip-compressed size reporting. Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\n## build.chunkSizeWarningLimit\n\n- **Type:** `number`\\n- **Default:** `500`\\n\\nLimit for chunk size warnings (in kB). It is compared against the uncompressed chunk size as the [JavaScript size itself is related to the execution time](https://v8.dev/blog/cost-of-javascript-2019).\n\n## build.watch\n\n- **Type:** [`WatcherOptions`](https://rollupjs.org/configuration-options/#watch) `| null`\\n- **Default:** `null`\\n\\nSet to `{}` to enable rollup watcher. This is mostly used in cases that involve build-only plugins or integrations processes.\\n\\nUsing Vite on Windows Subsystem for Linux (WSL) 2\\nThere are cases that file system watching does not work with WSL2. See [`server.watch`](https://vite.dev/config/server-options#server-watch) for more details.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "overview", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.target in vite-config?\n\nAssistant: To build.target in vite-config, here's what you do:\n- **Type:** `string | string[]`\\n- **Default:** `'modules'`\\n- **Related:** [Browser Compatibility](https://vite.dev/guide/build#browser-compatibility)\\n\\nBrowser compatibility target for the final bundle. The default value is a Vite special value, `'modules'`, which targets browsers with [native ES Modules](https://caniuse.com/es6-module), [native ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), and [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta) support. Vite will replace `'modules'` to `['es2020', 'edge88', 'firefox78', 'chrome87', 'safari14']`\\n\\nAnother special value is `'esnext'` - which assumes native dynamic imports support and will only perform minimal transpiling.\\n\\nThe transform is performed with esbuild and the value should be a valid [esbuild target option](https://esbuild.github.io/api/#target). Custom targets can either be an ES version (e.g. `es2015`), a browser with version (e.g. `chrome58`), or an array of multiple target strings.\\n\\nNote the build will fail if the code contains features that cannot be safely transpiled by esbuild. See [esbuild docs](https://esbuild.github.io/content-types/#javascript) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.modulepreload in vite-config?\n\nAssistant: To build.modulepreload in vite-config, here's what you do:\n- **Type:** `boolean | { polyfill?: boolean, resolveDependencies?: ResolveModulePreloadDependenciesFn }`\\n- **Default:** `{ polyfill: true }`\\n\\nBy default, a [module preload polyfill](https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill) is automatically injected. The polyfill is auto injected into the proxy module of each `index.html` entry. If the build is configured to use a non-HTML custom entry via `build.rollupOptions.input`, then it is necessary to manually import the polyfill in your custom entry:\\n\\n```js\\nimport 'vite/modulepreload-polyfill'\\n```\\n\\nNote: the polyfill does **not** apply to [Library Mode](https://vite.dev/guide/build#library-mode). If you need to support browsers without native dynamic import, you should probably avoid using it in your library.\\n\\nThe polyfill can be disabled using `{ polyfill: false }`.\\n\\nThe list of chunks to preload for each dynamic import is computed by Vite. By default, an absolute path including the `base` will be used when loading these dependencies. If the `base` is relative ( `''` or `'./'`), `import.meta.url` is used at runtime to avoid absolute paths that depend on the final deployed base.\\n\\nThere is experimental support for fine grained control over the dependencies list and their paths using the `resolveDependencies` function. [Give Feedback](https://github.com/vitejs/vite/discussions/13841). It expects a function of type `ResolveModulePreloadDependenciesFn`:\\n\\n```ts\\ntype ResolveModulePreloadDependenciesFn = (\\n  url: string,\\n  deps: string[],\\n  context: {\\n    hostId: string\\n    hostType: 'html' | 'js'\\n  },\\n) => string[]\\n```\\n\\nThe `resolveDependencies` function will be called for each dynamic import with a list of the chunks it depends on, and it will also be called for each chunk imported in entry HTML files. A new dependencies array can be returned with these filtered or more dependencies injected, and their paths modified. The `deps` paths are relative to the `build.outDir`. The return value should be a relative path to the `build.outDir`.\\n\\n```js\\nmodulePreload: {\\n  resolveDependencies: (\\n    filename,\\n    deps, {\\n      hostId,\\n      hostType }) => {\\n        return deps.filter(condition)\\n      },\\n  },\\n}\\n```\\n\\nThe resolved dependency paths can be further modified using [`experimental.renderBuiltUrl`](https://vite.dev/guide/build#advanced-base-options)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.polyfillmodulepreload in vite-config?\n\nAssistant: To build.polyfillmodulepreload in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `true`\\n- **Deprecated** use `build.modulePreload.polyfill` instead\\n\\nWhether to automatically inject a [module preload polyfill](https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.outdir in vite-config?\n\nAssistant: To build.outdir in vite-config, here's what you do:\n- **Type:** `string`\\n- **Default:** `dist`\\n\\nSpecify the output directory (relative to [project root](https://vite.dev/guide/#index-html-and-project-root))..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.assetsdir in vite-config?\n\nAssistant: To build.assetsdir in vite-config, here's what you do:\n- **Type:** `string`\\n- **Default:** `assets`\\n\\nSpecify the directory to nest generated assets under (relative to `build.outDir`. This is not used in [Library Mode](https://vite.dev/guide/build#library-mode))..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.assetsinlinelimit in vite-config?\n\nAssistant: To build.assetsinlinelimit in vite-config, here's what you do:\n- **Type:** `number` | `((filePath: string, content: Buffer) => boolean | undefined)`\\n- **Default:** `4096` (4 KiB)\\n\\nImported or referenced assets that are smaller than this threshold will be inlined as base64 URLs to avoid extra http requests. Set to `0` to disable inlining altogether.\\n\\nIf a callback is passed, a boolean can be returned to opt-in or opt-out. If nothing is returned the default logic applies.\\n\\nGit LFS placeholders are automatically excluded from inlining because they do not contain the content of the file they represent.\\n\\nNote\\nIf you specify `build.lib`, `build.assetsInlineLimit` will be ignored and assets will always be inlined, regardless of file size or being a Git LFS placeholder..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.csscodesplit in vite-config?\n\nAssistant: To build.csscodesplit in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nEnable/disable CSS code splitting. When enabled, CSS imported in async JS chunks will be preserved as chunks and fetched together when the chunk is fetched.\\n\\nIf disabled, all CSS in the entire project will be extracted into a single CSS file.\\n\\nNote\\nIf you specify `build.lib`, `build.cssCodeSplit` will be `false` as default..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.csstarget in vite-config?\n\nAssistant: To build.csstarget in vite-config, here's what you do:\n- **Type:** `string | string[]`\\n- **Default:** the same as [`build.target`](https://vite.dev/config/build-options#build-target)\\n\\nThis option allows users to set a different browser target for CSS minification from the one used for JavaScript transpilation.\\n\\nIt should only be used when you are targeting a non-mainstream browser. One example is Android WeChat WebView, which supports most modern JavaScript features but not the [`#RGBA` hexadecimal color notation in CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_colors). In this case, you need to set `build.cssTarget` to `chrome61` to prevent vite from transform `rgba()` colors into `#RGBA` hexadecimal notations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.cssminify in vite-config?\n\nAssistant: To build.cssminify in vite-config, here's what you do:\n- **Type:** `boolean | 'esbuild' | 'lightningcss'`\\n- **Default:** the same as [`build.minify`](https://vite.dev/config/build-options#build-minify) for client, `'esbuild'` for SSR\\n\\nThis option allows users to override CSS minification specifically instead of defaulting to `build.minify`, so you can configure minification for JS and CSS separately. Vite uses `esbuild` by default to minify CSS. Set the option to `'lightningcss'` to use [Lightning CSS](https://lightningcss.dev/minification.html) instead. If selected, it can be configured using [`css.lightningcss`](https://vite.dev/config/shared-options#css-lightningcss)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.sourcemap in vite-config?\n\nAssistant: To build.sourcemap in vite-config, here's what you do:\n- **Type:** `boolean | 'inline' | 'hidden'`\\n- **Default:** `false`\\n\\nGenerate production source maps. If `true`, a separate sourcemap file will be created. If `'inline'`, the sourcemap will be appended to the resulting output file as a data URI. `'hidden'` works like `true` except that the corresponding sourcemap comments in the bundled files are suppressed..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.rollupoptions in vite-config?\n\nAssistant: To build.rollupoptions in vite-config, here's what you do:\n- **Type:** [`RollupOptions`](https://rollupjs.org/configuration-options/)\\n\\nDirectly customize the underlying Rollup bundle. This is the same as options that can be exported from a Rollup config file and will be merged with Vite's internal Rollup options. See [Rollup options docs](https://rollupjs.org/configuration-options/) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.commonjsoptions in vite-config?\n\nAssistant: To build.commonjsoptions in vite-config, here's what you do:\n- **Type:** [`RollupCommonJSOptions`](https://github.com/rollup/plugins/tree/master/packages/commonjs#options)\\n\\nOptions to pass on to [@rollup/plugin-commonjs](https://github.com/rollup/plugins/tree/master/packages/commonjs)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.dynamicimportvarsoptions in vite-config?\n\nAssistant: To build.dynamicimportvarsoptions in vite-config, here's what you do:\n- **Type:** [`RollupDynamicImportVarsOptions`](https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#options)\\n- **Related:** [Dynamic Import](https://vite.dev/guide/features#dynamic-import)\\n\\nOptions to pass on to [@rollup/plugin-dynamic-import-vars](https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.lib in vite-config?\n\nAssistant: To build.lib in vite-config, here's what you do:\n- **Type:** `{ entry: string | string[] | { [entryAlias: string]: string }, name?: string, formats?: ('es' | 'cjs' | 'umd' | 'iife')[], fileName?: string | ((format: ModuleFormat, entryName: string) => string), cssFileName?: string }`\\n- **Related:** [Library Mode](https://vite.dev/guide/build#library-mode)\\n\\nBuild as a library. `entry` is required since the library cannot use HTML as entry. `name` is the exposed global variable and is required when `formats` includes `'umd'` or `'iife'`. Default `formats` are `['es', 'umd']`, or `['es', 'cjs']`, if multiple entries are used.\\n\\n`fileName` is the name of the package file output, which defaults to the \"name\" in `package.json`. It can also be defined as a function taking the `format` and `entryName` as arguments, and returning the file name.\\n\\nIf your package imports CSS, `cssFileName` can be used to specify the name of the CSS file output. It defaults to the same value as `fileName` if it's set a string, otherwise it also falls back to the \"name\" in `package.json`.\\n\\n```js\\nimport { defineConfig } from 'vite'\\n\\nexport default defineConfig({\\n  build: {\\n    lib: {\\n      entry: ['src/main.js'],\\n      fileName: (format, entryName) => `my-lib-${entryName}.${format}.js`,\\n      cssFileName: 'my-lib-style',\\n    },\\n  },\\n})\\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.manifest in vite-config?\n\nAssistant: To build.manifest in vite-config, here's what you do:\n- **Type:** `boolean | string`\\n- **Default:** `false`\\n- **Related:** [Backend Integration](https://vite.dev/guide/backend-integration)\\n\\nWhen set to `true`, the build will also generate a `.vite/manifest.json` file that contains a mapping of non-hashed asset filenames to their hashed versions, which can then be used by a server framework to render the correct asset links. When the value is a string, it will be used as the manifest file name..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.ssrmanifest in vite-config?\n\nAssistant: To build.ssrmanifest in vite-config, here's what you do:\n- **Type:** `boolean | string`\\n- **Default:** `false`\\n- **Related:** [Server-Side Rendering](https://vite.dev/guide/ssr)\\n\\nWhen set to `true`, the build will also generate an SSR manifest for determining style links and asset preload directives in production. When the value is a string, it will be used as the manifest file name..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.ssr in vite-config?\n\nAssistant: To build.ssr in vite-config, here's what you do:\n- **Type:** `boolean | string`\\n- **Default:** `false`\\n- **Related:** [Server-Side Rendering](https://vite.dev/guide/ssr)\\n\\nProduce SSR-oriented build. The value can be a string to directly specify the SSR entry, or `true`, which requires specifying the SSR entry via `rollupOptions.input`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.emitassets in vite-config?\n\nAssistant: To build.emitassets in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `false`\\n\\nDuring non-client builds, static assets aren't emitted as it is assumed they would be emitted as part of the client build. This option allows frameworks to force emitting them in other environments build. It is responsibility of the framework to merge the assets with a post build step..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.ssremitassets in vite-config?\n\nAssistant: To build.ssremitassets in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `false`\\n\\nDuring the SSR build, static assets aren't emitted as it is assumed they would be emitted as part of the client build. This option allows frameworks to force emitting them in both the client and SSR build. It is responsibility of the framework to merge the assets with a post build step. This option will be replaced by `build.emitAssets` once Environment API is stable..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.minify in vite-config?\n\nAssistant: To build.minify in vite-config, here's what you do:\n- **Type:** `boolean | 'terser' | 'esbuild'`\\n- **Default:** `'esbuild'` for client build, `false` for SSR build\\n\\nSet to `false` to disable minification, or specify the minifier to use. The default is [esbuild](https://github.com/evanw/esbuild) which is 20 ~ 40x faster than terser and only 1 ~ 2% worse compression. [Benchmarks](https://github.com/privatenumber/minification-benchmarks)\\n\\nNote the `build.minify` option does not minify whitespaces when using the `'es'` format in lib mode, as it removes pure annotations and breaks tree-shaking.\\n\\nTerser must be installed when it is set to `'terser'`.\\n\\n```sh\\nnpm add -D terser\\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.terseroptions in vite-config?\n\nAssistant: To build.terseroptions in vite-config, here's what you do:\n- **Type:** `TerserOptions`\\n\\nAdditional [minify options](https://terser.org/docs/api-reference#minify-options) to pass on to Terser.\\n\\nIn addition, you can also pass a `maxWorkers: number` option to specify the max number of workers to spawn. Defaults to the number of CPUs minus 1..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.write in vite-config?\n\nAssistant: To build.write in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nSet to `false` to disable writing the bundle to disk. This is mostly used in [programmatic `build()` calls](https://vite.dev/guide/api-javascript#build) where further post processing of the bundle is needed before writing to disk..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.emptyoutdir in vite-config?\n\nAssistant: To build.emptyoutdir in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `true` if `outDir` is inside `root`\\n\\nBy default, Vite will empty the `outDir` on build if it is inside project root. It will emit a warning if `outDir` is outside of root to avoid accidentally removing important files. You can explicitly set this option to suppress the warning. This is also available via command line as `--emptyOutDir`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.copypublicdir in vite-config?\n\nAssistant: To build.copypublicdir in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nBy default, Vite will copy files from the `publicDir` into the `outDir` on build. Set to `false` to disable this..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.reportcompressedsize in vite-config?\n\nAssistant: To build.reportcompressedsize in vite-config, here's what you do:\n- **Type:** `boolean`\\n- **Default:** `true`\\n\\nEnable/disable gzip-compressed size reporting. Compressing large output files can be slow, so disabling this may increase build performance for large projects..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.chunksizewarninglimit in vite-config?\n\nAssistant: To build.chunksizewarninglimit in vite-config, here's what you do:\n- **Type:** `number`\\n- **Default:** `500`\\n\\nLimit for chunk size warnings (in kB). It is compared against the uncompressed chunk size as the [JavaScript size itself is related to the execution time](https://v8.dev/blog/cost-of-javascript-2019)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I build.watch in vite-config?\n\nAssistant: To build.watch in vite-config, here's what you do:\n- **Type:** [`WatcherOptions`](https://rollupjs.org/configuration-options/#watch) `| null`\\n- **Default:** `null`\\n\\nSet to `{}` to enable rollup watcher. This is mostly used in cases that involve build-only plugins or integrations processes.\\n\\nUsing Vite on Windows Subsystem for Linux (WSL) 2\\nThere are cases that file system watching does not work with WSL2. See [`server.watch`](https://vite.dev/config/server-options#server-watch) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "section_detail", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you give me some code examples for Build Options in vite-config?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**build.lib example**:\n\n```yaml\n```js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: ['src/main.js'],\n      fileName: (format, entryName) => `my-lib-${entryName}.${format}.js`,\n      cssFileName: 'my-lib-style',\n    },\n  },\n})\n```\n```\n\nThis snippet shows you how to build.lib example, which is an important aspect of build options.\n\n**build.minify example**:\n\n```yaml\n```sh\nnpm add -D terser\n```\n```\n\nThis snippet shows you how to build.minify example, which is an important aspect of build options.\n\n**build.modulePreload example**:\n\n```yaml\n```js\nimport 'vite/modulepreload-polyfill'\n```\n```\n\nThis snippet shows you how to build.modulepreload example, which is an important aspect of build options.\n\n**build.resolveDependencies example**:\n\n```yaml\n```js\nmodulePreload: {\n  resolveDependencies: (\n    filename,\n    deps, {\n      hostId,\n      hostType }) => {\n        return deps.filter(condition)\n      },\n  },\n}\n```\n```\n\nThis snippet shows you how to build.resolvedependencies example, which is an important aspect of build options.\n\n", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "code_examples", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: What are some tips for using Build Options in vite-config effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you specify `build.lib`, `build.assetsInlineLimit` will be ignored and assets will always be inlined, regardless of file size or being a Git LFS placeholder.\n\nIf you need to support browsers without native dynamic import, you should probably avoid using the module preload polyfill in your library.\n\nWhen targeting a non-mainstream browser, set `build.cssTarget` to prevent Vite from transforming `rgba()` colors into `#RGBA` hexadecimal notations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/config/build-options", "title": "Build Options", "description": "Options related to the build configuration in Vite.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-28 22:11:15", "type": "best_practices", "page_metadata": {"og:url": "https://vite.dev", "ogDescription": "Next Generation Frontend Tooling", "title": "Build Options | Vite", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vite.dev/og-image.jpg", "theme-color": "#646cff", "og:site_name": "vitejs", "ogTitle": "Build Options", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vite.dev/og-image.jpg", "og:title": "Build Options", "ogUrl": "https://vite.dev", "og:description": "Next Generation Frontend Tooling", "favicon": "https://vite.dev/logo.svg", "twitter:card": "summary_large_image", "twitter:site": "@vite_js", "og:type": "website", "scrapeId": "40cc3103-db4d-4782-b801-9fb7ecbd1e1a", "sourceURL": "https://vite.dev/config/build-options", "url": "https://vite.dev/config/build-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you explain what Shared Options is in vite-config?\n\nAssistant: Sure, I'd be happy to explain Shared Options in vite-config.\n\n# Shared Options\n\nUnless noted, the options in this section are applied to all dev, build, and preview.Here's a quick rundown of what this is about:\n\n## root\n\n- **Type:** `string`  \n- **Default:** `process.cwd()`  \n\nProject root directory (where `index.html` is located). Can be an absolute path, or a path relative to the current working directory.\n\nSee [Project Root](https://vite.dev/guide/#index-html-and-project-root) for more details.\n\n## base\n\n- **Type:** `string`  \n- **Default:** `/`  \n- **Related:** [`server.origin`](https://vite.dev/config/server-options#server-origin)  \n\nBase public path when served in development or production. Valid values include:\n\n- Absolute URL pathname, e.g. `/foo/`  \n- Full URL, e.g. `https://bar.com/foo/` (The origin part won't be used in development so the value is the same as `/foo/`)  \n- Empty string or `./` (for embedded deployment)\n\nSee [Public Base Path](https://vite.dev/guide/build#public-base-path) for more details.\n\n## mode\n\n- **Type:** `string`  \n- **Default:** `'development'` for serve, `'production'` for build  \n\nSpecifying this in config will override the default mode for **both serve and build**. This value can also be overridden via the command line `--mode` option.\n\nSee [Env Variables and Modes](https://vite.dev/guide/env-and-mode) for more details.\n\n## define\n\n- **Type:** `Record<string, any>`  \n\nDefine global constant replacements. Entries will be defined as globals during dev and statically replaced during build.\n\nVite uses [esbuild defines](https://esbuild.github.io/api/#define) to perform replacements, so value expressions must be a string that contains a JSON-serializable value (null, boolean, number, string, array, or object) or a single identifier. For non-string values, Vite will automatically convert it to a string with `JSON.stringify`.\n\n**Example:**\n\n```js\nexport default defineConfig({\n  define: {\n    __APP_VERSION__: JSON.stringify('v1.0.0'),\n    __API_URL__: 'window.__backend_api_url',\n  },\n})\n```\n\nNOTE\n\nFor TypeScript users, make sure to add the type declarations in the `env.d.ts` or `vite-env.d.ts` file to get type checks and Intellisense.\n\nExample:\n\n```ts\n// vite-env.d.ts\ndeclare const __APP_VERSION__: string\n```\n\n## plugins\n\n- **Type:** `(Plugin | Plugin[] | Promise<Plugin | Plugin[]>)[]`  \n\nArray of plugins to use. Falsy plugins are ignored and arrays of plugins are flattened. If a promise is returned, it would be resolved before running. See [Plugin API](https://vite.dev/guide/api-plugin) for more details on Vite plugins.\n\n## publicDir\n\n- **Type:** `string | false`  \n- **Default:** `\"public\"`  \n\nDirectory to serve as plain static assets. Files in this directory are served at `/` during dev and copied to the root of `outDir` during build, and are always served or copied as-is without transform. The value can be either an absolute file system path or a path relative to project root.\n\nDefining `publicDir` as `false` disables this feature.\n\nSee [The `public` Directory](https://vite.dev/guide/assets#the-public-directory) for more details.\n\n## cacheDir\n\n- **Type:** `string`  \n- **Default:** `\"node_modules/.vite\"`  \n\nDirectory to save cache files. Files in this directory are pre-bundled deps or some other cache files generated by vite, which can improve the performance. You can use `--force` flag or manually delete the directory to regenerate the cache files. The value can be either an absolute file system path or a path relative to project root. Default to `.vite` when no package.json is detected.\n\n## resolve.alias\n\n- **Type:** `Record<string, string> | Array<{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }> `  \n\nWill be passed to `@rollup/plugin-alias` as its [entries option](https://github.com/rollup/plugins/tree/master/packages/alias#entries). Can either be an object, or an array of `{ find, replacement, customResolver }` pairs.\n\nWhen aliasing to file system paths, always use absolute paths. Relative alias values will be used as-is and will not be resolved into file system paths.\n\nMore advanced custom resolution can be achieved through [plugins](https://vite.dev/guide/api-plugin).\n\nUsing with SSR\n\nIf you have configured aliases for [SSR externalized dependencies](https://vite.dev/guide/ssr#ssr-externals), you may want to alias the actual `node_modules` packages. Both [Yarn](https://classic.yarnpkg.com/en/docs/cli/add/#toc-yarn-add-alias) and [pnpm](https://pnpm.io/aliases/) support aliasing via the `npm:` prefix.\n\n## resolve.dedupe\n\n- **Type:** `string[]`  \n\nIf you have duplicated copies of the same dependency in your app (likely due to hoisting or linked packages in monorepos), use this option to force Vite to always resolve listed dependencies to the same copy (from project root).\n\nSSR + ESM\n\nFor SSR builds, deduplication does not work for ESM build outputs configured from `build.rollupOptions.output`. A workaround is to use CJS build outputs until ESM has better plugin support for module loading.\n\n## resolve.conditions\n\n- **Type:** `string[]`  \n- **Default:** `['module', 'browser', 'development|production']` ( `defaultClientConditions`)  \n\nAdditional allowed conditions when resolving [Conditional Exports](https://nodejs.org/api/packages.html#packages_conditional_exports) from a package.\n\nA package with conditional exports may have the following `exports` field in its `package.json`:\n\n```json\n{\n  \"exports\": {\n    \".\": {\n      \"import\": \"./index.mjs\",\n      \"require\": \"./index.js\"\n    }\n  }\n}\n```\n\nHere, `import` and `require` are \"conditions\". Conditions can be nested and should be specified from most specific to least specific.\n\n`development|production` is a special value that is replaced with `production` or `development` depending on the value of `process.env.NODE_ENV`. It is replaced with `production` when `process.env.NODE_ENV === 'production'` and `development` otherwise.\n\nNote that `import`, `require`, `default` conditions are always applied if the requirements are met.\n\nResolving subpath exports\n\nExport keys ending with \"/\" is deprecated by Node and may not work well. Please contact the package author to use [`*` subpath patterns](https://nodejs.org/api/packages.html#package-entry-points) instead.\n\n## resolve.mainFields\n\n- **Type:** `string[]`  \n- **Default:** `['browser', 'module', 'jsnext:main', 'jsnext']` ( `defaultClientMainFields`)  \n\nList of fields in `package.json` to try when resolving a package's entry point. Note this takes lower precedence than conditional exports resolved from the `exports` field: if an entry point is successfully resolved from `exports`, the main field will be ignored.\n\n## resolve.extensions\n\n- **Type:** `string[]`  \n- **Default:** `['.mjs', '.js', '.mts', '.ts', '.jsx', '.tsx', '.json']`  \n\nList of file extensions to try for imports that omit extensions. Note it is **NOT** recommended to omit extensions for custom import types (e.g. `.vue`) since it can interfere with IDE and type support.\n\n## resolve.preserveSymlinks\n\n- **Type:** `boolean`  \n- **Default:** `false`  \n\nEnabling this setting causes vite to determine file identity by the original file path (i.e. the path without following symlinks) instead of the real file path (i.e. the path after following symlinks).  \n- **Related:** [esbuild#preserve-symlinks](https://esbuild.github.io/api/#preserve-symlinks), [webpack#resolve.symlinks](https://webpack.js.org/configuration/resolve/#resolvesymlinks)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "overview", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I root in vite-config?\n\nAssistant: To root in vite-config, here's what you do:\n- **Type:** `string`  \n- **Default:** `process.cwd()`  \n\nProject root directory (where `index.html` is located). Can be an absolute path, or a path relative to the current working directory.\n\nSee [Project Root](https://vite.dev/guide/#index-html-and-project-root) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I base in vite-config?\n\nAssistant: To base in vite-config, here's what you do:\n- **Type:** `string`  \n- **Default:** `/`  \n- **Related:** [`server.origin`](https://vite.dev/config/server-options#server-origin)  \n\nBase public path when served in development or production. Valid values include:\n\n- Absolute URL pathname, e.g. `/foo/`  \n- Full URL, e.g. `https://bar.com/foo/` (The origin part won't be used in development so the value is the same as `/foo/`)  \n- Empty string or `./` (for embedded deployment)\n\nSee [Public Base Path](https://vite.dev/guide/build#public-base-path) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I mode in vite-config?\n\nAssistant: To mode in vite-config, here's what you do:\n- **Type:** `string`  \n- **Default:** `'development'` for serve, `'production'` for build  \n\nSpecifying this in config will override the default mode for **both serve and build**. This value can also be overridden via the command line `--mode` option.\n\nSee [Env Variables and Modes](https://vite.dev/guide/env-and-mode) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I define in vite-config?\n\nAssistant: To define in vite-config, here's what you do:\n- **Type:** `Record<string, any>`  \n\nDefine global constant replacements. Entries will be defined as globals during dev and statically replaced during build.\n\nVite uses [esbuild defines](https://esbuild.github.io/api/#define) to perform replacements, so value expressions must be a string that contains a JSON-serializable value (null, boolean, number, string, array, or object) or a single identifier. For non-string values, Vite will automatically convert it to a string with `JSON.stringify`.\n\n**Example:**\n\n```js\nexport default defineConfig({\n  define: {\n    __APP_VERSION__: JSON.stringify('v1.0.0'),\n    __API_URL__: 'window.__backend_api_url',\n  },\n})\n```\n\nNOTE\n\nFor TypeScript users, make sure to add the type declarations in the `env.d.ts` or `vite-env.d.ts` file to get type checks and Intellisense.\n\nExample:\n\n```ts\n// vite-env.d.ts\ndeclare const __APP_VERSION__: string\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I plugins in vite-config?\n\nAssistant: To plugins in vite-config, here's what you do:\n- **Type:** `(Plugin | Plugin[] | Promise<Plugin | Plugin[]>)[]`  \n\nArray of plugins to use. Falsy plugins are ignored and arrays of plugins are flattened. If a promise is returned, it would be resolved before running. See [Plugin API](https://vite.dev/guide/api-plugin) for more details on Vite plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I publicdir in vite-config?\n\nAssistant: To publicdir in vite-config, here's what you do:\n- **Type:** `string | false`  \n- **Default:** `\"public\"`  \n\nDirectory to serve as plain static assets. Files in this directory are served at `/` during dev and copied to the root of `outDir` during build, and are always served or copied as-is without transform. The value can be either an absolute file system path or a path relative to project root.\n\nDefining `publicDir` as `false` disables this feature.\n\nSee [The `public` Directory](https://vite.dev/guide/assets#the-public-directory) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I cachedir in vite-config?\n\nAssistant: To cachedir in vite-config, here's what you do:\n- **Type:** `string`  \n- **Default:** `\"node_modules/.vite\"`  \n\nDirectory to save cache files. Files in this directory are pre-bundled deps or some other cache files generated by vite, which can improve the performance. You can use `--force` flag or manually delete the directory to regenerate the cache files. The value can be either an absolute file system path or a path relative to project root. Default to `.vite` when no package.json is detected..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I resolve.alias in vite-config?\n\nAssistant: To resolve.alias in vite-config, here's what you do:\n- **Type:** `Record<string, string> | Array<{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }> `  \n\nWill be passed to `@rollup/plugin-alias` as its [entries option](https://github.com/rollup/plugins/tree/master/packages/alias#entries). Can either be an object, or an array of `{ find, replacement, customResolver }` pairs.\n\nWhen aliasing to file system paths, always use absolute paths. Relative alias values will be used as-is and will not be resolved into file system paths.\n\nMore advanced custom resolution can be achieved through [plugins](https://vite.dev/guide/api-plugin).\n\nUsing with SSR\n\nIf you have configured aliases for [SSR externalized dependencies](https://vite.dev/guide/ssr#ssr-externals), you may want to alias the actual `node_modules` packages. Both [Yarn](https://classic.yarnpkg.com/en/docs/cli/add/#toc-yarn-add-alias) and [pnpm](https://pnpm.io/aliases/) support aliasing via the `npm:` prefix..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I resolve.dedupe in vite-config?\n\nAssistant: To resolve.dedupe in vite-config, here's what you do:\n- **Type:** `string[]`  \n\nIf you have duplicated copies of the same dependency in your app (likely due to hoisting or linked packages in monorepos), use this option to force Vite to always resolve listed dependencies to the same copy (from project root).\n\nSSR + ESM\n\nFor SSR builds, deduplication does not work for ESM build outputs configured from `build.rollupOptions.output`. A workaround is to use CJS build outputs until ESM has better plugin support for module loading..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I resolve.conditions in vite-config?\n\nAssistant: To resolve.conditions in vite-config, here's what you do:\n- **Type:** `string[]`  \n- **Default:** `['module', 'browser', 'development|production']` ( `defaultClientConditions`)  \n\nAdditional allowed conditions when resolving [Conditional Exports](https://nodejs.org/api/packages.html#packages_conditional_exports) from a package.\n\nA package with conditional exports may have the following `exports` field in its `package.json`:\n\n```json\n{\n  \"exports\": {\n    \".\": {\n      \"import\": \"./index.mjs\",\n      \"require\": \"./index.js\"\n    }\n  }\n}\n```\n\nHere, `import` and `require` are \"conditions\". Conditions can be nested and should be specified from most specific to least specific.\n\n`development|production` is a special value that is replaced with `production` or `development` depending on the value of `process.env.NODE_ENV`. It is replaced with `production` when `process.env.NODE_ENV === 'production'` and `development` otherwise.\n\nNote that `import`, `require`, `default` conditions are always applied if the requirements are met.\n\nResolving subpath exports\n\nExport keys ending with \"/\" is deprecated by Node and may not work well. Please contact the package author to use [`*` subpath patterns](https://nodejs.org/api/packages.html#package-entry-points) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I resolve.mainfields in vite-config?\n\nAssistant: To resolve.mainfields in vite-config, here's what you do:\n- **Type:** `string[]`  \n- **Default:** `['browser', 'module', 'jsnext:main', 'jsnext']` ( `defaultClientMainFields`)  \n\nList of fields in `package.json` to try when resolving a package's entry point. Note this takes lower precedence than conditional exports resolved from the `exports` field: if an entry point is successfully resolved from `exports`, the main field will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I resolve.extensions in vite-config?\n\nAssistant: To resolve.extensions in vite-config, here's what you do:\n- **Type:** `string[]`  \n- **Default:** `['.mjs', '.js', '.mts', '.ts', '.jsx', '.tsx', '.json']`  \n\nList of file extensions to try for imports that omit extensions. Note it is **NOT** recommended to omit extensions for custom import types (e.g. `.vue`) since it can interfere with IDE and type support..\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: How do I resolve.preservesymlinks in vite-config?\n\nAssistant: To resolve.preservesymlinks in vite-config, here's what you do:\n- **Type:** `boolean`  \n- **Default:** `false`  \n\nEnabling this setting causes vite to determine file identity by the original file path (i.e. the path without following symlinks) instead of the real file path (i.e. the path after following symlinks).  \n- **Related:** [esbuild#preserve-symlinks](https://esbuild.github.io/api/#preserve-symlinks), [webpack#resolve.symlinks](https://webpack.js.org/configuration/resolve/#resolvesymlinks).\nPretty straightforward, right?", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "section_detail", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: Can you give me some code examples for Shared Options in vite-config?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example for define**:\n\n```yaml\nexport default defineConfig({\n  define: {\n    __APP_VERSION__: JSON.stringify('v1.0.0'),\n    __API_URL__: 'window.__backend_api_url',\n  },\n})\n```\n\nThis snippet shows you how to example for define, which is an important aspect of shared options.\n\n**TypeScript declaration for define**:\n\n```yaml\n// vite-env.d.ts\ndeclare const __APP_VERSION__: string\n```\n\nThis snippet shows you how to typescript declaration for define, which is an important aspect of shared options.\n\n**Example for css.preprocessorOptions**:\n\n```yaml\nexport default defineConfig({\n  css: {\n    preprocessorOptions: {\n      less: {\n        math: 'parens-division',\n      },\n      styl: {\n        define: {\n          $specialColor: new stylus.nodes.RGBA(51, 197, 255, 1),\n        },\n      },\n      scss: {\n        api: 'modern-compiler', // or \"modern\", \"legacy\"\n        importers: [\n          // ...\n        ],\n      },\n    },\n  },\n})\n```\n\nThis snippet shows you how to example for css.preprocessoroptions, which is an important aspect of shared options.\n\n**Example for css.preprocessorOptions.additionalData**:\n\n```yaml\nexport default defineConfig({\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `$injectedColor: orange;`,\n      },\n    },\n  },\n})\n```\n\nThis snippet shows you how to example for css.preprocessoroptions.additionaldata, which is an important aspect of shared options.\n\n**Example for assetsInclude**:\n\n```yaml\nexport default defineConfig({\n  assetsInclude: ['**/*.gltf'],\n})\n```\n\nThis snippet shows you how to example for assetsinclude, which is an important aspect of shared options.\n\n**Example for esbuild**:\n\n```yaml\nexport default defineConfig({\n  esbuild: {\n    jsxFactory: 'h',\n    jsxFragment: 'Fragment',\n  },\n})\n```\n\nThis snippet shows you how to example for esbuild, which is an important aspect of shared options.\n\n**Example for esbuild.jsxInject**:\n\n```yaml\nexport default defineConfig({\n  esbuild: {\n    jsxInject: `import React from 'react'`,\n  },\n})\n```\n\nThis snippet shows you how to example for esbuild.jsxinject, which is an important aspect of shared options.\n\n**Example for customLogger**:\n\n```yaml\nimport {\ncreateLogger,\ndefineConfig } from 'vite'\n\nconst\nlogger =\ncreateLogger()\nconst\nloggerWarn =\nlogger.\nwarn\n\nlogger.\nwarn = (\nmsg,\noptions) => {\n  // Ignore empty CSS files warning\n  if (\nmsg.\nincludes('vite:css') &&\nmsg.\nincludes(' is empty')) return\n\n  loggerWarn(\nmsg,\noptions)\n}\n\nexport default\ndefineConfig({\n\ncustomLogger:\nlogger,\n})\n```\n\nThis snippet shows you how to example for customlogger, which is an important aspect of shared options.\n\n", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "code_examples", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
{"text": "System: You are a helpful vite-config expert.\n\nUser: What are some tips for using Shared Options in vite-config effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor TypeScript users, make sure to add the type declarations in the `env.d.ts` or `vite-env.d.ts` file to get type checks and Intellisense.\n\nWhen aliasing to file system paths, always use absolute paths. Relative alias values will be used as-is and will not be resolved into file system paths.\n\nIf you have duplicated copies of the same dependency in your app, use the dedupe option to force Vite to always resolve listed dependencies to the same copy from project root.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vite.dev/config/shared-options", "title": "Shared Options", "description": "Unless noted, the options in this section are applied to all dev, build, and preview.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 22:13:51", "type": "best_practices", "page_metadata": {"twitter:site": "@vite_js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:url": "https://vite.dev", "title": "Shared Options | Vite", "theme-color": "#646cff", "ogDescription": "Next Generation Frontend Tooling", "og:image": "https://vite.dev/og-image.jpg", "og:type": "website", "favicon": "https://vite.dev/logo.svg", "ogSiteName": "vitejs", "description": "Next Generation Frontend Tooling", "og:description": "Next Generation Frontend Tooling", "ogTitle": "Shared Options", "ogUrl": "https://vite.dev", "language": "en-US", "ogImage": "https://vite.dev/og-image.jpg", "og:site_name": "vitejs", "twitter:card": "summary_large_image", "og:title": "Shared Options", "scrapeId": "d7ea7180-6151-4ef6-b075-35a1828e0909", "sourceURL": "https://vite.dev/config/shared-options", "url": "https://vite.dev/config/shared-options", "statusCode": 200}}}
