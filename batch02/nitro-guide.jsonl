{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Getting Started is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Getting Started in nitro-guide.\n\n# Getting Started\n\nCreate web servers with all necessary features and deploy them wherever you prefer.Here's a quick rundown of what this is about:\n\n## Intro\n\nNitro is an open source framework to build web servers using [unjs/h3](https://h3.unjs.io/) and lots of built-in features.\nNitro automatically makes your code compatible with any [deployment](https://nitro.build/deploy) provider and runtime!\n\nNitro can be used standalone or as the server engine of full-stack frameworks such as [Nuxt](https://nuxt.com/).\n\n## Quick start\n\nInstead of setting up a local development environment, you can use the [online playground](https://stackblitz.com/github/nitrojs/nitro/tree/main/examples/hello-world).\n\nMake sure you have installed the recommended setup:\n\n- Latest LTS version of [Node.js](https://nodejs.org/en), or [Bun](https://bun.sh/).\n- [Visual Studio Code](https://code.visualstudio.com/)\n\nCreate a new project using starter template:\n\nnpmyarnpnpmbundeno\n\n```\nnpx giget@latest nitro nitro-app --install\n```\n\n```\ncd nitro-app\n```\n\nStart the development server:\n\nnpmyarnpnpmbundeno\n\n```\nnpm run dev\n```\n\nNitro is ready at `http://localhost:3000/`!\n\nCheck `.nitro/dev/index.mjs` if want to know what is happening\n\nBuild your production-ready server:\n\nnpmyarnpnpmbundeno\n\n```\nnpm run build\n```\n\nOutput is in the `.output` directory and ready to be deployed on almost any provider with no dependencies.\n\nYou can try it locally with:\n\nnpmyarnpnpmbundeno\n\n```\nnpm run preview\n```\n\nYou can find more examples in the Nitro repository: [nitrojs/nitro/examples](https://github.com/nitrojs/nitro/tree/main/examples)\n\n## Directory structure\n\nThe starter template some important files to get you started.\n\n### `routes/`\nThe `routes/` directory contains your application handlers. You can create subdirectories inside `routes/` dir to create nested handlers. The file name is the route path.\n\nRead more in Guide > Routing.\n\n### `api/`\nThe `api/` directory is similar to `routes/` with the only difference that routes inside it will be prefixed with `/api/` for convenience.\n\nRead more in Guide > Routing.\n\n### `utils/`\nThis directory contains your application utils with auto import support.\n\nRead more in Guide > Utils.\n\n### `plugins/`\nThis directory contains your custom nitro plugins.\n\nRead more in Guide > Plugins.\n\n### `nitro.config.ts`\nThe `nitro.config.ts` file contains the configuration for Nitro.\n\nRead more in Guide > Configuration.\n\n### `tsconfig.json`\nThe `tsconfig.json` file contains the TypeScript configuration for your project.\n\nRead more in Guide > Typescript.\n\n### `package.json`\nThe `package.json` file contains all the dependencies and scripts for your project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide", "title": "Getting Started", "description": "Create web servers with all necessary features and deploy them wherever you prefer.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:55:48", "type": "overview", "page_metadata": {"description": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:height": "600", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image:height": "600", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "title": "Getting Started - Nitro", "og:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:type": "image/png", "scrapeId": "dfbc7d30-e233-4213-adda-06c1a76eddb8", "sourceURL": "https://nitro.build/guide", "url": "https://nitro.build/guide", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I intro in nitro-guide?\n\nAssistant: To intro in nitro-guide, here's what you do:\nNitro is an open source framework to build web servers using [unjs/h3](https://h3.unjs.io/) and lots of built-in features.\nNitro automatically makes your code compatible with any [deployment](https://nitro.build/deploy) provider and runtime!\n\nNitro can be used standalone or as the server engine of full-stack frameworks such as [Nuxt](https://nuxt.com/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide", "title": "Getting Started", "description": "Create web servers with all necessary features and deploy them wherever you prefer.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:55:48", "type": "section_detail", "page_metadata": {"description": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:height": "600", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image:height": "600", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "title": "Getting Started - Nitro", "og:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:type": "image/png", "scrapeId": "dfbc7d30-e233-4213-adda-06c1a76eddb8", "sourceURL": "https://nitro.build/guide", "url": "https://nitro.build/guide", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I quick start in nitro-guide?\n\nAssistant: To quick start in nitro-guide, here's what you do:\nInstead of setting up a local development environment, you can use the [online playground](https://stackblitz.com/github/nitrojs/nitro/tree/main/examples/hello-world).\n\nMake sure you have installed the recommended setup:\n\n- Latest LTS version of [Node.js](https://nodejs.org/en), or [Bun](https://bun.sh/).\n- [Visual Studio Code](https://code.visualstudio.com/)\n\nCreate a new project using starter template:\n\nnpmyarnpnpmbundeno\n\n```\nnpx giget@latest nitro nitro-app --install\n```\n\n```\ncd nitro-app\n```\n\nStart the development server:\n\nnpmyarnpnpmbundeno\n\n```\nnpm run dev\n```\n\nNitro is ready at `http://localhost:3000/`!\n\nCheck `.nitro/dev/index.mjs` if want to know what is happening\n\nBuild your production-ready server:\n\nnpmyarnpnpmbundeno\n\n```\nnpm run build\n```\n\nOutput is in the `.output` directory and ready to be deployed on almost any provider with no dependencies.\n\nYou can try it locally with:\n\nnpmyarnpnpmbundeno\n\n```\nnpm run preview\n```\n\nYou can find more examples in the Nitro repository: [nitrojs/nitro/examples](https://github.com/nitrojs/nitro/tree/main/examples).\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide", "title": "Getting Started", "description": "Create web servers with all necessary features and deploy them wherever you prefer.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:55:48", "type": "section_detail", "page_metadata": {"description": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:height": "600", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image:height": "600", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "title": "Getting Started - Nitro", "og:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:type": "image/png", "scrapeId": "dfbc7d30-e233-4213-adda-06c1a76eddb8", "sourceURL": "https://nitro.build/guide", "url": "https://nitro.build/guide", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I directory structure in nitro-guide?\n\nAssistant: To directory structure in nitro-guide, here's what you do:\nThe starter template some important files to get you started.\n\n### `routes/`\nThe `routes/` directory contains your application handlers. You can create subdirectories inside `routes/` dir to create nested handlers. The file name is the route path.\n\nRead more in Guide > Routing.\n\n### `api/`\nThe `api/` directory is similar to `routes/` with the only difference that routes inside it will be prefixed with `/api/` for convenience.\n\nRead more in Guide > Routing.\n\n### `utils/`\nThis directory contains your application utils with auto import support.\n\nRead more in Guide > Utils.\n\n### `plugins/`\nThis directory contains your custom nitro plugins.\n\nRead more in Guide > Plugins.\n\n### `nitro.config.ts`\nThe `nitro.config.ts` file contains the configuration for Nitro.\n\nRead more in Guide > Configuration.\n\n### `tsconfig.json`\nThe `tsconfig.json` file contains the TypeScript configuration for your project.\n\nRead more in Guide > Typescript.\n\n### `package.json`\nThe `package.json` file contains all the dependencies and scripts for your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide", "title": "Getting Started", "description": "Create web servers with all necessary features and deploy them wherever you prefer.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:55:48", "type": "section_detail", "page_metadata": {"description": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:height": "600", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image:height": "600", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "title": "Getting Started - Nitro", "og:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:type": "image/png", "scrapeId": "dfbc7d30-e233-4213-adda-06c1a76eddb8", "sourceURL": "https://nitro.build/guide", "url": "https://nitro.build/guide", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Getting Started in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a new project**:\n\n```yaml\nnpx giget@latest nitro nitro-app --install\n```\n\nThis snippet shows you how to create a new project, which is an important aspect of getting started.\n\n**Start the development server**:\n\n```yaml\nnpm run dev\n```\n\nThis snippet shows you how to start the development server, which is an important aspect of getting started.\n\n**Build your production-ready server**:\n\n```yaml\nnpm run build\n```\n\nThis snippet shows you how to build your production-ready server, which is an important aspect of getting started.\n\n**Try it locally**:\n\n```yaml\nnpm run preview\n```\n\nThis snippet shows you how to try it locally, which is an important aspect of getting started.\n\n", "metadata": {"source_url": "https://nitro.build/guide", "title": "Getting Started", "description": "Create web servers with all necessary features and deploy them wherever you prefer.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:55:48", "type": "code_examples", "page_metadata": {"description": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:height": "600", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image:height": "600", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "title": "Getting Started - Nitro", "og:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:type": "image/png", "scrapeId": "dfbc7d30-e233-4213-adda-06c1a76eddb8", "sourceURL": "https://nitro.build/guide", "url": "https://nitro.build/guide", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Getting Started in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to install the latest LTS version of Node.js or Bun.\n\nUse Visual Studio Code for the best development experience.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide", "title": "Getting Started", "description": "Create web servers with all necessary features and deploy them wherever you prefer.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:55:48", "type": "best_practices", "page_metadata": {"description": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:height": "600", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image:height": "600", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "title": "Getting Started - Nitro", "og:image": "https://nitro.build/_og/guide.png?name=Nitro&title=Getting+Started&description=Create+web+servers+with+all+necessary+features+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with all necessary features and deploy them wherever you prefer.", "og:image:type": "image/png", "scrapeId": "dfbc7d30-e233-4213-adda-06c1a76eddb8", "sourceURL": "https://nitro.build/guide", "url": "https://nitro.build/guide", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Guide is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Guide in nitro-guide.\n\n# Guide\n\nNitro tasks allow on-off operations in runtime.Here's a quick rundown of what this is about:\n\n## Opt-in to the experimental feature\n\nTasks support is currently experimental.\nSee [nitrojs/nitro#1974](https://github.com/nitrojs/nitro/issues/1974) for the relevant discussion.\n\nIn order to use the tasks API you need to enable experimental feature flag.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  experimental: {\n    tasks: true\n  }\n})\n```\n\n\n## Define tasks\n\nTasks can be defined in `tasks/[name].ts` files.\n\nNested directories are supported. The task name will be joined with `:`. (Example: `tasks/db/migrate.ts` task name will be `db:migrate`)\n\n**Example:**\n\ntasks/db/migrate.ts\n\n```\nexport default defineTask({\n  meta: {\n    name: \"db:migrate\",\n    description: \"Run database migrations\",\n  },\n  run({ payload, context }) {\n    console.log(\"Running DB migration task...\");\n    return { result: \"Success\" };\n  },\n});\n```\n\nUse `server/tasks/db/migrate.ts` for Nuxt.\n\n## Scheduled tasks\n\nYou can define scheduled tasks using Nitro configuration to automatically run after each period of time.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  scheduledTasks: {\n    // Run `cms:update` task every minute\n    '* * * * *': ['cms:update']\n  }\n})\n```\n\nYou can use [crontab.guru](https://crontab.guru/) to easily generate and understand cron tab patterns.\n\n## Platform support\n\n- `dev`, `node-server`, `bun` and `deno-server` presets are supported with [croner](https://croner.56k.guru/) engine.\n- `cloudflare_module` preset have native integration with [Cron Triggers](https://developers.cloudflare.com/workers/configuration/cron-triggers/). Make sure to configure wrangler to use exactly same patterns you define in `scheduledTasks` to be matched.\n- More presets (with native primitives support) are planned to be supported!\n\n## Programmatically run tasks\n\nTo manually run tasks, you can use `runTask(name, { payload? })` utility.\n\n**Example:**\n\n```javascript\n// api/migrate.ts\nexport default eventHandler(async (event) => {\n  // IMPORTANT: Authenticate user and validate payload!\n  const payload = { ...getQuery(event) };\n  const { result } = await runTask(\"db:migrate\", { payload });\n\n  return { result };\n});\n```\n\n## Run tasks with dev server\n\nNitro's built-in dev server exposes tasks to be easily executed without programmatic usage.\n\n## Using API routes\n\n#### [`/_nitro/tasks`](https://nitro.build/guide/tasks#_nitrotasks)\n\nThis endpoint returns a list of available task names and their meta.\n\n```javascript\n// [GET] /_nitro/tasks\n{\n  \"tasks\": {\n    \"db:migrate\": {\n      \"description\": \"Run database migrations\"\n    },\n     \"cms:update\": {\n      \"description\": \"Update CMS content\"\n    }\n  },\n  \"scheduledTasks\": [\\\n    {\\\n      \"cron\": \"* * * * *\",\\\n      \"tasks\": [\\\n        \"cms:update\"\\\n      ]\\\n    }\\\n  ]\n}\n```\n\n## Using CLI\n\nIt is only possible to run these commands while the **dev server is running**. You should run them in a second terminal.\n\n#### [List tasks](https://nitro.build/guide/tasks#list-tasks)\n\n```\nnitro task list\n```\n\n#### [Run a task](https://nitro.build/guide/tasks#run-a-task)\n\n```\nnitro task run db:migrate --payload \"{}\"\n```\n\n## Notes\n\n### [Concurrency](https://nitro.build/guide/tasks#concurrency)\n\nEach task can have **one running instance**. Calling a task of same name multiple times in parallel, results in calling it once and all callers will get the same return value.\n\nNitro tasks can be running multiple times and in parallel.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "overview", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I opt-in to the experimental feature in nitro-guide?\n\nAssistant: To opt-in to the experimental feature in nitro-guide, here's what you do:\nTasks support is currently experimental.\nSee [nitrojs/nitro#1974](https://github.com/nitrojs/nitro/issues/1974) for the relevant discussion.\n\nIn order to use the tasks API you need to enable experimental feature flag.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  experimental: {\n    tasks: true\n  }\n})\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I define tasks in nitro-guide?\n\nAssistant: To define tasks in nitro-guide, here's what you do:\nTasks can be defined in `tasks/[name].ts` files.\n\nNested directories are supported. The task name will be joined with `:`. (Example: `tasks/db/migrate.ts` task name will be `db:migrate`)\n\n**Example:**\n\ntasks/db/migrate.ts\n\n```\nexport default defineTask({\n  meta: {\n    name: \"db:migrate\",\n    description: \"Run database migrations\",\n  },\n  run({ payload, context }) {\n    console.log(\"Running DB migration task...\");\n    return { result: \"Success\" };\n  },\n});\n```\n\nUse `server/tasks/db/migrate.ts` for Nuxt..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I scheduled tasks in nitro-guide?\n\nAssistant: To scheduled tasks in nitro-guide, here's what you do:\nYou can define scheduled tasks using Nitro configuration to automatically run after each period of time.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  scheduledTasks: {\n    // Run `cms:update` task every minute\n    '* * * * *': ['cms:update']\n  }\n})\n```\n\nYou can use [crontab.guru](https://crontab.guru/) to easily generate and understand cron tab patterns..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I platform support in nitro-guide?\n\nAssistant: To platform support in nitro-guide, here's what you do:\n- `dev`, `node-server`, `bun` and `deno-server` presets are supported with [croner](https://croner.56k.guru/) engine.\n- `cloudflare_module` preset have native integration with [Cron Triggers](https://developers.cloudflare.com/workers/configuration/cron-triggers/). Make sure to configure wrangler to use exactly same patterns you define in `scheduledTasks` to be matched.\n- More presets (with native primitives support) are planned to be supported!.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I programmatically run tasks in nitro-guide?\n\nAssistant: To programmatically run tasks in nitro-guide, here's what you do:\nTo manually run tasks, you can use `runTask(name, { payload? })` utility.\n\n**Example:**\n\n```javascript\n// api/migrate.ts\nexport default eventHandler(async (event) => {\n  // IMPORTANT: Authenticate user and validate payload!\n  const payload = { ...getQuery(event) };\n  const { result } = await runTask(\"db:migrate\", { payload });\n\n  return { result };\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I run tasks with dev server in nitro-guide?\n\nAssistant: To run tasks with dev server in nitro-guide, here's what you do:\nNitro's built-in dev server exposes tasks to be easily executed without programmatic usage..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I using api routes in nitro-guide?\n\nAssistant: To using api routes in nitro-guide, here's what you do:\n#### [`/_nitro/tasks`](https://nitro.build/guide/tasks#_nitrotasks)\n\nThis endpoint returns a list of available task names and their meta.\n\n```javascript\n// [GET] /_nitro/tasks\n{\n  \"tasks\": {\n    \"db:migrate\": {\n      \"description\": \"Run database migrations\"\n    },\n     \"cms:update\": {\n      \"description\": \"Update CMS content\"\n    }\n  },\n  \"scheduledTasks\": [\\\n    {\\\n      \"cron\": \"* * * * *\",\\\n      \"tasks\": [\\\n        \"cms:update\"\\\n      ]\\\n    }\\\n  ]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I using cli in nitro-guide?\n\nAssistant: To using cli in nitro-guide, here's what you do:\nIt is only possible to run these commands while the **dev server is running**. You should run them in a second terminal.\n\n#### [List tasks](https://nitro.build/guide/tasks#list-tasks)\n\n```\nnitro task list\n```\n\n#### [Run a task](https://nitro.build/guide/tasks#run-a-task)\n\n```\nnitro task run db:migrate --payload \"{}\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I notes in nitro-guide?\n\nAssistant: To notes in nitro-guide, here's what you do:\n### [Concurrency](https://nitro.build/guide/tasks#concurrency)\n\nEach task can have **one running instance**. Calling a task of same name multiple times in parallel, results in calling it once and all callers will get the same return value.\n\nNitro tasks can be running multiple times and in parallel..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Guide in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Opt-in to the experimental feature**:\n\n```yaml\nexport default defineNitroConfig({\n  experimental: {\n    tasks: true\n  }\n})\n```\n\nThis snippet shows you how to opt-in to the experimental feature, which is an important aspect of guide.\n\n**Define tasks example**:\n\n```yaml\nexport default defineTask({\n  meta: {\n    name: \"db:migrate\",\n    description: \"Run database migrations\",\n  },\n  run({ payload, context }) {\n    console.log(\"Running DB migration task...\");\n    return { result: \"Success\" };\n  },\n});\n```\n\nThis snippet shows you how to define tasks example, which is an important aspect of guide.\n\n**Scheduled tasks example**:\n\n```yaml\nexport default defineNitroConfig({\n  scheduledTasks: {\n    '* * * * *': ['cms:update']\n  }\n})\n```\n\nThis snippet shows you how to scheduled tasks example, which is an important aspect of guide.\n\n**Programmatically run tasks example**:\n\n```yaml\n// api/migrate.ts\nexport default eventHandler(async (event) => {\n  const payload = { ...getQuery(event) };\n  const { result } = await runTask(\"db:migrate\", { payload });\n  return { result };\n});\n```\n\nThis snippet shows you how to programmatically run tasks example, which is an important aspect of guide.\n\n**Using API routes - List tasks**:\n\n```yaml\n// [GET] /_nitro/tasks\n{\n  \"tasks\": {\n    \"db:migrate\": {\n      \"description\": \"Run database migrations\"\n    },\n     \"cms:update\": {\n      \"description\": \"Update CMS content\"\n    }\n  },\n  \"scheduledTasks\": [\\\n    {\\\n      \"cron\": \"* * * * *\",\\\n      \"tasks\": [\\\n        \"cms:update\"\\\n      ]\\\n    }\\\n  ]\n}\n```\n\nThis snippet shows you how to using api routes - list tasks, which is an important aspect of guide.\n\n", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "code_examples", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Guide in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse nested directories for task definitions to organize tasks better.\n\nUtilize crontab.guru for generating cron patterns easily.\n\nEnsure to authenticate users and validate payloads when programmatically running tasks.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/tasks", "title": "Guide", "description": "Nitro tasks allow on-off operations in runtime.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 00:58:21", "type": "best_practices", "page_metadata": {"twitter:image:height": "600", "twitter:site": "@unjsio", "twitter:image:width": "1200", "twitter:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro tasks allow on-off operations in runtime.", "title": "Tasks - Nitro", "og:image": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/tasks.png?name=Nitro&title=Tasks&description=Nitro+tasks+allow+on-off+operations+in+runtime.", "twitter:image:alt": "Nitro tasks allow on-off operations in runtime.", "og:image:height": "600", "og:image:type": "image/png", "description": "Nitro tasks allow on-off operations in runtime.", "scrapeId": "446c10ab-909d-4be2-9dd0-5789744cb562", "sourceURL": "https://nitro.build/guide/tasks", "url": "https://nitro.build/guide/tasks", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Cache is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Cache in nitro-guide.\n\n# Cache\n\nNitro provides a caching system built on top of the storage layer.Here's a quick rundown of what this is about:\n\n## Cached event handlers\n\nTo cache an event handler, you simply need to use the `defineCachedEventHandler` method.\n\nIt works like [`defineEventHandler`](https://h3.unjs.io/guide/event-handler) but with an additional second [options](https://nitro.build/guide/cache#options) parameter.\n\nroutes/cached.ts\n\n```javascript\n// Cache an API handler\nexport default defineCachedEventHandler((event) => {\n  // My event handler\n}, { maxAge: 60 * 60 /* 1 hour */ });\n```\n\nWith this example, the response will be cached for 1 hour and a stale value will be sent to the client while the cache is being updated in the background. If you want to immediately return the updated response set `swr: false`.\n\nAll incoming request headers are dropped when handling cached responses. If you define the `varies` option, only the specified headers will be considered when caching and serving the responses.\n\nSee the [options](https://nitro.build/guide/cache#options) section for more details about the available options.\n\nYou can also use the `cachedEventHandler` method as alias of `defineCachedEventHandler`.\n\n## Cached functions\n\nYou can also cache a function using the `defineCachedFunction` function. This is useful for caching the result of a function that is not an event handler, but is part of one, and reusing it in multiple handlers.\n\nFor example, you might want to cache the result of an API call for one hour:\n\nutils/github.tsapi/stars/[...repo].ts\n\n```javascript\nexport const cachedGHStars = defineCachedFunction(async (repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (repo: string) => repo\n})\n```\n\nThe stars will be cached in development inside `.nitro/cache/functions/ghStars/<owner>/<repo>.json` with `value` being the number of stars.\n\n```json\n{\"expires\":1677851092249,\"value\":43991,\"mtime\":1677847492540,\"integrity\":\"ZUHcsxCWEH\"}\n```\n\nYou can also use the `cachedFunction` method as alias of `defineCachedFunction`.\n\n## Edge workers\n\nIn edge workers, the instance is destroyed after each request. Nitro automatically uses `event.waitUntil` to keep the instance alive while the cache is being updated while the response is sent to the client.\n\nTo ensure that your cached functions work as expected in edge workers, you should always pass the `event` as the first argument to the function using `defineCachedFunction`.\n\nutils/github.tsapi/stars/[...repo].ts\n\n```javascript\nimport type { H3Event } from 'h3'\n\nexport const cachedGHStars = defineCachedFunction(async (event: H3Event, repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (event: H3Event, repo: string) => repo\n})\n```\n\nThis way, the function will be able to keep the instance alive while the cache is being updated without slowing down the response to the client.\n\n## Caching route rules\n\nThis feature enables you to add caching routes based on a glob pattern directly in the main configuration file. This is especially useful to have a global cache strategy for a part of your application.\n\nCache all the blog routes for 1 hour with `stale-while-revalidate` behavior:\n\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60 } },\n  },\n});\n```\n\nIf we want to use a [custom storage](https://nitro.build/guide/cache#customize-cache-storage) mount point, we can use the `base` option.\n\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: \"redis\",\n      url: \"redis://localhost:6379\",\n    },\n  },\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60, base: \"redis\" } },\n  },\n});\n```\n\n## Customize cache storage\n\nNitro stores the data in the `cache:` mount point.\n\n- In production, it will use the [memory driver](https://unstorage.unjs.io/drivers/memory) by default.\n- In development, it will use the [filesystem driver](https://unstorage.unjs.io/drivers/fs), writing to a temporary dir.\n\nTo overwrite the production storage, set the `cache` mount point using the `storage` option:\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  storage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```\n\nIn development, you can also overwrite the cache mount point using the `devStorage` option:\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  devStorage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```\n\n## Options\n\nThe `cachedEventHandler` and `cachedFunction` functions accept the following options:\n\n- **base**: string - Name of the storage mountpoint to use for caching. Default to `cache`.\n- **name**: string - Guessed from function name if not provided, and falls back to `'_'` otherwise.\n- **group**: string - Defaults to `'nitro/handlers'` for handlers and `'nitro/functions'` for functions.\n- **getKey()**: (...args) => string - A function that accepts the same arguments as the original function and returns a cache key ( `String`). If not provided, a built-in hash function will be used to generate a key based on the function arguments.\n- **integrity**: string - A value that invalidates the cache when changed. By default, it is computed from **function code**, used in development to invalidate the cache when the function code changes.\n- **maxAge**: number - Maximum age that cache is valid, in seconds. Default to `1` (second).\n- **staleMaxAge**: number - Maximum age that a stale cache is valid, in seconds. If set to `-1` a stale value will still be sent to the client while the cache updates in the background. Defaults to `0` (disabled).\n- **swr**: boolean - Enable `stale-while-revalidate` behavior to serve a stale cached response while asynchronously revalidating it. Defaults to `true`.\n- **shouldInvalidateCache()**: (..args) => boolean - A function that returns a `boolean` to invalidate the current cache and create a new one.\n- **shouldBypassCache()**: (..args) => boolean - A function that returns a `boolean` to bypass the current cache without invalidating the existing entry.\n- **varies**: string[] - An array of request headers to be considered for the cache, [learn more](https://github.com/nitrojs/nitro/issues/1031). If utilizing in a multi-tenant environment, you may want to pass `['host', 'x-forwarded-host']` to ensure these headers are not discarded and that the cache is unique per tenant.\n\n## Cache keys and invalidation\n\nWhen using the `defineCachedFunction` or `defineCachedEventHandler` functions, the cache key is generated using the following pattern:\n\n```\n`${options.group}:${options.name}:${options.getKey(...args)}.json`\n```\n\nFor example, the following function:\n\n```javascript\nconst getAccessToken = defineCachedFunction(() => {\n  return String(Date.now())\n}, {\n  maxAge: 10,\n  name: 'getAccessToken',\n  getKey: () => 'default'\n})\n```\n\nWill generate the following cache key:\n\n```\nnitro:functions:getAccessToken:default.json\n```\n\nYou can invalidate the cached function entry with:\n\n```javascript\nawait useStorage('cache').removeItem('nitro:functions:getAccessToken:default.json')\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "overview", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I cached event handlers in nitro-guide?\n\nAssistant: To cached event handlers in nitro-guide, here's what you do:\nTo cache an event handler, you simply need to use the `defineCachedEventHandler` method.\n\nIt works like [`defineEventHandler`](https://h3.unjs.io/guide/event-handler) but with an additional second [options](https://nitro.build/guide/cache#options) parameter.\n\nroutes/cached.ts\n\n```javascript\n// Cache an API handler\nexport default defineCachedEventHandler((event) => {\n  // My event handler\n}, { maxAge: 60 * 60 /* 1 hour */ });\n```\n\nWith this example, the response will be cached for 1 hour and a stale value will be sent to the client while the cache is being updated in the background. If you want to immediately return the updated response set `swr: false`.\n\nAll incoming request headers are dropped when handling cached responses. If you define the `varies` option, only the specified headers will be considered when caching and serving the responses.\n\nSee the [options](https://nitro.build/guide/cache#options) section for more details about the available options.\n\nYou can also use the `cachedEventHandler` method as alias of `defineCachedEventHandler`..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I cached functions in nitro-guide?\n\nAssistant: To cached functions in nitro-guide, here's what you do:\nYou can also cache a function using the `defineCachedFunction` function. This is useful for caching the result of a function that is not an event handler, but is part of one, and reusing it in multiple handlers.\n\nFor example, you might want to cache the result of an API call for one hour:\n\nutils/github.tsapi/stars/[...repo].ts\n\n```javascript\nexport const cachedGHStars = defineCachedFunction(async (repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (repo: string) => repo\n})\n```\n\nThe stars will be cached in development inside `.nitro/cache/functions/ghStars/<owner>/<repo>.json` with `value` being the number of stars.\n\n```json\n{\"expires\":1677851092249,\"value\":43991,\"mtime\":1677847492540,\"integrity\":\"ZUHcsxCWEH\"}\n```\n\nYou can also use the `cachedFunction` method as alias of `defineCachedFunction`..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I edge workers in nitro-guide?\n\nAssistant: To edge workers in nitro-guide, here's what you do:\nIn edge workers, the instance is destroyed after each request. Nitro automatically uses `event.waitUntil` to keep the instance alive while the cache is being updated while the response is sent to the client.\n\nTo ensure that your cached functions work as expected in edge workers, you should always pass the `event` as the first argument to the function using `defineCachedFunction`.\n\nutils/github.tsapi/stars/[...repo].ts\n\n```javascript\nimport type { H3Event } from 'h3'\n\nexport const cachedGHStars = defineCachedFunction(async (event: H3Event, repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (event: H3Event, repo: string) => repo\n})\n```\n\nThis way, the function will be able to keep the instance alive while the cache is being updated without slowing down the response to the client..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I caching route rules in nitro-guide?\n\nAssistant: To caching route rules in nitro-guide, here's what you do:\nThis feature enables you to add caching routes based on a glob pattern directly in the main configuration file. This is especially useful to have a global cache strategy for a part of your application.\n\nCache all the blog routes for 1 hour with `stale-while-revalidate` behavior:\n\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60 } },\n  },\n});\n```\n\nIf we want to use a [custom storage](https://nitro.build/guide/cache#customize-cache-storage) mount point, we can use the `base` option.\n\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: \"redis\",\n      url: \"redis://localhost:6379\",\n    },\n  },\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60, base: \"redis\" } },\n  },\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I customize cache storage in nitro-guide?\n\nAssistant: To customize cache storage in nitro-guide, here's what you do:\nNitro stores the data in the `cache:` mount point.\n\n- In production, it will use the [memory driver](https://unstorage.unjs.io/drivers/memory) by default.\n- In development, it will use the [filesystem driver](https://unstorage.unjs.io/drivers/fs), writing to a temporary dir.\n\nTo overwrite the production storage, set the `cache` mount point using the `storage` option:\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  storage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```\n\nIn development, you can also overwrite the cache mount point using the `devStorage` option:\nnitro.config.tsnuxt.config.ts\n\n```javascript\nexport default defineNitroConfig({\n  devStorage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I options in nitro-guide?\n\nAssistant: To options in nitro-guide, here's what you do:\nThe `cachedEventHandler` and `cachedFunction` functions accept the following options:\n\n- **base**: string - Name of the storage mountpoint to use for caching. Default to `cache`.\n- **name**: string - Guessed from function name if not provided, and falls back to `'_'` otherwise.\n- **group**: string - Defaults to `'nitro/handlers'` for handlers and `'nitro/functions'` for functions.\n- **getKey()**: (...args) => string - A function that accepts the same arguments as the original function and returns a cache key ( `String`). If not provided, a built-in hash function will be used to generate a key based on the function arguments.\n- **integrity**: string - A value that invalidates the cache when changed. By default, it is computed from **function code**, used in development to invalidate the cache when the function code changes.\n- **maxAge**: number - Maximum age that cache is valid, in seconds. Default to `1` (second).\n- **staleMaxAge**: number - Maximum age that a stale cache is valid, in seconds. If set to `-1` a stale value will still be sent to the client while the cache updates in the background. Defaults to `0` (disabled).\n- **swr**: boolean - Enable `stale-while-revalidate` behavior to serve a stale cached response while asynchronously revalidating it. Defaults to `true`.\n- **shouldInvalidateCache()**: (..args) => boolean - A function that returns a `boolean` to invalidate the current cache and create a new one.\n- **shouldBypassCache()**: (..args) => boolean - A function that returns a `boolean` to bypass the current cache without invalidating the existing entry.\n- **varies**: string[] - An array of request headers to be considered for the cache, [learn more](https://github.com/nitrojs/nitro/issues/1031). If utilizing in a multi-tenant environment, you may want to pass `['host', 'x-forwarded-host']` to ensure these headers are not discarded and that the cache is unique per tenant..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I cache keys and invalidation in nitro-guide?\n\nAssistant: To cache keys and invalidation in nitro-guide, here's what you do:\nWhen using the `defineCachedFunction` or `defineCachedEventHandler` functions, the cache key is generated using the following pattern:\n\n```\n`${options.group}:${options.name}:${options.getKey(...args)}.json`\n```\n\nFor example, the following function:\n\n```javascript\nconst getAccessToken = defineCachedFunction(() => {\n  return String(Date.now())\n}, {\n  maxAge: 10,\n  name: 'getAccessToken',\n  getKey: () => 'default'\n})\n```\n\nWill generate the following cache key:\n\n```\nnitro:functions:getAccessToken:default.json\n```\n\nYou can invalidate the cached function entry with:\n\n```javascript\nawait useStorage('cache').removeItem('nitro:functions:getAccessToken:default.json')\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Cache in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Cached event handler example**:\n\n```yaml\n// Cache an API handler\nexport default defineCachedEventHandler((event) => {\n  // My event handler\n}, { maxAge: 60 * 60 /* 1 hour */ });\n```\n\nThis snippet shows you how to cached event handler example, which is an important aspect of cache.\n\n**Cached function example**:\n\n```yaml\nexport const cachedGHStars = defineCachedFunction(async (repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (repo: string) => repo\n})\n```\n\nThis snippet shows you how to cached function example, which is an important aspect of cache.\n\n**Edge worker cached function example**:\n\n```yaml\nimport type { H3Event } from 'h3'\n\nexport const cachedGHStars = defineCachedFunction(async (event: H3Event, repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (event: H3Event, repo: string) => repo\n})\n```\n\nThis snippet shows you how to edge worker cached function example, which is an important aspect of cache.\n\n**Caching route rules example**:\n\n```yaml\nexport default defineNitroConfig({\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60 } },\n  },\n});\n```\n\nThis snippet shows you how to caching route rules example, which is an important aspect of cache.\n\n**Customize cache storage example**:\n\n```yaml\nexport default defineNitroConfig({\n  storage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```\n\nThis snippet shows you how to customize cache storage example, which is an important aspect of cache.\n\n**Cache key generation example**:\n\n```yaml\nconst getAccessToken = defineCachedFunction(() => {\n  return String(Date.now())\n}, {\n  maxAge: 10,\n  name: 'getAccessToken',\n  getKey: () => 'default'\n})\n```\n\nThis snippet shows you how to cache key generation example, which is an important aspect of cache.\n\n", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "code_examples", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Cache in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways pass the `event` as the first argument to the function using `defineCachedFunction` in edge workers to ensure proper caching behavior.\n\nUse the `swr: false` option to immediately return the updated response instead of a stale value.\n\nConsider using the `varies` option to specify which headers should be considered when caching responses.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/cache", "title": "Cache", "description": "Nitro provides a caching system built on top of the storage layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:54", "type": "best_practices", "page_metadata": {"twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "twitter:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "description": "Nitro provides a caching system built on top of the storage layer.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro provides a caching system built on top of the storage layer.", "viewport": "width=device-width, initial-scale=1", "og:image:width": "1200", "og:image:height": "600", "title": "Cache - Nitro", "og:image": "https://nitro.build/_og/guide/cache.png?name=Nitro&title=Cache&description=Nitro+provides+a+caching+system+built+on+top+of+the+storage+layer.", "og:image:alt": "Nitro provides a caching system built on top of the storage layer.", "og:image:type": "image/png", "twitter:image:width": "1200", "twitter:image:height": "600", "scrapeId": "1cf30a2a-a8d9-44e0-98a5-7ff9b34a46e4", "sourceURL": "https://nitro.build/guide/cache", "url": "https://nitro.build/guide/cache", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what KV Storage is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain KV Storage in nitro-guide.\n\n# KV Storage\n\nNitro provides a built-in storage layer that can abstract filesystem or database or any other data source.Here's a quick rundown of what this is about:\n\n## Usage\n\nTo use the storage layer, you can use the `useStorage()` and call `getItem(key)` to retrieve an item and `setItem(key, value)` to set an item.\n\n```javascript\n// Default storage is in memory\nawait useStorage().setItem('test:foo', { hello: 'world' })\nawait useStorage().getItem('test:foo')\n\n// You can also specify the base in useStorage(base)\nawait useStorage('test').setItem('foo', { hello: 'world' })\n\n// You can use data storage to write data to default .data/kv directory\nconst dataStorage = useStorage('data')\nawait dataStorage.setItem('test', 'works')\nawait dataStorage.getItem('data:test') // Value persists\n\n// You can use generics to define types\nawait useStorage<{ hello: string }>('test').getItem('foo')\nawait useStorage('test').getItem<{ hello: string }>('foo')\n```\n\nRead more in unstorage.unjs.io.\n\n## Configuration\n\nYou can mount one or multiple custom storage drivers using the `storage` config.\nThe key is the mount point name, and the value is the driver name and configuration.\n\n```javascript\n// nitro.config.ts\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: 'redis',\n      /* redis connector options */\n    },\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\nYou can find the driver list on [unstorage documentation](https://unstorage.unjs.io/) with their configuration.\n\n## Runtime configuration\n\nIn scenarios where the mount point configuration is not known until runtime, Nitro can dynamically add mount points during startup using [plugins](https://nitro.build/guide/plugins).\n\n```javascript\n// plugins/storage.ts\nimport redisDriver from 'unstorage/drivers/redis'\n\nexport default defineNitroPlugin(() => {\n  const storage = useStorage()\n\n  // Dynamically pass in credentials from runtime configuration, or other sources\n  const driver = redisDriver({\n      base: 'redis',\n      host: useRuntimeConfig().redis.host,\n      port: useRuntimeConfig().redis.port,\n      /* other redis connector options */\n    })\n\n  // Mount driver\n  storage.mount('redis', driver)\n})\n```\n\nThis is a temporary workaround, with a better solution coming in the future! Keep a lookout on the GitHub issue [here](https://github.com/nitrojs/nitro/issues/1161#issuecomment-1511444675).\n\n## Development-only mount points\n\nBy default, Nitro will mount the project directory and some other dirs using the filesystem driver in development time.\n\n```javascript\n// Access to project root dir\nconst rootStorage = useStorage('root')\n\n// Access to project src dir (same as root by default)\nconst srcStorage = useStorage('src')\n\n// Access to server cache dir\nconst cacheStorage = useStorage('cache')\n\n// Access to the temp build dir\nconst buildStorage = useStorage('build')\n```\n\nYou also can use the `devStorage` key to overwrite the storage configuration during development. This is very useful when you use a database in production and want to use the filesystem in development.\n\nIn order to use the `devStorage` key, you need to use the `nitro dev` command and the key in the `storage` option must be the same as the production one.\n\n```javascript\n// nitro.config.ts\nexport default defineNitroConfig({\n  // Production\n  storage: {\n    db: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  },\n  // Development\n  devStorage: {\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\nYou will also be able to access to a `build` namespace in the storage layer only during development. It contains file generated by Nitro.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "overview", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I usage in nitro-guide?\n\nAssistant: To usage in nitro-guide, here's what you do:\nTo use the storage layer, you can use the `useStorage()` and call `getItem(key)` to retrieve an item and `setItem(key, value)` to set an item.\n\n```javascript\n// Default storage is in memory\nawait useStorage().setItem('test:foo', { hello: 'world' })\nawait useStorage().getItem('test:foo')\n\n// You can also specify the base in useStorage(base)\nawait useStorage('test').setItem('foo', { hello: 'world' })\n\n// You can use data storage to write data to default .data/kv directory\nconst dataStorage = useStorage('data')\nawait dataStorage.setItem('test', 'works')\nawait dataStorage.getItem('data:test') // Value persists\n\n// You can use generics to define types\nawait useStorage<{ hello: string }>('test').getItem('foo')\nawait useStorage('test').getItem<{ hello: string }>('foo')\n```\n\nRead more in unstorage.unjs.io..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I configuration in nitro-guide?\n\nAssistant: To configuration in nitro-guide, here's what you do:\nYou can mount one or multiple custom storage drivers using the `storage` config.\nThe key is the mount point name, and the value is the driver name and configuration.\n\n```javascript\n// nitro.config.ts\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: 'redis',\n      /* redis connector options */\n    },\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\nYou can find the driver list on [unstorage documentation](https://unstorage.unjs.io/) with their configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I runtime configuration in nitro-guide?\n\nAssistant: To runtime configuration in nitro-guide, here's what you do:\nIn scenarios where the mount point configuration is not known until runtime, Nitro can dynamically add mount points during startup using [plugins](https://nitro.build/guide/plugins).\n\n```javascript\n// plugins/storage.ts\nimport redisDriver from 'unstorage/drivers/redis'\n\nexport default defineNitroPlugin(() => {\n  const storage = useStorage()\n\n  // Dynamically pass in credentials from runtime configuration, or other sources\n  const driver = redisDriver({\n      base: 'redis',\n      host: useRuntimeConfig().redis.host,\n      port: useRuntimeConfig().redis.port,\n      /* other redis connector options */\n    })\n\n  // Mount driver\n  storage.mount('redis', driver)\n})\n```\n\nThis is a temporary workaround, with a better solution coming in the future! Keep a lookout on the GitHub issue [here](https://github.com/nitrojs/nitro/issues/1161#issuecomment-1511444675)..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I development-only mount points in nitro-guide?\n\nAssistant: To development-only mount points in nitro-guide, here's what you do:\nBy default, Nitro will mount the project directory and some other dirs using the filesystem driver in development time.\n\n```javascript\n// Access to project root dir\nconst rootStorage = useStorage('root')\n\n// Access to project src dir (same as root by default)\nconst srcStorage = useStorage('src')\n\n// Access to server cache dir\nconst cacheStorage = useStorage('cache')\n\n// Access to the temp build dir\nconst buildStorage = useStorage('build')\n```\n\nYou also can use the `devStorage` key to overwrite the storage configuration during development. This is very useful when you use a database in production and want to use the filesystem in development.\n\nIn order to use the `devStorage` key, you need to use the `nitro dev` command and the key in the `storage` option must be the same as the production one.\n\n```javascript\n// nitro.config.ts\nexport default defineNitroConfig({\n  // Production\n  storage: {\n    db: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  },\n  // Development\n  devStorage: {\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\nYou will also be able to access to a `build` namespace in the storage layer only during development. It contains file generated by Nitro..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "section_detail", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for KV Storage in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\n// Default storage is in memory\nawait useStorage().setItem('test:foo', { hello: 'world' })\nawait useStorage().getItem('test:foo')\n\n// You can also specify the base in useStorage(base)\nawait useStorage('test').setItem('foo', { hello: 'world' })\n\n// You can use data storage to write data to default .data/kv directory\nconst dataStorage = useStorage('data')\nawait dataStorage.setItem('test', 'works')\nawait dataStorage.getItem('data:test') // Value persists\n\n// You can use generics to define types\nawait useStorage<{ hello: string }>('test').getItem('foo')\nawait useStorage('test').getItem<{ hello: string }>('foo')\n```\n\nThis snippet shows you how to usage example, which is an important aspect of kv storage.\n\n**Configuration Example**:\n\n```yaml\n// nitro.config.ts\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: 'redis',\n      /* redis connector options */\n    },\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\nThis snippet shows you how to configuration example, which is an important aspect of kv storage.\n\n**Runtime Configuration Example**:\n\n```yaml\n// plugins/storage.ts\nimport redisDriver from 'unstorage/drivers/redis'\n\nexport default defineNitroPlugin(() => {\n  const storage = useStorage()\n\n  // Dynamically pass in credentials from runtime configuration, or other sources\n  const driver = redisDriver({\n      base: 'redis',\n      host: useRuntimeConfig().redis.host,\n      port: useRuntimeConfig().redis.port,\n      /* other redis connector options */\n    })\n\n  // Mount driver\n  storage.mount('redis', driver)\n})\n```\n\nThis snippet shows you how to runtime configuration example, which is an important aspect of kv storage.\n\n**Development-only Mount Points Example**:\n\n```yaml\n// nitro.config.ts\nexport default defineNitroConfig({\n  // Production\n  storage: {\n    db: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  },\n  // Development\n  devStorage: {\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\nThis snippet shows you how to development-only mount points example, which is an important aspect of kv storage.\n\n", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "code_examples", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using KV Storage in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nKeep an eye on the GitHub issue for future improvements regarding dynamic mount points.\n\nUse the `devStorage` key to switch to filesystem storage during development while using a database in production.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/storage", "title": "KV Storage", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:25", "type": "best_practices", "page_metadata": {"twitter:site": "@unjsio", "twitter:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "twitter:image:height": "600", "twitter:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "viewport": "width=device-width, initial-scale=1", "twitter:image:width": "1200", "og:image": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "og:image:alt": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "og:image:height": "600", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/storage.png?name=Nitro&title=KV+Storage&description=Nitro+provides+a+built-in+storage+layer+that+can+abstract+filesystem+or+database+or+any+other+data+source.", "title": "KV Storage - Nitro", "description": "Nitro provides a built-in storage layer that can abstract filesystem or database or any other data source.", "scrapeId": "78f3b294-4a93-4187-91eb-f713d50ea90f", "sourceURL": "https://nitro.build/guide/storage", "url": "https://nitro.build/guide/storage", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Plugins is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Plugins in nitro-guide.\n\n# Plugins\n\nUse plugins to extend Nitro's runtime behavior.Here's a quick rundown of what this is about:\n\n## Overview\n\nNitro plugins will be **executed once** during server startup in order to allow extending Nitro's runtime behavior. They receive `nitroApp` context, which can be used to hook into Nitro lifecycle events.\n\nPlugins are auto-registered from `plugins/` directory and run synchronously (by order of file name) on the first Nitro initialization.\n\n## Nitro runtime hooks\n\nYou can use Nitro [hooks](https://github.com/unjs/hookable) to extend the default runtime behaviour of Nitro by registering custom (async or sync) functions to the lifecycle events within plugins.\n\n## Available hooks\n\nSee the [source code](https://github.com/nitrojs/nitro/blob/v2/src/core/index.ts#L75) for list of all available runtime hooks.\n\n- \"close\", () => {}\n- \"error\", (error, { event? }) => {}\n- \"render:response\", (response, { event }) => {}\n- \"request\", (event) => {}\n- \"beforeResponse\", (event, { body }) => {}\n- \"afterResponse\", (event, { body }) => {}\n\n## Examples\n\nVarious examples of using plugins to extend Nitro's functionality.\n\n## Capturing errors\n\nYou can use plugins to capture all application errors.\n\n## Graceful shutdown\n\nYou can use plugins to register a hook that resolves when Nitro is closed.\n\n## Request and response lifecycle\n\nYou can use plugins to register a hook that can run on request lifecycle.\n\n## Renderer response\n\nYou can use plugins to register a hook that modifies the [`renderer`](https://nitro.build/config#renderer) response.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "overview", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I overview in nitro-guide?\n\nAssistant: To overview in nitro-guide, here's what you do:\nNitro plugins will be **executed once** during server startup in order to allow extending Nitro's runtime behavior. They receive `nitroApp` context, which can be used to hook into Nitro lifecycle events.\n\nPlugins are auto-registered from `plugins/` directory and run synchronously (by order of file name) on the first Nitro initialization..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I nitro runtime hooks in nitro-guide?\n\nAssistant: To nitro runtime hooks in nitro-guide, here's what you do:\nYou can use Nitro [hooks](https://github.com/unjs/hookable) to extend the default runtime behaviour of Nitro by registering custom (async or sync) functions to the lifecycle events within plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I available hooks in nitro-guide?\n\nAssistant: To available hooks in nitro-guide, here's what you do:\nSee the [source code](https://github.com/nitrojs/nitro/blob/v2/src/core/index.ts#L75) for list of all available runtime hooks.\n\n- \"close\", () => {}\n- \"error\", (error, { event? }) => {}\n- \"render:response\", (response, { event }) => {}\n- \"request\", (event) => {}\n- \"beforeResponse\", (event, { body }) => {}\n- \"afterResponse\", (event, { body }) => {}.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I examples in nitro-guide?\n\nAssistant: To examples in nitro-guide, here's what you do:\nVarious examples of using plugins to extend Nitro's functionality..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I capturing errors in nitro-guide?\n\nAssistant: To capturing errors in nitro-guide, here's what you do:\nYou can use plugins to capture all application errors..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I graceful shutdown in nitro-guide?\n\nAssistant: To graceful shutdown in nitro-guide, here's what you do:\nYou can use plugins to register a hook that resolves when Nitro is closed..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I request and response lifecycle in nitro-guide?\n\nAssistant: To request and response lifecycle in nitro-guide, here's what you do:\nYou can use plugins to register a hook that can run on request lifecycle..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I renderer response in nitro-guide?\n\nAssistant: To renderer response in nitro-guide, here's what you do:\nYou can use plugins to register a hook that modifies the [`renderer`](https://nitro.build/config#renderer) response..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "section_detail", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Plugins in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Plugin Example**:\n\n```yaml\n// plugins/test.ts\nexport default defineNitroPlugin((nitroApp) => {\n  console.log('Nitro plugin', nitroApp)\n})\n```\n\nThis snippet shows you how to basic plugin example, which is an important aspect of plugins.\n\n**Custom Plugins Directory**:\n\n```yaml\nnitro.config.tsnuxt.config.ts\n\nexport default defineNitroConfig({\n  plugins: ['my-plugins/hello.ts']\n})\n```\n\nThis snippet shows you how to custom plugins directory, which is an important aspect of plugins.\n\n**Error Hook Example**:\n\n```yaml\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hook(\"error\", async (error, { event }) => {\n    console.error(`${event.path} Application error:`, error)\n  });\n})\n```\n\nThis snippet shows you how to error hook example, which is an important aspect of plugins.\n\n**Graceful Shutdown Example**:\n\n```yaml\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hookOnce(\"close\", async () => {\n    console.log(\"Closing nitro server...\")\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    console.log(\"Task is done!\");\n  });\n})\n```\n\nThis snippet shows you how to graceful shutdown example, which is an important aspect of plugins.\n\n**Request Lifecycle Example**:\n\n```yaml\nexport default defineNitroPlugin((nitroApp) => {\n  nitroApp.hooks.hook(\"request\", (event) => {\n    console.log(\"on request\", event.path);\n  });\n\n  nitroApp.hooks.hook(\"beforeResponse\", (event, { body }) => {\n    console.log(\"on response\", event.path, { body });\n  });\n\n  nitroApp.hooks.hook(\"afterResponse\", (event, { body }) => {\n    console.log(\"on after response\", event.path, { body });\n  });\n});\n```\n\nThis snippet shows you how to request lifecycle example, which is an important aspect of plugins.\n\n**Renderer Response Example**:\n\n```yaml\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hook('render:response', (response, { event }) => {\n    console.log(response)\n  })\n})\n```\n\nThis snippet shows you how to renderer response example, which is an important aspect of plugins.\n\n", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "code_examples", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Plugins in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPlugins are auto-registered from the `plugins/` directory and run synchronously by order of file name.\n\nUse hooks to extend the default runtime behavior of Nitro.\n\nEnsure to handle errors gracefully within your plugins.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/plugins", "title": "Plugins", "description": "Use plugins to extend Nitro's runtime behavior.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 00:59:39", "type": "best_practices", "page_metadata": {"twitter:image:width": "1200", "og:image:width": "1200", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:site": "@unjsio", "og:image:type": "image/png", "title": "Plugins - Nitro", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Use plugins to extend Nitro's runtime behavior.", "twitter:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/plugins.png?name=Nitro&title=Plugins&description=Use+plugins+to+extend+Nitro%27s+runtime+behavior.", "description": "Use plugins to extend Nitro's runtime behavior.", "scrapeId": "4d8b8985-4dd2-4963-8278-9a496c1d2a8f", "sourceURL": "https://nitro.build/guide/plugins", "url": "https://nitro.build/guide/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Configuration is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Configuration in nitro-guide.\n\n# Configuration\n\nCustomize and extend Nitro defaults.Here's a quick rundown of what this is about:\n\n## Overview\n\nSee [config reference](https://nitro.build/config) for available options.\n\nYou can customize your Nitro builder with a configuration file.\n\n## Nitro Configuration File\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  // Nitro options\n})\n```\n\nIf you are using [Nuxt](https://nuxt.com/), use the `nitro` option in your Nuxt config instead.\n\n## Loading Configuration\n\nNitro loads the configuration using [unjs/c12](https://github.com/unjs/c12), giving more possibilities such as using `.nitrorc` file in current working directory or in the user's home directory.\n\n## Runtime Configuration\n\nNitro provides a runtime config API to expose configuration within your application, with the ability to update it at runtime by setting environment variables. This is useful when you want to expose different configuration values for different environments (e.g. development, staging, production). For example, you can use this to expose different API endpoints for different environments or to expose different feature flags.\n\nFirst, you need to define the runtime config in your configuration file.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  runtimeConfig: {\n    apiToken: \"dev_token\", // `dev_token` is the default value\n  }\n})\n```\n\nYou can now access the runtime config using `useRuntimeConfig(event)`. Use `useRuntimeConfig(event)` within event handlers and utilities and **avoid** calling it in ambient global contexts. This could lead to unexpected behavior such as sharing the same runtime config across different requests.\n\n## Accessing Runtime Config\n\napi/example.get.ts (nitro)server/api/example.get.ts (nuxt)\n\n```\nexport default defineEventHandler((event) => {\n  return useRuntimeConfig(event).apiToken // Returns `dev_token`\n});\n```\n\n\n## Local Development\n\nFinally, you can update the runtime config using environment variables. You can use a `.env` file in development and use platform variables in production (see below).\n\nCreate an `.env` file in your project root:\n\n.env\n\n```\nNITRO_API_TOKEN=\"123\"\n```\n\nRe-start the development server, fetch the `/api/example` endpoint and you should see `123` as the response instead of `dev_token`.\n\nDo not forget that you can still universally access environment variables using `import.meta.env` or `process.env` but avoid using them in ambient global contexts to prevent unexpected behavior.\n\n## Production\n\nYou can define variables in your production environment to update the runtime config. All variables must be prefixed with `NITRO_` to be applied to the runtime config. They will override the runtime config variables defined within your `nitro.config.ts` file.\n\n.env (nitro).env (nuxt)\n\n```\nNITRO_API_TOKEN=\"123\"\n```\n\nIn runtime config, define key using camelCase. In environment variables, define key using snake_case and uppercase.\n\n```\n{\n  helloWorld: \"foo\"\n}\n```\n\n```\nNITRO_HELLO_WORLD=\"foo\"\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "overview", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I overview in nitro-guide?\n\nAssistant: To overview in nitro-guide, here's what you do:\nSee [config reference](https://nitro.build/config) for available options.\n\nYou can customize your Nitro builder with a configuration file..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I nitro configuration file in nitro-guide?\n\nAssistant: To nitro configuration file in nitro-guide, here's what you do:\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  // Nitro options\n})\n```\n\nIf you are using [Nuxt](https://nuxt.com/), use the `nitro` option in your Nuxt config instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I loading configuration in nitro-guide?\n\nAssistant: To loading configuration in nitro-guide, here's what you do:\nNitro loads the configuration using [unjs/c12](https://github.com/unjs/c12), giving more possibilities such as using `.nitrorc` file in current working directory or in the user's home directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I runtime configuration in nitro-guide?\n\nAssistant: To runtime configuration in nitro-guide, here's what you do:\nNitro provides a runtime config API to expose configuration within your application, with the ability to update it at runtime by setting environment variables. This is useful when you want to expose different configuration values for different environments (e.g. development, staging, production). For example, you can use this to expose different API endpoints for different environments or to expose different feature flags.\n\nFirst, you need to define the runtime config in your configuration file.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  runtimeConfig: {\n    apiToken: \"dev_token\", // `dev_token` is the default value\n  }\n})\n```\n\nYou can now access the runtime config using `useRuntimeConfig(event)`. Use `useRuntimeConfig(event)` within event handlers and utilities and **avoid** calling it in ambient global contexts. This could lead to unexpected behavior such as sharing the same runtime config across different requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I accessing runtime config in nitro-guide?\n\nAssistant: To accessing runtime config in nitro-guide, here's what you do:\napi/example.get.ts (nitro)server/api/example.get.ts (nuxt)\n\n```\nexport default defineEventHandler((event) => {\n  return useRuntimeConfig(event).apiToken // Returns `dev_token`\n});\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I local development in nitro-guide?\n\nAssistant: To local development in nitro-guide, here's what you do:\nFinally, you can update the runtime config using environment variables. You can use a `.env` file in development and use platform variables in production (see below).\n\nCreate an `.env` file in your project root:\n\n.env\n\n```\nNITRO_API_TOKEN=\"123\"\n```\n\nRe-start the development server, fetch the `/api/example` endpoint and you should see `123` as the response instead of `dev_token`.\n\nDo not forget that you can still universally access environment variables using `import.meta.env` or `process.env` but avoid using them in ambient global contexts to prevent unexpected behavior..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I production in nitro-guide?\n\nAssistant: To production in nitro-guide, here's what you do:\nYou can define variables in your production environment to update the runtime config. All variables must be prefixed with `NITRO_` to be applied to the runtime config. They will override the runtime config variables defined within your `nitro.config.ts` file.\n\n.env (nitro).env (nuxt)\n\n```\nNITRO_API_TOKEN=\"123\"\n```\n\nIn runtime config, define key using camelCase. In environment variables, define key using snake_case and uppercase.\n\n```\n{\n  helloWorld: \"foo\"\n}\n```\n\n```\nNITRO_HELLO_WORLD=\"foo\"\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Configuration in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Nitro Configuration Example**:\n\n```yaml\nexport default defineNitroConfig({\n  // Nitro options\n})\n```\n\nThis snippet shows you how to nitro configuration example, which is an important aspect of configuration.\n\n**Runtime Configuration Example**:\n\n```yaml\nexport default defineNitroConfig({\n  runtimeConfig: {\n    apiToken: \"dev_token\", // `dev_token` is the default value\n  }\n})\n```\n\nThis snippet shows you how to runtime configuration example, which is an important aspect of configuration.\n\n**Accessing Runtime Config Example**:\n\n```yaml\nexport default defineEventHandler((event) => {\n  return useRuntimeConfig(event).apiToken // Returns `dev_token`\n});\n```\n\nThis snippet shows you how to accessing runtime config example, which is an important aspect of configuration.\n\n**Local Development Environment Variable Example**:\n\n```yaml\nNITRO_API_TOKEN=\"123\"\n```\n\nThis snippet shows you how to local development environment variable example, which is an important aspect of configuration.\n\n**Production Environment Variable Example**:\n\n```yaml\nNITRO_API_TOKEN=\"123\"\n```\n\nThis snippet shows you how to production environment variable example, which is an important aspect of configuration.\n\n**Runtime Config and Environment Variable Mapping**:\n\n```yaml\n{\n  helloWorld: \"foo\"\n}\n\nNITRO_HELLO_WORLD=\"foo\"\n```\n\nThis snippet shows you how to runtime config and environment variable mapping, which is an important aspect of configuration.\n\n", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "code_examples", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Configuration in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `useRuntimeConfig(event)` within event handlers and utilities.\n\nAvoid calling `useRuntimeConfig(event)` in ambient global contexts to prevent unexpected behavior.\n\nDefine runtime config keys using camelCase and environment variable keys using snake_case and uppercase.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/configuration", "title": "Configuration", "description": "Customize and extend Nitro defaults.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:31", "type": "best_practices", "page_metadata": {"og:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "og:image:height": "600", "og:image:type": "image/png", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Customize and extend Nitro defaults.", "og:image:width": "1200", "title": "Configuration - Nitro", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "description": "Customize and extend Nitro defaults.", "og:image:alt": "Customize and extend Nitro defaults.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/configuration.png?name=Nitro&title=Configuration&description=Customize+and+extend+Nitro+defaults.", "scrapeId": "1260d83a-eb55-4d64-b5e5-a8f825f8ed2c", "sourceURL": "https://nitro.build/guide/configuration", "url": "https://nitro.build/guide/configuration", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Server Utils is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Server Utils in nitro-guide.\n\n# Server Utils\n\nEnjoy auto-imported server utils and extend with your own utils.Here's a quick rundown of what this is about:\n\n## Auto imports\n\nWhen reading the rest of the docs, you might notice that there are no `imports` in examples for using utilities. It is because Nitro uses [unjs/unimport](https://github.com/unjs/unimport) to auto import utilities when used with full tree-shaking support so you don't have to!\n\n## H3 utils\n\nNitro enables all [h3 utils](https://h3.unjs.io/utils) as auto imports so you can use `defineEventHandler`, `readBody`, etc. without manually importing them.\n\nRead more in H3 Docs.\n\n## `utils` directory\n\nYou can add your application specific utils inside `utils/` directory and they will be auto-imported when used. Every export in the `utils` directory and its subdirectories will become available globally in your application.\n\n**Example:** Create a `utils/sum.ts` file where a function `useSum` is exported:\n\nutils/sum.ts\n\n```\nexport function useSum(a: number, b: number) { return a + b }\n```\n\nUse it in your `routes/index.ts` file without importing it:\n\nroutes/index.ts\n\n```\nexport default defineEventHandler(() => {\n  const sum = useSum(1, 2) // auto-imported\n  return { sum }\n})\n```\n\n## Nitro utils\n\nNitro also exposes several built-in utils:\n\n- `defineCachedFunction(fn, options)` / `cachedFunction(fn, options)`\n- `defineCachedEventHandler(handler, options)` / `cachedEventHandler(handler, options)`\n- `defineRenderHandler(handler)`\n- `defineRouteMeta(options)` (experimental)\n- `useRuntimeConfig(event?)`\n- `useAppConfig(event?)`\n- `useStorage(base?)`\n- `useNitroApp()`\n- `defineNitroPlugin(plugin)`\n- `nitroPlugin(plugin)`\n- `getRouteRules(event)`\n\nCheck [the source code](https://github.com/nitrojs/nitro/blob/v2/src/core/config/resolvers/imports.ts#L58) for list of available Nitro auto imports.\n\nThe types are auto-generated for global auto-imports when running the `prepare` or `dev` command. See [TypeScript](https://nitro.build/guide/typescript) guide, for IDE support.\n\n## Manual imports\n\nFor some edge cases (IDE support and libraries in `node_modules`) it is impossible to rely on auto imports.\n\nYou can explicitly import them from virtual `#imports` file.\n\nManually importing from `#imports` still has benefits of tree-shaking.\n\nplugins/test.ts\n\n```\nimport { useStorage } from '#imports'\n```\n\n## Async Context (Experimental)\n\nNitro (2.6+) enables a new server development experience in order to split application logic into smaller \"composable\" utilities that are fully decoupled from each other and can directly assess to a shared context (request event) without needing it to be passed along. This pattern is inspired from [Vue Composition API](https://vuejs.org/guide/extras/composition-api-faq.html#why-composition-api) and powered by [unjs/unctx](https://github.com/unjs/unctx).\n\nThis feature is currently supported for Node.js and Bun runtimes and also coming soon to other presets that support [`AsyncLocalStorage`](https://nodejs.org/api/async_context.html#class-asynclocalstorage) interface.\n\nIn order to enable async context feature, you have to enable `asyncContext` flag:\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  experimental: {\n    asyncContext: true\n  }\n});\n```\n\nAfter enabling this flag, you can use `useEvent()` (auto imported) in any utility or composable to access the request event without manually passing it along:\n\nwith async contextwithout async context\n\n```javascript\n// routes/index.ts\nexport default defineEventHandler(async () => {\n  const user = await useAuth()\n})\n\n// utils/auth.ts\nexport function useAuth() {\n  return useSession(useEvent())\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "overview", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I auto imports in nitro-guide?\n\nAssistant: To auto imports in nitro-guide, here's what you do:\nWhen reading the rest of the docs, you might notice that there are no `imports` in examples for using utilities. It is because Nitro uses [unjs/unimport](https://github.com/unjs/unimport) to auto import utilities when used with full tree-shaking support so you don't have to!.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I h3 utils in nitro-guide?\n\nAssistant: To h3 utils in nitro-guide, here's what you do:\nNitro enables all [h3 utils](https://h3.unjs.io/utils) as auto imports so you can use `defineEventHandler`, `readBody`, etc. without manually importing them.\n\nRead more in H3 Docs..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I `utils` directory in nitro-guide?\n\nAssistant: To `utils` directory in nitro-guide, here's what you do:\nYou can add your application specific utils inside `utils/` directory and they will be auto-imported when used. Every export in the `utils` directory and its subdirectories will become available globally in your application.\n\n**Example:** Create a `utils/sum.ts` file where a function `useSum` is exported:\n\nutils/sum.ts\n\n```\nexport function useSum(a: number, b: number) { return a + b }\n```\n\nUse it in your `routes/index.ts` file without importing it:\n\nroutes/index.ts\n\n```\nexport default defineEventHandler(() => {\n  const sum = useSum(1, 2) // auto-imported\n  return { sum }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I nitro utils in nitro-guide?\n\nAssistant: To nitro utils in nitro-guide, here's what you do:\nNitro also exposes several built-in utils:\n\n- `defineCachedFunction(fn, options)` / `cachedFunction(fn, options)`\n- `defineCachedEventHandler(handler, options)` / `cachedEventHandler(handler, options)`\n- `defineRenderHandler(handler)`\n- `defineRouteMeta(options)` (experimental)\n- `useRuntimeConfig(event?)`\n- `useAppConfig(event?)`\n- `useStorage(base?)`\n- `useNitroApp()`\n- `defineNitroPlugin(plugin)`\n- `nitroPlugin(plugin)`\n- `getRouteRules(event)`\n\nCheck [the source code](https://github.com/nitrojs/nitro/blob/v2/src/core/config/resolvers/imports.ts#L58) for list of available Nitro auto imports.\n\nThe types are auto-generated for global auto-imports when running the `prepare` or `dev` command. See [TypeScript](https://nitro.build/guide/typescript) guide, for IDE support..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I manual imports in nitro-guide?\n\nAssistant: To manual imports in nitro-guide, here's what you do:\nFor some edge cases (IDE support and libraries in `node_modules`) it is impossible to rely on auto imports.\n\nYou can explicitly import them from virtual `#imports` file.\n\nManually importing from `#imports` still has benefits of tree-shaking.\n\nplugins/test.ts\n\n```\nimport { useStorage } from '#imports'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I async context (experimental) in nitro-guide?\n\nAssistant: To async context (experimental) in nitro-guide, here's what you do:\nNitro (2.6+) enables a new server development experience in order to split application logic into smaller \"composable\" utilities that are fully decoupled from each other and can directly assess to a shared context (request event) without needing it to be passed along. This pattern is inspired from [Vue Composition API](https://vuejs.org/guide/extras/composition-api-faq.html#why-composition-api) and powered by [unjs/unctx](https://github.com/unjs/unctx).\n\nThis feature is currently supported for Node.js and Bun runtimes and also coming soon to other presets that support [`AsyncLocalStorage`](https://nodejs.org/api/async_context.html#class-asynclocalstorage) interface.\n\nIn order to enable async context feature, you have to enable `asyncContext` flag:\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  experimental: {\n    asyncContext: true\n  }\n});\n```\n\nAfter enabling this flag, you can use `useEvent()` (auto imported) in any utility or composable to access the request event without manually passing it along:\n\nwith async contextwithout async context\n\n```javascript\n// routes/index.ts\nexport default defineEventHandler(async () => {\n  const user = await useAuth()\n})\n\n// utils/auth.ts\nexport function useAuth() {\n  return useSession(useEvent())\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Server Utils in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of a utility function**:\n\n```yaml\nexport function useSum(a: number, b: number) { return a + b }\n```\n\nThis snippet shows you how to example of a utility function, which is an important aspect of server utils.\n\n**Using auto-imported utility in routes**:\n\n```yaml\nexport default defineEventHandler(() => {\n  const sum = useSum(1, 2) // auto-imported\n  return { sum }\n})\n```\n\nThis snippet shows you how to using auto-imported utility in routes, which is an important aspect of server utils.\n\n**Manual import from #imports**:\n\n```yaml\nimport { useStorage } from '#imports'\n```\n\nThis snippet shows you how to manual import from #imports, which is an important aspect of server utils.\n\n**Enabling async context feature**:\n\n```yaml\nexport default defineNitroConfig({\n  experimental: {\n    asyncContext: true\n  }\n});\n```\n\nThis snippet shows you how to enabling async context feature, which is an important aspect of server utils.\n\n**Using useEvent in async context**:\n\n```yaml\n// routes/index.ts\nexport default defineEventHandler(async () => {\n  const user = await useAuth()\n})\n\n// utils/auth.ts\nexport function useAuth() {\n  return useSession(useEvent())\n}\n```\n\nThis snippet shows you how to using useevent in async context, which is an important aspect of server utils.\n\n", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "code_examples", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Server Utils in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUtilize auto imports to simplify your code and avoid manual imports where possible.\n\nFor application-specific utilities, create a `utils/` directory to keep your code organized and accessible globally.\n\nWhen dealing with edge cases, consider using manual imports from the `#imports` file to maintain tree-shaking benefits.\n\nEnable the async context feature to enhance the composability of your utilities and improve code organization.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/utils", "title": "Server Utils", "description": "Enjoy auto-imported server utils and extend with your own utils.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:54", "type": "best_practices", "page_metadata": {"og:image:type": "image/png", "title": "Server Utils - Nitro", "description": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "twitter:image:width": "1200", "ogImage": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "og:image:alt": "Enjoy auto-imported server utils and extend with your own utils.", "favicon": "https://nitro.build/icon.svg", "og:image": "https://nitro.build/_og/guide/utils.png?name=Nitro&title=Server+Utils&description=Enjoy+auto-imported+server+utils+and+extend+with+your+own+utils.", "og:image:width": "1200", "og:image:height": "600", "scrapeId": "2584fba0-adc7-4978-989e-61cf07c9a73b", "sourceURL": "https://nitro.build/guide/utils", "url": "https://nitro.build/guide/utils", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what SQL Database is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain SQL Database in nitro-guide.\n\n# SQL Database\n\nNitro provides a built-in and lightweight SQL database layer.Here's a quick rundown of what this is about:\n\n## Overview\n\nThe default database connection is **preconfigured** with [SQLite](https://db0.unjs.io/connectors/sqlite) and works out of the box for development mode and any Node.js compatible production deployments. By default, data will be stored in `.data/db.sqlite3`.\n\nYou can change default connection or define more connections to any of the [supported databases](https://db0.unjs.io/connectors/sqlite).\n\nYou can integrate database instance to any of the [supported ORMs](https://db0.unjs.io/integrations).\n\n## Opt-in to the experimental feature\n\nDatabase support is currently experimental.\nRefer to the [db0 issues](https://github.com/unjs/db0/issues) for status and bug report.\n\nIn order to enable database layer you need to enable experimental feature flag.\n\n## Code Example: Enable Experimental Feature\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  experimental: {\n    database: true\n  }\n})\n```\n\nAlso install `better-sqlite3` dependency:\n\nnpmyarnpnpmbundenoauto\n\n```\nnpm i -D better-sqlite3\n```\n\n## Usage\n\nindex.ts\n\n```\nexport default defineEventHandler(async () => {\n  const db = useDatabase();\n\n  // Create users table\n  await db.sql`DROP TABLE IF EXISTS users`;\n  await db.sql`CREATE TABLE IF NOT EXISTS users (\"id\" TEXT PRIMARY KEY, \"firstName\" TEXT, \"lastName\" TEXT, \"email\" TEXT)`;\n\n  // Add a new user\n  const userId = String(Math.round(Math.random() * 10_000));\n  await db.sql`INSERT INTO users VALUES (${userId}, 'John', 'Doe', '')`;\n\n  // Query for users\n  const { rows } = await db.sql`SELECT * FROM users WHERE id = ${userId}`;\n\n  return {\n    rows,\n  };\n});\n```\n\n## Configuration\n\nYou can configure database connections using `database` config:\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  database: {\n    default: {\n      connector: 'sqlite',\n      options: { name: 'db' }\n    },\n    users: {\n      connector: 'postgresql',\n      url: 'postgresql://username:password@hostname:port/database_name'\n    }\n  }\n})\n```\n\nYou can use the `devDatabase` config to overwrite the database configuration only for development mode.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "overview", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I overview in nitro-guide?\n\nAssistant: To overview in nitro-guide, here's what you do:\nThe default database connection is **preconfigured** with [SQLite](https://db0.unjs.io/connectors/sqlite) and works out of the box for development mode and any Node.js compatible production deployments. By default, data will be stored in `.data/db.sqlite3`.\n\nYou can change default connection or define more connections to any of the [supported databases](https://db0.unjs.io/connectors/sqlite).\n\nYou can integrate database instance to any of the [supported ORMs](https://db0.unjs.io/integrations)..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I opt-in to the experimental feature in nitro-guide?\n\nAssistant: To opt-in to the experimental feature in nitro-guide, here's what you do:\nDatabase support is currently experimental.\nRefer to the [db0 issues](https://github.com/unjs/db0/issues) for status and bug report.\n\nIn order to enable database layer you need to enable experimental feature flag..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I code example: enable experimental feature in nitro-guide?\n\nAssistant: To code example: enable experimental feature in nitro-guide, here's what you do:\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  experimental: {\n    database: true\n  }\n})\n```\n\nAlso install `better-sqlite3` dependency:\n\nnpmyarnpnpmbundenoauto\n\n```\nnpm i -D better-sqlite3\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I usage in nitro-guide?\n\nAssistant: To usage in nitro-guide, here's what you do:\nindex.ts\n\n```\nexport default defineEventHandler(async () => {\n  const db = useDatabase();\n\n  // Create users table\n  await db.sql`DROP TABLE IF EXISTS users`;\n  await db.sql`CREATE TABLE IF NOT EXISTS users (\"id\" TEXT PRIMARY KEY, \"firstName\" TEXT, \"lastName\" TEXT, \"email\" TEXT)`;\n\n  // Add a new user\n  const userId = String(Math.round(Math.random() * 10_000));\n  await db.sql`INSERT INTO users VALUES (${userId}, 'John', 'Doe', '')`;\n\n  // Query for users\n  const { rows } = await db.sql`SELECT * FROM users WHERE id = ${userId}`;\n\n  return {\n    rows,\n  };\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I configuration in nitro-guide?\n\nAssistant: To configuration in nitro-guide, here's what you do:\nYou can configure database connections using `database` config:\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  database: {\n    default: {\n      connector: 'sqlite',\n      options: { name: 'db' }\n    },\n    users: {\n      connector: 'postgresql',\n      url: 'postgresql://username:password@hostname:port/database_name'\n    }\n  }\n})\n```\n\nYou can use the `devDatabase` config to overwrite the database configuration only for development mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for SQL Database in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Enable Experimental Feature**:\n\n```yaml\nexport default defineNitroConfig({\n  experimental: {\n    database: true\n  }\n})\n```\n\nThis snippet shows you how to enable experimental feature, which is an important aspect of sql database.\n\n**Install Dependency**:\n\n```yaml\nnpm i -D better-sqlite3\n```\n\nThis snippet shows you how to install dependency, which is an important aspect of sql database.\n\n**Usage Example**:\n\n```yaml\nexport default defineEventHandler(async () => {\n  const db = useDatabase();\n\n  // Create users table\n  await db.sql`DROP TABLE IF EXISTS users`;\n  await db.sql`CREATE TABLE IF NOT EXISTS users (\"id\" TEXT PRIMARY KEY, \"firstName\" TEXT, \"lastName\" TEXT, \"email\" TEXT)`;\n\n  // Add a new user\n  const userId = String(Math.round(Math.random() * 10_000));\n  await db.sql`INSERT INTO users VALUES (${userId}, 'John', 'Doe', '')`;\n\n  // Query for users\n  const { rows } = await db.sql`SELECT * FROM users WHERE id = ${userId}`;\n\n  return {\n    rows,\n  };\n});\n```\n\nThis snippet shows you how to usage example, which is an important aspect of sql database.\n\n**Database Configuration Example**:\n\n```yaml\nexport default defineNitroConfig({\n  database: {\n    default: {\n      connector: 'sqlite',\n      options: { name: 'db' }\n    },\n    users: {\n      connector: 'postgresql',\n      url: 'postgresql://username:password@hostname:port/database_name'\n    }\n  }\n})\n```\n\nThis snippet shows you how to database configuration example, which is an important aspect of sql database.\n\n", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "code_examples", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using SQL Database in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDatabase support is currently experimental. Refer to the db0 issues for status and bug report.\n\nEnable the experimental feature flag to use the database layer.\n\nInstall the better-sqlite3 dependency for SQLite support.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/database", "title": "SQL Database", "description": "Nitro provides a built-in and lightweight SQL database layer.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:07:54", "type": "best_practices", "page_metadata": {"og:image:type": "image/png", "twitter:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:height": "600", "viewport": "width=device-width, initial-scale=1", "twitter:image:height": "600", "ogImage": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "og:image:alt": "Nitro provides a built-in and lightweight SQL database layer.", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image": "https://nitro.build/_og/guide/database.png?name=Nitro&title=SQL+Database&description=Nitro+provides+a+built-in+and+lightweight+SQL+database+layer.", "twitter:image:width": "1200", "description": "Nitro provides a built-in and lightweight SQL database layer.", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "title": "SQL Database - Nitro", "scrapeId": "aa2595d9-0f2a-4a77-b6d2-030b9f077bcf", "sourceURL": "https://nitro.build/guide/database", "url": "https://nitro.build/guide/database", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what TypeScript is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain TypeScript in nitro-guide.\n\n# TypeScript\n\nNitro automatically generates the types for auto-imports and server routes ✨Here's a quick rundown of what this is about:\n\n## tsconfig.json\n\nTo leverage type hints within your project, create a `tsconfig.json` file that extends auto-generated types.\n\n```json\n{\n  \"extends\": \"./.nitro/types/tsconfig.json\"\n}\n```\n\nStarter templates have this file by default and usually you don't need to do anything. If this file does not exists, you can manually create it.\n\n## Prepare types\n\nYou can use `prepare` command to auto generate the types.\nThis can be useful in a CI environment or as a `postinstall` command in your `package.json`.\n\n```bash\nnpx nitro prepare\n```\n\nWhen using `nitro dev` command, types are also auto-generated!\n\nFor [Nuxt](https://nuxt.com/) you should use `nuxi generate`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/typescript", "title": "TypeScript", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:08:01", "type": "overview", "page_metadata": {"og:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "title": "TypeScript - Nitro", "og:image:height": "600", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "og:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "twitter:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "og:image:width": "1200", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "scrapeId": "c4f22634-dfc2-4f54-9cee-cc1a877eff87", "sourceURL": "https://nitro.build/guide/typescript", "url": "https://nitro.build/guide/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I tsconfig.json in nitro-guide?\n\nAssistant: To tsconfig.json in nitro-guide, here's what you do:\nTo leverage type hints within your project, create a `tsconfig.json` file that extends auto-generated types.\n\n```json\n{\n  \"extends\": \"./.nitro/types/tsconfig.json\"\n}\n```\n\nStarter templates have this file by default and usually you don't need to do anything. If this file does not exists, you can manually create it..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/typescript", "title": "TypeScript", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:08:01", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "title": "TypeScript - Nitro", "og:image:height": "600", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "og:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "twitter:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "og:image:width": "1200", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "scrapeId": "c4f22634-dfc2-4f54-9cee-cc1a877eff87", "sourceURL": "https://nitro.build/guide/typescript", "url": "https://nitro.build/guide/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I prepare types in nitro-guide?\n\nAssistant: To prepare types in nitro-guide, here's what you do:\nYou can use `prepare` command to auto generate the types.\nThis can be useful in a CI environment or as a `postinstall` command in your `package.json`.\n\n```bash\nnpx nitro prepare\n```\n\nWhen using `nitro dev` command, types are also auto-generated!\n\nFor [Nuxt](https://nuxt.com/) you should use `nuxi generate`..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/typescript", "title": "TypeScript", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:08:01", "type": "section_detail", "page_metadata": {"og:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "title": "TypeScript - Nitro", "og:image:height": "600", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "og:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "twitter:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "og:image:width": "1200", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "scrapeId": "c4f22634-dfc2-4f54-9cee-cc1a877eff87", "sourceURL": "https://nitro.build/guide/typescript", "url": "https://nitro.build/guide/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for TypeScript in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**tsconfig.json example**:\n\n```yaml\n{\n  \"extends\": \"./.nitro/types/tsconfig.json\"\n}\n```\n\nThis snippet shows you how to tsconfig.json example, which is an important aspect of typescript.\n\n**Prepare types command**:\n\n```yaml\nnpx nitro prepare\n```\n\nThis snippet shows you how to prepare types command, which is an important aspect of typescript.\n\n", "metadata": {"source_url": "https://nitro.build/guide/typescript", "title": "TypeScript", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:08:01", "type": "code_examples", "page_metadata": {"og:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "title": "TypeScript - Nitro", "og:image:height": "600", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "og:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "twitter:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "og:image:width": "1200", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "scrapeId": "c4f22634-dfc2-4f54-9cee-cc1a877eff87", "sourceURL": "https://nitro.build/guide/typescript", "url": "https://nitro.build/guide/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using TypeScript in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStarter templates have the tsconfig.json file by default, usually no action is needed.\n\nIf tsconfig.json does not exist, you can manually create it.\n\nUse the prepare command in CI environments or as a postinstall command.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/typescript", "title": "TypeScript", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:08:01", "type": "best_practices", "page_metadata": {"og:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "title": "TypeScript - Nitro", "og:image:height": "600", "description": "Nitro automatically generates the types for auto-imports and server routes ✨", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "og:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "twitter:image:alt": "Nitro automatically generates the types for auto-imports and server routes ✨", "og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "og:image:width": "1200", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "twitter:image": "https://nitro.build/_og/guide/typescript.png?name=Nitro&title=TypeScript&description=Nitro+automatically+generates+the+types+for+auto-imports+and+server+routes+%E2%9C%A8", "scrapeId": "c4f22634-dfc2-4f54-9cee-cc1a877eff87", "sourceURL": "https://nitro.build/guide/typescript", "url": "https://nitro.build/guide/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Fetch is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Fetch in nitro-guide.\n\n# Fetch\n\nNitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.Here's a quick rundown of what this is about:\n\n## Usage\n\nIn your handler, you've just to call the `$fetch` function to make a request. The response will be automatically parsed.\n\nRouter Handler\n\n```javascript\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\nYou can pass a generic type to the `$fetch` function to get a better type inference.\n\nRouter Handler\n\n```javascript\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\nYou can pass many options to the `$fetch` function like the method, headers, body, query, etc.\n\nRouter Handler\n\n```javascript\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://api.github.com/markdown', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      text: 'Hello **world**!'\n    }\n  })\n\n  return data\n})\n```\n\nSee more about the usage of the `$fetch` function in the [unjs/ofetch](https://ofetch.unjs.io/) documentation.\n\n## In-Server fetch\n\nYou can also use the `$fetch` function to make internal requests to other handlers.\n\nRouter Handler\n\n```javascript\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('/api/users')\n\n  return data\n})\n```\n\nIn reality, no fetch request is made and the handler is directly called thanks to [unjs/unenv](https://unenv.unjs.io/). This is useful to avoid making HTTP request overhead.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/fetch", "title": "Fetch", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:27", "type": "overview", "page_metadata": {"og:image:type": "image/png", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:height": "600", "og:image:width": "1200", "viewport": "width=device-width, initial-scale=1", "og:image:height": "600", "title": "Fetch - Nitro", "ogImage": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "og:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "scrapeId": "909a8557-e2ed-428c-9e0c-87041b10e30f", "sourceURL": "https://nitro.build/guide/fetch", "url": "https://nitro.build/guide/fetch", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I usage in nitro-guide?\n\nAssistant: To usage in nitro-guide, here's what you do:\nIn your handler, you've just to call the `$fetch` function to make a request. The response will be automatically parsed.\n\nRouter Handler\n\n```javascript\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\nYou can pass a generic type to the `$fetch` function to get a better type inference.\n\nRouter Handler\n\n```javascript\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\nYou can pass many options to the `$fetch` function like the method, headers, body, query, etc.\n\nRouter Handler\n\n```javascript\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://api.github.com/markdown', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      text: 'Hello **world**!'\n    }\n  })\n\n  return data\n})\n```\n\nSee more about the usage of the `$fetch` function in the [unjs/ofetch](https://ofetch.unjs.io/) documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/fetch", "title": "Fetch", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:height": "600", "og:image:width": "1200", "viewport": "width=device-width, initial-scale=1", "og:image:height": "600", "title": "Fetch - Nitro", "ogImage": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "og:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "scrapeId": "909a8557-e2ed-428c-9e0c-87041b10e30f", "sourceURL": "https://nitro.build/guide/fetch", "url": "https://nitro.build/guide/fetch", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I in-server fetch in nitro-guide?\n\nAssistant: To in-server fetch in nitro-guide, here's what you do:\nYou can also use the `$fetch` function to make internal requests to other handlers.\n\nRouter Handler\n\n```javascript\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('/api/users')\n\n  return data\n})\n```\n\nIn reality, no fetch request is made and the handler is directly called thanks to [unjs/unenv](https://unenv.unjs.io/). This is useful to avoid making HTTP request overhead..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/fetch", "title": "Fetch", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:height": "600", "og:image:width": "1200", "viewport": "width=device-width, initial-scale=1", "og:image:height": "600", "title": "Fetch - Nitro", "ogImage": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "og:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "scrapeId": "909a8557-e2ed-428c-9e0c-87041b10e30f", "sourceURL": "https://nitro.build/guide/fetch", "url": "https://nitro.build/guide/fetch", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Fetch in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Fetch Example**:\n\n```yaml\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\nThis snippet shows you how to basic fetch example, which is an important aspect of fetch.\n\n**Generic Type Fetch Example**:\n\n```yaml\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\nThis snippet shows you how to generic type fetch example, which is an important aspect of fetch.\n\n**Fetch with Options Example**:\n\n```yaml\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://api.github.com/markdown', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      text: 'Hello **world**!'\n    }\n  })\n\n  return data\n})\n```\n\nThis snippet shows you how to fetch with options example, which is an important aspect of fetch.\n\n**In-Server Fetch Example**:\n\n```yaml\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('/api/users')\n\n  return data\n})\n```\n\nThis snippet shows you how to in-server fetch example, which is an important aspect of fetch.\n\n", "metadata": {"source_url": "https://nitro.build/guide/fetch", "title": "Fetch", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:27", "type": "code_examples", "page_metadata": {"og:image:type": "image/png", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:height": "600", "og:image:width": "1200", "viewport": "width=device-width, initial-scale=1", "og:image:height": "600", "title": "Fetch - Nitro", "ogImage": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "og:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "scrapeId": "909a8557-e2ed-428c-9e0c-87041b10e30f", "sourceURL": "https://nitro.build/guide/fetch", "url": "https://nitro.build/guide/fetch", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Fetch in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can pass a generic type to the `$fetch` function for better type inference.\n\nUse the `$fetch` function to make internal requests to other handlers to avoid HTTP request overhead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/fetch", "title": "Fetch", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:27", "type": "best_practices", "page_metadata": {"og:image:type": "image/png", "description": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:site": "@unjsio", "twitter:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:height": "600", "og:image:width": "1200", "viewport": "width=device-width, initial-scale=1", "og:image:height": "600", "title": "Fetch - Nitro", "ogImage": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "twitter:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "og:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "twitter:image:alt": "Nitro provides a built-in fetch API that can be used to get data from server endpoints or from other sources. It's built on top of the unjs/ofetch.", "og:image": "https://nitro.build/_og/guide/fetch.png?name=Nitro&title=Fetch&description=Nitro+provides+a+built-in+fetch+API+that+can+be+used+to+get+data+from+server+endpoints+or+from+other+sources.+It%27s+built+on+top+of+the+unjs%2Fofetch.", "scrapeId": "909a8557-e2ed-428c-9e0c-87041b10e30f", "sourceURL": "https://nitro.build/guide/fetch", "url": "https://nitro.build/guide/fetch", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Nightly Channel is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Nightly Channel in nitro-guide.\n\n# Nightly Channel\n\nNitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.Here's a quick rundown of what this is about:\n\n## Opting in to the Nightly Release Channel\n\nYou can opt-in to the nightly release channel by updating your `package.json`:\n\nNitroNuxt\n\n```\n{\n  \"devDependencies\": {\n--    \"nitropack\": \"^2.0.0\"\n++    \"nitropack\": \"npm:nitropack-nightly@latest\"\n  }\n}\n```\n\nIf you are using Nuxt, [use the Nuxt nightly channel](https://nuxt.com/docs/guide/going-further/nightly-release-channel#opting-in) as it already includes `nitropack-nightly`.\n\nRemove the lockfile ( `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, or `bun.lockb`) and reinstall the dependencies.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/nightly", "title": "Nightly Channel", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:05", "type": "overview", "page_metadata": {"og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "twitter:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:width": "1200", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "title": "Nightly Channel - Nitro", "twitter:site": "@unjsio", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "scrapeId": "4f9a6777-5b8f-40ed-96c6-683aa18bb818", "sourceURL": "https://nitro.build/guide/nightly", "url": "https://nitro.build/guide/nightly", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I opting in to the nightly release channel in nitro-guide?\n\nAssistant: To opting in to the nightly release channel in nitro-guide, here's what you do:\nYou can opt-in to the nightly release channel by updating your `package.json`:\n\nNitroNuxt\n\n```\n{\n  \"devDependencies\": {\n--    \"nitropack\": \"^2.0.0\"\n++    \"nitropack\": \"npm:nitropack-nightly@latest\"\n  }\n}\n```\n\nIf you are using Nuxt, [use the Nuxt nightly channel](https://nuxt.com/docs/guide/going-further/nightly-release-channel#opting-in) as it already includes `nitropack-nightly`.\n\nRemove the lockfile ( `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, or `bun.lockb`) and reinstall the dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/nightly", "title": "Nightly Channel", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:05", "type": "section_detail", "page_metadata": {"og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "twitter:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:width": "1200", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "title": "Nightly Channel - Nitro", "twitter:site": "@unjsio", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "scrapeId": "4f9a6777-5b8f-40ed-96c6-683aa18bb818", "sourceURL": "https://nitro.build/guide/nightly", "url": "https://nitro.build/guide/nightly", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Nightly Channel in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Updating package.json for Nightly Release Channel**:\n\n```yaml\n{\n  \"devDependencies\": {\n--    \"nitropack\": \"^2.0.0\"\n++    \"nitropack\": \"npm:nitropack-nightly@latest\"\n  }\n}\n```\n\nThis snippet shows you how to updating package.json for nightly release channel, which is an important aspect of nightly channel.\n\n", "metadata": {"source_url": "https://nitro.build/guide/nightly", "title": "Nightly Channel", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:05", "type": "code_examples", "page_metadata": {"og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "twitter:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:width": "1200", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "title": "Nightly Channel - Nitro", "twitter:site": "@unjsio", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "scrapeId": "4f9a6777-5b8f-40ed-96c6-683aa18bb818", "sourceURL": "https://nitro.build/guide/nightly", "url": "https://nitro.build/guide/nightly", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Nightly Channel in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRemove the lockfile ( `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, or `bun.lockb`) and reinstall the dependencies.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/nightly", "title": "Nightly Channel", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:12:05", "type": "best_practices", "page_metadata": {"og:image:type": "image/png", "ogImage": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "twitter:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "og:image:height": "600", "og:image": "https://nitro.build/_og/guide/nightly.png?name=Nitro&title=Nightly+Channel&description=Nitro+has+a+nightly+release+channel+that+automatically+releases+for+every+commit+to+main+branch+to+try+latest+changes.", "twitter:image:width": "1200", "twitter:image:height": "600", "favicon": "https://nitro.build/icon.svg", "og:image:width": "1200", "title": "Nightly Channel - Nitro", "twitter:site": "@unjsio", "description": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Nitro has a nightly release channel that automatically releases for every commit to main branch to try latest changes.", "scrapeId": "4f9a6777-5b8f-40ed-96c6-683aa18bb818", "sourceURL": "https://nitro.build/guide/nightly", "url": "https://nitro.build/guide/nightly", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Assets is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Assets in nitro-guide.\n\n# Assets\n\nThis page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.Here's a quick rundown of what this is about:\n\n## Public assets\n\nNitro handles assets via the `public/` directory.\n\nAll assets in `public/` directory will be automatically served. This means that you can access them directly from the browser without any special configuration.\n\n```\npublic/\n  image.png     <-- /image.png\n  video.mp4     <-- /video.mp4\n  robots.txt    <-- /robots.txt\npackage.json\nnitro.config.ts\n``\n\n### Production public assets\n\nWhen building your Nitro app, the `public/` directory will be copied to `.output/public/` and a manifest with metadata will be created and embedded in the server bundle.\n\n```\n{\n  \"/image.png\": {\n    \"type\": \"image/png\",\n    \"etag\": \"\\\"4a0c-6utWq0Kbk5OqDmksYCa9XV8irnM\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 18956\n  },\n  \"/robots.txt\": {\n    \"type\": \"text/plain; charset=utf-8\",\n    \"etag\": \"\\\"8-hMqyDrA8fJ0R904zgEPs3L55Jls\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 8\n  },\n  \"/video.mp4\": {\n    \"type\": \"video/mp4\",\n    \"etag\": \"\\\"9b943-4UwfQXKUjPCesGPr6J5j7GzNYGU\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.085Z\",\n    \"size\": 637251\n  }\n}\n```\n\nThis allows Nitro to know the public assets without scanning the directory, giving high performance with caching headers.\n\n## Server assets\n\nAll assets in `assets/` directory will be added to the server bundle. After building your application, you can find them in the `.output/server/chunks/raw/` directory. Be careful with the size of your assets, as they will be bundled with the server bundle.\n\nThey can be addressed by the `assets:server` mount point using the [storage layer](https://nitro.build/guide/storage).\n\nFor example, you could store a json file in `assets/data.json` and retrieve it in your handler:\n\n```\nexport default defineEventHandler(async () => {\n  const data = await useStorage('assets:server').getItem(`data.json`)\n  return data\n})\n``\n\n## Custom server assets\n\nIn order to add assets from a custom directory, you will need to define a path in your nitro config. This allows you to add assets from a directory outside of the `assets/` directory.\n\n```\nnitro.config.tsnuxt.config.ts\nexport default defineNitroConfig({\n  serverAssets: [{\n    baseName: 'my_directory',\n    dir: './my_directory'\n  }]\n})\n```\n\nYou could want to add a directory with html templates for example.\n\n```\nnitro.config.tsnuxt.config.ts\nexport default defineNitroConfig({\n  serverAssets: [{\n    baseName: 'templates',\n    dir: './templates'\n  }]\n})\n```\n\nThen you can use the `assets:templates` base to retrieve your assets.\n\n```\nhandlers/success.ts\nexport default defineEventHandler(async (event) => {\n  const html = await useStorage('assets:templates').getItem(`success.html`)\n  return html\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/assets", "title": "Assets", "description": "This page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:12:49", "type": "overview", "page_metadata": {"description": "", "twitter:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "title": "Assets - Nitro", "twitter:image:height": "600", "twitter:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "og:image:type": "image/png", "og:image:height": "600", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "scrapeId": "b9367bb6-18cb-4b51-88a6-ddece4d09fee", "sourceURL": "https://nitro.build/guide/assets", "url": "https://nitro.build/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I public assets in nitro-guide?\n\nAssistant: To public assets in nitro-guide, here's what you do:\nNitro handles assets via the `public/` directory.\n\nAll assets in `public/` directory will be automatically served. This means that you can access them directly from the browser without any special configuration.\n\n```\npublic/\n  image.png     <-- /image.png\n  video.mp4     <-- /video.mp4\n  robots.txt    <-- /robots.txt\npackage.json\nnitro.config.ts\n``\n\n### Production public assets\n\nWhen building your Nitro app, the `public/` directory will be copied to `.output/public/` and a manifest with metadata will be created and embedded in the server bundle.\n\n```\n{\n  \"/image.png\": {\n    \"type\": \"image/png\",\n    \"etag\": \"\\\"4a0c-6utWq0Kbk5OqDmksYCa9XV8irnM\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 18956\n  },\n  \"/robots.txt\": {\n    \"type\": \"text/plain; charset=utf-8\",\n    \"etag\": \"\\\"8-hMqyDrA8fJ0R904zgEPs3L55Jls\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 8\n  },\n  \"/video.mp4\": {\n    \"type\": \"video/mp4\",\n    \"etag\": \"\\\"9b943-4UwfQXKUjPCesGPr6J5j7GzNYGU\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.085Z\",\n    \"size\": 637251\n  }\n}\n```\n\nThis allows Nitro to know the public assets without scanning the directory, giving high performance with caching headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/assets", "title": "Assets", "description": "This page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:12:49", "type": "section_detail", "page_metadata": {"description": "", "twitter:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "title": "Assets - Nitro", "twitter:image:height": "600", "twitter:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "og:image:type": "image/png", "og:image:height": "600", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "scrapeId": "b9367bb6-18cb-4b51-88a6-ddece4d09fee", "sourceURL": "https://nitro.build/guide/assets", "url": "https://nitro.build/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I server assets in nitro-guide?\n\nAssistant: To server assets in nitro-guide, here's what you do:\nAll assets in `assets/` directory will be added to the server bundle. After building your application, you can find them in the `.output/server/chunks/raw/` directory. Be careful with the size of your assets, as they will be bundled with the server bundle.\n\nThey can be addressed by the `assets:server` mount point using the [storage layer](https://nitro.build/guide/storage).\n\nFor example, you could store a json file in `assets/data.json` and retrieve it in your handler:\n\n```\nexport default defineEventHandler(async () => {\n  const data = await useStorage('assets:server').getItem(`data.json`)\n  return data\n})\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/assets", "title": "Assets", "description": "This page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:12:49", "type": "section_detail", "page_metadata": {"description": "", "twitter:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "title": "Assets - Nitro", "twitter:image:height": "600", "twitter:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "og:image:type": "image/png", "og:image:height": "600", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "scrapeId": "b9367bb6-18cb-4b51-88a6-ddece4d09fee", "sourceURL": "https://nitro.build/guide/assets", "url": "https://nitro.build/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I custom server assets in nitro-guide?\n\nAssistant: To custom server assets in nitro-guide, here's what you do:\nIn order to add assets from a custom directory, you will need to define a path in your nitro config. This allows you to add assets from a directory outside of the `assets/` directory.\n\n```\nnitro.config.tsnuxt.config.ts\nexport default defineNitroConfig({\n  serverAssets: [{\n    baseName: 'my_directory',\n    dir: './my_directory'\n  }]\n})\n```\n\nYou could want to add a directory with html templates for example.\n\n```\nnitro.config.tsnuxt.config.ts\nexport default defineNitroConfig({\n  serverAssets: [{\n    baseName: 'templates',\n    dir: './templates'\n  }]\n})\n```\n\nThen you can use the `assets:templates` base to retrieve your assets.\n\n```\nhandlers/success.ts\nexport default defineEventHandler(async (event) => {\n  const html = await useStorage('assets:templates').getItem(`success.html`)\n  return html\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/assets", "title": "Assets", "description": "This page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:12:49", "type": "section_detail", "page_metadata": {"description": "", "twitter:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "title": "Assets - Nitro", "twitter:image:height": "600", "twitter:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "og:image:type": "image/png", "og:image:height": "600", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "scrapeId": "b9367bb6-18cb-4b51-88a6-ddece4d09fee", "sourceURL": "https://nitro.build/guide/assets", "url": "https://nitro.build/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Assets in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Public Assets Structure**:\n\n```yaml\n```\npublic/\n  image.png     <-- /image.png\n  video.mp4     <-- /video.mp4\n  robots.txt    <-- /robots.txt\npackage.json\nnitro.config.ts\n```\n```\n\nThis snippet shows you how to public assets structure, which is an important aspect of assets.\n\n**Production Public Assets Manifest**:\n\n```yaml\n```\n{\n  \"/image.png\": {\n    \"type\": \"image/png\",\n    \"etag\": \"\\\"4a0c-6utWq0Kbk5OqDmksYCa9XV8irnM\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 18956\n  },\n  \"/robots.txt\": {\n    \"type\": \"text/plain; charset=utf-8\",\n    \"etag\": \"\\\"8-hMqyDrA8fJ0R904zgEPs3L55Jls\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 8\n  },\n  \"/video.mp4\": {\n    \"type\": \"video/mp4\",\n    \"etag\": \"\\\"9b943-4UwfQXKUjPCesGPr6J5j7GzNYGU\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.085Z\",\n    \"size\": 637251\n  }\n}\n```\n```\n\nThis snippet shows you how to production public assets manifest, which is an important aspect of assets.\n\n**Retrieve Data from Server Assets**:\n\n```yaml\n```\nexport default defineEventHandler(async () => {\n  const data = await useStorage('assets:server').getItem(`data.json`)\n  return data\n})\n```\n```\n\nThis snippet shows you how to retrieve data from server assets, which is an important aspect of assets.\n\n**Custom Server Assets Configuration**:\n\n```yaml\n```\nnitro.config.tsnuxt.config.ts\nexport default defineNitroConfig({\n  serverAssets: [{\n    baseName: 'my_directory',\n    dir: './my_directory'\n  }]\n})\n```\n```\n\nThis snippet shows you how to custom server assets configuration, which is an important aspect of assets.\n\n**Retrieve HTML from Custom Server Assets**:\n\n```yaml\n```\nhandlers/success.ts\nexport default defineEventHandler(async (event) => {\n  const html = await useStorage('assets:templates').getItem(`success.html`)\n  return html\n})\n```\n```\n\nThis snippet shows you how to retrieve html from custom server assets, which is an important aspect of assets.\n\n", "metadata": {"source_url": "https://nitro.build/guide/assets", "title": "Assets", "description": "This page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:12:49", "type": "code_examples", "page_metadata": {"description": "", "twitter:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "title": "Assets - Nitro", "twitter:image:height": "600", "twitter:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "og:image:type": "image/png", "og:image:height": "600", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "scrapeId": "b9367bb6-18cb-4b51-88a6-ddece4d09fee", "sourceURL": "https://nitro.build/guide/assets", "url": "https://nitro.build/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Assets in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe careful with the size of your assets, as they will be bundled with the server bundle.\n\nUse caching headers for high performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/assets", "title": "Assets", "description": "This page covers how Nitro handles assets via the public and server directories, including public assets, production public assets, server assets, and custom server assets.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:12:49", "type": "best_practices", "page_metadata": {"description": "", "twitter:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "og:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "twitter:image:width": "1200", "twitter:site": "@unjsio", "og:image": "https://nitro.build/_og/guide/assets.png?name=Nitro&title=Assets&description=Create+web+servers+with+everything+you+need+and+deploy+them+wherever+you+prefer.", "title": "Assets - Nitro", "twitter:image:height": "600", "twitter:image:alt": "Create web servers with everything you need and deploy them wherever you prefer.", "og:image:type": "image/png", "og:image:height": "600", "og:image:width": "1200", "favicon": "https://nitro.build/icon.svg", "scrapeId": "b9367bb6-18cb-4b51-88a6-ddece4d09fee", "sourceURL": "https://nitro.build/guide/assets", "url": "https://nitro.build/guide/assets", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what Server Routes is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain Server Routes in nitro-guide.\n\n# Server Routes\n\nNitro supports filesystem routing to automatically map files to h3 routes.Here's a quick rundown of what this is about:\n\n## Event handlers\n\nAn [event handler](https://h3.unjs.io/guide/event-handler) is a function that will be binded to a route and executed when the route is matched by the router for an incoming request.\n\nRead more in h3.unjs.io/guide/event-handler.\n\n## Filesystem routing\n\nNitro supports file-based routing for your API routes (files are automatically mapped to [h3 routes](https://h3.unjs.io/guide/router)). Defining a route is as simple as creating a file inside the `api/` or `routes/` directory.\n\nYou can only define one handler per files and you can [append the HTTP method](https://nitro.build/guide/routing#specific-request-method) to the filename to define a specific request method.\n\n```\napi/\n  test.ts      <-- /api/test\nroutes/\n  hello.get.ts     <-- GET /hello\n  hello.post.ts    <-- POST /hello\nnitro.config.ts\n```\n\nYou can nest routes by creating subdirectories.\n\n```\nroutes/\n  communities/\n    index.get.ts\n    index.post.ts\n    [id]/\n        index.get.ts\n        index.post.ts\n  hello.get.ts\n  hello.post.ts\n```\n\nIf you are using [Nuxt](https://nuxt.com/), move the `server/api/` and `server/routes/` instead.\n\nSome providers like Vercel use a top-level `api/` directory as a feature, therefore routes placed in `/api` won't work.\nYou will have to use `routes/api/`.\n\n## Simple routes\n\nFirst, create a file in `routes/` or `api/` directory. The filename will be the route path.\n\nThen, export a function wrapped in `defineEventHandler` that will be executed when the route is matched.\n\n/api/test.ts\n\n```\nexport default defineEventHandler(() => {\n  return { hello: 'API' }\n})\n```\n\n\n## Route with params\n\n#### Single param\nTo define a route with params, use the `[<param>]` syntax where `<param>` is the name of the param. The param will be available in the `event.context.params` object or using the `getRouterParam` utility from [unjs/h3](https://h3.unjs.io/).\n\n/routes/hello/[name].ts\n\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\nCall the route with the param `/hello/nitro`, you will get:\n\nResponse\n\n```\nHello nitro!\n```\n\n#### Multiple params\nYou can define multiple params in a route using `[<param1>]/[<param2>]` syntax where each param is a folder. You **cannot** define multiple params in a single filename of folder.\n\n/routes/hello/[name]/[age].ts\n\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n  const age = getRouterParam(event, 'age')\n\n  return `Hello ${name}! You are ${age} years old.`\n})\n```\n\n#### Catch all params\nYou can capture all the remaining parts of a URL using `[...<param>]` syntax. This will include the `/` in the param.\n\n/routes/hello/[...name].ts\n\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\nCall the route with the param `/hello/nitro/is/hot`, you will get:\n\nResponse\n\n```\nHello nitro/is/hot!\n```\n\n\n## Specific request method\n\nYou can append the HTTP method to the filename to force the route to be matched only for a specific HTTP request method, for example `hello.get.ts` will only match for `GET` requests. You can use any HTTP method you want.\n\n```javascript\n// routes/users/[id].get.ts\nexport default defineEventHandler(async (event) => {\n  const id = getRouterParam(event, 'id')\n\n  // Do something with id\n\n  return `User profile!`\n})\n```\n\n## Catch all route\n\nYou can create a special route that will match all routes that are not matched by any other route. This is useful for creating a default route.\n\nTo create a catch all route, create a file named `[...].ts` in the `routes/` or `api/` directory or in any subdirectory.\n\n/routes/[...].ts\n\n```\nexport default defineEventHandler(event => {\n  const url = getRequestURL(event)\n\n  return `Hello ${url}!`\n})\n```\n\n## Environment specific handlers\n\nYou can specify for a route that will only be included in specific builds by adding a `.dev`, `.prod` or `.prerender` suffix to the file name, for example: `routes/test.get.dev.ts` or `routes/test.get.prod.ts`.\n\nYou can specify multiple environments or specify a preset name as environment using programmatic registration of routes via `handlers[]` config.\n\n## Middleware\n\nNitro route middleware can hook into the request lifecycle.\n\nA middleware can modify the request before it is processed, not after.\n\nRead more in h3.unjs.io/guide/event-handler#middleware.\n\nMiddleware are auto-registered within the `middleware/` directory.\n\n```\nroutes/\n  hello.ts\nmiddleware/\n  auth.ts\n  logger.ts\n  ...\nnitro.config.ts\n```\n\n## Simple middleware\n\nMiddleware are defined exactly like route handlers with the only exception that they should not return anything.\nReturning from middleware behaves like returning from a request - the value will be returned as a response and further code will not be ran.\n\nmiddleware/auth.ts\n\n```\nexport default defineEventHandler((event) => {\n  // Extends or modify the event\n  event.context.user = { name: 'Nitro' }\n})\n```\n\nMiddleware in `middleware/` directory are automatically registered for all routes. If you want to register a middleware for a specific route, see [Object Syntax Event Handler](https://h3.unjs.io/guide/event-handler#object-syntax).\n\nReturning anything from a middleware will close the request and should be avoided! Any returned value from middleware will be the response and further code will not be executed however **this is not recommended to do!**\n\n## Route Meta\n\nYou can define route handler meta at build-time using `defineRouteMeta` micro in the event handler files.\n\n🚧 This feature is currently experimental.\n\n/api/test.ts\n\n```\ndefineRouteMeta({\n  openAPI: {\n    tags: [\"test\"],\n    description: \"Test route description\",\n    parameters: [{ in: \"query\", name: \"test\", required: true }],\n  },\n});\n\nexport default defineEventHandler(() => \"OK\");\n```\n\nThis feature is currently usable to specify OpenAPI meta. See swagger specification for available OpenAPI options.\n\n## Execution order\n\nMiddleware are executed in directory listing order.\n\n```\nmiddleware/\n  auth.ts <-- First\n  logger.ts <-- Second\n  ... <-- Third\n```\n\nPrefix middleware with a number to control their execution order.\n\n```\nmiddleware/\n  1.logger.ts <-- First\n  2.auth.ts <-- Second\n  3.... <-- Third\n```\n\nRemember that file names are sorted as strings, thus for example if you have 3 files `1.filename.ts`, `2.filename.ts` and `10.filename.ts`, the `10.filename.ts` will come after the `1.filename.ts`. To avoid this, prefix `1-9` with a `0` like `01`, if you have more than 10 middleware in the same directory.\n\n## Request filtering\n\nMiddleware are executed on every request.\n\nApply custom logic to scope them to specific conditions.\n\nFor example, you can use the URL to apply a middleware to a specific route:\n\nmiddleware/auth.ts\n\n```\nexport default defineEventHandler((event) => {\n  // Will only execute for /auth route\n  if (getRequestURL(event).pathname.startsWith('/auth')) {\n    event.context.user = { name: 'Nitro' }\n  }\n})\n```\n\n## Error handling\n\nYou can use the [utilities available in H3](https://h3.unjs.io/guide/event-handler#error-handling) to handle errors in both routes and middlewares.\nThe way errors are sent back to the client depends on the route's path. For most routes `Content-Type` is set to `text/html` by default and a simple html error page is delievered. If the route starts with `/api/` (either because it is placed in `api/` or `routes/api/`) the default will change to `application/json` and a JSON object will be sent.\nThis behaviour can be overridden by some request properties (e.g.: `Accept` or `User-Agent` headers).\n\n## Route Rules\n\nNitro allows you to add logic at the top-level for each route of your configuration. It can be used for redirecting, proxying, caching and adding headers to routes.\nIt is a map from route pattern (following [unjs/radix3](https://github.com/unjs/rou3/tree/radix3#route-matcher)) to route options.\n\nWhen `cache` option is set, handlers matching pattern will be automatically wrapped with `defineCachedEventHandler`. See the cache guide (https://nitro.build/guide/cache) to learn more about this function.\n\n`swr: true|number` is shortcut for `cache: { swr: true, maxAge: number }`\n\nYou can set route rules in `nitro.config.ts` using the `routeRules` option.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  routeRules: {\n    '/blog/**': { swr: true },\n    '/blog/**': { swr: 600 },\n    '/blog/**': { static: true },\n    '/blog/**': { cache: { /* cache options*/ } },\n    '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n    '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n    '/old-page': { redirect: '/new-page' },\n    '/old-page/**': { redirect: '/new-page/**' },\n    '/proxy/example': { proxy: 'https://example.com' },\n    '/proxy/**': { proxy: '/api/**' },\n  }\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "overview", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I event handlers in nitro-guide?\n\nAssistant: To event handlers in nitro-guide, here's what you do:\nAn [event handler](https://h3.unjs.io/guide/event-handler) is a function that will be binded to a route and executed when the route is matched by the router for an incoming request.\n\nRead more in h3.unjs.io/guide/event-handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I filesystem routing in nitro-guide?\n\nAssistant: To filesystem routing in nitro-guide, here's what you do:\nNitro supports file-based routing for your API routes (files are automatically mapped to [h3 routes](https://h3.unjs.io/guide/router)). Defining a route is as simple as creating a file inside the `api/` or `routes/` directory.\n\nYou can only define one handler per files and you can [append the HTTP method](https://nitro.build/guide/routing#specific-request-method) to the filename to define a specific request method.\n\n```\napi/\n  test.ts      <-- /api/test\nroutes/\n  hello.get.ts     <-- GET /hello\n  hello.post.ts    <-- POST /hello\nnitro.config.ts\n```\n\nYou can nest routes by creating subdirectories.\n\n```\nroutes/\n  communities/\n    index.get.ts\n    index.post.ts\n    [id]/\n        index.get.ts\n        index.post.ts\n  hello.get.ts\n  hello.post.ts\n```\n\nIf you are using [Nuxt](https://nuxt.com/), move the `server/api/` and `server/routes/` instead.\n\nSome providers like Vercel use a top-level `api/` directory as a feature, therefore routes placed in `/api` won't work.\nYou will have to use `routes/api/`..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I simple routes in nitro-guide?\n\nAssistant: To simple routes in nitro-guide, here's what you do:\nFirst, create a file in `routes/` or `api/` directory. The filename will be the route path.\n\nThen, export a function wrapped in `defineEventHandler` that will be executed when the route is matched.\n\n/api/test.ts\n\n```\nexport default defineEventHandler(() => {\n  return { hello: 'API' }\n})\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I route with params in nitro-guide?\n\nAssistant: To route with params in nitro-guide, here's what you do:\n#### Single param\nTo define a route with params, use the `[<param>]` syntax where `<param>` is the name of the param. The param will be available in the `event.context.params` object or using the `getRouterParam` utility from [unjs/h3](https://h3.unjs.io/).\n\n/routes/hello/[name].ts\n\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\nCall the route with the param `/hello/nitro`, you will get:\n\nResponse\n\n```\nHello nitro!\n```\n\n#### Multiple params\nYou can define multiple params in a route using `[<param1>]/[<param2>]` syntax where each param is a folder. You **cannot** define multiple params in a single filename of folder.\n\n/routes/hello/[name]/[age].ts\n\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n  const age = getRouterParam(event, 'age')\n\n  return `Hello ${name}! You are ${age} years old.`\n})\n```\n\n#### Catch all params\nYou can capture all the remaining parts of a URL using `[...<param>]` syntax. This will include the `/` in the param.\n\n/routes/hello/[...name].ts\n\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\nCall the route with the param `/hello/nitro/is/hot`, you will get:\n\nResponse\n\n```\nHello nitro/is/hot!\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I specific request method in nitro-guide?\n\nAssistant: To specific request method in nitro-guide, here's what you do:\nYou can append the HTTP method to the filename to force the route to be matched only for a specific HTTP request method, for example `hello.get.ts` will only match for `GET` requests. You can use any HTTP method you want.\n\n```javascript\n// routes/users/[id].get.ts\nexport default defineEventHandler(async (event) => {\n  const id = getRouterParam(event, 'id')\n\n  // Do something with id\n\n  return `User profile!`\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I catch all route in nitro-guide?\n\nAssistant: To catch all route in nitro-guide, here's what you do:\nYou can create a special route that will match all routes that are not matched by any other route. This is useful for creating a default route.\n\nTo create a catch all route, create a file named `[...].ts` in the `routes/` or `api/` directory or in any subdirectory.\n\n/routes/[...].ts\n\n```\nexport default defineEventHandler(event => {\n  const url = getRequestURL(event)\n\n  return `Hello ${url}!`\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I environment specific handlers in nitro-guide?\n\nAssistant: To environment specific handlers in nitro-guide, here's what you do:\nYou can specify for a route that will only be included in specific builds by adding a `.dev`, `.prod` or `.prerender` suffix to the file name, for example: `routes/test.get.dev.ts` or `routes/test.get.prod.ts`.\n\nYou can specify multiple environments or specify a preset name as environment using programmatic registration of routes via `handlers[]` config..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I middleware in nitro-guide?\n\nAssistant: To middleware in nitro-guide, here's what you do:\nNitro route middleware can hook into the request lifecycle.\n\nA middleware can modify the request before it is processed, not after.\n\nRead more in h3.unjs.io/guide/event-handler#middleware.\n\nMiddleware are auto-registered within the `middleware/` directory.\n\n```\nroutes/\n  hello.ts\nmiddleware/\n  auth.ts\n  logger.ts\n  ...\nnitro.config.ts\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I simple middleware in nitro-guide?\n\nAssistant: To simple middleware in nitro-guide, here's what you do:\nMiddleware are defined exactly like route handlers with the only exception that they should not return anything.\nReturning from middleware behaves like returning from a request - the value will be returned as a response and further code will not be ran.\n\nmiddleware/auth.ts\n\n```\nexport default defineEventHandler((event) => {\n  // Extends or modify the event\n  event.context.user = { name: 'Nitro' }\n})\n```\n\nMiddleware in `middleware/` directory are automatically registered for all routes. If you want to register a middleware for a specific route, see [Object Syntax Event Handler](https://h3.unjs.io/guide/event-handler#object-syntax).\n\nReturning anything from a middleware will close the request and should be avoided! Any returned value from middleware will be the response and further code will not be executed however **this is not recommended to do!**.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I route meta in nitro-guide?\n\nAssistant: To route meta in nitro-guide, here's what you do:\nYou can define route handler meta at build-time using `defineRouteMeta` micro in the event handler files.\n\n🚧 This feature is currently experimental.\n\n/api/test.ts\n\n```\ndefineRouteMeta({\n  openAPI: {\n    tags: [\"test\"],\n    description: \"Test route description\",\n    parameters: [{ in: \"query\", name: \"test\", required: true }],\n  },\n});\n\nexport default defineEventHandler(() => \"OK\");\n```\n\nThis feature is currently usable to specify OpenAPI meta. See swagger specification for available OpenAPI options..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I execution order in nitro-guide?\n\nAssistant: To execution order in nitro-guide, here's what you do:\nMiddleware are executed in directory listing order.\n\n```\nmiddleware/\n  auth.ts <-- First\n  logger.ts <-- Second\n  ... <-- Third\n```\n\nPrefix middleware with a number to control their execution order.\n\n```\nmiddleware/\n  1.logger.ts <-- First\n  2.auth.ts <-- Second\n  3.... <-- Third\n```\n\nRemember that file names are sorted as strings, thus for example if you have 3 files `1.filename.ts`, `2.filename.ts` and `10.filename.ts`, the `10.filename.ts` will come after the `1.filename.ts`. To avoid this, prefix `1-9` with a `0` like `01`, if you have more than 10 middleware in the same directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I request filtering in nitro-guide?\n\nAssistant: To request filtering in nitro-guide, here's what you do:\nMiddleware are executed on every request.\n\nApply custom logic to scope them to specific conditions.\n\nFor example, you can use the URL to apply a middleware to a specific route:\n\nmiddleware/auth.ts\n\n```\nexport default defineEventHandler((event) => {\n  // Will only execute for /auth route\n  if (getRequestURL(event).pathname.startsWith('/auth')) {\n    event.context.user = { name: 'Nitro' }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I error handling in nitro-guide?\n\nAssistant: To error handling in nitro-guide, here's what you do:\nYou can use the [utilities available in H3](https://h3.unjs.io/guide/event-handler#error-handling) to handle errors in both routes and middlewares.\nThe way errors are sent back to the client depends on the route's path. For most routes `Content-Type` is set to `text/html` by default and a simple html error page is delievered. If the route starts with `/api/` (either because it is placed in `api/` or `routes/api/`) the default will change to `application/json` and a JSON object will be sent.\nThis behaviour can be overridden by some request properties (e.g.: `Accept` or `User-Agent` headers)..\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I route rules in nitro-guide?\n\nAssistant: To route rules in nitro-guide, here's what you do:\nNitro allows you to add logic at the top-level for each route of your configuration. It can be used for redirecting, proxying, caching and adding headers to routes.\nIt is a map from route pattern (following [unjs/radix3](https://github.com/unjs/rou3/tree/radix3#route-matcher)) to route options.\n\nWhen `cache` option is set, handlers matching pattern will be automatically wrapped with `defineCachedEventHandler`. See the cache guide (https://nitro.build/guide/cache) to learn more about this function.\n\n`swr: true|number` is shortcut for `cache: { swr: true, maxAge: number }`\n\nYou can set route rules in `nitro.config.ts` using the `routeRules` option.\n\nnitro.config.tsnuxt.config.ts\n\n```\nexport default defineNitroConfig({\n  routeRules: {\n    '/blog/**': { swr: true },\n    '/blog/**': { swr: 600 },\n    '/blog/**': { static: true },\n    '/blog/**': { cache: { /* cache options*/ } },\n    '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n    '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n    '/old-page': { redirect: '/new-page' },\n    '/old-page/**': { redirect: '/new-page/**' },\n    '/proxy/example': { proxy: 'https://example.com' },\n    '/proxy/**': { proxy: '/api/**' },\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "section_detail", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for Server Routes in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Simple route example**:\n\n```yaml\nexport default defineEventHandler(() => {\n  return { hello: 'API' }\n})\n```\n\nThis snippet shows you how to simple route example, which is an important aspect of server routes.\n\n**Single param route example**:\n\n```yaml\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\nThis snippet shows you how to single param route example, which is an important aspect of server routes.\n\n**Multiple params route example**:\n\n```yaml\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n  const age = getRouterParam(event, 'age')\n\n  return `Hello ${name}! You are ${age} years old.`\n})\n```\n\nThis snippet shows you how to multiple params route example, which is an important aspect of server routes.\n\n**Catch all params route example**:\n\n```yaml\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\nThis snippet shows you how to catch all params route example, which is an important aspect of server routes.\n\n**Specific request method example**:\n\n```yaml\nexport default defineEventHandler(async (event) => {\n  const id = getRouterParam(event, 'id')\n\n  // Do something with id\n\n  return `User profile!`\n})\n```\n\nThis snippet shows you how to specific request method example, which is an important aspect of server routes.\n\n**Catch all route example**:\n\n```yaml\nexport default defineEventHandler(event => {\n  const url = getRequestURL(event)\n\n  return `Hello ${url}!`\n})\n```\n\nThis snippet shows you how to catch all route example, which is an important aspect of server routes.\n\n**Simple middleware example**:\n\n```yaml\nexport default defineEventHandler((event) => {\n  // Extends or modify the event\n  event.context.user = { name: 'Nitro' }\n})\n```\n\nThis snippet shows you how to simple middleware example, which is an important aspect of server routes.\n\n**Route Meta example**:\n\n```yaml\ndefineRouteMeta({\n  openAPI: {\n    tags: [\"test\"],\n    description: \"Test route description\",\n    parameters: [{ in: \"query\", name: \"test\", required: true }],\n  },\n});\n\nexport default defineEventHandler(() => \"OK\");\n```\n\nThis snippet shows you how to route meta example, which is an important aspect of server routes.\n\n**Route Rules example**:\n\n```yaml\nexport default defineNitroConfig({\n  routeRules: {\n    '/blog/**': { swr: true },\n    '/blog/**': { swr: 600 },\n    '/blog/**': { static: true },\n    '/blog/**': { cache: { /* cache options*/ } },\n    '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n    '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n    '/old-page': { redirect: '/new-page' },\n    '/old-page/**': { redirect: '/new-page/**' },\n    '/proxy/example': { proxy: 'https://example.com' },\n    '/proxy/**': { proxy: '/api/**' },\n  }\n})\n```\n\nThis snippet shows you how to route rules example, which is an important aspect of server routes.\n\n", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "code_examples", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using Server Routes in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can only define one handler per file and you can append the HTTP method to the filename to define a specific request method.\n\nIf you are using Nuxt, move the server/api/ and server/routes/ instead.\n\nSome providers like Vercel use a top-level api/ directory as a feature, therefore routes placed in /api won't work. You will have to use routes/api/.\n\nPrefix middleware with a number to control their execution order.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/routing", "title": "Server Routes", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:26:15", "type": "best_practices", "page_metadata": {"og:image:height": "600", "title": "Server Routes - Nitro", "description": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:site": "@unjsio", "ogImage": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "viewport": "width=device-width, initial-scale=1", "og:image:type": "image/png", "og:image:width": "1200", "twitter:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "og:image:alt": "Nitro supports filesystem routing to automatically map files to h3 routes.", "twitter:image:width": "1200", "twitter:image:height": "600", "og:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "twitter:image": "https://nitro.build/_og/guide/routing.png?name=Nitro&title=Server+Routes&description=Nitro+supports+filesystem+routing+to+automatically+map+files+to+h3+routes.", "favicon": "https://nitro.build/icon.svg", "scrapeId": "422eda72-e6b5-404c-b22d-68b8674eaa7f", "sourceURL": "https://nitro.build/guide/routing", "url": "https://nitro.build/guide/routing", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you explain what WebSocket is in nitro-guide?\n\nAssistant: Sure, I'd be happy to explain WebSocket in nitro-guide.\n\n# WebSocket\n\nNitro natively supports a cross platform WebSocket APIHere's a quick rundown of what this is about:\n\n## Opt-in to the experimental feature\n\nWebSockets support is currently experimental. See nitrojs/nitro#2171 for platform support status.\n\nIn order to enable websocket support you need to enable the experimental `websocket` feature flag.\n\n```typescript\nexport default defineNitroConfig({\n  experimental: {\n    websocket: true\n  }\n})\n```\n\n## Usage\n\nCreate a websocket handler in `routes/_ws.ts` (or `server/routes/_ws.ts` for Nuxt).\n\nYou can use any route like `routes/chatroom.ts` to register upgrade handler on `/chatroom`.\n\n```typescript\nexport default defineWebSocketHandler({\n  open(peer) {\n    peer.send({ user: \"server\", message: `Welcome ${peer}!` });\n    peer.publish(\"chat\", { user: \"server\", message: `${peer} joined!` });\n    peer.subscribe(\"chat\");\n  },\n  message(peer, message) {\n    if (message.text().includes(\"ping\")) {\n      peer.send({ user: \"server\", message: \"pong\" });\n    } else {\n      const msg = {\n        user: peer.toString(),\n        message: message.toString(),\n      };\n      peer.send(msg); // echo\n      peer.publish(\"chat\", msg);\n    }\n  },\n  close(peer) {\n    peer.publish(\"chat\", { user: \"server\", message: `${peer} left!` });\n  },\n});\n```\n\nNitro allows you defining multiple websocket handlers using same routing of event handlers.\n\nUse a client to connect to server. Example: ( `routes/websocket.ts` or `server/routes/websocket.ts` for Nuxt)\n\n```typescript\nexport default defineEventHandler(() => {\n  return /* html */ `<!doctype html>\n  <html lang=\"en\" data-theme=\"dark\">\n    <head>\n      <title>CrossWS Test Page</title>\n      <script src=\"https://cdn.tailwindcss.com\"></script>\n      <style>\n        body {\n          background-color: #1a1a1a;\n        }\n      </style>\n      <script type=\"module\">\n        // https://github.com/vuejs/petite-vue\n        import {\n          createApp,\n          reactive,\n          nextTick,\n        } from \"https://esm.sh/petite-vue@0.4.1\";\n\n        let ws;\n\n        const store = reactive({\n          message: \"\",\n          messages: [],\n        });\n\n        const scroll = () => {\n          nextTick(() => {\n            const el = document.querySelector(\"#messages\");\n            el.scrollTop = el.scrollHeight;\n            el.scrollTo({\n              top: el.scrollHeight,\n              behavior: \"smooth\",\n            });\n          });\n        };\n\n        const format = async () => {\n          for (const message of store.messages) {\n            if (!message._fmt && message.text.startsWith(\"{\")) {\n              message._fmt = true;\n              const { codeToHtml } = await import(\"https://esm.sh/shiki@1.0.0\");\n              const str = JSON.stringify(JSON.parse(message.text), null, 2);\n              message.formattedText = await codeToHtml(str, {\n                lang: \"json\",\n                theme: \"dark-plus\",\n              });\n            }\n          }\n        };\n\n        const log = (user, ...args) => {\n          console.log(\"[ws]\", user, ...args);\n          store.messages.push({\n            text: args.join(\" \"),\n            formattedText: \"\",\n            user: user,\n            date: new Date().toLocaleString(),\n          });\n          scroll();\n          format();\n        };\n\n        const connect = async () => {\n          const isSecure = location.protocol === \"https:\";\n          const url = (isSecure ? \"wss://\" : \"ws://\") + location.host + \"/_ws\";\n          if (ws) {\n            log(\"ws\", \"Closing previous connection before reconnecting...\");\n            ws.close();\n            clear();\n          }\n\n          log(\"ws\", \"Connecting to\", url, \"...\");\n          ws = new WebSocket(url);\n\n          ws.addEventListener(\"message\", async (event) => {\n            let data = typeof event.data === \"string\" ? data : await event.data.text();\n            const { user = \"system\", message = \"\" } = data.startsWith(\"{\")\n              ? JSON.parse(data)\n              : { message: data };\n            log(\n              user,\n              typeof message === \"string\" ? message : JSON.stringify(message),\n            );\n          });\n\n          await new Promise((resolve) => ws.addEventListener(\"open\", resolve));\n          log(\"ws\", \"Connected!\");\n        };\n\n        const clear = () => {\n          store.messages.splice(0, store.messages.length);\n          log(\"system\", \"previous messages cleared\");\n        };\n\n        const send = () => {\n          console.log(\"sending message...\");\n          if (store.message) {\n            ws.send(store.message);\n          }\n          store.message = \"\";\n        };\n\n        const ping = () => {\n          log(\"ws\", \"Sending ping\");\n          ws.send(\"ping\");\n        };\n\n        createApp({\n          store,\n          send,\n          ping,\n          clear,\n          connect,\n          rand: Math.random(),\n        }).mount();\n\n        await connect();\n      </script>\n    </head>\n    <body class=\"h-screen flex flex-col justify-between\">\n      <main v-scope=\"{}\">\n        <!-- Messages -->\n        <div id=\"messages\" class=\"flex-grow flex flex-col justify-end px-4 py-8\">\n          <div class=\"flex items-center mb-4\" v-for=\"message in store.messages\">\n            <div class=\"flex flex-col\">\n              <p class=\"text-gray-500 mb-1 text-xs ml-10\">{{ message.user }}</p>\n              <div class=\"flex items-center\">\n                <img\n                  :src=\"'https://www.gravatar.com/avatar/' + encodeURIComponent(message.user + rand) + '?s=512&d=monsterid'\"\n                  alt=\"Avatar\"\n                  class=\"w-8 h-8 rounded-full\"\n                />\n                <div class=\"ml-2 bg-gray-800 rounded-lg p-2\">\n                  <p\n                    v-if=\"message.formattedText\"\n                    class=\"overflow-x-scroll\"\n                    v-html=\"message.formattedText\"\n                  ></p>\n                  <p v-else class=\"text-white\">{{ message.text }}</p>\n                </div>\n              </div>\n              <p class=\"text-gray-500 mt-1 text-xs ml-10\">{{ message.date }}</p>\n            </div>\n          </div>\n        </div>\n\n        <!-- Chatbox -->\n        <div\n          class=\"bg-gray-800 px-4 py-2 flex items-center justify-between fixed bottom-0 w-full\"\n        >\n          <div class=\"w-full min-w-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Type your message...\"\n              class=\"w-full rounded-l-lg px-4 py-2 bg-gray-700 text-white focus:outline-none focus:ring focus:border-blue-300\"\n              @keydown.enter=\"send\"\n              v-model=\"store.message\"\n            />\n          </div>\n          <div class=\"flex\">\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"send\"\n            >\n              Send\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"ping\"\n            >\n              Ping\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"connect\"\n            >\n              Reconnect\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-r-lg\"\n              @click=\"clear\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </main>\n    </body>\n  </html>`;\n});\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://nitro.build/guide/websocket", "title": "WebSocket", "description": "Nitro natively supports a cross platform WebSocket API", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:38:45", "type": "overview", "page_metadata": {"og:image:height": "600", "og:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "og:image:width": "1200", "title": "WebSocket - Nitro", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro natively supports a cross platform WebSocket API", "ogImage": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image:width": "1200", "og:image:alt": "Nitro natively supports a cross platform WebSocket API", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "description": "Nitro natively supports a cross platform WebSocket API", "og:image:type": "image/png", "scrapeId": "bf139042-2708-4d4c-8885-5530f7660491", "sourceURL": "https://nitro.build/guide/websocket", "url": "https://nitro.build/guide/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I opt-in to the experimental feature in nitro-guide?\n\nAssistant: To opt-in to the experimental feature in nitro-guide, here's what you do:\nWebSockets support is currently experimental. See nitrojs/nitro#2171 for platform support status.\n\nIn order to enable websocket support you need to enable the experimental `websocket` feature flag.\n\n```typescript\nexport default defineNitroConfig({\n  experimental: {\n    websocket: true\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/websocket", "title": "WebSocket", "description": "Nitro natively supports a cross platform WebSocket API", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:38:45", "type": "section_detail", "page_metadata": {"og:image:height": "600", "og:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "og:image:width": "1200", "title": "WebSocket - Nitro", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro natively supports a cross platform WebSocket API", "ogImage": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image:width": "1200", "og:image:alt": "Nitro natively supports a cross platform WebSocket API", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "description": "Nitro natively supports a cross platform WebSocket API", "og:image:type": "image/png", "scrapeId": "bf139042-2708-4d4c-8885-5530f7660491", "sourceURL": "https://nitro.build/guide/websocket", "url": "https://nitro.build/guide/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: How do I usage in nitro-guide?\n\nAssistant: To usage in nitro-guide, here's what you do:\nCreate a websocket handler in `routes/_ws.ts` (or `server/routes/_ws.ts` for Nuxt).\n\nYou can use any route like `routes/chatroom.ts` to register upgrade handler on `/chatroom`.\n\n```typescript\nexport default defineWebSocketHandler({\n  open(peer) {\n    peer.send({ user: \"server\", message: `Welcome ${peer}!` });\n    peer.publish(\"chat\", { user: \"server\", message: `${peer} joined!` });\n    peer.subscribe(\"chat\");\n  },\n  message(peer, message) {\n    if (message.text().includes(\"ping\")) {\n      peer.send({ user: \"server\", message: \"pong\" });\n    } else {\n      const msg = {\n        user: peer.toString(),\n        message: message.toString(),\n      };\n      peer.send(msg); // echo\n      peer.publish(\"chat\", msg);\n    }\n  },\n  close(peer) {\n    peer.publish(\"chat\", { user: \"server\", message: `${peer} left!` });\n  },\n});\n```\n\nNitro allows you defining multiple websocket handlers using same routing of event handlers.\n\nUse a client to connect to server. Example: ( `routes/websocket.ts` or `server/routes/websocket.ts` for Nuxt)\n\n```typescript\nexport default defineEventHandler(() => {\n  return /* html */ `<!doctype html>\n  <html lang=\"en\" data-theme=\"dark\">\n    <head>\n      <title>CrossWS Test Page</title>\n      <script src=\"https://cdn.tailwindcss.com\"></script>\n      <style>\n        body {\n          background-color: #1a1a1a;\n        }\n      </style>\n      <script type=\"module\">\n        // https://github.com/vuejs/petite-vue\n        import {\n          createApp,\n          reactive,\n          nextTick,\n        } from \"https://esm.sh/petite-vue@0.4.1\";\n\n        let ws;\n\n        const store = reactive({\n          message: \"\",\n          messages: [],\n        });\n\n        const scroll = () => {\n          nextTick(() => {\n            const el = document.querySelector(\"#messages\");\n            el.scrollTop = el.scrollHeight;\n            el.scrollTo({\n              top: el.scrollHeight,\n              behavior: \"smooth\",\n            });\n          });\n        };\n\n        const format = async () => {\n          for (const message of store.messages) {\n            if (!message._fmt && message.text.startsWith(\"{\")) {\n              message._fmt = true;\n              const { codeToHtml } = await import(\"https://esm.sh/shiki@1.0.0\");\n              const str = JSON.stringify(JSON.parse(message.text), null, 2);\n              message.formattedText = await codeToHtml(str, {\n                lang: \"json\",\n                theme: \"dark-plus\",\n              });\n            }\n          }\n        };\n\n        const log = (user, ...args) => {\n          console.log(\"[ws]\", user, ...args);\n          store.messages.push({\n            text: args.join(\" \"),\n            formattedText: \"\",\n            user: user,\n            date: new Date().toLocaleString(),\n          });\n          scroll();\n          format();\n        };\n\n        const connect = async () => {\n          const isSecure = location.protocol === \"https:\";\n          const url = (isSecure ? \"wss://\" : \"ws://\") + location.host + \"/_ws\";\n          if (ws) {\n            log(\"ws\", \"Closing previous connection before reconnecting...\");\n            ws.close();\n            clear();\n          }\n\n          log(\"ws\", \"Connecting to\", url, \"...\");\n          ws = new WebSocket(url);\n\n          ws.addEventListener(\"message\", async (event) => {\n            let data = typeof event.data === \"string\" ? data : await event.data.text();\n            const { user = \"system\", message = \"\" } = data.startsWith(\"{\")\n              ? JSON.parse(data)\n              : { message: data };\n            log(\n              user,\n              typeof message === \"string\" ? message : JSON.stringify(message),\n            );\n          });\n\n          await new Promise((resolve) => ws.addEventListener(\"open\", resolve));\n          log(\"ws\", \"Connected!\");\n        };\n\n        const clear = () => {\n          store.messages.splice(0, store.messages.length);\n          log(\"system\", \"previous messages cleared\");\n        };\n\n        const send = () => {\n          console.log(\"sending message...\");\n          if (store.message) {\n            ws.send(store.message);\n          }\n          store.message = \"\";\n        };\n\n        const ping = () => {\n          log(\"ws\", \"Sending ping\");\n          ws.send(\"ping\");\n        };\n\n        createApp({\n          store,\n          send,\n          ping,\n          clear,\n          connect,\n          rand: Math.random(),\n        }).mount();\n\n        await connect();\n      </script>\n    </head>\n    <body class=\"h-screen flex flex-col justify-between\">\n      <main v-scope=\"{}\">\n        <!-- Messages -->\n        <div id=\"messages\" class=\"flex-grow flex flex-col justify-end px-4 py-8\">\n          <div class=\"flex items-center mb-4\" v-for=\"message in store.messages\">\n            <div class=\"flex flex-col\">\n              <p class=\"text-gray-500 mb-1 text-xs ml-10\">{{ message.user }}</p>\n              <div class=\"flex items-center\">\n                <img\n                  :src=\"'https://www.gravatar.com/avatar/' + encodeURIComponent(message.user + rand) + '?s=512&d=monsterid'\"\n                  alt=\"Avatar\"\n                  class=\"w-8 h-8 rounded-full\"\n                />\n                <div class=\"ml-2 bg-gray-800 rounded-lg p-2\">\n                  <p\n                    v-if=\"message.formattedText\"\n                    class=\"overflow-x-scroll\"\n                    v-html=\"message.formattedText\"\n                  ></p>\n                  <p v-else class=\"text-white\">{{ message.text }}</p>\n                </div>\n              </div>\n              <p class=\"text-gray-500 mt-1 text-xs ml-10\">{{ message.date }}</p>\n            </div>\n          </div>\n        </div>\n\n        <!-- Chatbox -->\n        <div\n          class=\"bg-gray-800 px-4 py-2 flex items-center justify-between fixed bottom-0 w-full\"\n        >\n          <div class=\"w-full min-w-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Type your message...\"\n              class=\"w-full rounded-l-lg px-4 py-2 bg-gray-700 text-white focus:outline-none focus:ring focus:border-blue-300\"\n              @keydown.enter=\"send\"\n              v-model=\"store.message\"\n            />\n          </div>\n          <div class=\"flex\">\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"send\"\n            >\n              Send\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"ping\"\n            >\n              Ping\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"connect\"\n            >\n              Reconnect\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-r-lg\"\n              @click=\"clear\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </main>\n    </body>\n  </html>`;\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://nitro.build/guide/websocket", "title": "WebSocket", "description": "Nitro natively supports a cross platform WebSocket API", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:38:45", "type": "section_detail", "page_metadata": {"og:image:height": "600", "og:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "og:image:width": "1200", "title": "WebSocket - Nitro", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro natively supports a cross platform WebSocket API", "ogImage": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image:width": "1200", "og:image:alt": "Nitro natively supports a cross platform WebSocket API", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "description": "Nitro natively supports a cross platform WebSocket API", "og:image:type": "image/png", "scrapeId": "bf139042-2708-4d4c-8885-5530f7660491", "sourceURL": "https://nitro.build/guide/websocket", "url": "https://nitro.build/guide/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: Can you give me some code examples for WebSocket in nitro-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Opt-in to the experimental feature**:\n\n```yaml\nexport default defineNitroConfig({\n  experimental: {\n    websocket: true\n  }\n})\n```\n\nThis snippet shows you how to opt-in to the experimental feature, which is an important aspect of websocket.\n\n**WebSocket Handler**:\n\n```yaml\nexport default defineWebSocketHandler({\n  open(peer) {\n    peer.send({ user: \"server\", message: `Welcome ${peer}!` });\n    peer.publish(\"chat\", { user: \"server\", message: `${peer} joined!` });\n    peer.subscribe(\"chat\");\n  },\n  message(peer, message) {\n    if (message.text().includes(\"ping\")) {\n      peer.send({ user: \"server\", message: \"pong\" });\n    } else {\n      const msg = {\n        user: peer.toString(),\n        message: message.toString(),\n      };\n      peer.send(msg); // echo\n      peer.publish(\"chat\", msg);\n    }\n  },\n  close(peer) {\n    peer.publish(\"chat\", { user: \"server\", message: `${peer} left!` });\n  },\n});\n```\n\nThis snippet shows you how to websocket handler, which is an important aspect of websocket.\n\n**Client Connection Example**:\n\n```yaml\nexport default defineEventHandler(() => {\n  return /* html */ `<!doctype html>\n  <html lang=\"en\" data-theme=\"dark\">\n    <head>\n      <title>CrossWS Test Page</title>\n      <script src=\"https://cdn.tailwindcss.com\"></script>\n      <style>\n        body {\n          background-color: #1a1a1a;\n        }\n      </style>\n      <script type=\"module\">\n        // https://github.com/vuejs/petite-vue\n        import {\n          createApp,\n          reactive,\n          nextTick,\n        } from \"https://esm.sh/petite-vue@0.4.1\";\n\n        let ws;\n\n        const store = reactive({\n          message: \"\",\n          messages: [],\n        });\n\n        const scroll = () => {\n          nextTick(() => {\n            const el = document.querySelector(\"#messages\");\n            el.scrollTop = el.scrollHeight;\n            el.scrollTo({\n              top: el.scrollHeight,\n              behavior: \"smooth\",\n            });\n          });\n        };\n\n        const format = async () => {\n          for (const message of store.messages) {\n            if (!message._fmt && message.text.startsWith(\"{\")) {\n              message._fmt = true;\n              const { codeToHtml } = await import(\"https://esm.sh/shiki@1.0.0\");\n              const str = JSON.stringify(JSON.parse(message.text), null, 2);\n              message.formattedText = await codeToHtml(str, {\n                lang: \"json\",\n                theme: \"dark-plus\",\n              });\n            }\n          }\n        };\n\n        const log = (user, ...args) => {\n          console.log(\"[ws]\", user, ...args);\n          store.messages.push({\n            text: args.join(\" \"),\n            formattedText: \"\",\n            user: user,\n            date: new Date().toLocaleString(),\n          });\n          scroll();\n          format();\n        };\n\n        const connect = async () => {\n          const isSecure = location.protocol === \"https:\";\n          const url = (isSecure ? \"wss://\" : \"ws://\") + location.host + \"/_ws\";\n          if (ws) {\n            log(\"ws\", \"Closing previous connection before reconnecting...\");\n            ws.close();\n            clear();\n          }\n\n          log(\"ws\", \"Connecting to\", url, \"...\");\n          ws = new WebSocket(url);\n\n          ws.addEventListener(\"message\", async (event) => {\n            let data = typeof event.data === \"string\" ? data : await event.data.text();\n            const { user = \"system\", message = \"\" } = data.startsWith(\"{\")\n              ? JSON.parse(data)\n              : { message: data };\n            log(\n              user,\n              typeof message === \"string\" ? message : JSON.stringify(message),\n            );\n          });\n\n          await new Promise((resolve) => ws.addEventListener(\"open\", resolve));\n          log(\"ws\", \"Connected!\");\n        };\n\n        const clear = () => {\n          store.messages.splice(0, store.messages.length);\n          log(\"system\", \"previous messages cleared\");\n        };\n\n        const send = () => {\n          console.log(\"sending message...\");\n          if (store.message) {\n            ws.send(store.message);\n          }\n          store.message = \"\";\n        };\n\n        const ping = () => {\n          log(\"ws\", \"Sending ping\");\n          ws.send(\"ping\");\n        };\n\n        createApp({\n          store,\n          send,\n          ping,\n          clear,\n          connect,\n          rand: Math.random(),\n        }).mount();\n\n        await connect();\n      </script>\n    </head>\n    <body class=\"h-screen flex flex-col justify-between\">\n      <main v-scope=\"{}\">\n        <!-- Messages -->\n        <div id=\"messages\" class=\"flex-grow flex flex-col justify-end px-4 py-8\">\n          <div class=\"flex items-center mb-4\" v-for=\"message in store.messages\">\n            <div class=\"flex flex-col\">\n              <p class=\"text-gray-500 mb-1 text-xs ml-10\">{{ message.user }}</p>\n              <div class=\"flex items-center\">\n                <img\n                  :src=\"'https://www.gravatar.com/avatar/' + encodeURIComponent(message.user + rand) + '?s=512&d=monsterid'\"\n                  alt=\"Avatar\"\n                  class=\"w-8 h-8 rounded-full\"\n                />\n                <div class=\"ml-2 bg-gray-800 rounded-lg p-2\">\n                  <p\n                    v-if=\"message.formattedText\"\n                    class=\"overflow-x-scroll\"\n                    v-html=\"message.formattedText\"\n                  ></p>\n                  <p v-else class=\"text-white\">{{ message.text }}</p>\n                </div>\n              </div>\n              <p class=\"text-gray-500 mt-1 text-xs ml-10\">{{ message.date }}</p>\n            </div>\n          </div>\n        </div>\n\n        <!-- Chatbox -->\n        <div\n          class=\"bg-gray-800 px-4 py-2 flex items-center justify-between fixed bottom-0 w-full\"\n        >\n          <div class=\"w-full min-w-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Type your message...\"\n              class=\"w-full rounded-l-lg px-4 py-2 bg-gray-700 text-white focus:outline-none focus:ring focus:border-blue-300\"\n              @keydown.enter=\"send\"\n              v-model=\"store.message\"\n            />\n          </div>\n          <div class=\"flex\">\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"send\"\n            >\n              Send\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"ping\"\n            >\n              Ping\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4\"\n              @click=\"connect\"\n            >\n              Reconnect\n            </button>\n            <button\n              class=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-r-lg\"\n              @click=\"clear\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </main>\n    </body>\n  </html>`;\n});\n```\n```\n\nThis snippet shows you how to client connection example, which is an important aspect of websocket.\n\n**Server-Sent Events (SSE) Example**:\n\n```yaml\nexport default defineEventHandler(async (event) => {\n  const eventStream = createEventStream(event)\n\n  const interval = setInterval(async () => {\n    await eventStream.push(`Message @ ${new Date().toLocaleTimeString()}`)\n  }, 1000)\n\n  eventStream.onClosed(async () => {\n    clearInterval(interval)\n    await eventStream.close()\n  })\n\n  return eventStream.send()\n})\n\nconst eventSource = new EventSource('http://localhost:3000/sse')\neventSource.onmessage = (event) => {\n  console.log(event.data)\n}\n```\n\nThis snippet shows you how to server-sent events (sse) example, which is an important aspect of websocket.\n\n", "metadata": {"source_url": "https://nitro.build/guide/websocket", "title": "WebSocket", "description": "Nitro natively supports a cross platform WebSocket API", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:38:45", "type": "code_examples", "page_metadata": {"og:image:height": "600", "og:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "og:image:width": "1200", "title": "WebSocket - Nitro", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro natively supports a cross platform WebSocket API", "ogImage": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image:width": "1200", "og:image:alt": "Nitro natively supports a cross platform WebSocket API", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "description": "Nitro natively supports a cross platform WebSocket API", "og:image:type": "image/png", "scrapeId": "bf139042-2708-4d4c-8885-5530f7660491", "sourceURL": "https://nitro.build/guide/websocket", "url": "https://nitro.build/guide/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful nitro-guide expert.\n\nUser: What are some tips for using WebSocket in nitro-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWebSockets support is currently experimental, ensure to check platform support status before using it.\n\nUse the experimental `websocket` feature flag in your configuration to enable WebSocket support.\n\nDefine multiple WebSocket handlers using the same routing of event handlers for better organization.\n\nFor client-side connections, ensure to handle reconnections gracefully.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://nitro.build/guide/websocket", "title": "WebSocket", "description": "Nitro natively supports a cross platform WebSocket API", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:38:45", "type": "best_practices", "page_metadata": {"og:image:height": "600", "og:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "og:image:width": "1200", "title": "WebSocket - Nitro", "favicon": "https://nitro.build/icon.svg", "twitter:image:alt": "Nitro natively supports a cross platform WebSocket API", "ogImage": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image": "https://nitro.build/_og/guide/websocket.png?name=Nitro&title=WebSocket&description=Nitro+natively+supports+a+cross+platform+WebSocket+API", "twitter:image:width": "1200", "og:image:alt": "Nitro natively supports a cross platform WebSocket API", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@unjsio", "twitter:image:height": "600", "description": "Nitro natively supports a cross platform WebSocket API", "og:image:type": "image/png", "scrapeId": "bf139042-2708-4d4c-8885-5530f7660491", "sourceURL": "https://nitro.build/guide/websocket", "url": "https://nitro.build/guide/websocket", "statusCode": 200}}}
