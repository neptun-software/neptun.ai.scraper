{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what 404 is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain 404 in biomejs-reference.\n\n# 404\n\nBiome not found. Check the URL or try using the search bar.", "metadata": {"source_url": "https://biomejs.dev/reference", "title": "404", "description": "Biome not found. Check the URL or try using the search bar.", "has_code_examples": false, "has_best_practices": false, "section_count": 0, "timestamp": "2025-02-28 21:58:32", "type": "overview", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogTitle": "404", "ogUrl": "https://biomejs.dev/404/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "language": "en", "ogImage": "https://biomejs.dev/og/404.png", "twitter:card": "summary_large_image", "title": "404 | Biome", "og:url": "https://biomejs.dev/404/", "og:image": "https://biomejs.dev/og/404.png", "ogSiteName": "Biome", "ogLocale": "en", "og:locale": "en", "og:site_name": "Biome", "og:title": "404", "twitter:image": "https://biomejs.dev/og/404.png", "og:type": "article", "scrapeId": "34f49c4d-fa6d-432b-83ed-9755c67f0d40", "sourceURL": "https://biomejs.dev/reference", "url": "https://biomejs.dev/reference", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what Diagnostics is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain Diagnostics in biomejs-reference.\n\n# Diagnostics\n\nBiome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.Here's a quick rundown of what this is about:\n\n## Diagnostic severity\n\nThe severity of the diagnostic can affect the CLI. For example, error diagnostics will force the CLI to exit with an error code.\n\n## Fatal\n\nError diagnostics have red text. Fatal diagnostics are usually emitted when an unexpected error occurred inside Biome. Compared to errors, they have the fatal tag.\n\n## Error\n\nError diagnostics have red text. Usually, they should be addressed because they will emit an error code when encountered by the CLI.\n\n## Warning\n\nWarning diagnostics have yellow text. Usually, they should be addressed. Warnings are not blockers, and they won’t stop the CLI from working.\n\n## Information\n\nInformation diagnostics have green text. They provide useful information and they aren’t meant to block the CLI.\n\n## Diagnostic tags\n\nTags can be seen as metadata attached to a diagnostic, and they can affect the clients in different ways.\n\n## Verbose\n\nVerbose diagnostics are usually hidden. Via CLI, you can show these diagnostics using the `--verbose` option.\n\n## Internal\n\nInternal diagnostics are emitted when an internal error occurred. Users are usually encourage to file a bug when they see one.\n\n## Fixable\n\nFixable diagnostics are emitted for those particular situations that can be fixed by the user. They are usually used for lint diagnostics that have a code action.\n\n## Deprecated\n\nDiagnostics that contain code that is deprecated.\n\n## Diagnostic category\n\nThe category serves the group diagnostics. Optionally, a category can a have a link, for example for categories that belong to lint rules, like in the example below.\n\n## Simple category\n\nThis diagnostic belongs to the category “ check”, which means that it is emitted when executing the check command.\n\n## Category with link\n\nThis diagnostics belongs to the category “ lint/a11y/noAccessKey ”. The link takes the user to the webpage of the lint rule noAccessKey.\n\n## Diagnostic location\n\nDiagnostics can have a “location”. A location is made by three, optional, parts: a resource, which is the origin that emitted the diagnostic; source code of the file; a span (or text range), usually the line and column inside the file.\n\n## Diagnostic file path\n\nThe file path is usually the first information you see, at the top left of the diagnostic.\n\n## Diagnostic source code\n\nThis shows how the source code associated to a file is shown. Notice that the line and columns aren’t shown.\n\n## Diagnostic line and column\n\nLine and column is usually printed beside the file path, and it’s shown only when there’s some source code associated to it.\n\n## Diagnostic advices\n\nAdditionally, our diagnostics can store advices. Advices are additionally messages that can be appended after the original message. These advices comes with different kinds and shapes. Usually, advices are always printed, unless they are verbose advices.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "overview", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic severity in biomejs-reference?\n\nAssistant: To diagnostic severity in biomejs-reference, here's what you do:\nThe severity of the diagnostic can affect the CLI. For example, error diagnostics will force the CLI to exit with an error code..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I fatal in biomejs-reference?\n\nAssistant: To fatal in biomejs-reference, here's what you do:\nError diagnostics have red text. Fatal diagnostics are usually emitted when an unexpected error occurred inside Biome. Compared to errors, they have the fatal tag..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I error in biomejs-reference?\n\nAssistant: To error in biomejs-reference, here's what you do:\nError diagnostics have red text. Usually, they should be addressed because they will emit an error code when encountered by the CLI..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I warning in biomejs-reference?\n\nAssistant: To warning in biomejs-reference, here's what you do:\nWarning diagnostics have yellow text. Usually, they should be addressed. Warnings are not blockers, and they won’t stop the CLI from working..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I information in biomejs-reference?\n\nAssistant: To information in biomejs-reference, here's what you do:\nInformation diagnostics have green text. They provide useful information and they aren’t meant to block the CLI..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic tags in biomejs-reference?\n\nAssistant: To diagnostic tags in biomejs-reference, here's what you do:\nTags can be seen as metadata attached to a diagnostic, and they can affect the clients in different ways..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I verbose in biomejs-reference?\n\nAssistant: To verbose in biomejs-reference, here's what you do:\nVerbose diagnostics are usually hidden. Via CLI, you can show these diagnostics using the `--verbose` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I internal in biomejs-reference?\n\nAssistant: To internal in biomejs-reference, here's what you do:\nInternal diagnostics are emitted when an internal error occurred. Users are usually encourage to file a bug when they see one..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I fixable in biomejs-reference?\n\nAssistant: To fixable in biomejs-reference, here's what you do:\nFixable diagnostics are emitted for those particular situations that can be fixed by the user. They are usually used for lint diagnostics that have a code action..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I deprecated in biomejs-reference?\n\nAssistant: To deprecated in biomejs-reference, here's what you do:\nDiagnostics that contain code that is deprecated..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic category in biomejs-reference?\n\nAssistant: To diagnostic category in biomejs-reference, here's what you do:\nThe category serves the group diagnostics. Optionally, a category can a have a link, for example for categories that belong to lint rules, like in the example below..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I simple category in biomejs-reference?\n\nAssistant: To simple category in biomejs-reference, here's what you do:\nThis diagnostic belongs to the category “ check”, which means that it is emitted when executing the check command..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I category with link in biomejs-reference?\n\nAssistant: To category with link in biomejs-reference, here's what you do:\nThis diagnostics belongs to the category “ lint/a11y/noAccessKey ”. The link takes the user to the webpage of the lint rule noAccessKey..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic location in biomejs-reference?\n\nAssistant: To diagnostic location in biomejs-reference, here's what you do:\nDiagnostics can have a “location”. A location is made by three, optional, parts: a resource, which is the origin that emitted the diagnostic; source code of the file; a span (or text range), usually the line and column inside the file..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic file path in biomejs-reference?\n\nAssistant: To diagnostic file path in biomejs-reference, here's what you do:\nThe file path is usually the first information you see, at the top left of the diagnostic..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic source code in biomejs-reference?\n\nAssistant: To diagnostic source code in biomejs-reference, here's what you do:\nThis shows how the source code associated to a file is shown. Notice that the line and columns aren’t shown..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic line and column in biomejs-reference?\n\nAssistant: To diagnostic line and column in biomejs-reference, here's what you do:\nLine and column is usually printed beside the file path, and it’s shown only when there’s some source code associated to it..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I diagnostic advices in biomejs-reference?\n\nAssistant: To diagnostic advices in biomejs-reference, here's what you do:\nAdditionally, our diagnostics can store advices. Advices are additionally messages that can be appended after the original message. These advices comes with different kinds and shapes. Usually, advices are always printed, unless they are verbose advices..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "section_detail", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you give me some code examples for Diagnostics in biomejs-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Fatal Diagnostic Example**:\n\n```yaml\n FATAL  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n  ⚠ Biome exited as this error could not be handled and resulted in a fatal error. Please report it if necessary.\n\n\n```\n\nThis snippet shows you how to fatal diagnostic example, which is an important aspect of diagnostics.\n\n**Error Diagnostic Example**:\n\n```yaml\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to error diagnostic example, which is an important aspect of diagnostics.\n\n**Warning Diagnostic Example**:\n\n```yaml\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ⚠ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to warning diagnostic example, which is an important aspect of diagnostics.\n\n**Information Diagnostic Example**:\n\n```yaml\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ℹ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to information diagnostic example, which is an important aspect of diagnostics.\n\n**Verbose Diagnostic Example**:\n\n```yaml\n VERBOSE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to verbose diagnostic example, which is an important aspect of diagnostics.\n\n**Internal Diagnostic Example**:\n\n```yaml\n INTERNAL  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n  ⚠ This diagnostic was derived from an internal Biome error. Potential bug, please report it if necessary.\n\n\n```\n\nThis snippet shows you how to internal diagnostic example, which is an important aspect of diagnostics.\n\n**Fixable Diagnostic Example**:\n\n```yaml\n FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to fixable diagnostic example, which is an important aspect of diagnostics.\n\n**Deprecated Diagnostic Example**:\n\n```yaml\n DEPRECATED  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to deprecated diagnostic example, which is an important aspect of diagnostics.\n\n**Simple Category Diagnostic Example**:\n\n```yaml\ncheck ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to simple category diagnostic example, which is an important aspect of diagnostics.\n\n**Category with Link Diagnostic Example**:\n\n```yaml\nlint/a11y/noAccessKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to category with link diagnostic example, which is an important aspect of diagnostics.\n\n**Diagnostic File Path Example**:\n\n```yaml\npath/to/file.js ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n\n```\n\nThis snippet shows you how to diagnostic file path example, which is an important aspect of diagnostics.\n\n**Diagnostic Source Code Example**:\n\n```yaml\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n  > 1 │ Some source code\n      │      ^^^^^\n\n\n```\n\nThis snippet shows you how to diagnostic source code example, which is an important aspect of diagnostics.\n\n**Diagnostic Line and Column Example**:\n\n```yaml\npath/to/file.txt:1:6 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n  > 1 │ Some source code\n      │      ^^^^^^\n\n\n```\n\nThis snippet shows you how to diagnostic line and column example, which is an important aspect of diagnostics.\n\n**Diagnostic Clickable Example**:\n\n```yaml\npath/to/file.js:2:2 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n    1 │ function name() {\n  > 2 │  return 'lorem'\n      │  ^^^^^^^^^^^^^^\n    3 │ }\n\n\n```\n\nThis snippet shows you how to diagnostic clickable example, which is an important aspect of diagnostics.\n\n**Diagnostic Advices Example**:\n\n```yaml\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ This is the message of the diagnostic. It will appear in different colours based on the severity of the diagnostic.\n\n  ✖ This log is an error.\n\n  ℹ This log is a warning\n\n  ℹ This log is an information\n\n  This log doesn't have any category. Below, you'll have a command\n\n  $ biome command\n\n  Below, a group.\n\n  I am a group\n\n    ℹ First message of a group.\n\n    ℹ Second message of a group.\n\n  Below, a list.\n\n  - First item\n  - Second item\n\n  Below, a diff.\n\n  - Old·code\n  + New·code\n\n  Below, a code frame.\n\n  > 1 │ Lorem\n      │ ^^^\n    2 │ Ipsum\n\n\n```\n\nThis snippet shows you how to diagnostic advices example, which is an important aspect of diagnostics.\n\n", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "code_examples", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: What are some tips for using Diagnostics in biomejs-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nLearning all the different parts of a diagnostic can help you to identify the important parts, and some 'secrets' behind them.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/reference/diagnostics", "title": "Diagnostics", "description": "Biome’s diagnostics are full of information, and they usually provide all the information you need to understand errors, and fix them. Diagnostics aren’t only used for errors, but they are also used to provide structured information, warnings and tips. This page provide a break down of all the information that a diagnostic can contain. Learning all the different parts of a diagnostic can help you to identify the important parts, and some “secrets” behind them.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 21:59:00", "type": "best_practices", "page_metadata": {"title": "Diagnostics | Biome", "ogSiteName": "Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:site_name": "Biome", "ogTitle": "Diagnostics", "og:title": "Diagnostics", "og:description": "Learn the different parts of Biome's diagnostics", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:locale": "en", "og:image": "https://biomejs.dev/og/reference/diagnostics.png", "twitter:image": "https://biomejs.dev/og/reference/diagnostics.png", "og:type": "article", "ogImage": "https://biomejs.dev/og/reference/diagnostics.png", "ogUrl": "https://biomejs.dev/reference/diagnostics/", "ogLocale": "en", "ogDescription": "Learn the different parts of Biome's diagnostics", "viewport": "width=device-width, initial-scale=1", "og:url": "https://biomejs.dev/reference/diagnostics/", "twitter:card": "summary_large_image", "description": "Learn the different parts of Biome's diagnostics", "scrapeId": "44b197ac-c9f6-46cc-b758-528f443c592d", "sourceURL": "https://biomejs.dev/reference/diagnostics", "url": "https://biomejs.dev/reference/diagnostics/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what GritQL [EXPERIMENTAL] is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain GritQL [EXPERIMENTAL] in biomejs-reference.\n\n# GritQL [EXPERIMENTAL]\n\nGritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.Here's a quick rundown of what this is about:\n\n## Patterns\n\nGritQL queries work through _patterns_. The most common pattern you will see is the code snippet, which looks like ordinary source code wrapped in backticks:\n\n```\n\n`console.log('Hello, world!')`\n```\n\nThis pattern will match any call to `console.log()` that is passed the string `Hello, world!`. But because GritQL does _structural_ matching, it doesn’t care about formatting details. This also matches:\n\n```\nconsole.log (\n\n    'Hello, world!'\n)\n```\n\nAnd so does this (note the change in quotes):\n\n```\nconsole.log(\"Hello, world!\")\n```\n\n## Variables\n\nGritQL queries can also have _variables_. The following will match any call to `console.log()` regardless of the message passed:\n\n```\n`console.log($message)`\n```\n\nThis will match any of the methods on the `console` object too:\n\n```\n`console.$method($message)`\n```\n\nThe same variable name can occur multiple times in a single snippet:\n\n```\n`$fn && $fn()`\n```\n\nThis will match `foo && foo()`, and even `foo.bar && foo.bar()`, but not `foo && bar()`.\n\n## Conditions\n\nYou can add conditions to patterns by using the `where` operator. This is commonly used together with the _match operator_, `<:`:\n\n```\n`console.$method($message)` where {\n\n    $method <: `log`\n}\n```\n\nThis query is identical to the `console.log($message)` pattern we saw earlier, but it gets quickly more interesting when add other operators in the mix:\n\n```\n`console.$method($message)` where {\n\n    $method <: or { `log`, `info`, `warn`, `error` }\n}\n```\n\n## Language Documentation\n\nFor more information about GritQL and its syntax, see the official [GritQL Language Documentation](https://docs.grit.io/language/overview).\n\nPlease keep in mind that Biome doesn’t support all of Grit’s features (yet).\n\n## Integration Status\n\nGritQL support in Biome is actively being worked on. Many things already work, but bugs are still expected and some features are still outright missing.\n\nFor a detailed overview of which GritQL features are supported and which are still in-progress, please see the GitHub issue:\n[https://github.com/biomejs/biome/issues/2582](https://github.com/biomejs/biome/issues/2582).\n\nWe also have a detailed RFC which guides the direction for our plugin efforts:\n[https://github.com/biomejs/biome/discussions/1762](https://github.com/biomejs/biome/discussions/1762)\n\n**tl;dr**: We are working on supporting plugins, which can be either pure GritQL plugins or JS/TS plugins that use GritQL to select the code they wish to operate on. Stay tuned!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I patterns in biomejs-reference?\n\nAssistant: To patterns in biomejs-reference, here's what you do:\nGritQL queries work through _patterns_. The most common pattern you will see is the code snippet, which looks like ordinary source code wrapped in backticks:\n\n```\n\n`console.log('Hello, world!')`\n```\n\nThis pattern will match any call to `console.log()` that is passed the string `Hello, world!`. But because GritQL does _structural_ matching, it doesn’t care about formatting details. This also matches:\n\n```\nconsole.log (\n\n    'Hello, world!'\n)\n```\n\nAnd so does this (note the change in quotes):\n\n```\nconsole.log(\"Hello, world!\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I variables in biomejs-reference?\n\nAssistant: To variables in biomejs-reference, here's what you do:\nGritQL queries can also have _variables_. The following will match any call to `console.log()` regardless of the message passed:\n\n```\n`console.log($message)`\n```\n\nThis will match any of the methods on the `console` object too:\n\n```\n`console.$method($message)`\n```\n\nThe same variable name can occur multiple times in a single snippet:\n\n```\n`$fn && $fn()`\n```\n\nThis will match `foo && foo()`, and even `foo.bar && foo.bar()`, but not `foo && bar()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I conditions in biomejs-reference?\n\nAssistant: To conditions in biomejs-reference, here's what you do:\nYou can add conditions to patterns by using the `where` operator. This is commonly used together with the _match operator_, `<:`:\n\n```\n`console.$method($message)` where {\n\n    $method <: `log`\n}\n```\n\nThis query is identical to the `console.log($message)` pattern we saw earlier, but it gets quickly more interesting when add other operators in the mix:\n\n```\n`console.$method($message)` where {\n\n    $method <: or { `log`, `info`, `warn`, `error` }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I language documentation in biomejs-reference?\n\nAssistant: To language documentation in biomejs-reference, here's what you do:\nFor more information about GritQL and its syntax, see the official [GritQL Language Documentation](https://docs.grit.io/language/overview).\n\nPlease keep in mind that Biome doesn’t support all of Grit’s features (yet)..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I integration status in biomejs-reference?\n\nAssistant: To integration status in biomejs-reference, here's what you do:\nGritQL support in Biome is actively being worked on. Many things already work, but bugs are still expected and some features are still outright missing.\n\nFor a detailed overview of which GritQL features are supported and which are still in-progress, please see the GitHub issue:\n[https://github.com/biomejs/biome/issues/2582](https://github.com/biomejs/biome/issues/2582).\n\nWe also have a detailed RFC which guides the direction for our plugin efforts:\n[https://github.com/biomejs/biome/discussions/1762](https://github.com/biomejs/biome/discussions/1762)\n\n**tl;dr**: We are working on supporting plugins, which can be either pure GritQL plugins or JS/TS plugins that use GritQL to select the code they wish to operate on. Stay tuned!.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you give me some code examples for GritQL [EXPERIMENTAL] in biomejs-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Pattern Matching**:\n\n```yaml\n`console.log('Hello, world!')`\n```\n\nThis snippet shows you how to basic pattern matching, which is an important aspect of gritql [experimental].\n\n**Variable Matching**:\n\n```yaml\n`console.log($message)`\n```\n\nThis snippet shows you how to variable matching, which is an important aspect of gritql [experimental].\n\n**Method Variable Matching**:\n\n```yaml\n`console.$method($message)`\n```\n\nThis snippet shows you how to method variable matching, which is an important aspect of gritql [experimental].\n\n**Multiple Variable Usage**:\n\n```yaml\n`$fn && $fn()`\n```\n\nThis snippet shows you how to multiple variable usage, which is an important aspect of gritql [experimental].\n\n**Condition with Match Operator**:\n\n```yaml\n`console.$method($message)` where {\n    $method <: `log`\n}\n```\n\nThis snippet shows you how to condition with match operator, which is an important aspect of gritql [experimental].\n\n", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: What are some tips for using GritQL [EXPERIMENTAL] in biomejs-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGritQL ignores formatting details such as whitespace and quote types, making it flexible for structural searches.\n\nUtilize variables in queries to match various method calls and messages.\n\nCombine conditions with patterns to refine search results.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/reference/gritql", "title": "GritQL [EXPERIMENTAL]", "description": "GritQL is a query language for performing structural searches on source code, ignoring trivia such as whitespace and quote types, and offering features for querying syntax structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:02:22", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "GritQL [EXPERIMENTAL]", "title": "GritQL [EXPERIMENTAL] | Biome", "ogDescription": "Basic usage of GritQL in Biome", "ogLocale": "en", "ogSiteName": "Biome", "og:description": "Basic usage of GritQL in Biome", "ogImage": "https://biomejs.dev/og/reference/gritql.png", "description": "Basic usage of GritQL in Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:image": "https://biomejs.dev/og/reference/gritql.png", "og:type": "article", "og:locale": "en", "og:title": "GritQL [EXPERIMENTAL]", "twitter:image": "https://biomejs.dev/og/reference/gritql.png", "og:url": "https://biomejs.dev/reference/gritql/", "ogUrl": "https://biomejs.dev/reference/gritql/", "og:site_name": "Biome", "scrapeId": "08e42650-6f6d-4e2f-8d45-def1d6bfad86", "sourceURL": "https://biomejs.dev/reference/gritql", "url": "https://biomejs.dev/reference/gritql/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what Zed extension is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain Zed extension in biomejs-reference.\n\n# Zed extension\n\nDocumentation for the Zed extension including installation, configuration, and usage details.Here's a quick rundown of what this is about:\n\n## Installation\n\nRequires Zed >= **v0.131.0**.\n\nThis extension is available in the extensions view inside the Zed editor. Open `zed: extensions` and search for _Biome_.\n\n## Configuration\n\nBy default, the biome.json file is required to be in the **root of the workspace**.\n\nOtherwise, it can be configured through the lsp settings:\n\n```\n{\n  \"lsp\": {\n    \"biome\": {\n      \"settings\": {\n        \"config_path\": \"<path>/biome.json\"\n      }\n    }\n  }\n}\n```\n\n## Formatting\n\nTo use the language server as a formatter, specify biome as your formatter in the settings:\n\n```\n{\n  \"formatter\": {\n    \"language_server\": {\n      \"name\": \"biome\"\n    }\n  }\n}\n```\n\n## Enable biome only when biome.json is present\n\n```\n{\n  \"lsp\": {\n    \"biome\": {\n      \"settings\": {\n        \"require_config_file\": true\n      }\n    }\n  }\n}\n```\n\n## Project based configuration\n\nIf you’d like to exclude biome from running in every project,\n\n1. Disable the biome language server in user settings:\n\n```\n{\n  \"language_servers\": [ \"!biome\", \"...\" ]\n}\n```\n\n2. And enable it in the project’s local settings:\n\n```json\n// <workspace>/.zed/settings.json\n{\n  \"language_servers\": [ \"biome\", \"...\" ]\n}\n```\n\nThe same can be configured on a per-language basis with the [`languages`](https://zed.dev/docs/configuring-zed#languages) key.\n\n## Run code actions on format:\n\n```\n{\n  \"code_actions_on_format\": {\n    \"source.fixAll.biome\": true,\n    \"source.organizeImports.biome\": true\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "overview", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I installation in biomejs-reference?\n\nAssistant: To installation in biomejs-reference, here's what you do:\nRequires Zed >= **v0.131.0**.\n\nThis extension is available in the extensions view inside the Zed editor. Open `zed: extensions` and search for _Biome_..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I configuration in biomejs-reference?\n\nAssistant: To configuration in biomejs-reference, here's what you do:\nBy default, the biome.json file is required to be in the **root of the workspace**.\n\nOtherwise, it can be configured through the lsp settings:\n\n```\n{\n  \"lsp\": {\n    \"biome\": {\n      \"settings\": {\n        \"config_path\": \"<path>/biome.json\"\n      }\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I formatting in biomejs-reference?\n\nAssistant: To formatting in biomejs-reference, here's what you do:\nTo use the language server as a formatter, specify biome as your formatter in the settings:\n\n```\n{\n  \"formatter\": {\n    \"language_server\": {\n      \"name\": \"biome\"\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I enable biome only when biome.json is present in biomejs-reference?\n\nAssistant: To enable biome only when biome.json is present in biomejs-reference, here's what you do:\n```\n{\n  \"lsp\": {\n    \"biome\": {\n      \"settings\": {\n        \"require_config_file\": true\n      }\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I project based configuration in biomejs-reference?\n\nAssistant: To project based configuration in biomejs-reference, here's what you do:\nIf you’d like to exclude biome from running in every project,\n\n1. Disable the biome language server in user settings:\n\n```\n{\n  \"language_servers\": [ \"!biome\", \"...\" ]\n}\n```\n\n2. And enable it in the project’s local settings:\n\n```json\n// <workspace>/.zed/settings.json\n{\n  \"language_servers\": [ \"biome\", \"...\" ]\n}\n```\n\nThe same can be configured on a per-language basis with the [`languages`](https://zed.dev/docs/configuring-zed#languages) key..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I run code actions on format: in biomejs-reference?\n\nAssistant: To run code actions on format: in biomejs-reference, here's what you do:\n```\n{\n  \"code_actions_on_format\": {\n    \"source.fixAll.biome\": true,\n    \"source.organizeImports.biome\": true\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "section_detail", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you give me some code examples for Zed extension in biomejs-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**LSP Configuration**:\n\n```yaml\n{\n  \"lsp\": {\n    \"biome\": {\n      \"settings\": {\n        \"config_path\": \"<path>/biome.json\"\n      }\n    }\n  }\n}\n```\n\nThis snippet shows you how to lsp configuration, which is an important aspect of zed extension.\n\n**Formatter Configuration**:\n\n```yaml\n{\n  \"formatter\": {\n    \"language_server\": {\n      \"name\": \"biome\"\n    }\n  }\n}\n```\n\nThis snippet shows you how to formatter configuration, which is an important aspect of zed extension.\n\n**Enable Biome Only When Config is Present**:\n\n```yaml\n{\n  \"lsp\": {\n    \"biome\": {\n      \"settings\": {\n        \"require_config_file\": true\n      }\n    }\n  }\n}\n```\n\nThis snippet shows you how to enable biome only when config is present, which is an important aspect of zed extension.\n\n**Disable Biome Language Server**:\n\n```yaml\n{\n  \"language_servers\": [ \"!biome\", \"...\" ]\n}\n```\n\nThis snippet shows you how to disable biome language server, which is an important aspect of zed extension.\n\n**Enable Biome in Project Settings**:\n\n```yaml\n// <workspace>/.zed/settings.json\n{\n  \"language_servers\": [ \"biome\", \"...\" ]\n}\n```\n\nThis snippet shows you how to enable biome in project settings, which is an important aspect of zed extension.\n\n**Run Code Actions on Format**:\n\n```yaml\n{\n  \"code_actions_on_format\": {\n    \"source.fixAll.biome\": true,\n    \"source.organizeImports.biome\": true\n  }\n}\n```\n\nThis snippet shows you how to run code actions on format, which is an important aspect of zed extension.\n\n", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "code_examples", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: What are some tips for using Zed extension in biomejs-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure Zed is version >= v0.131.0 for compatibility.\n\nPlace biome.json in the root of the workspace for default configuration.\n\nUse project-based settings to control the activation of the biome language server.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/reference/zed", "title": "Zed extension", "description": "Documentation for the Zed extension including installation, configuration, and usage details.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 22:10:13", "type": "best_practices", "page_metadata": {"generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Zed extension", "og:type": "article", "og:image": "https://biomejs.dev/og/reference/zed.png", "og:site_name": "Biome", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/reference/zed.png", "og:locale": "en", "ogSiteName": "Biome", "ogUrl": "https://biomejs.dev/reference/zed/", "og:title": "Zed extension", "og:description": "Notes about the Biome's Zed extension", "favicon": "https://biomejs.dev/img/favicon.svg", "ogLocale": "en", "ogDescription": "Notes about the Biome's Zed extension", "og:url": "https://biomejs.dev/reference/zed/", "viewport": "width=device-width, initial-scale=1", "title": "Zed extension | Biome", "language": "en", "description": "Notes about the Biome's Zed extension", "ogImage": "https://biomejs.dev/og/reference/zed.png", "scrapeId": "5c2ac29b-b659-4b7d-aa5e-62b5c2559ba9", "sourceURL": "https://biomejs.dev/reference/zed", "url": "https://biomejs.dev/reference/zed/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what Environment variables is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain Environment variables in biomejs-reference.\n\n# Environment variables\n\nThis page covers the environment variables used in Biome, including their purpose and default values.Here's a quick rundown of what this is about:\n\n## BIOME_LOG_PREFIX_NAME\n\nA prefix that’s added to the name of the log. Default: `server.log.`\n\n## BIOME_LOG_PATH\n\nThe directory where the Daemon logs will be saved.\n\n## BIOME_CONFIG_PATH\n\nA path to the configuration file.\n\n## BIOME_BINARY\n\nOverrides the Biome binary being used. This allows you, for example, to use a system-wide Biome binary.\n\nIf you don’t define this variable, Biome will automatically detect the correct binary for your platform.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/environment-variables", "title": "Environment variables", "description": "This page covers the environment variables used in Biome, including their purpose and default values.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:10:36", "type": "overview", "page_metadata": {"title": "Environment variables | Biome", "ogUrl": "https://biomejs.dev/reference/environment-variables/", "language": "en", "ogSiteName": "Biome", "og:locale": "en", "og:description": "A list of the environment variables available via Biome", "ogImage": "https://biomejs.dev/og/reference/environment-variables.png", "ogLocale": "en", "og:image": "https://biomejs.dev/og/reference/environment-variables.png", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "description": "A list of the environment variables available via Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:image": "https://biomejs.dev/og/reference/environment-variables.png", "og:url": "https://biomejs.dev/reference/environment-variables/", "og:title": "Environment variables", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "twitter:card": "summary_large_image", "ogDescription": "A list of the environment variables available via Biome", "ogTitle": "Environment variables", "scrapeId": "202ecbda-111a-4497-b976-2bb0432cabb8", "sourceURL": "https://biomejs.dev/reference/environment-variables", "url": "https://biomejs.dev/reference/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I biome_log_prefix_name in biomejs-reference?\n\nAssistant: To biome_log_prefix_name in biomejs-reference, here's what you do:\nA prefix that’s added to the name of the log. Default: `server.log.`.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/environment-variables", "title": "Environment variables", "description": "This page covers the environment variables used in Biome, including their purpose and default values.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:10:36", "type": "section_detail", "page_metadata": {"title": "Environment variables | Biome", "ogUrl": "https://biomejs.dev/reference/environment-variables/", "language": "en", "ogSiteName": "Biome", "og:locale": "en", "og:description": "A list of the environment variables available via Biome", "ogImage": "https://biomejs.dev/og/reference/environment-variables.png", "ogLocale": "en", "og:image": "https://biomejs.dev/og/reference/environment-variables.png", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "description": "A list of the environment variables available via Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:image": "https://biomejs.dev/og/reference/environment-variables.png", "og:url": "https://biomejs.dev/reference/environment-variables/", "og:title": "Environment variables", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "twitter:card": "summary_large_image", "ogDescription": "A list of the environment variables available via Biome", "ogTitle": "Environment variables", "scrapeId": "202ecbda-111a-4497-b976-2bb0432cabb8", "sourceURL": "https://biomejs.dev/reference/environment-variables", "url": "https://biomejs.dev/reference/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I biome_log_path in biomejs-reference?\n\nAssistant: To biome_log_path in biomejs-reference, here's what you do:\nThe directory where the Daemon logs will be saved..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/environment-variables", "title": "Environment variables", "description": "This page covers the environment variables used in Biome, including their purpose and default values.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:10:36", "type": "section_detail", "page_metadata": {"title": "Environment variables | Biome", "ogUrl": "https://biomejs.dev/reference/environment-variables/", "language": "en", "ogSiteName": "Biome", "og:locale": "en", "og:description": "A list of the environment variables available via Biome", "ogImage": "https://biomejs.dev/og/reference/environment-variables.png", "ogLocale": "en", "og:image": "https://biomejs.dev/og/reference/environment-variables.png", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "description": "A list of the environment variables available via Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:image": "https://biomejs.dev/og/reference/environment-variables.png", "og:url": "https://biomejs.dev/reference/environment-variables/", "og:title": "Environment variables", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "twitter:card": "summary_large_image", "ogDescription": "A list of the environment variables available via Biome", "ogTitle": "Environment variables", "scrapeId": "202ecbda-111a-4497-b976-2bb0432cabb8", "sourceURL": "https://biomejs.dev/reference/environment-variables", "url": "https://biomejs.dev/reference/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I biome_config_path in biomejs-reference?\n\nAssistant: To biome_config_path in biomejs-reference, here's what you do:\nA path to the configuration file..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/environment-variables", "title": "Environment variables", "description": "This page covers the environment variables used in Biome, including their purpose and default values.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:10:36", "type": "section_detail", "page_metadata": {"title": "Environment variables | Biome", "ogUrl": "https://biomejs.dev/reference/environment-variables/", "language": "en", "ogSiteName": "Biome", "og:locale": "en", "og:description": "A list of the environment variables available via Biome", "ogImage": "https://biomejs.dev/og/reference/environment-variables.png", "ogLocale": "en", "og:image": "https://biomejs.dev/og/reference/environment-variables.png", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "description": "A list of the environment variables available via Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:image": "https://biomejs.dev/og/reference/environment-variables.png", "og:url": "https://biomejs.dev/reference/environment-variables/", "og:title": "Environment variables", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "twitter:card": "summary_large_image", "ogDescription": "A list of the environment variables available via Biome", "ogTitle": "Environment variables", "scrapeId": "202ecbda-111a-4497-b976-2bb0432cabb8", "sourceURL": "https://biomejs.dev/reference/environment-variables", "url": "https://biomejs.dev/reference/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I biome_binary in biomejs-reference?\n\nAssistant: To biome_binary in biomejs-reference, here's what you do:\nOverrides the Biome binary being used. This allows you, for example, to use a system-wide Biome binary.\n\nIf you don’t define this variable, Biome will automatically detect the correct binary for your platform..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/environment-variables", "title": "Environment variables", "description": "This page covers the environment variables used in Biome, including their purpose and default values.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:10:36", "type": "section_detail", "page_metadata": {"title": "Environment variables | Biome", "ogUrl": "https://biomejs.dev/reference/environment-variables/", "language": "en", "ogSiteName": "Biome", "og:locale": "en", "og:description": "A list of the environment variables available via Biome", "ogImage": "https://biomejs.dev/og/reference/environment-variables.png", "ogLocale": "en", "og:image": "https://biomejs.dev/og/reference/environment-variables.png", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "description": "A list of the environment variables available via Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:image": "https://biomejs.dev/og/reference/environment-variables.png", "og:url": "https://biomejs.dev/reference/environment-variables/", "og:title": "Environment variables", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "twitter:card": "summary_large_image", "ogDescription": "A list of the environment variables available via Biome", "ogTitle": "Environment variables", "scrapeId": "202ecbda-111a-4497-b976-2bb0432cabb8", "sourceURL": "https://biomejs.dev/reference/environment-variables", "url": "https://biomejs.dev/reference/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you give me some code examples for Environment variables in biomejs-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Nix derivation example**:\n\n```yaml\nBIOME_BINARY=/nix/store/68fyfw1hidsqkal1839whi3nzgvqv4pa-biome-1.0.0/bin/biome npx @biomejs/biome format .\n```\n\nThis snippet shows you how to nix derivation example, which is an important aspect of environment variables.\n\n", "metadata": {"source_url": "https://biomejs.dev/reference/environment-variables", "title": "Environment variables", "description": "This page covers the environment variables used in Biome, including their purpose and default values.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:10:36", "type": "code_examples", "page_metadata": {"title": "Environment variables | Biome", "ogUrl": "https://biomejs.dev/reference/environment-variables/", "language": "en", "ogSiteName": "Biome", "og:locale": "en", "og:description": "A list of the environment variables available via Biome", "ogImage": "https://biomejs.dev/og/reference/environment-variables.png", "ogLocale": "en", "og:image": "https://biomejs.dev/og/reference/environment-variables.png", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "description": "A list of the environment variables available via Biome", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:image": "https://biomejs.dev/og/reference/environment-variables.png", "og:url": "https://biomejs.dev/reference/environment-variables/", "og:title": "Environment variables", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "twitter:card": "summary_large_image", "ogDescription": "A list of the environment variables available via Biome", "ogTitle": "Environment variables", "scrapeId": "202ecbda-111a-4497-b976-2bb0432cabb8", "sourceURL": "https://biomejs.dev/reference/environment-variables", "url": "https://biomejs.dev/reference/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what Reporters is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain Reporters in biomejs-reference.\n\n# Reporters\n\nSince version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.Here's a quick rundown of what this is about:\n\n## Summary\n\n```\n\nbiome check --reporter=summary\n```\n\n```\nFormatter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nThe following files needs to be formatted:\n\nmain.ts\n\nindex.ts\n\nOrganize Imports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nThe following files needs to have their imports sorted:\n\nmain.ts\n\nindex.ts\n\nAnalyzer ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nSome analyzer rules were triggered\n\nRule Name                                               Diagnostics\n\nlint/suspicious/noImplicitAnyLet                        12 (12 error(s), 0 warning(s), 0 info(s))\n\nlint/suspicious/noDoubleEquals                          8 (8 error(s), 0 warning(s), 0 info(s))\n\nlint/suspicious/noRedeclare                             12 (12 error(s), 0 warning(s), 0 info(s))\n\nlint/suspicious/noDebugger                              20 (20 error(s), 0 warning(s), 0 info(s))\n```\n\n## JSON\n\nIt emits the summary and diagnostics in a JSON format.\n\n```\n\nbiome ci --reporter=json\n```\n\n## JSON pretty\n\nSame as `--reporter=json`, it emits the summary and diagnostics in a JSON format, and the output is formatted using the current JSON formatting options (configuration file or defaults).\n\n```\n\nbiome ci --reporter=json-pretty\n```\n\n## GitHub\n\nUse this reporter in a GitHub workflow. When properly configured in a PR workflow, GitHub will print a message for each info/warning/error emitted.\n\n```\n\nbiome ci --reporter=github\n```\n\n```\n::error title=lint/suspicious/noDoubleEquals,file=main.ts,line=4,endLine=4,col=3,endColumn=5::Use === instead of ==\n\n::error title=lint/suspicious/noDebugger,file=main.ts,line=6,endLine=6,col=1,endColumn=9::This is an unexpected use of the debugger statement.\n\n::error title=lint/nursery/noEvolvingAny,file=main.ts,line=8,endLine=8,col=5,endColumn=6::This variable's type is not allowed to evolve implicitly, leading to potential any types.\n```\n\n## JUnit\n\n```\n\nbiome check --reporter=junit\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<testsuites name=\"Biome\" tests=\"16\" failures=\"16\" errors=\"20\" time=\"<TIME>\">\n\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n\n      <testcase name=\"org.biome.lint.suspicious.noDoubleEquals\" line=\"4\" column=\"3\">\n\n          <failure message=\"Use === instead of ==. == is only allowed when comparing against `null`\">line 3, col 2, Use === instead of ==. == is only allowed when comparing against `null`</failure>\n\n      </testcase>\n\n  </testsuite>\n\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n\n      <testcase name=\"org.biome.lint.suspicious.noDebugger\" line=\"6\" column=\"1\">\n\n          <failure message=\"This is an unexpected use of the debugger statement.\">line 5, col 0, This is an unexpected use of the debugger statement.</failure>\n\n      </testcase>\n\n  </testsuite>\n\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n\n      <testcase name=\"org.biome.lint.nursery.noEvolvingAny\" line=\"8\" column=\"5\">\n\n          <failure message=\"This variable's type is not allowed to evolve implicitly, leading to potential any types.\">line 7, col 4, This variable's type is not allowed to evolve implicitly, leading to potential any types.</failure>\n\n      </testcase>\n\n  </testsuite>\n\n</testsuites>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "overview", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I summary in biomejs-reference?\n\nAssistant: To summary in biomejs-reference, here's what you do:\n```\n\nbiome check --reporter=summary\n```\n\n```\nFormatter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nThe following files needs to be formatted:\n\nmain.ts\n\nindex.ts\n\nOrganize Imports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nThe following files needs to have their imports sorted:\n\nmain.ts\n\nindex.ts\n\nAnalyzer ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nSome analyzer rules were triggered\n\nRule Name                                               Diagnostics\n\nlint/suspicious/noImplicitAnyLet                        12 (12 error(s), 0 warning(s), 0 info(s))\n\nlint/suspicious/noDoubleEquals                          8 (8 error(s), 0 warning(s), 0 info(s))\n\nlint/suspicious/noRedeclare                             12 (12 error(s), 0 warning(s), 0 info(s))\n\nlint/suspicious/noDebugger                              20 (20 error(s), 0 warning(s), 0 info(s))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "section_detail", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I json in biomejs-reference?\n\nAssistant: To json in biomejs-reference, here's what you do:\nIt emits the summary and diagnostics in a JSON format.\n\n```\n\nbiome ci --reporter=json\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "section_detail", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I json pretty in biomejs-reference?\n\nAssistant: To json pretty in biomejs-reference, here's what you do:\nSame as `--reporter=json`, it emits the summary and diagnostics in a JSON format, and the output is formatted using the current JSON formatting options (configuration file or defaults).\n\n```\n\nbiome ci --reporter=json-pretty\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "section_detail", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I github in biomejs-reference?\n\nAssistant: To github in biomejs-reference, here's what you do:\nUse this reporter in a GitHub workflow. When properly configured in a PR workflow, GitHub will print a message for each info/warning/error emitted.\n\n```\n\nbiome ci --reporter=github\n```\n\n```\n::error title=lint/suspicious/noDoubleEquals,file=main.ts,line=4,endLine=4,col=3,endColumn=5::Use === instead of ==\n\n::error title=lint/suspicious/noDebugger,file=main.ts,line=6,endLine=6,col=1,endColumn=9::This is an unexpected use of the debugger statement.\n\n::error title=lint/nursery/noEvolvingAny,file=main.ts,line=8,endLine=8,col=5,endColumn=6::This variable's type is not allowed to evolve implicitly, leading to potential any types.\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "section_detail", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I junit in biomejs-reference?\n\nAssistant: To junit in biomejs-reference, here's what you do:\n```\n\nbiome check --reporter=junit\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<testsuites name=\"Biome\" tests=\"16\" failures=\"16\" errors=\"20\" time=\"<TIME>\">\n\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n\n      <testcase name=\"org.biome.lint.suspicious.noDoubleEquals\" line=\"4\" column=\"3\">\n\n          <failure message=\"Use === instead of ==. == is only allowed when comparing against `null`\">line 3, col 2, Use === instead of ==. == is only allowed when comparing against `null`</failure>\n\n      </testcase>\n\n  </testsuite>\n\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n\n      <testcase name=\"org.biome.lint.suspicious.noDebugger\" line=\"6\" column=\"1\">\n\n          <failure message=\"This is an unexpected use of the debugger statement.\">line 5, col 0, This is an unexpected use of the debugger statement.</failure>\n\n      </testcase>\n\n  </testsuite>\n\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n\n      <testcase name=\"org.biome.lint.nursery.noEvolvingAny\" line=\"8\" column=\"5\">\n\n          <failure message=\"This variable's type is not allowed to evolve implicitly, leading to potential any types.\">line 7, col 4, This variable's type is not allowed to evolve implicitly, leading to potential any types.</failure>\n\n      </testcase>\n\n  </testsuite>\n\n</testsuites>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "section_detail", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you give me some code examples for Reporters in biomejs-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Summary Command**:\n\n```yaml\nbiome check --reporter=summary\n```\n\nThis snippet shows you how to summary command, which is an important aspect of reporters.\n\n**JSON Command**:\n\n```yaml\nbiome ci --reporter=json\n```\n\nThis snippet shows you how to json command, which is an important aspect of reporters.\n\n**JSON Pretty Command**:\n\n```yaml\nbiome ci --reporter=json-pretty\n```\n\nThis snippet shows you how to json pretty command, which is an important aspect of reporters.\n\n**GitHub Command**:\n\n```yaml\nbiome ci --reporter=github\n```\n\nThis snippet shows you how to github command, which is an important aspect of reporters.\n\n**JUnit Command**:\n\n```yaml\nbiome check --reporter=junit\n```\n\nThis snippet shows you how to junit command, which is an important aspect of reporters.\n\n**GitHub Error Log**:\n\n```yaml\n::error title=lint/suspicious/noDoubleEquals,file=main.ts,line=4,endLine=4,col=3,endColumn=5::Use === instead of ==\n::error title=lint/suspicious/noDebugger,file=main.ts,line=6,endLine=6,col=1,endColumn=9::This is an unexpected use of the debugger statement.\n::error title=lint/nursery/noEvolvingAny,file=main.ts,line=8,endLine=8,col=5,endColumn=6::This variable's type is not allowed to evolve implicitly, leading to potential any types.\n```\n\nThis snippet shows you how to github error log, which is an important aspect of reporters.\n\n**JUnit XML Output**:\n\n```yaml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"Biome\" tests=\"16\" failures=\"16\" errors=\"20\" time=\"<TIME>\">\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n      <testcase name=\"org.biome.lint.suspicious.noDoubleEquals\" line=\"4\" column=\"3\">\n          <failure message=\"Use === instead of ==. == is only allowed when comparing against `null`\">line 3, col 2, Use === instead of ==. == is only allowed when comparing against `null`</failure>\n      </testcase>\n  </testsuite>\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n      <testcase name=\"org.biome.lint.suspicious.noDebugger\" line=\"6\" column=\"1\">\n          <failure message=\"This is an unexpected use of the debugger statement.\">line 5, col 0, This is an unexpected use of the debugger statement.</failure>\n      </testcase>\n  </testsuite>\n  <testsuite name=\"main.ts\" tests=\"1\" disabled=\"0\" errors=\"0\" failures=\"1\" package=\"org.biome\">\n      <testcase name=\"org.biome.lint.nursery.noEvolvingAny\" line=\"8\" column=\"5\">\n          <failure message=\"This variable's type is not allowed to evolve implicitly, leading to potential any types.\">line 7, col 4, This variable's type is not allowed to evolve implicitly, leading to potential any types.</failure>\n      </testcase>\n  </testsuite>\n</testsuites>\n```\n\nThis snippet shows you how to junit xml output, which is an important aspect of reporters.\n\n", "metadata": {"source_url": "https://biomejs.dev/reference/reporters", "title": "Reporters", "description": "Since version v1.8.0, Biome’s CLI accepts a --reporter argument that allows to change how diagnostics and summary are printed to terminal.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 22:11:05", "type": "code_examples", "page_metadata": {"twitter:image": "https://biomejs.dev/og/reference/reporters.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "ogLocale": "en", "og:type": "article", "ogSiteName": "Biome", "og:title": "Reporters", "description": "Control Biome's output with reporters", "og:image": "https://biomejs.dev/og/reference/reporters.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://biomejs.dev/og/reference/reporters.png", "ogDescription": "Control Biome's output with reporters", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogTitle": "Reporters", "og:description": "Control Biome's output with reporters", "title": "Reporters | Biome", "og:url": "https://biomejs.dev/reference/reporters/", "og:site_name": "Biome", "twitter:card": "summary_large_image", "ogUrl": "https://biomejs.dev/reference/reporters/", "language": "en", "scrapeId": "5bc82b65-0288-4467-b98e-4de2192fc71a", "sourceURL": "https://biomejs.dev/reference/reporters", "url": "https://biomejs.dev/reference/reporters/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what Biome VS Code Extension is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain Biome VS Code Extension in biomejs-reference.\n\n# Biome VS Code Extension\n\nThe Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.Here's a quick rundown of what this is about:\n\n## Biome VS Code Extension\n\nBiome unifies your development stack by combining the functionality of separate tools. It uses a single configuration file, has fantastic performance, and works with any stack. This extension brings Biome to your editor so that you can:\n\n- Format files _on save_ or when issuing the _Format Document_ command\n- See lints while you type and apply code fixes\n- Perform refactors\n\n## Installation\n\nYou can install the code extension by heading to the extension’s Visual Studio Code Market Place page or from within VS Code by either:\n\n- Open the _extensions_ tab ( _View_ → _Extensions)_ and search for Biome.\n- Open the _Quick Open Overlay_ ( `Ctrl`/ `⌘` + `P` or _Go -> Go to File_), enter `ext install biomejs.biome`, and hit enter.\n\n## Getting Started\n\nConfigure Biome as the default formatter for supported files to ensure that VS Code uses Biome over other formatters that you may have installed. You can do so by opening a JavaScript or TypeScript and then:\n\n- Open the Command Palette ( `Ctrl`/ `⌘` + `⇧` + `P` or View → Command Palette)\n- Select _Format Document With…_\n- Select _Configure Default Formatter…_\n- Select Biome\n\nYou can also enable Biome for specific languages only:\n\n- Open the `settings.json`: open the _Command Palette_( `Ctrl`/ `⌘` + `⇧` + `P`) and select _Preferences: Open User Settings (JSON)_\n- And set the `editor.defaultFormatter` to `biomejs.biome` for the desired language.\n\n## Default Formatter\n\nThis configuration sets Biome as the default formatter for JavaScript files. All other files will be formatted using `<other formatter>`:\n\n```\n{\n  \"editor.defaultFormatter\": \"<other formatter>\",\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"biomejs.biome\"\n  }\n}\n```\n\n## Configuration Resolution\n\nThe extension automatically loads the `biome.json` file from the workspace’s root directory.\n\n## Biome Resolution\n\nThe extension tries to use Biome from your project’s local dependencies ( `node_modules/@biomejs/biome`). We recommend adding Biome as a project dependency to ensure that NPM scripts and the extension use the same Biome version.\n\nYou can also explicitly specify the `Biome` binary the extension should use by configuring the `biome.lspBin` setting in your editor options.\n\nIf the project has no dependency on Biome and no explicit path is configured, the extension uses the Biome version included in its bundle.\n\n## Usage\n\nTo format an entire document, open the _Command Palette_ ( `Ctrl`/ `⌘` + `⇧` + `P`) and select _Format Document_.\n\nTo format a text range, select the text you want to format, open the _Command Palette_ ( `Ctrl`/ `⌘` + `⇧` + `P`), and select _Format Selection_.\n\n## Format on save\n\nBiome respects VS Code’s _Format on Save_ setting. To enable format on save, open the settings ( _File_ -\u0014 _Preferences_ -\u0014 _Settings_), search for `editor.formatOnSave`, and enable the option.\n\n## Fix on save\n\nBiome respects VS Code’s _Code Actions On Save_ setting. To enable fix on save, add\n\n```\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.biome\": \"explicit\"\n  }\n}\n```\nin vscode `settings.json`.\n\n## Imports Sorting [Experimental]\n\nThe Biome VS Code extension supports imports sorting through the “Organize Imports” code action. By default this action can be run using the `⇧` + `Alt` + `O` keyboard shortcut, or is accessible through the _Command Palette_ ( `Ctrl`/ `⌘` + `⇧` + `P`) by selecting _Organize Imports_.\n\nYou can add the following to your editor configuration if you want the action to run automatically on save instead of calling it manually:\n\n```\n{\n  \"editor.codeActionsOnSave\":{\n    \"source.organizeImports.biome\": \"explicit\"\n  }\n}\n```\n\n## Extension Settings\n\n### `biome.lspBin`\nThe `biome.lspBin` option overrides the Biome binary used by the extension. The workspace folder is used as the base path if the path is relative.\n\n### `biome.rename`\nEnables Biome to handle renames in the workspace (experimental).\n\n## Versioning\n\nWe follow the specs suggested by the official documentation:\n\nOdd minor versions are dedicated to pre-releases, e.g. `*.5.*` .\nEven minor versions are dedicated to official releases, e.g. `*.6.*`.\n\n## Troubleshooting\n\n### I installed `@biomejs/biome`, but the extension shows a warning saying that it could not resolve library\nThe library `@biomejs/biome` specifies some optional dependencies that are installed based on your OS and architecture.\n\nIt’s possible though, that the extension can’t resolve the binary when loading the extension. This is caused - probably - by your package manager.\n\n**To resolve the issue**, try to install the binary manually. The warning should show you the binary that belongs to your machine.\n\n**If you work in a team that use different OSs/architectures**, it’s advised to install all the binaries:\n- `@biomejs/cli-darwin-arm64`\n- `@biomejs/cli-darwin-x64`\n- `@biomejs/cli-linux-arm64`\n- `@biomejs/cli-linux-x64`\n- `@biomejs/cli-win32-arm64`\n- `@biomejs/cli-win32-x64`.\n\n## My biome.json file is ignored in a multi-root workspace\n\nCurrently, support for multi-root workspaces is limited, making `biome.json` files placed in individual root folders sometimes invisible to the extension. For now, you may need to set up an individual workspace for each folder that depends on Biome.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "overview", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I biome vs code extension in biomejs-reference?\n\nAssistant: To biome vs code extension in biomejs-reference, here's what you do:\nBiome unifies your development stack by combining the functionality of separate tools. It uses a single configuration file, has fantastic performance, and works with any stack. This extension brings Biome to your editor so that you can:\n\n- Format files _on save_ or when issuing the _Format Document_ command\n- See lints while you type and apply code fixes\n- Perform refactors.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I installation in biomejs-reference?\n\nAssistant: To installation in biomejs-reference, here's what you do:\nYou can install the code extension by heading to the extension’s Visual Studio Code Market Place page or from within VS Code by either:\n\n- Open the _extensions_ tab ( _View_ → _Extensions)_ and search for Biome.\n- Open the _Quick Open Overlay_ ( `Ctrl`/ `⌘` + `P` or _Go -> Go to File_), enter `ext install biomejs.biome`, and hit enter..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I getting started in biomejs-reference?\n\nAssistant: To getting started in biomejs-reference, here's what you do:\nConfigure Biome as the default formatter for supported files to ensure that VS Code uses Biome over other formatters that you may have installed. You can do so by opening a JavaScript or TypeScript and then:\n\n- Open the Command Palette ( `Ctrl`/ `⌘` + `⇧` + `P` or View → Command Palette)\n- Select _Format Document With…_\n- Select _Configure Default Formatter…_\n- Select Biome\n\nYou can also enable Biome for specific languages only:\n\n- Open the `settings.json`: open the _Command Palette_( `Ctrl`/ `⌘` + `⇧` + `P`) and select _Preferences: Open User Settings (JSON)_\n- And set the `editor.defaultFormatter` to `biomejs.biome` for the desired language..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I default formatter in biomejs-reference?\n\nAssistant: To default formatter in biomejs-reference, here's what you do:\nThis configuration sets Biome as the default formatter for JavaScript files. All other files will be formatted using `<other formatter>`:\n\n```\n{\n  \"editor.defaultFormatter\": \"<other formatter>\",\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"biomejs.biome\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I configuration resolution in biomejs-reference?\n\nAssistant: To configuration resolution in biomejs-reference, here's what you do:\nThe extension automatically loads the `biome.json` file from the workspace’s root directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I biome resolution in biomejs-reference?\n\nAssistant: To biome resolution in biomejs-reference, here's what you do:\nThe extension tries to use Biome from your project’s local dependencies ( `node_modules/@biomejs/biome`). We recommend adding Biome as a project dependency to ensure that NPM scripts and the extension use the same Biome version.\n\nYou can also explicitly specify the `Biome` binary the extension should use by configuring the `biome.lspBin` setting in your editor options.\n\nIf the project has no dependency on Biome and no explicit path is configured, the extension uses the Biome version included in its bundle..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I usage in biomejs-reference?\n\nAssistant: To usage in biomejs-reference, here's what you do:\nTo format an entire document, open the _Command Palette_ ( `Ctrl`/ `⌘` + `⇧` + `P`) and select _Format Document_.\n\nTo format a text range, select the text you want to format, open the _Command Palette_ ( `Ctrl`/ `⌘` + `⇧` + `P`), and select _Format Selection_..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I format on save in biomejs-reference?\n\nAssistant: To format on save in biomejs-reference, here's what you do:\nBiome respects VS Code’s _Format on Save_ setting. To enable format on save, open the settings ( _File_ -\u0014 _Preferences_ -\u0014 _Settings_), search for `editor.formatOnSave`, and enable the option..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I fix on save in biomejs-reference?\n\nAssistant: To fix on save in biomejs-reference, here's what you do:\nBiome respects VS Code’s _Code Actions On Save_ setting. To enable fix on save, add\n\n```\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.biome\": \"explicit\"\n  }\n}\n```\nin vscode `settings.json`..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I imports sorting [experimental] in biomejs-reference?\n\nAssistant: To imports sorting [experimental] in biomejs-reference, here's what you do:\nThe Biome VS Code extension supports imports sorting through the “Organize Imports” code action. By default this action can be run using the `⇧` + `Alt` + `O` keyboard shortcut, or is accessible through the _Command Palette_ ( `Ctrl`/ `⌘` + `⇧` + `P`) by selecting _Organize Imports_.\n\nYou can add the following to your editor configuration if you want the action to run automatically on save instead of calling it manually:\n\n```\n{\n  \"editor.codeActionsOnSave\":{\n    \"source.organizeImports.biome\": \"explicit\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I extension settings in biomejs-reference?\n\nAssistant: To extension settings in biomejs-reference, here's what you do:\n### `biome.lspBin`\nThe `biome.lspBin` option overrides the Biome binary used by the extension. The workspace folder is used as the base path if the path is relative.\n\n### `biome.rename`\nEnables Biome to handle renames in the workspace (experimental)..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I versioning in biomejs-reference?\n\nAssistant: To versioning in biomejs-reference, here's what you do:\nWe follow the specs suggested by the official documentation:\n\nOdd minor versions are dedicated to pre-releases, e.g. `*.5.*` .\nEven minor versions are dedicated to official releases, e.g. `*.6.*`..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I troubleshooting in biomejs-reference?\n\nAssistant: To troubleshooting in biomejs-reference, here's what you do:\n### I installed `@biomejs/biome`, but the extension shows a warning saying that it could not resolve library\nThe library `@biomejs/biome` specifies some optional dependencies that are installed based on your OS and architecture.\n\nIt’s possible though, that the extension can’t resolve the binary when loading the extension. This is caused - probably - by your package manager.\n\n**To resolve the issue**, try to install the binary manually. The warning should show you the binary that belongs to your machine.\n\n**If you work in a team that use different OSs/architectures**, it’s advised to install all the binaries:\n- `@biomejs/cli-darwin-arm64`\n- `@biomejs/cli-darwin-x64`\n- `@biomejs/cli-linux-arm64`\n- `@biomejs/cli-linux-x64`\n- `@biomejs/cli-win32-arm64`\n- `@biomejs/cli-win32-x64`..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I my biome.json file is ignored in a multi-root workspace in biomejs-reference?\n\nAssistant: To my biome.json file is ignored in a multi-root workspace in biomejs-reference, here's what you do:\nCurrently, support for multi-root workspaces is limited, making `biome.json` files placed in individual root folders sometimes invisible to the extension. For now, you may need to set up an individual workspace for each folder that depends on Biome..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you give me some code examples for Biome VS Code Extension in biomejs-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Default Formatter Configuration**:\n\n```yaml\n{\n  \"editor.defaultFormatter\": \"<other formatter>\",\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"biomejs.biome\"\n  }\n}\n```\n\nThis snippet shows you how to default formatter configuration, which is an important aspect of biome vs code extension.\n\n**Fix on Save Configuration**:\n\n```yaml\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.biome\": \"explicit\"\n  }\n}\n```\n\nThis snippet shows you how to fix on save configuration, which is an important aspect of biome vs code extension.\n\n**Imports Sorting Configuration**:\n\n```yaml\n{\n  \"editor.codeActionsOnSave\":{\n    \"source.organizeImports.biome\": \"explicit\"\n  }\n}\n```\n\nThis snippet shows you how to imports sorting configuration, which is an important aspect of biome vs code extension.\n\n", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "code_examples", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: What are some tips for using Biome VS Code Extension in biomejs-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAdd Biome as a project dependency to ensure that NPM scripts and the extension use the same Biome version.\n\nInstall all binaries if working in a team with different OSs/architectures.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/reference/vscode", "title": "Biome VS Code Extension", "description": "The Biome VS Code Extension unifies your development stack by combining the functionality of separate tools, allowing for file formatting, linting, and refactoring directly in the editor.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 22:17:39", "type": "best_practices", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "description": "Notes about the Biome's VSCode extension", "og:site_name": "Biome", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1", "title": "VSCode extension | Biome", "ogImage": "https://biomejs.dev/og/reference/vscode.png", "ogLocale": "en", "ogTitle": "VSCode extension", "ogDescription": "Notes about the Biome's VSCode extension", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:type": "article", "ogUrl": "https://biomejs.dev/reference/vscode/", "ogSiteName": "Biome", "og:title": "VSCode extension", "og:url": "https://biomejs.dev/reference/vscode/", "twitter:image": "https://biomejs.dev/og/reference/vscode.png", "og:image": "https://biomejs.dev/og/reference/vscode.png", "og:description": "Notes about the Biome's VSCode extension", "scrapeId": "03acc773-6c5a-44b7-8f51-9d111dd63362", "sourceURL": "https://biomejs.dev/reference/vscode", "url": "https://biomejs.dev/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: Can you explain what Configuration is in biomejs-reference?\n\nAssistant: Sure, I'd be happy to explain Configuration in biomejs-reference.\n\n# Configuration\n\nThis page covers the configuration options available for Biome, including the JSON schema.Here's a quick rundown of what this is about:\n\n## $schema\n\nAllows to pass a path to a JSON schema file.\n\nWe publish a JSON schema file for the `biome.json`.\n\nYou can specify a relative path to the schema of the `@biomejs/biome` npm package if `@biomejs/biome` is installed in the `node_modules` folder:\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/reference/configuration", "title": "Configuration", "description": "This page covers the configuration options available for Biome, including the JSON schema.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 23:22:07", "type": "overview", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "viewport": "width=device-width, initial-scale=1", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogSiteName": "Biome", "title": "Configuration | Biome", "ogLocale": "en", "og:url": "https://biomejs.dev/reference/configuration/", "og:locale": "en", "og:title": "Configuration", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/reference/configuration.png", "ogImage": "https://biomejs.dev/og/reference/configuration.png", "ogUrl": "https://biomejs.dev/reference/configuration/", "ogTitle": "Configuration", "twitter:card": "summary_large_image", "og:type": "article", "ogDescription": "How to customize and configure Biome with biome.json.", "twitter:image": "https://biomejs.dev/og/reference/configuration.png", "og:description": "How to customize and configure Biome with biome.json.", "description": "How to customize and configure Biome with biome.json.", "scrapeId": "2cca99e7-4c53-49ef-91ff-918ba39e785e", "sourceURL": "https://biomejs.dev/reference/configuration", "url": "https://biomejs.dev/reference/configuration/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-reference expert.\n\nUser: How do I $schema in biomejs-reference?\n\nAssistant: To $schema in biomejs-reference, here's what you do:\nAllows to pass a path to a JSON schema file.\n\nWe publish a JSON schema file for the `biome.json`.\n\nYou can specify a relative path to the schema of the `@biomejs/biome` npm package if `@biomejs/biome` is installed in the `node_modules` folder:.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/reference/configuration", "title": "Configuration", "description": "This page covers the configuration options available for Biome, including the JSON schema.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 23:22:07", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "viewport": "width=device-width, initial-scale=1", "language": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogSiteName": "Biome", "title": "Configuration | Biome", "ogLocale": "en", "og:url": "https://biomejs.dev/reference/configuration/", "og:locale": "en", "og:title": "Configuration", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/reference/configuration.png", "ogImage": "https://biomejs.dev/og/reference/configuration.png", "ogUrl": "https://biomejs.dev/reference/configuration/", "ogTitle": "Configuration", "twitter:card": "summary_large_image", "og:type": "article", "ogDescription": "How to customize and configure Biome with biome.json.", "twitter:image": "https://biomejs.dev/og/reference/configuration.png", "og:description": "How to customize and configure Biome with biome.json.", "description": "How to customize and configure Biome with biome.json.", "scrapeId": "2cca99e7-4c53-49ef-91ff-918ba39e785e", "sourceURL": "https://biomejs.dev/reference/configuration", "url": "https://biomejs.dev/reference/configuration/", "statusCode": 200}}}
