{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you explain what 404 is in biomejs-internals?\n\nAssistant: Sure, I'd be happy to explain 404 in biomejs-internals.\n\n# 404\n\nBiome not found. Check the URL or try using the search bar.", "metadata": {"source_url": "https://biomejs.dev/internals", "title": "404", "description": "Biome not found. Check the URL or try using the search bar.", "has_code_examples": false, "has_best_practices": false, "section_count": 0, "timestamp": "2025-02-28 21:58:36", "type": "overview", "page_metadata": {"title": "404 | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/404.png", "og:title": "404", "twitter:card": "summary_large_image", "og:type": "article", "language": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogUrl": "https://biomejs.dev/404/", "og:url": "https://biomejs.dev/404/", "ogLocale": "en", "og:locale": "en", "favicon": "https://biomejs.dev/img/favicon.svg", "twitter:image": "https://biomejs.dev/og/404.png", "ogTitle": "404", "ogImage": "https://biomejs.dev/og/404.png", "ogSiteName": "Biome", "scrapeId": "3e018c66-0307-4d50-9f6f-5b4b4a6baf14", "sourceURL": "https://biomejs.dev/internals", "url": "https://biomejs.dev/internals", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you explain what Architecture is in biomejs-internals?\n\nAssistant: Sure, I'd be happy to explain Architecture in biomejs-internals.\n\n# Architecture\n\nThis document covers some of the internals of Biome, and how they are used inside the project.Here's a quick rundown of what this is about:\n\n## Parser and CST\n\nThe architecture of the parser is bumped by an internal fork of [rowan](https://github.com/rust-analyzer/rowan), a library that implements the [Green and Red tree](https://learn.microsoft.com/en-us/archive/blogs/ericlippert/persistence-facades-and-roslyns-red-green-trees) pattern.\n\nThe CST (Concrete Syntax Tree) is a data structure very similar to an AST (Abstract Syntax Tree) that keeps track of all the information of a program, trivia included.\n\n**Trivia** is represented by all that information that is important to a program to run:\n\n- spaces\n- tabs\n- comments\n\nTrivia is attached to a node. A node can have leading trivia and trailing trivia. If you read code from left to right, leading trivia appears before a keyword, and trialing trivia appears after a keyword.\n\nLeading trivia and trailing trivia are categorized as follows:\n\n- Every trivia up to the token/keyword (including line breaks) will be the **leading trivia**;\n- Everything until the next linebreak (but not including it) will be the **trailing trivia**;\n\nGiven the following JavaScript snippet, `// comment 1` is a trailing trivia of the token `;`, and `// comment 2` is a leading trivia to the keyword `const`. Below is a minimized version of the CST represented by Biome:\n\n```\n\nconst a = \"foo\"; // comment 1\n\n// comment 2\n\nconst b = \"bar\";\n```\n\n```\n\n0: JS_MODULE@0..55\n\n    ...\n\n      1: SEMICOLON@15..27 \";\" [] [Whitespace(\" \"), Comments(\"// comment 1\")]\n\n    1: JS_VARIABLE_STATEMENT@27..55\n\n        ...\n\n        1: CONST_KW@27..45 \"const\" [Newline(\"\\n\"), Comments(\"// comment 2\"), Newline(\"\\n\")] [Whitespace(\" \")]\n\n  3: EOF@55..55 \"\" [] []\n```\n\nThe CST is never directly accessible by design; a developer can read its information using the Red tree, using a number of APIs that are autogenerated from the grammar of the language.\n\n## Resilient and recoverable parser\n\nIn order to construct a CST, a parser needs to be error-resilient and recoverable:\n\n- resilient: a parser that is able to resume parsing after encountering syntax errors that belong to the language;\n- recoverable: a parser that is able to **understand** where an error occurred and being able to resume the parsing by creating **correct** information;\n\nThe recoverable part of the parser is not a science, and no rules are set in stone. This means that depending on what the parser was parsing and where an error occurred, the parser might be able to recover itself in an expected way.\n\nThe parser also uses’ Bogus’ nodes to protect the consumers from consuming incorrect syntax. These nodes are used to decorate the broken code caused by a syntax error.\n\nIn the following example, the parentheses in the `while` are missing, although the parser can recover itself in a good manner and can represent the code with a decent CST. The parenthesis and condition of the loop are marked as missing, and the code block is correctly parsed:\n\n```\nwhile {}\n```\n\n```\nJsModule {\n\n  interpreter_token: missing (optional),\n\n  directives: JsDirectiveList [],\n\n  items: JsModuleItemList [\\\n\\\n    JsWhileStatement {\\\n\\\n      while_token: WHILE_KW@0..6 \"while\" [] [Whitespace(\" \")],\\\n\\\n      l_paren_token: missing (required),\\\n\\\n      test: missing (required),\\\n\\\n      r_paren_token: missing (required),\\\n\\\n      body: JsBlockStatement {\\\n\\\n        l_curly_token: L_CURLY@6..7 \"{\" [] [],\\\n\\\n        statements: JsStatementList [],\\\n\\\n        r_curly_token: R_CURLY@7..8 \"}\" [] [],\\\n\\\n      },\\\n\\\n    },\\\n\\\n  ],\n\n  eof_token: EOF@8..8 \"\" [] [],\n\n}\n```\n\nThis is an error emitted during parsing:\n\n```\nmain.tsx:1:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ expected `(` but instead found `{`\n\n  > 1 │ while {}\n\n      │       ^\n\n  ℹ Remove {\n```\n\nThe same can’t be said for the following snippet. The parser can’t properly understand the syntax during the recovery phase, so it needs to rely on the bogus nodes to mark some syntax as erroneous. Notice the `JsBogusStatement`:\n\n```\nfunction}\n```\n\n```\nJsModule {\n\n  interpreter_token: missing (optional),\n\n  directives: JsDirectiveList [],\n\n  items: JsModuleItemList [\\\n\\\n    TsDeclareFunctionDeclaration {\\\n\\\n      async_token: missing (optional),\\\n\\\n      function_token: FUNCTION_KW@0..8 \"function\" [] [],\\\n\\\n      id: missing (required),\\\n\\\n      type_parameters: missing (optional),\\\n\\\n      parameters: missing (required),\\\n\\\n      return_type_annotation: missing (optional),\\\n\\\n      semicolon_token: missing (optional),\\\n\\\n    },\\\n\\\n    JsBogusStatement {\\\n\\\n      items: [\\\n\\\n        R_CURLY@8..9 \"}\" [] [],\\\n\\\n      ],\\\n\\\n    },\\\n\\\n  ],\n\n  eof_token: EOF@9..9 \"\" [] [],\n\n}\n```\n\nThis is the error we get from the parsing phase:\n\n```\nmain.tsx:1:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ expected a name for the function in a function declaration, but found none\n\n  > 1 │ function}\n\n      │         ^\n``\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/internals/architecture", "title": "Architecture", "description": "This document covers some of the internals of Biome, and how they are used inside the project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:25", "type": "overview", "page_metadata": {"ogSiteName": "Biome", "language": "en", "og:image": "https://biomejs.dev/og/internals/architecture.png", "og:description": "How Biome works under the hood.", "ogUrl": "https://biomejs.dev/internals/architecture/", "og:url": "https://biomejs.dev/internals/architecture/", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogDescription": "How Biome works under the hood.", "og:title": "Architecture", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:card": "summary_large_image", "description": "How Biome works under the hood.", "ogImage": "https://biomejs.dev/og/internals/architecture.png", "ogTitle": "Architecture", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "twitter:image": "https://biomejs.dev/og/internals/architecture.png", "og:locale": "en", "title": "Architecture | Biome", "scrapeId": "21983b39-5c68-46b3-b8eb-6c1e0c9cc0e3", "sourceURL": "https://biomejs.dev/internals/architecture", "url": "https://biomejs.dev/internals/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I parser and cst in biomejs-internals?\n\nAssistant: To parser and cst in biomejs-internals, here's what you do:\nThe architecture of the parser is bumped by an internal fork of [rowan](https://github.com/rust-analyzer/rowan), a library that implements the [Green and Red tree](https://learn.microsoft.com/en-us/archive/blogs/ericlippert/persistence-facades-and-roslyns-red-green-trees) pattern.\n\nThe CST (Concrete Syntax Tree) is a data structure very similar to an AST (Abstract Syntax Tree) that keeps track of all the information of a program, trivia included.\n\n**Trivia** is represented by all that information that is important to a program to run:\n\n- spaces\n- tabs\n- comments\n\nTrivia is attached to a node. A node can have leading trivia and trailing trivia. If you read code from left to right, leading trivia appears before a keyword, and trialing trivia appears after a keyword.\n\nLeading trivia and trailing trivia are categorized as follows:\n\n- Every trivia up to the token/keyword (including line breaks) will be the **leading trivia**;\n- Everything until the next linebreak (but not including it) will be the **trailing trivia**;\n\nGiven the following JavaScript snippet, `// comment 1` is a trailing trivia of the token `;`, and `// comment 2` is a leading trivia to the keyword `const`. Below is a minimized version of the CST represented by Biome:\n\n```\n\nconst a = \"foo\"; // comment 1\n\n// comment 2\n\nconst b = \"bar\";\n```\n\n```\n\n0: JS_MODULE@0..55\n\n    ...\n\n      1: SEMICOLON@15..27 \";\" [] [Whitespace(\" \"), Comments(\"// comment 1\")]\n\n    1: JS_VARIABLE_STATEMENT@27..55\n\n        ...\n\n        1: CONST_KW@27..45 \"const\" [Newline(\"\\n\"), Comments(\"// comment 2\"), Newline(\"\\n\")] [Whitespace(\" \")]\n\n  3: EOF@55..55 \"\" [] []\n```\n\nThe CST is never directly accessible by design; a developer can read its information using the Red tree, using a number of APIs that are autogenerated from the grammar of the language..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/architecture", "title": "Architecture", "description": "This document covers some of the internals of Biome, and how they are used inside the project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:25", "type": "section_detail", "page_metadata": {"ogSiteName": "Biome", "language": "en", "og:image": "https://biomejs.dev/og/internals/architecture.png", "og:description": "How Biome works under the hood.", "ogUrl": "https://biomejs.dev/internals/architecture/", "og:url": "https://biomejs.dev/internals/architecture/", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogDescription": "How Biome works under the hood.", "og:title": "Architecture", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:card": "summary_large_image", "description": "How Biome works under the hood.", "ogImage": "https://biomejs.dev/og/internals/architecture.png", "ogTitle": "Architecture", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "twitter:image": "https://biomejs.dev/og/internals/architecture.png", "og:locale": "en", "title": "Architecture | Biome", "scrapeId": "21983b39-5c68-46b3-b8eb-6c1e0c9cc0e3", "sourceURL": "https://biomejs.dev/internals/architecture", "url": "https://biomejs.dev/internals/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I resilient and recoverable parser in biomejs-internals?\n\nAssistant: To resilient and recoverable parser in biomejs-internals, here's what you do:\nIn order to construct a CST, a parser needs to be error-resilient and recoverable:\n\n- resilient: a parser that is able to resume parsing after encountering syntax errors that belong to the language;\n- recoverable: a parser that is able to **understand** where an error occurred and being able to resume the parsing by creating **correct** information;\n\nThe recoverable part of the parser is not a science, and no rules are set in stone. This means that depending on what the parser was parsing and where an error occurred, the parser might be able to recover itself in an expected way.\n\nThe parser also uses’ Bogus’ nodes to protect the consumers from consuming incorrect syntax. These nodes are used to decorate the broken code caused by a syntax error.\n\nIn the following example, the parentheses in the `while` are missing, although the parser can recover itself in a good manner and can represent the code with a decent CST. The parenthesis and condition of the loop are marked as missing, and the code block is correctly parsed:\n\n```\nwhile {}\n```\n\n```\nJsModule {\n\n  interpreter_token: missing (optional),\n\n  directives: JsDirectiveList [],\n\n  items: JsModuleItemList [\\\n\\\n    JsWhileStatement {\\\n\\\n      while_token: WHILE_KW@0..6 \"while\" [] [Whitespace(\" \")],\\\n\\\n      l_paren_token: missing (required),\\\n\\\n      test: missing (required),\\\n\\\n      r_paren_token: missing (required),\\\n\\\n      body: JsBlockStatement {\\\n\\\n        l_curly_token: L_CURLY@6..7 \"{\" [] [],\\\n\\\n        statements: JsStatementList [],\\\n\\\n        r_curly_token: R_CURLY@7..8 \"}\" [] [],\\\n\\\n      },\\\n\\\n    },\\\n\\\n  ],\n\n  eof_token: EOF@8..8 \"\" [] [],\n\n}\n```\n\nThis is an error emitted during parsing:\n\n```\nmain.tsx:1:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ expected `(` but instead found `{`\n\n  > 1 │ while {}\n\n      │       ^\n\n  ℹ Remove {\n```\n\nThe same can’t be said for the following snippet. The parser can’t properly understand the syntax during the recovery phase, so it needs to rely on the bogus nodes to mark some syntax as erroneous. Notice the `JsBogusStatement`:\n\n```\nfunction}\n```\n\n```\nJsModule {\n\n  interpreter_token: missing (optional),\n\n  directives: JsDirectiveList [],\n\n  items: JsModuleItemList [\\\n\\\n    TsDeclareFunctionDeclaration {\\\n\\\n      async_token: missing (optional),\\\n\\\n      function_token: FUNCTION_KW@0..8 \"function\" [] [],\\\n\\\n      id: missing (required),\\\n\\\n      type_parameters: missing (optional),\\\n\\\n      parameters: missing (required),\\\n\\\n      return_type_annotation: missing (optional),\\\n\\\n      semicolon_token: missing (optional),\\\n\\\n    },\\\n\\\n    JsBogusStatement {\\\n\\\n      items: [\\\n\\\n        R_CURLY@8..9 \"}\" [] [],\\\n\\\n      ],\\\n\\\n    },\\\n\\\n  ],\n\n  eof_token: EOF@9..9 \"\" [] [],\n\n}\n```\n\nThis is the error we get from the parsing phase:\n\n```\nmain.tsx:1:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ expected a name for the function in a function declaration, but found none\n\n  > 1 │ function}\n\n      │         ^\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/architecture", "title": "Architecture", "description": "This document covers some of the internals of Biome, and how they are used inside the project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:25", "type": "section_detail", "page_metadata": {"ogSiteName": "Biome", "language": "en", "og:image": "https://biomejs.dev/og/internals/architecture.png", "og:description": "How Biome works under the hood.", "ogUrl": "https://biomejs.dev/internals/architecture/", "og:url": "https://biomejs.dev/internals/architecture/", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogDescription": "How Biome works under the hood.", "og:title": "Architecture", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:card": "summary_large_image", "description": "How Biome works under the hood.", "ogImage": "https://biomejs.dev/og/internals/architecture.png", "ogTitle": "Architecture", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "twitter:image": "https://biomejs.dev/og/internals/architecture.png", "og:locale": "en", "title": "Architecture | Biome", "scrapeId": "21983b39-5c68-46b3-b8eb-6c1e0c9cc0e3", "sourceURL": "https://biomejs.dev/internals/architecture", "url": "https://biomejs.dev/internals/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you give me some code examples for Architecture in biomejs-internals?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CST Example**:\n\n```yaml\nconst a = \"foo\"; // comment 1\n\n// comment 2\n\nconst b = \"bar\";\n```\n\nThis snippet shows you how to cst example, which is an important aspect of architecture.\n\n**CST Structure Example**:\n\n```yaml\n0: JS_MODULE@0..55\n\n    ...\n\n      1: SEMICOLON@15..27 \";\" [] [Whitespace(\" \"), Comments(\"// comment 1\")]\n\n    1: JS_VARIABLE_STATEMENT@27..55\n\n        ...\n\n        1: CONST_KW@27..45 \"const\" [Newline(\"\\n\"), Comments(\"// comment 2\"), Newline(\"\\n\")] [Whitespace(\" \")]\n\n  3: EOF@55..55 \"\" [] []\n```\n\nThis snippet shows you how to cst structure example, which is an important aspect of architecture.\n\n**Error Example**:\n\n```yaml\nmain.tsx:1:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n  ✖ expected `(` but instead found `{`\n\n  > 1 │ while {}\n\n      │       ^\n\n  ℹ Remove {\n```\n\nThis snippet shows you how to error example, which is an important aspect of architecture.\n\n**Bogus Node Example**:\n\n```yaml\nfunction}\n```\n\nThis snippet shows you how to bogus node example, which is an important aspect of architecture.\n\n", "metadata": {"source_url": "https://biomejs.dev/internals/architecture", "title": "Architecture", "description": "This document covers some of the internals of Biome, and how they are used inside the project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:25", "type": "code_examples", "page_metadata": {"ogSiteName": "Biome", "language": "en", "og:image": "https://biomejs.dev/og/internals/architecture.png", "og:description": "How Biome works under the hood.", "ogUrl": "https://biomejs.dev/internals/architecture/", "og:url": "https://biomejs.dev/internals/architecture/", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogDescription": "How Biome works under the hood.", "og:title": "Architecture", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:card": "summary_large_image", "description": "How Biome works under the hood.", "ogImage": "https://biomejs.dev/og/internals/architecture.png", "ogTitle": "Architecture", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "twitter:image": "https://biomejs.dev/og/internals/architecture.png", "og:locale": "en", "title": "Architecture | Biome", "scrapeId": "21983b39-5c68-46b3-b8eb-6c1e0c9cc0e3", "sourceURL": "https://biomejs.dev/internals/architecture", "url": "https://biomejs.dev/internals/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: What are some tips for using Architecture in biomejs-internals effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe parser should be resilient and recoverable to handle syntax errors effectively.\n\nUse bogus nodes to protect consumers from incorrect syntax.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/internals/architecture", "title": "Architecture", "description": "This document covers some of the internals of Biome, and how they are used inside the project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:25", "type": "best_practices", "page_metadata": {"ogSiteName": "Biome", "language": "en", "og:image": "https://biomejs.dev/og/internals/architecture.png", "og:description": "How Biome works under the hood.", "ogUrl": "https://biomejs.dev/internals/architecture/", "og:url": "https://biomejs.dev/internals/architecture/", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "ogDescription": "How Biome works under the hood.", "og:title": "Architecture", "favicon": "https://biomejs.dev/img/favicon.svg", "og:type": "article", "twitter:card": "summary_large_image", "description": "How Biome works under the hood.", "ogImage": "https://biomejs.dev/og/internals/architecture.png", "ogTitle": "Architecture", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "twitter:image": "https://biomejs.dev/og/internals/architecture.png", "og:locale": "en", "title": "Architecture | Biome", "scrapeId": "21983b39-5c68-46b3-b8eb-6c1e0c9cc0e3", "sourceURL": "https://biomejs.dev/internals/architecture", "url": "https://biomejs.dev/internals/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you explain what Philosophy is in biomejs-internals?\n\nAssistant: Sure, I'd be happy to explain Philosophy in biomejs-internals.\n\n# Philosophy\n\nThis list includes general ethos that the project should abide by. This list is not comprehensive. Some of these are obvious but are stated for completeness.Here's a quick rundown of what this is about:\n\n## Project Management\n\n- **Set clear expectations.** Make project intent and decisions known well in advance. Nothing should be a surprise.\n\n- **Clear messaging of decisions.** The team might evaluate options and make decisions using private channels. Team will try to keep discussions using public channels like [GitHub discussions](https://github.com/biomejs/biome/discussions) or [Discord](https://biomejs.dev/chat). Frequent private check-ins might happen. When decisions occur via private channels, the team has to commit to communicate these decisions using the public channels.\n\n## Technical\n\n- **Errors should suggest fixes and hints where possible.** These should be inferred and filtered from usage to reduce surfacing irrelevant and unhelpful messages.\n\n- **Unique and specific error messages.** No generic error messages. This helps users understand what went wrong and should provide maintainers with a unique call site and the necessary information to debug.\n\n- **Optimise API.** Question the existence of all options and flags. Are they necessary? Can they be combined? How can we reduce code branching?\n\n- **Document Code.** Strive to document the code as much as possible, especially the “hard-to-read” code, or for special logic that requires explanation. A well documented code helps its maintainability, especially when multiple people work on it. The developer after you will benefit from your knowledge, share it.\n\n- **Reduce jargon.** Don’t assume that users will understand specific terminology. Strive to provide precise meaning for experts and beginners. For example, use “character” where you would traditionally use “token” when producing parser errors.\n\n- **Utilize verbosity when naming commands and flags.** No unnecessary and confusing abbreviations.\n\n- **Use inclusive terminology.** Use gender-neutral pronouns. No ableist slurs. No usage of terms that could be considered insensitive.\n\n- **Build for generic clients.** Don’t assume that a terminal will only consume output using ANSI codes. Use abstractions that could be generalized for viewing in an IDE, browser, or other environments.\n\n- **Terminal output should be unambiguous.** When designing terminal output, don’t rely purely on formatting cues like color. Always use a combination of formatting, symbols, and spacing. If all ANSI codes are stripped, all the output should still be understood.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/internals/philosophy", "title": "Philosophy", "description": "This list includes general ethos that the project should abide by. This list is not comprehensive. Some of these are obvious but are stated for completeness.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:51", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogImage": "https://biomejs.dev/og/internals/philosophy.png", "ogSiteName": "Biome", "ogTitle": "Philosophy", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "og:title": "Philosophy", "description": "How we think about building Biome.", "twitter:image": "https://biomejs.dev/og/internals/philosophy.png", "ogUrl": "https://biomejs.dev/internals/philosophy/", "language": "en", "og:description": "How we think about building Biome.", "ogDescription": "How we think about building Biome.", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/philosophy/", "title": "Philosophy | Biome", "og:image": "https://biomejs.dev/og/internals/philosophy.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "scrapeId": "a30dbe6b-7715-426b-99ac-786dafdeb2c6", "sourceURL": "https://biomejs.dev/internals/philosophy", "url": "https://biomejs.dev/internals/philosophy/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I project management in biomejs-internals?\n\nAssistant: To project management in biomejs-internals, here's what you do:\n- **Set clear expectations.** Make project intent and decisions known well in advance. Nothing should be a surprise.\n\n- **Clear messaging of decisions.** The team might evaluate options and make decisions using private channels. Team will try to keep discussions using public channels like [GitHub discussions](https://github.com/biomejs/biome/discussions) or [Discord](https://biomejs.dev/chat). Frequent private check-ins might happen. When decisions occur via private channels, the team has to commit to communicate these decisions using the public channels..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/philosophy", "title": "Philosophy", "description": "This list includes general ethos that the project should abide by. This list is not comprehensive. Some of these are obvious but are stated for completeness.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:51", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogImage": "https://biomejs.dev/og/internals/philosophy.png", "ogSiteName": "Biome", "ogTitle": "Philosophy", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "og:title": "Philosophy", "description": "How we think about building Biome.", "twitter:image": "https://biomejs.dev/og/internals/philosophy.png", "ogUrl": "https://biomejs.dev/internals/philosophy/", "language": "en", "og:description": "How we think about building Biome.", "ogDescription": "How we think about building Biome.", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/philosophy/", "title": "Philosophy | Biome", "og:image": "https://biomejs.dev/og/internals/philosophy.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "scrapeId": "a30dbe6b-7715-426b-99ac-786dafdeb2c6", "sourceURL": "https://biomejs.dev/internals/philosophy", "url": "https://biomejs.dev/internals/philosophy/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I technical in biomejs-internals?\n\nAssistant: To technical in biomejs-internals, here's what you do:\n- **Errors should suggest fixes and hints where possible.** These should be inferred and filtered from usage to reduce surfacing irrelevant and unhelpful messages.\n\n- **Unique and specific error messages.** No generic error messages. This helps users understand what went wrong and should provide maintainers with a unique call site and the necessary information to debug.\n\n- **Optimise API.** Question the existence of all options and flags. Are they necessary? Can they be combined? How can we reduce code branching?\n\n- **Document Code.** Strive to document the code as much as possible, especially the “hard-to-read” code, or for special logic that requires explanation. A well documented code helps its maintainability, especially when multiple people work on it. The developer after you will benefit from your knowledge, share it.\n\n- **Reduce jargon.** Don’t assume that users will understand specific terminology. Strive to provide precise meaning for experts and beginners. For example, use “character” where you would traditionally use “token” when producing parser errors.\n\n- **Utilize verbosity when naming commands and flags.** No unnecessary and confusing abbreviations.\n\n- **Use inclusive terminology.** Use gender-neutral pronouns. No ableist slurs. No usage of terms that could be considered insensitive.\n\n- **Build for generic clients.** Don’t assume that a terminal will only consume output using ANSI codes. Use abstractions that could be generalized for viewing in an IDE, browser, or other environments.\n\n- **Terminal output should be unambiguous.** When designing terminal output, don’t rely purely on formatting cues like color. Always use a combination of formatting, symbols, and spacing. If all ANSI codes are stripped, all the output should still be understood..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/philosophy", "title": "Philosophy", "description": "This list includes general ethos that the project should abide by. This list is not comprehensive. Some of these are obvious but are stated for completeness.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:51", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogImage": "https://biomejs.dev/og/internals/philosophy.png", "ogSiteName": "Biome", "ogTitle": "Philosophy", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "og:title": "Philosophy", "description": "How we think about building Biome.", "twitter:image": "https://biomejs.dev/og/internals/philosophy.png", "ogUrl": "https://biomejs.dev/internals/philosophy/", "language": "en", "og:description": "How we think about building Biome.", "ogDescription": "How we think about building Biome.", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/philosophy/", "title": "Philosophy | Biome", "og:image": "https://biomejs.dev/og/internals/philosophy.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "scrapeId": "a30dbe6b-7715-426b-99ac-786dafdeb2c6", "sourceURL": "https://biomejs.dev/internals/philosophy", "url": "https://biomejs.dev/internals/philosophy/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: What are some tips for using Philosophy in biomejs-internals effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSet clear expectations.\n\nClear messaging of decisions.\n\nErrors should suggest fixes and hints where possible.\n\nUnique and specific error messages.\n\nOptimise API.\n\nDocument Code.\n\nReduce jargon.\n\nUtilize verbosity when naming commands and flags.\n\nUse inclusive terminology.\n\nBuild for generic clients.\n\nTerminal output should be unambiguous.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/internals/philosophy", "title": "Philosophy", "description": "This list includes general ethos that the project should abide by. This list is not comprehensive. Some of these are obvious but are stated for completeness.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 21:59:51", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:type": "article", "ogImage": "https://biomejs.dev/og/internals/philosophy.png", "ogSiteName": "Biome", "ogTitle": "Philosophy", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Biome", "og:title": "Philosophy", "description": "How we think about building Biome.", "twitter:image": "https://biomejs.dev/og/internals/philosophy.png", "ogUrl": "https://biomejs.dev/internals/philosophy/", "language": "en", "og:description": "How we think about building Biome.", "ogDescription": "How we think about building Biome.", "ogLocale": "en", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/philosophy/", "title": "Philosophy | Biome", "og:image": "https://biomejs.dev/og/internals/philosophy.png", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "scrapeId": "a30dbe6b-7715-426b-99ac-786dafdeb2c6", "sourceURL": "https://biomejs.dev/internals/philosophy", "url": "https://biomejs.dev/internals/philosophy/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you explain what Credits is in biomejs-internals?\n\nAssistant: Sure, I'd be happy to explain Credits in biomejs-internals.\n\n# Credits\n\nThis page provides credits to contributors, acknowledgements, and information about forks related to the Biome project.Here's a quick rundown of what this is about:\n\n## Logo\n\n![Alexandru-Ștefan Gârleanu](https://avatars.githubusercontent.com/u/33418415?v=4)[Alexandru-Ștefan Gârleanu](https://github.com/ugudango)\n\n## Code Contributors\n\nA comprehensive list of contributors to the Biome project, including their GitHub profiles.\n\n## Acknowledgements\n\nBiome contains code that is heavily inspired from other projects. They have been adapted to Biome’s language/infrastructure.\n\n- [Prettier](https://github.com/prettier/prettier/)\n  - [LICENSE](https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/LICENSE)\n\n## Forks\n\nBiome is a community fork of [Rome Tools](https://github.com/biomejs/biome/).\n_Rome Tools_ and _Biome_ are licensed under The MIT license.\n\nBiome contains code forked from other projects. They have been transformed in some way, sometimes substantially rewritten.\n\n- [`crates/biome_diagnostics`](https://github.com/biomejs/biome/tree/main/crates/biome_diagnostics)\n  - **Original**: [`rslint/rslint_errors`](https://github.com/rslint/rslint/tree/master/crates/rslint_errors)\n  - **License**: MIT\n- [`crates/biome_console/src/codespan`](https://github.com/biomejs/biome/tree/main/crates/biome_console)\n  - **Original**: [`brendanzab/codespan`](https://github.com/brendanzab/codespan)\n  - **License**: Apache License, Version 2.0\n- [`crates/biome_js_parser`](https://github.com/biomejs/biome/tree/main/crates/biome_js_parser)\n  - **Original**: [`rslint/rslint_parser`](https://github.com/rslint/rslint/tree/master/crates/rslint_parser)\n  - **License**: MIT\n- [`crates/biome_js_parser/lexer`](https://github.com/biomejs/biome/tree/main/crates/biome_js_parser/src/lexer)\n  - **Original**: [`rslint/rslint_lexer`](https://github.com/rslint/rslint/tree/master/crates/rslint_lexer)\n  - **License**: MIT\n- [`crates/biome_js_syntax`](https://github.com/biomejs/biome/tree/main/crates/biome_js_syntax)\n  - **Original**: [`rslint/rslint_syntax`](https://github.com/rslint/rslint/tree/master/crates/rslint_syntax)\n  - **License**: MIT\n- [`crates/biome_text_edit`](https://github.com/biomejs/biome/tree/main/crates/biome_text_edit)\n  - **Original**: [`rslint/rslint_text_edit`](https://github.com/rslint/rslint/tree/master/crates/rslint_text_edit)\n  - **License**: MIT\n- [`crates/biome_rowan`](https://github.com/biomejs/biome/tree/main/crates/biome_rowan)\n  - **Original**: [`rust-analyzer/rowan`](https://github.com/rust-analyzer/rowan)\n  - **License**: Apache License, Version 2.0\n- [`crates/biome_text_size`](https://github.com/biomejs/biome/tree/main/crates/biome_text_size)\n  - **Original**: [`rust-analyzer/text-size`](https://github.com/rust-analyzer/text-size)\n  - **License**: Apache License, Version 2.0 or MIT\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/internals/credits", "title": "Credits", "description": "This page provides credits to contributors, acknowledgements, and information about forks related to the Biome project.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:01:17", "type": "overview", "page_metadata": {"title": "Credits | Biome", "og:image": "https://biomejs.dev/og/internals/credits.png", "twitter:image": "https://biomejs.dev/og/internals/credits.png", "ogImage": "https://biomejs.dev/og/internals/credits.png", "language": "en", "ogLocale": "en", "ogSiteName": "Biome", "og:type": "article", "og:description": "Previous contributors and acknowledgments for projects that inspire us.", "og:title": "Credits", "og:site_name": "Biome", "og:url": "https://biomejs.dev/internals/credits/", "ogDescription": "Previous contributors and acknowledgments for projects that inspire us.", "description": "Previous contributors and acknowledgments for projects that inspire us.", "ogTitle": "Credits", "ogUrl": "https://biomejs.dev/internals/credits/", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "73324f48-ac9a-4b50-976c-3fd4249ffb9e", "sourceURL": "https://biomejs.dev/internals/credits", "url": "https://biomejs.dev/internals/credits/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I logo in biomejs-internals?\n\nAssistant: To logo in biomejs-internals, here's what you do:\n![Alexandru-Ștefan Gârleanu](https://avatars.githubusercontent.com/u/33418415?v=4)[Alexandru-Ștefan Gârleanu](https://github.com/ugudango).\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/credits", "title": "Credits", "description": "This page provides credits to contributors, acknowledgements, and information about forks related to the Biome project.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:01:17", "type": "section_detail", "page_metadata": {"title": "Credits | Biome", "og:image": "https://biomejs.dev/og/internals/credits.png", "twitter:image": "https://biomejs.dev/og/internals/credits.png", "ogImage": "https://biomejs.dev/og/internals/credits.png", "language": "en", "ogLocale": "en", "ogSiteName": "Biome", "og:type": "article", "og:description": "Previous contributors and acknowledgments for projects that inspire us.", "og:title": "Credits", "og:site_name": "Biome", "og:url": "https://biomejs.dev/internals/credits/", "ogDescription": "Previous contributors and acknowledgments for projects that inspire us.", "description": "Previous contributors and acknowledgments for projects that inspire us.", "ogTitle": "Credits", "ogUrl": "https://biomejs.dev/internals/credits/", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "73324f48-ac9a-4b50-976c-3fd4249ffb9e", "sourceURL": "https://biomejs.dev/internals/credits", "url": "https://biomejs.dev/internals/credits/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I code contributors in biomejs-internals?\n\nAssistant: To code contributors in biomejs-internals, here's what you do:\nA comprehensive list of contributors to the Biome project, including their GitHub profiles..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/credits", "title": "Credits", "description": "This page provides credits to contributors, acknowledgements, and information about forks related to the Biome project.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:01:17", "type": "section_detail", "page_metadata": {"title": "Credits | Biome", "og:image": "https://biomejs.dev/og/internals/credits.png", "twitter:image": "https://biomejs.dev/og/internals/credits.png", "ogImage": "https://biomejs.dev/og/internals/credits.png", "language": "en", "ogLocale": "en", "ogSiteName": "Biome", "og:type": "article", "og:description": "Previous contributors and acknowledgments for projects that inspire us.", "og:title": "Credits", "og:site_name": "Biome", "og:url": "https://biomejs.dev/internals/credits/", "ogDescription": "Previous contributors and acknowledgments for projects that inspire us.", "description": "Previous contributors and acknowledgments for projects that inspire us.", "ogTitle": "Credits", "ogUrl": "https://biomejs.dev/internals/credits/", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "73324f48-ac9a-4b50-976c-3fd4249ffb9e", "sourceURL": "https://biomejs.dev/internals/credits", "url": "https://biomejs.dev/internals/credits/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I acknowledgements in biomejs-internals?\n\nAssistant: To acknowledgements in biomejs-internals, here's what you do:\nBiome contains code that is heavily inspired from other projects. They have been adapted to Biome’s language/infrastructure.\n\n- [Prettier](https://github.com/prettier/prettier/)\n  - [LICENSE](https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/LICENSE).\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/credits", "title": "Credits", "description": "This page provides credits to contributors, acknowledgements, and information about forks related to the Biome project.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:01:17", "type": "section_detail", "page_metadata": {"title": "Credits | Biome", "og:image": "https://biomejs.dev/og/internals/credits.png", "twitter:image": "https://biomejs.dev/og/internals/credits.png", "ogImage": "https://biomejs.dev/og/internals/credits.png", "language": "en", "ogLocale": "en", "ogSiteName": "Biome", "og:type": "article", "og:description": "Previous contributors and acknowledgments for projects that inspire us.", "og:title": "Credits", "og:site_name": "Biome", "og:url": "https://biomejs.dev/internals/credits/", "ogDescription": "Previous contributors and acknowledgments for projects that inspire us.", "description": "Previous contributors and acknowledgments for projects that inspire us.", "ogTitle": "Credits", "ogUrl": "https://biomejs.dev/internals/credits/", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "73324f48-ac9a-4b50-976c-3fd4249ffb9e", "sourceURL": "https://biomejs.dev/internals/credits", "url": "https://biomejs.dev/internals/credits/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I forks in biomejs-internals?\n\nAssistant: To forks in biomejs-internals, here's what you do:\nBiome is a community fork of [Rome Tools](https://github.com/biomejs/biome/).\n_Rome Tools_ and _Biome_ are licensed under The MIT license.\n\nBiome contains code forked from other projects. They have been transformed in some way, sometimes substantially rewritten.\n\n- [`crates/biome_diagnostics`](https://github.com/biomejs/biome/tree/main/crates/biome_diagnostics)\n  - **Original**: [`rslint/rslint_errors`](https://github.com/rslint/rslint/tree/master/crates/rslint_errors)\n  - **License**: MIT\n- [`crates/biome_console/src/codespan`](https://github.com/biomejs/biome/tree/main/crates/biome_console)\n  - **Original**: [`brendanzab/codespan`](https://github.com/brendanzab/codespan)\n  - **License**: Apache License, Version 2.0\n- [`crates/biome_js_parser`](https://github.com/biomejs/biome/tree/main/crates/biome_js_parser)\n  - **Original**: [`rslint/rslint_parser`](https://github.com/rslint/rslint/tree/master/crates/rslint_parser)\n  - **License**: MIT\n- [`crates/biome_js_parser/lexer`](https://github.com/biomejs/biome/tree/main/crates/biome_js_parser/src/lexer)\n  - **Original**: [`rslint/rslint_lexer`](https://github.com/rslint/rslint/tree/master/crates/rslint_lexer)\n  - **License**: MIT\n- [`crates/biome_js_syntax`](https://github.com/biomejs/biome/tree/main/crates/biome_js_syntax)\n  - **Original**: [`rslint/rslint_syntax`](https://github.com/rslint/rslint/tree/master/crates/rslint_syntax)\n  - **License**: MIT\n- [`crates/biome_text_edit`](https://github.com/biomejs/biome/tree/main/crates/biome_text_edit)\n  - **Original**: [`rslint/rslint_text_edit`](https://github.com/rslint/rslint/tree/master/crates/rslint_text_edit)\n  - **License**: MIT\n- [`crates/biome_rowan`](https://github.com/biomejs/biome/tree/main/crates/biome_rowan)\n  - **Original**: [`rust-analyzer/rowan`](https://github.com/rust-analyzer/rowan)\n  - **License**: Apache License, Version 2.0\n- [`crates/biome_text_size`](https://github.com/biomejs/biome/tree/main/crates/biome_text_size)\n  - **Original**: [`rust-analyzer/text-size`](https://github.com/rust-analyzer/text-size)\n  - **License**: Apache License, Version 2.0 or MIT.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/credits", "title": "Credits", "description": "This page provides credits to contributors, acknowledgements, and information about forks related to the Biome project.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 22:01:17", "type": "section_detail", "page_metadata": {"title": "Credits | Biome", "og:image": "https://biomejs.dev/og/internals/credits.png", "twitter:image": "https://biomejs.dev/og/internals/credits.png", "ogImage": "https://biomejs.dev/og/internals/credits.png", "language": "en", "ogLocale": "en", "ogSiteName": "Biome", "og:type": "article", "og:description": "Previous contributors and acknowledgments for projects that inspire us.", "og:title": "Credits", "og:site_name": "Biome", "og:url": "https://biomejs.dev/internals/credits/", "ogDescription": "Previous contributors and acknowledgments for projects that inspire us.", "description": "Previous contributors and acknowledgments for projects that inspire us.", "ogTitle": "Credits", "ogUrl": "https://biomejs.dev/internals/credits/", "favicon": "https://biomejs.dev/img/favicon.svg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "73324f48-ac9a-4b50-976c-3fd4249ffb9e", "sourceURL": "https://biomejs.dev/internals/credits", "url": "https://biomejs.dev/internals/credits/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you explain what Language support is in biomejs-internals?\n\nAssistant: Sure, I'd be happy to explain Language support in biomejs-internals.\n\n# Language support\n\nThis page provides information on the language support available in Biome, including parsing, formatting, and linting capabilities for various programming languages.Here's a quick rundown of what this is about:\n\n## Language Support Overview\n\nLegend:\n\n- ✅: Supported\n- 🚫: Not in progress\n- ⌛️: In progress\n- ⚠️: Partially supported (with some caveats)\n\n| Language | Parsing | Formatting | Linting |\n| --- | --- | --- | --- |\n| [JavaScript](https://biomejs.dev/internals/language-support/#javascript-support) | ✅ | ✅ | ✅ |\n| [TypeScript](https://biomejs.dev/internals/language-support/#typescript-support) | ✅ | ✅ | ✅ |\n| JSX | ✅ | ✅ | ✅ |\n| TSX | ✅ | ✅ | ✅ |\n| JSON | ✅ | ✅ | ✅ |\n| JSONC | ✅ | ✅ | ✅ |\n| HTML | ⌛️ | ⌛️ | 🚫 |\n| [Vue](https://biomejs.dev/internals/language-support/#html-super-languages-support) | ⚠️ | ⚠️ | ⚠️ |\n| [Svelte](https://biomejs.dev/internals/language-support/#html-super-languages-support) | ⚠️ | ⚠️ | ⚠️ |\n| [Astro](https://biomejs.dev/internals/language-support/#html-super-languages-support) | ⚠️ | ⚠️ | ⚠️ |\n| CSS | ✅️ | ✅️ | ✅️ |\n| [YAML](https://github.com/biomejs/biome/issues/2365) | ⌛️ | 🚫 | 🚫 |\n| GraphQL | ✅️ | ✅️ | ✅️ |\n| [Markdown](https://github.com/biomejs/biome/issues/3718) | ⌛️ | 🚫 | 🚫 |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/internals/language-support", "title": "Language support", "description": "This page provides information on the language support available in Biome, including parsing, formatting, and linting capabilities for various programming languages.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 22:01:33", "type": "overview", "page_metadata": {"og:url": "https://biomejs.dev/internals/language-support/", "ogTitle": "Language support", "og:description": "Languages and features supported by Biome.", "ogUrl": "https://biomejs.dev/internals/language-support/", "og:locale": "en", "ogLocale": "en", "og:type": "article", "title": "Language support | Biome", "language": "en", "ogDescription": "Languages and features supported by Biome.", "ogSiteName": "Biome", "og:site_name": "Biome", "description": "Languages and features supported by Biome.", "og:title": "Language support", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/internals/language-support.png", "favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/language-support.png", "og:image": "https://biomejs.dev/og/internals/language-support.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "5559397a-2204-4980-ad6c-8aff0069ddb9", "sourceURL": "https://biomejs.dev/internals/language-support", "url": "https://biomejs.dev/internals/language-support/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I language support overview in biomejs-internals?\n\nAssistant: To language support overview in biomejs-internals, here's what you do:\nLegend:\n\n- ✅: Supported\n- 🚫: Not in progress\n- ⌛️: In progress\n- ⚠️: Partially supported (with some caveats)\n\n| Language | Parsing | Formatting | Linting |\n| --- | --- | --- | --- |\n| [JavaScript](https://biomejs.dev/internals/language-support/#javascript-support) | ✅ | ✅ | ✅ |\n| [TypeScript](https://biomejs.dev/internals/language-support/#typescript-support) | ✅ | ✅ | ✅ |\n| JSX | ✅ | ✅ | ✅ |\n| TSX | ✅ | ✅ | ✅ |\n| JSON | ✅ | ✅ | ✅ |\n| JSONC | ✅ | ✅ | ✅ |\n| HTML | ⌛️ | ⌛️ | 🚫 |\n| [Vue](https://biomejs.dev/internals/language-support/#html-super-languages-support) | ⚠️ | ⚠️ | ⚠️ |\n| [Svelte](https://biomejs.dev/internals/language-support/#html-super-languages-support) | ⚠️ | ⚠️ | ⚠️ |\n| [Astro](https://biomejs.dev/internals/language-support/#html-super-languages-support) | ⚠️ | ⚠️ | ⚠️ |\n| CSS | ✅️ | ✅️ | ✅️ |\n| [YAML](https://github.com/biomejs/biome/issues/2365) | ⌛️ | 🚫 | 🚫 |\n| GraphQL | ✅️ | ✅️ | ✅️ |\n| [Markdown](https://github.com/biomejs/biome/issues/3718) | ⌛️ | 🚫 | 🚫 |.\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/language-support", "title": "Language support", "description": "This page provides information on the language support available in Biome, including parsing, formatting, and linting capabilities for various programming languages.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 22:01:33", "type": "section_detail", "page_metadata": {"og:url": "https://biomejs.dev/internals/language-support/", "ogTitle": "Language support", "og:description": "Languages and features supported by Biome.", "ogUrl": "https://biomejs.dev/internals/language-support/", "og:locale": "en", "ogLocale": "en", "og:type": "article", "title": "Language support | Biome", "language": "en", "ogDescription": "Languages and features supported by Biome.", "ogSiteName": "Biome", "og:site_name": "Biome", "description": "Languages and features supported by Biome.", "og:title": "Language support", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/internals/language-support.png", "favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/language-support.png", "og:image": "https://biomejs.dev/og/internals/language-support.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "5559397a-2204-4980-ad6c-8aff0069ddb9", "sourceURL": "https://biomejs.dev/internals/language-support", "url": "https://biomejs.dev/internals/language-support/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you give me some code examples for Language support in biomejs-internals?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**JavaScript Support Example**:\n\n```yaml\n<script>\n\n    import Component from \"./Component.vue\";\n\nimport Component from \"./Component.vue\";\n\n</script>\n```\n\nThis snippet shows you how to javascript support example, which is an important aspect of language support.\n\n**Linting Configuration for HTML Super Languages**:\n\n```yaml\n{\n\n  \"overrides\": [\\\n\\\n    {\\\n\\\n      \"include\": [\"*.svelte\", \"*.astro\", \"*.vue\"],\\\n\\\n      \"linter\": {\\\n\\\n        \"rules\": {\\\n\\\n          \"style\": {\\\n\\\n            \"useConst\": \"off\",\\\n\\\n            \"useImportType\": \"off\"\\\n\\\n          }\\\n\\\n        }\\\n\\\n      }\\\n\\\n    }\\\n\\\n  ]\n\n}\n```\n\nThis snippet shows you how to linting configuration for html super languages, which is an important aspect of language support.\n\n", "metadata": {"source_url": "https://biomejs.dev/internals/language-support", "title": "Language support", "description": "This page provides information on the language support available in Biome, including parsing, formatting, and linting capabilities for various programming languages.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 22:01:33", "type": "code_examples", "page_metadata": {"og:url": "https://biomejs.dev/internals/language-support/", "ogTitle": "Language support", "og:description": "Languages and features supported by Biome.", "ogUrl": "https://biomejs.dev/internals/language-support/", "og:locale": "en", "ogLocale": "en", "og:type": "article", "title": "Language support | Biome", "language": "en", "ogDescription": "Languages and features supported by Biome.", "ogSiteName": "Biome", "og:site_name": "Biome", "description": "Languages and features supported by Biome.", "og:title": "Language support", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/internals/language-support.png", "favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/language-support.png", "og:image": "https://biomejs.dev/og/internals/language-support.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "5559397a-2204-4980-ad6c-8aff0069ddb9", "sourceURL": "https://biomejs.dev/internals/language-support", "url": "https://biomejs.dev/internals/language-support/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: What are some tips for using Language support in biomejs-internals effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor .astro files, only the frontmatter portion of the file is supported.\n\nFor .vue and .svelte files, only the <script> tags portion of the file is supported.\n\nDiagnostics will only show code frames that belong to the portions mentioned above.\n\nWhen formatting .vue and .svelte files, the indentation of the JavaScript/TypeScript code will start from the beginning.\n\nWhen linting .svelte, .astro or .vue files, it’s advised to turn off a few additional rules to prevent compiler errors.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/internals/language-support", "title": "Language support", "description": "This page provides information on the language support available in Biome, including parsing, formatting, and linting capabilities for various programming languages.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 22:01:33", "type": "best_practices", "page_metadata": {"og:url": "https://biomejs.dev/internals/language-support/", "ogTitle": "Language support", "og:description": "Languages and features supported by Biome.", "ogUrl": "https://biomejs.dev/internals/language-support/", "og:locale": "en", "ogLocale": "en", "og:type": "article", "title": "Language support | Biome", "language": "en", "ogDescription": "Languages and features supported by Biome.", "ogSiteName": "Biome", "og:site_name": "Biome", "description": "Languages and features supported by Biome.", "og:title": "Language support", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://biomejs.dev/og/internals/language-support.png", "favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/language-support.png", "og:image": "https://biomejs.dev/og/internals/language-support.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "scrapeId": "5559397a-2204-4980-ad6c-8aff0069ddb9", "sourceURL": "https://biomejs.dev/internals/language-support", "url": "https://biomejs.dev/internals/language-support/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: Can you explain what Versioning is in biomejs-internals?\n\nAssistant: Sure, I'd be happy to explain Versioning in biomejs-internals.\n\n# Versioning\n\nThis page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.Here's a quick rundown of what this is about:\n\n## Semantic Versioning\n\nBiome follows semantic versioning. Due to the nature of Biome as a toolchain, it can be unclear what changes are considered major, minor, or patch. That’s why Biome uses the following versioning guide.\n\n## Patch Release\n\n- Fixing a lint rule that raises lint errors for valid code (false positives)\n- Fixing incorrect code suggestions\n- Fixing the formatting of a syntax that results in invalid code or changes the semantics of the program.\n- Improvements to the documentation\n- Internal changes that don’t change Biome’s functionality:\n  - Refactors\n  - Performance improvements\n  - Increase or change in test coverage\n- Improving the wording of diagnostics or fixing the rendering of diagnostics.\n- Re-releases after a failed release\n- Changing the formatting of established syntax.\n\n## Minor Release\n\n- Adding a new rule or promoting an existing lint rule to a stable group that is not recommended by default.\n- Adding linting and formatting support for a recently introduced language feature, even if that results in more reported linting errors.\n- Removal of recommended rules\n- Deprecation of existing rules\n- Adding new configuration optional configuration options that do not change the formatting or report more lint errors.\n- Adding a new recommended lint rule or promoting an existing lint rule from the nursery group to a recommended lint rule in a stable group.\n- Removal of a non- nursery rule or demoting a rule to the nursery group.\n\n## Major Release\n\n- Changes to the configuration that result in different formatting or more reported lint errors (adding/removing options, changing the default value)\n- Changes to Biome’s public API\n- Promotion of new features or tools that require some spotlight.\n\n## Visual Studio Code Extension\n\nVisual Studio Code doesn’t support pre-release tags for extensions. That’s why Biome uses the following version schema to distinguish stable and previews:\n- Stable releases use even version numbers: 10, 12, 14, 16, …\n- Previews use odd version numbers: 11, 13, 15, 17, …\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "overview", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I semantic versioning in biomejs-internals?\n\nAssistant: To semantic versioning in biomejs-internals, here's what you do:\nBiome follows semantic versioning. Due to the nature of Biome as a toolchain, it can be unclear what changes are considered major, minor, or patch. That’s why Biome uses the following versioning guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I patch release in biomejs-internals?\n\nAssistant: To patch release in biomejs-internals, here's what you do:\n- Fixing a lint rule that raises lint errors for valid code (false positives)\n- Fixing incorrect code suggestions\n- Fixing the formatting of a syntax that results in invalid code or changes the semantics of the program.\n- Improvements to the documentation\n- Internal changes that don’t change Biome’s functionality:\n  - Refactors\n  - Performance improvements\n  - Increase or change in test coverage\n- Improving the wording of diagnostics or fixing the rendering of diagnostics.\n- Re-releases after a failed release\n- Changing the formatting of established syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I minor release in biomejs-internals?\n\nAssistant: To minor release in biomejs-internals, here's what you do:\n- Adding a new rule or promoting an existing lint rule to a stable group that is not recommended by default.\n- Adding linting and formatting support for a recently introduced language feature, even if that results in more reported linting errors.\n- Removal of recommended rules\n- Deprecation of existing rules\n- Adding new configuration optional configuration options that do not change the formatting or report more lint errors.\n- Adding a new recommended lint rule or promoting an existing lint rule from the nursery group to a recommended lint rule in a stable group.\n- Removal of a non- nursery rule or demoting a rule to the nursery group..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I major release in biomejs-internals?\n\nAssistant: To major release in biomejs-internals, here's what you do:\n- Changes to the configuration that result in different formatting or more reported lint errors (adding/removing options, changing the default value)\n- Changes to Biome’s public API\n- Promotion of new features or tools that require some spotlight..\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: How do I visual studio code extension in biomejs-internals?\n\nAssistant: To visual studio code extension in biomejs-internals, here's what you do:\nVisual Studio Code doesn’t support pre-release tags for extensions. That’s why Biome uses the following version schema to distinguish stable and previews:\n- Stable releases use even version numbers: 10, 12, 14, 16, …\n- Previews use odd version numbers: 11, 13, 15, 17, ….\nPretty straightforward, right?", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "section_detail", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
{"text": "System: You are a helpful biomejs-internals expert.\n\nUser: What are some tips for using Versioning in biomejs-internals effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is highly recommended to save the exact version in your package.json instead of using range operators to prevent unexpected failures.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://biomejs.dev/internals/versioning", "title": "Versioning", "description": "This page covers the versioning methodology used by Biome, including semantic versioning and the distinctions between patch, minor, and major releases.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 22:01:41", "type": "best_practices", "page_metadata": {"favicon": "https://biomejs.dev/img/favicon.svg", "ogImage": "https://biomejs.dev/og/internals/versioning.png", "generator": ["Astro v5.3.1", "Starlight v0.32.0"], "og:url": "https://biomejs.dev/internals/versioning/", "og:description": "How we version Biome.", "ogTitle": "Versioning", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Biome", "twitter:image": "https://biomejs.dev/og/internals/versioning.png", "title": "Versioning | Biome", "og:site_name": "Biome", "og:image": "https://biomejs.dev/og/internals/versioning.png", "language": "en", "og:title": "Versioning", "og:type": "article", "og:locale": "en", "ogDescription": "How we version Biome.", "ogUrl": "https://biomejs.dev/internals/versioning/", "twitter:card": "summary_large_image", "description": "How we version Biome.", "ogLocale": "en", "scrapeId": "46b476e2-6e3f-4dbd-be89-051df8aa5d0c", "sourceURL": "https://biomejs.dev/internals/versioning", "url": "https://biomejs.dev/internals/versioning/", "statusCode": 200}}}
