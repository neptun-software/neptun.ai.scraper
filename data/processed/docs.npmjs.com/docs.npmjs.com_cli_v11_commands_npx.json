[
  {
    "index": 0,
    "tags": [
      "site_navigation"
    ],
    "content": [
      "Site navigation",
      "About npm",
      "Getting started",
      "Setting up your npm user account",
      "Creating a new user account on the public registry",
      "Creating a strong password",
      "Receiving a one-time password over email",
      "About two-factor authentication",
      "Configuring two-factor authentication",
      "Accessing npm using two-factor authentication",
      "Recovering your 2FA-enabled account",
      "Managing your npm user account",
      "Managing your profile settings",
      "Changing your npm username",
      "Deleting your npm user account",
      "Requesting an export of your personal data",
      "Paying for your npm user account",
      "Upgrading to a paid user account plan",
      "Viewing, downloading, and emailing receipts for your npm user account",
      "Updating user account billing settings",
      "Downgrading to a free user account plan",
      "Configuring your local environment",
      "About npm CLI versions",
      "Downloading and installing Node.js and npm",
      "Troubleshooting",
      "Generating and locating npm-debug.log files",
      "Common errors",
      "Try the latest stable version of node",
      "Try the latest stable version of npm",
      "Packages and modules",
      "Introduction to packages and modules",
      "About the public npm registry",
      "About packages and modules",
      "About scopes",
      "About public packages",
      "About private packages",
      "npm package scope, access level, and visibility",
      "Contributing packages to the registry",
      "Creating a package.json file",
      "Creating Node.js modules",
      "About package README files",
      "Creating and publishing unscoped public packages",
      "Creating and publishing scoped public packages",
      "Creating and publishing private packages",
      "Package name guidelines",
      "Specifying dependencies and devDependencies in a package.json file",
      "About semantic versioning",
      "Adding dist-tags to packages",
      "Updating and managing your published packages",
      "Changing package visibility",
      "Adding collaborators to private packages owned by a user account",
      "Updating your published package version number",
      "Deprecating and undeprecating packages or package versions",
      "Transferring a package from a user account to another user account",
      "Unpublishing packages from the registry",
      "Getting packages from the registry",
      "Searching for and choosing packages to download",
      "Downloading and installing packages locally",
      "Downloading and installing packages globally",
      "Resolving EACCES permissions errors when installing packages globally",
      "Updating packages downloaded from the registry",
      "Using npm packages in your projects",
      "Using deprecated packages",
      "Uninstalling packages and dependencies",
      "Securing your code",
      "About audit reports",
      "Auditing package dependencies for security vulnerabilities",
      "Generating provenance statements",
      "About ECDSA registry signatures",
      "Verifying ECDSA registry signatures",
      "Requiring 2FA for package publishing and settings modification",
      "Reporting malware in an npm package",
      "Integrations",
      "Integrating npm with external services",
      "About access tokens",
      "Creating and viewing access tokens",
      "Revoking access tokens",
      "Using private packages in a CI/CD workflow",
      "Docker and private modules",
      "Organizations",
      "Creating and managing organizations",
      "Creating an organization",
      "Converting your user account to an organization",
      "Requiring two-factor authentication in your organization",
      "Renaming an organization",
      "Deleting an organization",
      "Paying for your organization",
      "Upgrading to a paid organization plan",
      "Viewing, downloading, and emailing receipts for your organization",
      "Updating organization billing settings",
      "Downgrading to a free organization plan",
      "Managing organization members",
      "Adding members to your organization",
      "Accepting or rejecting an organization invitation",
      "Organization roles and permissions",
      "Managing organization permissions",
      "Removing members from your organization",
      "Managing teams",
      "About the developers team",
      "Creating teams",
      "Adding organization members to teams",
      "Removing organization members from teams",
      "Managing team access to organization packages",
      "Removing teams",
      "Managing organization packages",
      "About organization scopes and packages",
      "Configuring your npm client with your organization settings",
      "Creating and publishing an organization scoped package",
      "Policies",
      "Terms of Use",
      "Open Source Terms",
      "Private Terms",
      "Code of Conduct",
      "Package Name Disputes",
      "npm License",
      "Privacy Policy",
      "Unpublish Policy",
      "Copyright and DMCA Policy",
      "Logos and Usage",
      "Security",
      "Replication and web crawler policy",
      "Threats and mitigations",
      "npm CLI",
      "CLI Commands",
      "npm",
      "npm access",
      "npm adduser",
      "npm audit",
      "npm bugs",
      "npm cache",
      "npm ci",
      "npm completion",
      "npm config",
      "npm dedupe",
      "npm deprecate",
      "npm diff",
      "npm dist-tag",
      "npm docs",
      "npm doctor",
      "npm edit",
      "npm exec",
      "npm explain",
      "npm explore",
      "npm find-dupes",
      "npm fund",
      "npm help",
      "npm help-search",
      "npm init",
      "npm install",
      "npm install-ci-test",
      "npm install-test",
      "npm link",
      "npm login",
      "npm logout",
      "npm ls",
      "npm org",
      "npm outdated",
      "npm owner",
      "npm pack",
      "npm ping",
      "npm pkg",
      "npm prefix",
      "npm profile",
      "npm prune",
      "npm publish",
      "npm query",
      "npm rebuild",
      "npm repo",
      "npm restart",
      "npm root",
      "npm run-script",
      "npm sbom",
      "npm search",
      "npm shrinkwrap",
      "npm star",
      "npm stars",
      "npm start",
      "npm stop",
      "npm team",
      "npm test",
      "npm token",
      "npm uninstall",
      "npm unpublish",
      "npm unstar",
      "npm update",
      "npm version",
      "npm view",
      "npm whoami",
      "npx",
      "Configuring npm",
      "Install",
      "Folders",
      ".npmrc",
      "npm-shrinkwrap.json",
      "package.json",
      "package-lock.json",
      "Using npm",
      "Registry",
      "Package spec",
      "Config",
      "Logging",
      "Scope",
      "Scripts",
      "Workspaces",
      "Organizations",
      "Dependency Selectors",
      "Developers",
      "Removal",
      "Changelog",
      "npmjs.com",
      "Status",
      "Support",
      "GitHub",
      "CLI",
      "Commands",
      "npx"
    ],
    "error": false
  },
  {
    "index": 1,
    "tags": [
      "npx_command"
    ],
    "content": [
      "npx",
      "Run a command from a local or remote npm package",
      "Select CLI Version:",
      "Version 11.0.0 (Latest)",
      "See Details",
      "Table of contents",
      "Synopsis",
      "Description",
      "npx vs npm exec",
      "Examples",
      "Compatibility with Older npx Versions",
      "See Also"
    ],
    "error": false
  },
  {
    "index": 2,
    "tags": [
      "npx_synopsis"
    ],
    "content": [
      "Synopsis",
      "npx -- <pkg>[@<version>][args...]",
      "npx --package=<pkg>[@<version>] -- <cmd>[args...]",
      "npx -c\\'<cmd> [args...]\\'",
      "npx --package=foo -c\\'<cmd> [args...]\\'"
    ],
    "error": false
  },
  {
    "index": 3,
    "tags": [
      "npx_description"
    ],
    "content": [
      "Description",
      "This command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar context as running it via `npm run`.",
      "Whatever packages are specified by the `--package` option will be provided in the `PATH` of the executed command, along with any locally installed package executables. The `--package` option may be specified multiple times, to execute the supplied command in an environment where all specified packages are available.",
      "If any requested packages are not present in the local project dependencies, then they are installed to a folder in the npm cache, which is added to the `PATH` environment variable in the executed process. A prompt is printed (which can be suppressed by providing either `--yes` or `--no`).",
      "Package names provided without a specifier will be matched with whatever version exists in the local project. Package names with a specifier will only be considered a match if they have the exact same name and version as the local dependency.",
      "If no `-c` or `--call` option is provided, then the positional arguments are used to generate the command string. If no `--package` options are provided, then npm will attempt to determine the executable name from the package specifier provided as the first positional argument according to the following heuristic:",
      "If the package has a single entry in its `bin` field in `package.json`, or if all entries are aliases of the same command, then that command will be used.",
      "If the package has multiple `bin` entries, and one of them matches the unscoped portion of the `name` field, then that command will be used.",
      "If this does not result in exactly one option (either because there are no bin entries, or none of them match the `name` of the package), then `npm exec` exits with an error.",
      "To run a binary _other than_ the named binary, specify one or more `--package` options, which will prevent npm from inferring the package from the first command argument."
    ],
    "error": false
  },
  {
    "index": 4,
    "tags": [
      "npx_vs_npm_exec"
    ],
    "content": [
      "npx vs npm exec",
      "When run via the `npx` binary, all flags and options _must_ be set prior to any positional arguments. When run via `npm exec`, a double-hyphen `--` flag can be used to suppress npm\\'s parsing of switches and options that should be sent to the executed command.",
      "For example:",
      "$ npx foo@latest bar --package=@npmcli/foo",
      "In this case, npm will resolve the `foo` package name, and run the following command:",
      "$ foo bar --package=@npmcli/foo",
      "Since the `--package` option comes _after_ the positional arguments, it is treated as an argument to the executed command.",
      "In contrast, due to npm\\'s argument parsing logic, running this command is different:",
      "$ npm exec foo@latest bar --package=@npmcli/foo",
      "In this case, npm will parse the `--package` option first, resolving the `@npmcli/foo` package. Then, it will execute the following command in that context:",
      "$ foo@latest bar",
      "The double-hyphen character is recommended to explicitly tell npm to stop parsing command line options and switches. The following command would thus be equivalent to the `npx` command above:",
      "$ npm exec -- foo@latest bar --package=@npmcli/foo"
    ],
    "error": false
  },
  {
    "index": 5,
    "tags": [
      "npx_examples"
    ],
    "content": [
      "Examples",
      "Run the version of `tap` in the local dependencies, with the provided arguments:",
      "$ npmexec -- tap --bail test/foo.js",
      "$ npx tap --bail test/foo.js",
      "Run a command _other than_ the command whose name matches the package name by specifying a `--package` option:",
      "$ npmexec--package=foo -- bar --bar-argument",
      "# ~ or ~",
      "$ npx --package=foo bar --bar-argument",
      "Run an arbitrary shell script, in the context of the current project:",
      "$ npm x -c\\'eslint && say \\\"hooray, lint passed\\\"\\'",
      "$ npx -c\\'eslint && say \\\"hooray, lint passed\\\"\\'"
    ],
    "error": false
  },
  {
    "index": 6,
    "tags": [
      "npx_compatibility"
    ],
    "content": [
      "Compatibility with Older npx Versions",
      "The `npx` binary was rewritten in npm v7.0.0, and the standalone `npx` package deprecated at that time. `npx` uses the `npm exec` command instead of a separate argument parser and install process, with some affordances to maintain backwards compatibility with the arguments it accepted in previous versions.",
      "This resulted in some shifts in its functionality:",
      "Any `npm` config value may be provided.",
      "To prevent security and user-experience problems from mistyping package names, `npx` prompts before installing anything. Suppress this prompt with the `-y` or `--yes` option.",
      "The `--no-install` option is deprecated, and will be converted to `--no`.",
      "Shell fallback functionality is removed, as it is not advisable.",
      "The `-p` argument is a shorthand for `--parseable` in npm, but shorthand for `--package` in npx. This is maintained, but only for the `npx` executable.",
      "The `--ignore-existing` option is removed. Locally installed bins are always present in the executed process `PATH`.",
      "The `--npm` option is removed. `npx` will always use the `npm` it ships with.",
      "The `--node-arg` and `-n` options have been removed. Use `NODE_OPTIONS` instead: e.g., `NODE_OPTIONS=\\\"--trace-warnings --trace-exit\\\" npx foo --random=true`",
      "The `--always-spawn` option is redundant, and thus removed.",
      "The `--shell` option is replaced with `--script-shell`, but maintained in the `npx` executable for backwards compatibility."
    ],
    "error": false
  },
  {
    "index": 7,
    "tags": [
      "npx_see_also"
    ],
    "content": [
      "See Also",
      "npm run-script",
      "npm scripts",
      "npm test",
      "npm start",
      "npm restart",
      "npm stop",
      "npm config",
      "npm exec"
    ],
    "error": false
  }
]